import type {Patch} from '@portabletext/patches'
import type {
  ArraySchemaType,
  BlockDecoratorDefinition,
  BlockListDefinition,
  BlockStyleDefinition,
  ObjectSchemaType,
  Path,
  PortableTextBlock,
  PortableTextChild,
  PortableTextListBlock,
  PortableTextObject,
  PortableTextSpan,
} from '@sanity/types'
import {KeyedSegment, PortableTextTextBlock} from '@sanity/types'
import type {
  FocusEvent as FocusEvent_2,
  KeyboardEvent as KeyboardEvent_2,
} from 'react'
import {JSX, default as React_2} from 'react'
import {Descendant, TextUnit} from 'slate'
import type {Operation} from 'slate'
import type {DOMNode} from 'slate-dom'
import type {ReactEditor} from 'slate-react'
import {TextInsertTextOptions} from 'slate/dist/interfaces/transforms/text'
import {
  ActionFunction,
  ActorRef,
  ActorRefFrom,
  ActorRefFromLogic,
  AnyActorLogic,
  AnyActorRef,
  AnyEventObject,
  ConditionalRequired,
  EventObject,
  InputFrom,
  IsNotNever,
  MachineSnapshot,
  MetaObject,
  NonReducibleUnknown,
  RequiredLogicInput,
  Snapshot,
  StateMachine,
  StateValue,
  Values,
} from 'xstate'
import {GuardArgs} from 'xstate/guards'
import {
  BlockOffset as BlockOffset_2,
  PortableTextMemberSchemaTypes as PortableTextMemberSchemaTypes_2,
} from '..'
import {MIMEType as MIMEType_2} from '../internal-utils/mime-type'

/**
 * @beta
 */
declare type Behavior<
  TBehaviorEventType extends BehaviorEvent['type'] = BehaviorEvent['type'],
  TGuardResponse = true,
  TBehaviorEvent extends BehaviorEvent = PickFromUnion<
    BehaviorEvent,
    'type',
    TBehaviorEventType
  >,
> = {
  /**
   * The internal editor event that triggers this behavior.
   */
  on: TBehaviorEventType
  /**
   * Predicate function that determines if the behavior should be executed.
   * Returning a non-nullable value from the guard will pass the value to the
   * actions and execute them.
   */
  guard?: BehaviorGuard<TBehaviorEvent, TGuardResponse>
  /**
   * Array of behavior action sets.
   */
  actions: Array<BehaviorActionIntendSet<TBehaviorEvent, TGuardResponse>>
}

/**
 * @beta
 */
declare type BehaviorActionIntend =
  | SyntheticBehaviorEvent
  | {
      type: 'raise'
      event: SyntheticBehaviorEvent | CustomBehaviorEvent
    }
  | {
      type: 'noop'
    }
  | {
      type: 'effect'
      effect: () => void
    }

/**
 * @beta
 */
declare type BehaviorActionIntendSet<TBehaviorEvent, TGuardResponse> = (
  {
    context,
    event,
  }: {
    context: EditorContext
    event: TBehaviorEvent
  },
  guardResponse: TGuardResponse,
) => Array<BehaviorActionIntend>

/**
 * @beta
 */
declare type BehaviorEvent =
  | SyntheticBehaviorEvent
  | NativeBehaviorEvent
  | CustomBehaviorEvent

/**
 * @beta
 */
declare type BehaviorGuard<TBehaviorEvent, TGuardResponse> = ({
  context,
  event,
}: {
  context: EditorContext
  event: TBehaviorEvent
}) => TGuardResponse | false

/**
 * @beta
 */
export declare function BehaviorPlugin(props: {
  behaviors: Array<Behavior>
}): null

/**
 * @beta
 */
declare type BlockOffset = {
  path: [KeyedSegment]
  offset: number
}

declare type Converter<TMIMEType extends MIMEType = MIMEType> = {
  mimeType: TMIMEType
  serialize: Serializer<TMIMEType>
  deserialize: Deserializer<TMIMEType>
}

declare type ConverterEvent<TMIMEType extends MIMEType = MIMEType> =
  | {
      type: 'serialize'
      originEvent: 'copy' | 'cut' | 'unknown'
    }
  | {
      type: 'serialization.failure'
      mimeType: TMIMEType
      reason: string
    }
  | {
      type: 'serialization.success'
      data: string
      mimeType: TMIMEType
      originEvent: 'copy' | 'cut' | 'unknown'
    }
  | {
      type: 'deserialize'
      data: string
    }
  | {
      type: 'deserialization.failure'
      mimeType: TMIMEType
      reason: string
    }
  | {
      type: 'deserialization.success'
      data: Array<PortableTextBlock>
      mimeType: TMIMEType
    }

/**
 * @beta
 */
declare type CustomBehaviorEvent<
  TPayload extends Record<string, unknown> = Record<string, unknown>,
  TType extends string = string,
  TInternalType extends `custom.${TType}` = `custom.${TType}`,
> = {
  type: TInternalType
} & TPayload

declare type Deserializer<TMIMEType extends MIMEType> = ({
  context,
  event,
}: {
  context: EditorContext
  event: PickFromUnion<ConverterEvent<TMIMEType>, 'type', 'deserialize'>
}) => PickFromUnion<
  ConverterEvent<TMIMEType>,
  'type',
  'deserialization.success' | 'deserialization.failure'
>

/** @beta */
declare interface EditableAPI {
  activeAnnotations: () => PortableTextObject[]
  isAnnotationActive: (annotationType: PortableTextObject['_type']) => boolean
  addAnnotation: <
    TSchemaType extends {
      name: string
    },
  >(
    type: TSchemaType,
    value?: {
      [prop: string]: unknown
    },
  ) =>
    | {
        markDefPath: Path
        markDefPaths: Array<Path>
        spanPath: Path
      }
    | undefined
  blur: () => void
  delete: (
    selection: EditorSelection,
    options?: EditableAPIDeleteOptions,
  ) => void
  findByPath: (
    path: Path,
  ) => [PortableTextBlock | PortableTextChild | undefined, Path | undefined]
  findDOMNode: (
    element: PortableTextBlock | PortableTextChild,
  ) => DOMNode | undefined
  focus: () => void
  focusBlock: () => PortableTextBlock | undefined
  focusChild: () => PortableTextChild | undefined
  getSelection: () => EditorSelection
  getFragment: () => PortableTextBlock[] | undefined
  getValue: () => PortableTextBlock[] | undefined
  hasBlockStyle: (style: string) => boolean
  hasListStyle: (listStyle: string) => boolean
  insertBlock: <
    TSchemaType extends {
      name: string
    },
  >(
    type: TSchemaType,
    value?: {
      [prop: string]: unknown
    },
  ) => Path
  insertChild: <
    TSchemaType extends {
      name: string
    },
  >(
    type: TSchemaType,
    value?: {
      [prop: string]: unknown
    },
  ) => Path
  insertBreak: () => void
  isCollapsedSelection: () => boolean
  isExpandedSelection: () => boolean
  isMarkActive: (mark: string) => boolean
  isSelectionsOverlapping: (
    selectionA: EditorSelection,
    selectionB: EditorSelection,
  ) => boolean
  isVoid: (element: PortableTextBlock | PortableTextChild) => boolean
  marks: () => string[]
  redo: () => void
  removeAnnotation: <
    TSchemaType extends {
      name: string
    },
  >(
    type: TSchemaType,
  ) => void
  select: (selection: EditorSelection) => void
  toggleBlockStyle: (blockStyle: string) => void
  toggleList: (listStyle: string) => void
  toggleMark: (mark: string) => void
  undo: () => void
}

/** @beta */
declare interface EditableAPIDeleteOptions {
  mode?: 'blocks' | 'children' | 'selected'
}

/**
 * @public
 */
declare type Editor = {
  getSnapshot: () => EditorSnapshot
  /**
   * @beta
   */
  registerBehavior: (config: {behavior: Behavior}) => () => void
  send: (event: EditorEvent) => void
  on: ActorRef<Snapshot<unknown>, EventObject, EditorEmittedEvent>['on']
  _internal: {
    editable: EditableAPI
    editorActor: EditorActor
    slateEditor: SlateEditor
  }
}

/**
 * @internal
 */
declare type EditorActor = ActorRefFrom<typeof editorMachine>

/**
 * @public
 */
declare type EditorContext = {
  activeDecorators: Array<string>
  converters: Array<Converter>
  keyGenerator: () => string
  schema: EditorSchema
  selection: EditorSelection
  value: Array<PortableTextBlock>
}

/**
 * @public
 */
declare type EditorEmittedEvent =
  | {
      type: 'blurred'
      event: FocusEvent_2<HTMLDivElement, Element>
    }
  | {
      type: 'done loading'
    }
  | {
      type: 'editable'
    }
  | {
      type: 'error'
      name: string
      description: string
      data: unknown
    }
  | {
      type: 'focused'
      event: FocusEvent_2<HTMLDivElement, Element>
    }
  | {
      type: 'invalid value'
      resolution: InvalidValueResolution | null
      value: Array<PortableTextBlock> | undefined
    }
  | {
      type: 'loading'
    }
  | MutationEvent
  | PatchEvent
  | {
      type: 'read only'
    }
  | {
      type: 'ready'
    }
  | {
      type: 'selection'
      selection: EditorSelection
    }
  | {
      type: 'value changed'
      value: Array<PortableTextBlock> | undefined
    }

/**
 * @public
 */
declare type EditorEvent =
  | ExternalEditorEvent
  | SyntheticBehaviorEvent
  | CustomBehaviorEvent

/**
 * @internal
 */
declare const editorMachine: StateMachine<
  {
    behaviors: Set<Behavior>
    converters: Set<Converter>
    keyGenerator: () => string
    pendingEvents: Array<PatchEvent | MutationEvent>
    schema: EditorSchema
    initialReadOnly: boolean
    maxBlocks: number | undefined
    selection: EditorSelection
    value: Array<PortableTextBlock> | undefined
  },
  | {
      type: 'annotation.add'
      annotation: {
        name: string
        value: {
          [prop: string]: unknown
        }
      }
    }
  | {
      type: 'annotation.remove'
      annotation: {
        name: string
      }
    }
  | {
      type: 'annotation.toggle'
      annotation: {
        name: string
        value: {
          [prop: string]: unknown
        }
      }
    }
  | {
      [props: string]: unknown
      type: 'block.set'
      at: [KeyedSegment]
    }
  | {
      type: 'block.unset'
      at: [KeyedSegment]
      props: Array<string>
    }
  | {
      type: 'blur'
    }
  | {
      type: 'data transfer.set'
      data: string
      dataTransfer: DataTransfer
      mimeType: MIMEType_2
    }
  | {
      type: 'decorator.add'
      decorator: string
      selection?: NonNullable<EditorSelection>
    }
  | {
      type: 'decorator.remove'
      decorator: string
    }
  | {
      type: 'decorator.toggle'
      decorator: string
    }
  | {
      type: 'delete'
      selection: NonNullable<EditorSelection>
    }
  | {
      type: 'delete.backward'
      unit: TextUnit
    }
  | {
      type: 'delete.block'
      blockPath: [KeyedSegment]
    }
  | {
      type: 'delete.forward'
      unit: TextUnit
    }
  | {
      type: 'delete.text'
      anchor: BlockOffset_2
      focus: BlockOffset_2
    }
  | {
      type: 'focus'
    }
  | {
      type: 'history.redo'
    }
  | {
      type: 'history.undo'
    }
  | {
      type: 'insert.blocks'
      blocks: Array<PortableTextBlock>
    }
  | {
      type: 'insert.block object'
      placement: 'auto' | 'after' | 'before'
      blockObject: {
        name: string
        value?: {
          [prop: string]: unknown
        }
      }
    }
  | {
      type: 'insert.inline object'
      inlineObject: {
        name: string
        value?: {
          [prop: string]: unknown
        }
      }
    }
  | {
      type: 'insert.break'
    }
  | {
      type: 'insert.soft break'
    }
  | {
      type: 'insert.block'
      block: PortableTextBlock
      placement: 'auto' | 'after' | 'before'
    }
  | {
      type: 'insert.span'
      text: string
      annotations?: Array<{
        name: string
        value: {
          [prop: string]: unknown
        }
      }>
      decorators?: Array<string>
    }
  | {
      type: 'insert.text'
      text: string
      options?: TextInsertTextOptions
    }
  | {
      type: 'insert.text block'
      placement: 'auto' | 'after' | 'before'
      textBlock?: {
        children?: PortableTextTextBlock['children']
      }
    }
  | {
      type: 'list item.add'
      listItem: string
    }
  | {
      type: 'list item.remove'
      listItem: string
    }
  | {
      type: 'list item.toggle'
      listItem: string
    }
  | {
      type: 'move.block'
      at: [KeyedSegment]
      to: [KeyedSegment]
    }
  | {
      type: 'move.block down'
      at: [KeyedSegment]
    }
  | {
      type: 'move.block up'
      at: [KeyedSegment]
    }
  | {
      type: 'select'
      selection: EditorSelection
    }
  | {
      type: 'select.previous block'
    }
  | {
      type: 'select.next block'
    }
  | {
      type: 'style.add'
      style: string
    }
  | {
      type: 'style.remove'
      style: string
    }
  | {
      type: 'style.toggle'
      style: string
    }
  | {
      type: 'text block.set'
      at: [KeyedSegment]
      level?: number
      listItem?: string
      style?: string
    }
  | {
      type: 'text block.unset'
      at: [KeyedSegment]
      props: Array<'level' | 'listItem' | 'style'>
    }
  | ({
      type: 'serialization.failure'
      mimeType: `${string}/${string}`
      reason: string
    } & {
      dataTransfer: DataTransfer
    })
  | ({
      type: 'serialization.success'
      data: string
      mimeType: `${string}/${string}`
      originEvent: 'copy' | 'cut' | 'unknown'
    } & {
      dataTransfer: DataTransfer
    })
  | ({
      type: 'deserialization.failure'
      mimeType: `${string}/${string}`
      reason: string
    } & {
      dataTransfer: DataTransfer
    })
  | ({
      type: 'deserialization.success'
      data: Array<PortableTextBlock>
      mimeType: `${string}/${string}`
    } & {
      dataTransfer: DataTransfer
    })
  | PatchEvent
  | MutationEvent
  | {
      type: 'normalizing'
    }
  | {
      type: 'done normalizing'
    }
  | {
      type: 'done syncing initial value'
    }
  | {
      type: 'behavior event'
      behaviorEvent: SyntheticBehaviorEvent | NativeBehaviorEvent
      editor: PortableTextSlateEditor
      defaultActionCallback?: () => void
      nativeEvent?: {
        preventDefault: () => void
      }
    }
  | {
      type: 'custom behavior event'
      behaviorEvent: CustomBehaviorEvent
      editor: PortableTextSlateEditor
      nativeEvent?: {
        preventDefault: () => void
      }
    }
  | CustomBehaviorEvent
  | {
      type: 'add behavior'
      behavior: Behavior
    }
  | {
      type: 'remove behavior'
      behavior: Behavior
    }
  | {
      type: 'update readOnly'
      readOnly: boolean
    }
  | {
      type: 'update schema'
      schema: EditorSchema
    }
  | {
      type: 'update behaviors'
      behaviors: Array<Behavior>
    }
  | {
      type: 'update key generator'
      keyGenerator: () => string
    }
  | {
      type: 'update value'
      value: Array<PortableTextBlock> | undefined
    }
  | {
      type: 'update maxBlocks'
      maxBlocks: number | undefined
    }
  | PatchesEvent
  | {
      type: 'notify.patch'
      patch: Patch
    }
  | {
      type: 'notify.mutation'
      patches: Array<Patch>
      snapshot: Array<PortableTextBlock> | undefined
      value: Array<PortableTextBlock> | undefined
    }
  | {
      type: 'notify.blurred'
      event: FocusEvent_2<HTMLDivElement, Element>
    }
  | {
      type: 'notify.done loading'
    }
  | {
      type: 'notify.editable'
    }
  | {
      type: 'notify.error'
      name: string
      description: string
      data: unknown
    }
  | {
      type: 'notify.focused'
      event: FocusEvent_2<HTMLDivElement, Element>
    }
  | {
      type: 'notify.invalid value'
      resolution: InvalidValueResolution | null
      value: Array<PortableTextBlock> | undefined
    }
  | {
      type: 'notify.loading'
    }
  | {
      type: 'notify.read only'
    }
  | {
      type: 'notify.ready'
    }
  | {
      type: 'notify.selection'
      selection: EditorSelection
    }
  | {
      type: 'notify.value changed'
      value: Array<PortableTextBlock> | undefined
    }
  | {
      type: 'notify.unset'
      previousValue: Array<PortableTextBlock>
    },
  {},
  never,
  Values<{
    'add behavior to context': {
      type: 'add behavior to context'
      params: NonReducibleUnknown
    }
    'remove behavior from context': {
      type: 'remove behavior from context'
      params: NonReducibleUnknown
    }
    'assign behaviors': {
      type: 'assign behaviors'
      params: NonReducibleUnknown
    }
    'assign schema': {
      type: 'assign schema'
      params: NonReducibleUnknown
    }
    'emit patch event': {
      type: 'emit patch event'
      params: NonReducibleUnknown
    }
    'emit mutation event': {
      type: 'emit mutation event'
      params: NonReducibleUnknown
    }
    'emit read only': {
      type: 'emit read only'
      params: NonReducibleUnknown
    }
    'emit editable': {
      type: 'emit editable'
      params: NonReducibleUnknown
    }
    'defer event': {
      type: 'defer event'
      params: NonReducibleUnknown
    }
    'emit pending events': {
      type: 'emit pending events'
      params: NonReducibleUnknown
    }
    'emit ready': {
      type: 'emit ready'
      params: NonReducibleUnknown
    }
    'clear pending events': {
      type: 'clear pending events'
      params: NonReducibleUnknown
    }
    'handle behavior event': {
      type: 'handle behavior event'
      params: NonReducibleUnknown
    }
  }>,
  never,
  never,
  {
    'edit mode':
      | 'editable'
      | {
          'read only': 'read only' | 'determine initial edit mode'
        }
    'setup':
      | 'setting up'
      | 'dirty'
      | {
          pristine: 'normalizing' | 'idle'
        }
  },
  string,
  {
    behaviors?: Array<Behavior>
    converters?: Array<Converter>
    keyGenerator: () => string
    maxBlocks?: number
    readOnly?: boolean
    schema: EditorSchema
    value?: Array<PortableTextBlock>
  },
  NonReducibleUnknown,
  | {
      type: 'annotation.add'
      annotation: {
        name: string
        value: {
          [prop: string]: unknown
        }
      }
    }
  | {
      type: 'annotation.remove'
      annotation: {
        name: string
      }
    }
  | {
      type: 'annotation.toggle'
      annotation: {
        name: string
        value: {
          [prop: string]: unknown
        }
      }
    }
  | {
      [props: string]: unknown
      type: 'block.set'
      at: [KeyedSegment]
    }
  | {
      type: 'block.unset'
      at: [KeyedSegment]
      props: Array<string>
    }
  | {
      type: 'blur'
    }
  | {
      type: 'data transfer.set'
      data: string
      dataTransfer: DataTransfer
      mimeType: MIMEType_2
    }
  | {
      type: 'decorator.add'
      decorator: string
      selection?: NonNullable<EditorSelection>
    }
  | {
      type: 'decorator.remove'
      decorator: string
    }
  | {
      type: 'decorator.toggle'
      decorator: string
    }
  | {
      type: 'delete'
      selection: NonNullable<EditorSelection>
    }
  | {
      type: 'delete.backward'
      unit: TextUnit
    }
  | {
      type: 'delete.block'
      blockPath: [KeyedSegment]
    }
  | {
      type: 'delete.forward'
      unit: TextUnit
    }
  | {
      type: 'delete.text'
      anchor: BlockOffset_2
      focus: BlockOffset_2
    }
  | {
      type: 'focus'
    }
  | {
      type: 'history.redo'
    }
  | {
      type: 'history.undo'
    }
  | {
      type: 'insert.blocks'
      blocks: Array<PortableTextBlock>
    }
  | {
      type: 'insert.block object'
      placement: 'auto' | 'after' | 'before'
      blockObject: {
        name: string
        value?: {
          [prop: string]: unknown
        }
      }
    }
  | {
      type: 'insert.inline object'
      inlineObject: {
        name: string
        value?: {
          [prop: string]: unknown
        }
      }
    }
  | {
      type: 'insert.break'
    }
  | {
      type: 'insert.soft break'
    }
  | {
      type: 'insert.block'
      block: PortableTextBlock
      placement: 'auto' | 'after' | 'before'
    }
  | {
      type: 'insert.span'
      text: string
      annotations?: Array<{
        name: string
        value: {
          [prop: string]: unknown
        }
      }>
      decorators?: Array<string>
    }
  | {
      type: 'insert.text'
      text: string
      options?: TextInsertTextOptions
    }
  | {
      type: 'insert.text block'
      placement: 'auto' | 'after' | 'before'
      textBlock?: {
        children?: PortableTextTextBlock['children']
      }
    }
  | {
      type: 'list item.add'
      listItem: string
    }
  | {
      type: 'list item.remove'
      listItem: string
    }
  | {
      type: 'list item.toggle'
      listItem: string
    }
  | {
      type: 'move.block'
      at: [KeyedSegment]
      to: [KeyedSegment]
    }
  | {
      type: 'move.block down'
      at: [KeyedSegment]
    }
  | {
      type: 'move.block up'
      at: [KeyedSegment]
    }
  | {
      type: 'select'
      selection: EditorSelection
    }
  | {
      type: 'select.previous block'
    }
  | {
      type: 'select.next block'
    }
  | {
      type: 'style.add'
      style: string
    }
  | {
      type: 'style.remove'
      style: string
    }
  | {
      type: 'style.toggle'
      style: string
    }
  | {
      type: 'text block.set'
      at: [KeyedSegment]
      level?: number
      listItem?: string
      style?: string
    }
  | {
      type: 'text block.unset'
      at: [KeyedSegment]
      props: Array<'level' | 'listItem' | 'style'>
    }
  | ({
      type: 'serialization.failure'
      mimeType: `${string}/${string}`
      reason: string
    } & {
      dataTransfer: DataTransfer
    })
  | ({
      type: 'serialization.success'
      data: string
      mimeType: `${string}/${string}`
      originEvent: 'copy' | 'cut' | 'unknown'
    } & {
      dataTransfer: DataTransfer
    })
  | ({
      type: 'deserialization.failure'
      mimeType: `${string}/${string}`
      reason: string
    } & {
      dataTransfer: DataTransfer
    })
  | ({
      type: 'deserialization.success'
      data: Array<PortableTextBlock>
      mimeType: `${string}/${string}`
    } & {
      dataTransfer: DataTransfer
    })
  | PatchEvent
  | MutationEvent
  | PatchesEvent
  | {
      type: 'blurred'
      event: FocusEvent_2<HTMLDivElement, Element>
    }
  | {
      type: 'done loading'
    }
  | {
      type: 'editable'
    }
  | {
      type: 'error'
      name: string
      description: string
      data: unknown
    }
  | {
      type: 'focused'
      event: FocusEvent_2<HTMLDivElement, Element>
    }
  | {
      type: 'invalid value'
      resolution: InvalidValueResolution | null
      value: Array<PortableTextBlock> | undefined
    }
  | {
      type: 'loading'
    }
  | {
      type: 'read only'
    }
  | {
      type: 'ready'
    }
  | {
      type: 'selection'
      selection: EditorSelection
    }
  | {
      type: 'value changed'
      value: Array<PortableTextBlock> | undefined
    }
  | UnsetEvent
  | {
      type: 'custom.*'
      event: CustomBehaviorEvent
    },
  MetaObject,
  {
    readonly id: 'editor'
    readonly context: ({
      input,
    }: {
      spawn: {
        <TSrc extends never>(
          logic: TSrc,
          ...[options]: never
        ): ActorRefFromLogic<never>
        <TLogic extends AnyActorLogic>(
          src: TLogic,
          ...[options]: ConditionalRequired<
            [
              options?:
                | ({
                    id?: never
                    systemId?: string
                    input?: InputFrom<TLogic> | undefined
                    syncSnapshot?: boolean
                  } & {[K in RequiredLogicInput<TLogic>]: unknown})
                | undefined,
            ],
            IsNotNever<RequiredLogicInput<TLogic>>
          >
        ): ActorRefFromLogic<TLogic>
      }
      input: {
        behaviors?: Array<Behavior>
        converters?: Array<Converter>
        keyGenerator: () => string
        maxBlocks?: number
        readOnly?: boolean
        schema: EditorSchema
        value?: Array<PortableTextBlock>
      }
      self: ActorRef<
        MachineSnapshot<
          {
            behaviors: Set<Behavior>
            converters: Set<Converter>
            keyGenerator: () => string
            pendingEvents: Array<PatchEvent | MutationEvent>
            schema: EditorSchema
            initialReadOnly: boolean
            maxBlocks: number | undefined
            selection: EditorSelection
            value: Array<PortableTextBlock> | undefined
          },
          | {
              type: 'annotation.add'
              annotation: {
                name: string
                value: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'annotation.remove'
              annotation: {
                name: string
              }
            }
          | {
              type: 'annotation.toggle'
              annotation: {
                name: string
                value: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              [props: string]: unknown
              type: 'block.set'
              at: [KeyedSegment]
            }
          | {
              type: 'block.unset'
              at: [KeyedSegment]
              props: Array<string>
            }
          | {
              type: 'blur'
            }
          | {
              type: 'data transfer.set'
              data: string
              dataTransfer: DataTransfer
              mimeType: MIMEType_2
            }
          | {
              type: 'decorator.add'
              decorator: string
              selection?: NonNullable<EditorSelection>
            }
          | {
              type: 'decorator.remove'
              decorator: string
            }
          | {
              type: 'decorator.toggle'
              decorator: string
            }
          | {
              type: 'delete'
              selection: NonNullable<EditorSelection>
            }
          | {
              type: 'delete.backward'
              unit: TextUnit
            }
          | {
              type: 'delete.block'
              blockPath: [KeyedSegment]
            }
          | {
              type: 'delete.forward'
              unit: TextUnit
            }
          | {
              type: 'delete.text'
              anchor: BlockOffset_2
              focus: BlockOffset_2
            }
          | {
              type: 'focus'
            }
          | {
              type: 'history.redo'
            }
          | {
              type: 'history.undo'
            }
          | {
              type: 'insert.blocks'
              blocks: Array<PortableTextBlock>
            }
          | {
              type: 'insert.block object'
              placement: 'auto' | 'after' | 'before'
              blockObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'insert.inline object'
              inlineObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'insert.break'
            }
          | {
              type: 'insert.soft break'
            }
          | {
              type: 'insert.block'
              block: PortableTextBlock
              placement: 'auto' | 'after' | 'before'
            }
          | {
              type: 'insert.span'
              text: string
              annotations?: Array<{
                name: string
                value: {
                  [prop: string]: unknown
                }
              }>
              decorators?: Array<string>
            }
          | {
              type: 'insert.text'
              text: string
              options?: TextInsertTextOptions
            }
          | {
              type: 'insert.text block'
              placement: 'auto' | 'after' | 'before'
              textBlock?: {
                children?: PortableTextTextBlock['children']
              }
            }
          | {
              type: 'list item.add'
              listItem: string
            }
          | {
              type: 'list item.remove'
              listItem: string
            }
          | {
              type: 'list item.toggle'
              listItem: string
            }
          | {
              type: 'move.block'
              at: [KeyedSegment]
              to: [KeyedSegment]
            }
          | {
              type: 'move.block down'
              at: [KeyedSegment]
            }
          | {
              type: 'move.block up'
              at: [KeyedSegment]
            }
          | {
              type: 'select'
              selection: EditorSelection
            }
          | {
              type: 'select.previous block'
            }
          | {
              type: 'select.next block'
            }
          | {
              type: 'style.add'
              style: string
            }
          | {
              type: 'style.remove'
              style: string
            }
          | {
              type: 'style.toggle'
              style: string
            }
          | {
              type: 'text block.set'
              at: [KeyedSegment]
              level?: number
              listItem?: string
              style?: string
            }
          | {
              type: 'text block.unset'
              at: [KeyedSegment]
              props: Array<'level' | 'listItem' | 'style'>
            }
          | ({
              type: 'serialization.failure'
              mimeType: `${string}/${string}`
              reason: string
            } & {
              dataTransfer: DataTransfer
            })
          | ({
              type: 'serialization.success'
              data: string
              mimeType: `${string}/${string}`
              originEvent: 'copy' | 'cut' | 'unknown'
            } & {
              dataTransfer: DataTransfer
            })
          | ({
              type: 'deserialization.failure'
              mimeType: `${string}/${string}`
              reason: string
            } & {
              dataTransfer: DataTransfer
            })
          | ({
              type: 'deserialization.success'
              data: Array<PortableTextBlock>
              mimeType: `${string}/${string}`
            } & {
              dataTransfer: DataTransfer
            })
          | PatchEvent
          | MutationEvent
          | {
              type: 'normalizing'
            }
          | {
              type: 'done normalizing'
            }
          | {
              type: 'done syncing initial value'
            }
          | {
              type: 'behavior event'
              behaviorEvent: SyntheticBehaviorEvent | NativeBehaviorEvent
              editor: PortableTextSlateEditor
              defaultActionCallback?: () => void
              nativeEvent?: {
                preventDefault: () => void
              }
            }
          | {
              type: 'custom behavior event'
              behaviorEvent: CustomBehaviorEvent
              editor: PortableTextSlateEditor
              nativeEvent?: {
                preventDefault: () => void
              }
            }
          | CustomBehaviorEvent
          | {
              type: 'add behavior'
              behavior: Behavior
            }
          | {
              type: 'remove behavior'
              behavior: Behavior
            }
          | {
              type: 'update readOnly'
              readOnly: boolean
            }
          | {
              type: 'update schema'
              schema: EditorSchema
            }
          | {
              type: 'update behaviors'
              behaviors: Array<Behavior>
            }
          | {
              type: 'update key generator'
              keyGenerator: () => string
            }
          | {
              type: 'update value'
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'update maxBlocks'
              maxBlocks: number | undefined
            }
          | PatchesEvent
          | {
              type: 'notify.patch'
              patch: Patch
            }
          | {
              type: 'notify.mutation'
              patches: Array<Patch>
              snapshot: Array<PortableTextBlock> | undefined
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'notify.blurred'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'notify.done loading'
            }
          | {
              type: 'notify.editable'
            }
          | {
              type: 'notify.error'
              name: string
              description: string
              data: unknown
            }
          | {
              type: 'notify.focused'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'notify.invalid value'
              resolution: InvalidValueResolution | null
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'notify.loading'
            }
          | {
              type: 'notify.read only'
            }
          | {
              type: 'notify.ready'
            }
          | {
              type: 'notify.selection'
              selection: EditorSelection
            }
          | {
              type: 'notify.value changed'
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'notify.unset'
              previousValue: Array<PortableTextBlock>
            },
          Record<string, AnyActorRef | undefined>,
          StateValue,
          string,
          unknown,
          any,
          any
        >,
        | {
            type: 'annotation.add'
            annotation: {
              name: string
              value: {
                [prop: string]: unknown
              }
            }
          }
        | {
            type: 'annotation.remove'
            annotation: {
              name: string
            }
          }
        | {
            type: 'annotation.toggle'
            annotation: {
              name: string
              value: {
                [prop: string]: unknown
              }
            }
          }
        | {
            [props: string]: unknown
            type: 'block.set'
            at: [KeyedSegment]
          }
        | {
            type: 'block.unset'
            at: [KeyedSegment]
            props: Array<string>
          }
        | {
            type: 'blur'
          }
        | {
            type: 'data transfer.set'
            data: string
            dataTransfer: DataTransfer
            mimeType: MIMEType_2
          }
        | {
            type: 'decorator.add'
            decorator: string
            selection?: NonNullable<EditorSelection>
          }
        | {
            type: 'decorator.remove'
            decorator: string
          }
        | {
            type: 'decorator.toggle'
            decorator: string
          }
        | {
            type: 'delete'
            selection: NonNullable<EditorSelection>
          }
        | {
            type: 'delete.backward'
            unit: TextUnit
          }
        | {
            type: 'delete.block'
            blockPath: [KeyedSegment]
          }
        | {
            type: 'delete.forward'
            unit: TextUnit
          }
        | {
            type: 'delete.text'
            anchor: BlockOffset_2
            focus: BlockOffset_2
          }
        | {
            type: 'focus'
          }
        | {
            type: 'history.redo'
          }
        | {
            type: 'history.undo'
          }
        | {
            type: 'insert.blocks'
            blocks: Array<PortableTextBlock>
          }
        | {
            type: 'insert.block object'
            placement: 'auto' | 'after' | 'before'
            blockObject: {
              name: string
              value?: {
                [prop: string]: unknown
              }
            }
          }
        | {
            type: 'insert.inline object'
            inlineObject: {
              name: string
              value?: {
                [prop: string]: unknown
              }
            }
          }
        | {
            type: 'insert.break'
          }
        | {
            type: 'insert.soft break'
          }
        | {
            type: 'insert.block'
            block: PortableTextBlock
            placement: 'auto' | 'after' | 'before'
          }
        | {
            type: 'insert.span'
            text: string
            annotations?: Array<{
              name: string
              value: {
                [prop: string]: unknown
              }
            }>
            decorators?: Array<string>
          }
        | {
            type: 'insert.text'
            text: string
            options?: TextInsertTextOptions
          }
        | {
            type: 'insert.text block'
            placement: 'auto' | 'after' | 'before'
            textBlock?: {
              children?: PortableTextTextBlock['children']
            }
          }
        | {
            type: 'list item.add'
            listItem: string
          }
        | {
            type: 'list item.remove'
            listItem: string
          }
        | {
            type: 'list item.toggle'
            listItem: string
          }
        | {
            type: 'move.block'
            at: [KeyedSegment]
            to: [KeyedSegment]
          }
        | {
            type: 'move.block down'
            at: [KeyedSegment]
          }
        | {
            type: 'move.block up'
            at: [KeyedSegment]
          }
        | {
            type: 'select'
            selection: EditorSelection
          }
        | {
            type: 'select.previous block'
          }
        | {
            type: 'select.next block'
          }
        | {
            type: 'style.add'
            style: string
          }
        | {
            type: 'style.remove'
            style: string
          }
        | {
            type: 'style.toggle'
            style: string
          }
        | {
            type: 'text block.set'
            at: [KeyedSegment]
            level?: number
            listItem?: string
            style?: string
          }
        | {
            type: 'text block.unset'
            at: [KeyedSegment]
            props: Array<'level' | 'listItem' | 'style'>
          }
        | ({
            type: 'serialization.failure'
            mimeType: `${string}/${string}`
            reason: string
          } & {
            dataTransfer: DataTransfer
          })
        | ({
            type: 'serialization.success'
            data: string
            mimeType: `${string}/${string}`
            originEvent: 'copy' | 'cut' | 'unknown'
          } & {
            dataTransfer: DataTransfer
          })
        | ({
            type: 'deserialization.failure'
            mimeType: `${string}/${string}`
            reason: string
          } & {
            dataTransfer: DataTransfer
          })
        | ({
            type: 'deserialization.success'
            data: Array<PortableTextBlock>
            mimeType: `${string}/${string}`
          } & {
            dataTransfer: DataTransfer
          })
        | PatchEvent
        | MutationEvent
        | {
            type: 'normalizing'
          }
        | {
            type: 'done normalizing'
          }
        | {
            type: 'done syncing initial value'
          }
        | {
            type: 'behavior event'
            behaviorEvent: SyntheticBehaviorEvent | NativeBehaviorEvent
            editor: PortableTextSlateEditor
            defaultActionCallback?: () => void
            nativeEvent?: {
              preventDefault: () => void
            }
          }
        | {
            type: 'custom behavior event'
            behaviorEvent: CustomBehaviorEvent
            editor: PortableTextSlateEditor
            nativeEvent?: {
              preventDefault: () => void
            }
          }
        | CustomBehaviorEvent
        | {
            type: 'add behavior'
            behavior: Behavior
          }
        | {
            type: 'remove behavior'
            behavior: Behavior
          }
        | {
            type: 'update readOnly'
            readOnly: boolean
          }
        | {
            type: 'update schema'
            schema: EditorSchema
          }
        | {
            type: 'update behaviors'
            behaviors: Array<Behavior>
          }
        | {
            type: 'update key generator'
            keyGenerator: () => string
          }
        | {
            type: 'update value'
            value: Array<PortableTextBlock> | undefined
          }
        | {
            type: 'update maxBlocks'
            maxBlocks: number | undefined
          }
        | PatchesEvent
        | {
            type: 'notify.patch'
            patch: Patch
          }
        | {
            type: 'notify.mutation'
            patches: Array<Patch>
            snapshot: Array<PortableTextBlock> | undefined
            value: Array<PortableTextBlock> | undefined
          }
        | {
            type: 'notify.blurred'
            event: FocusEvent_2<HTMLDivElement, Element>
          }
        | {
            type: 'notify.done loading'
          }
        | {
            type: 'notify.editable'
          }
        | {
            type: 'notify.error'
            name: string
            description: string
            data: unknown
          }
        | {
            type: 'notify.focused'
            event: FocusEvent_2<HTMLDivElement, Element>
          }
        | {
            type: 'notify.invalid value'
            resolution: InvalidValueResolution | null
            value: Array<PortableTextBlock> | undefined
          }
        | {
            type: 'notify.loading'
          }
        | {
            type: 'notify.read only'
          }
        | {
            type: 'notify.ready'
          }
        | {
            type: 'notify.selection'
            selection: EditorSelection
          }
        | {
            type: 'notify.value changed'
            value: Array<PortableTextBlock> | undefined
          }
        | {
            type: 'notify.unset'
            previousValue: Array<PortableTextBlock>
          },
        AnyEventObject
      >
    }) => {
      behaviors: Set<Behavior>
      converters: Set<Converter>
      keyGenerator: () => string
      pendingEvents: never[]
      schema: PortableTextMemberSchemaTypes_2
      selection: null
      initialReadOnly: boolean
      maxBlocks: number | undefined
      value: PortableTextBlock[] | undefined
    }
    readonly on: {
      readonly 'notify.blurred': {
        readonly actions: ActionFunction<
          {
            behaviors: Set<Behavior>
            converters: Set<Converter>
            keyGenerator: () => string
            pendingEvents: Array<PatchEvent | MutationEvent>
            schema: EditorSchema
            initialReadOnly: boolean
            maxBlocks: number | undefined
            selection: EditorSelection
            value: Array<PortableTextBlock> | undefined
          },
          {
            type: 'notify.blurred'
            event: FocusEvent_2<HTMLDivElement, Element>
          },
          | {
              type: 'annotation.add'
              annotation: {
                name: string
                value: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'annotation.remove'
              annotation: {
                name: string
              }
            }
          | {
              type: 'annotation.toggle'
              annotation: {
                name: string
                value: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              [props: string]: unknown
              type: 'block.set'
              at: [KeyedSegment]
            }
          | {
              type: 'block.unset'
              at: [KeyedSegment]
              props: Array<string>
            }
          | {
              type: 'blur'
            }
          | {
              type: 'data transfer.set'
              data: string
              dataTransfer: DataTransfer
              mimeType: MIMEType_2
            }
          | {
              type: 'decorator.add'
              decorator: string
              selection?: NonNullable<EditorSelection>
            }
          | {
              type: 'decorator.remove'
              decorator: string
            }
          | {
              type: 'decorator.toggle'
              decorator: string
            }
          | {
              type: 'delete'
              selection: NonNullable<EditorSelection>
            }
          | {
              type: 'delete.backward'
              unit: TextUnit
            }
          | {
              type: 'delete.block'
              blockPath: [KeyedSegment]
            }
          | {
              type: 'delete.forward'
              unit: TextUnit
            }
          | {
              type: 'delete.text'
              anchor: BlockOffset_2
              focus: BlockOffset_2
            }
          | {
              type: 'focus'
            }
          | {
              type: 'history.redo'
            }
          | {
              type: 'history.undo'
            }
          | {
              type: 'insert.blocks'
              blocks: Array<PortableTextBlock>
            }
          | {
              type: 'insert.block object'
              placement: 'auto' | 'after' | 'before'
              blockObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'insert.inline object'
              inlineObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'insert.break'
            }
          | {
              type: 'insert.soft break'
            }
          | {
              type: 'insert.block'
              block: PortableTextBlock
              placement: 'auto' | 'after' | 'before'
            }
          | {
              type: 'insert.span'
              text: string
              annotations?: Array<{
                name: string
                value: {
                  [prop: string]: unknown
                }
              }>
              decorators?: Array<string>
            }
          | {
              type: 'insert.text'
              text: string
              options?: TextInsertTextOptions
            }
          | {
              type: 'insert.text block'
              placement: 'auto' | 'after' | 'before'
              textBlock?: {
                children?: PortableTextTextBlock['children']
              }
            }
          | {
              type: 'list item.add'
              listItem: string
            }
          | {
              type: 'list item.remove'
              listItem: string
            }
          | {
              type: 'list item.toggle'
              listItem: string
            }
          | {
              type: 'move.block'
              at: [KeyedSegment]
              to: [KeyedSegment]
            }
          | {
              type: 'move.block down'
              at: [KeyedSegment]
            }
          | {
              type: 'move.block up'
              at: [KeyedSegment]
            }
          | {
              type: 'select'
              selection: EditorSelection
            }
          | {
              type: 'select.previous block'
            }
          | {
              type: 'select.next block'
            }
          | {
              type: 'style.add'
              style: string
            }
          | {
              type: 'style.remove'
              style: string
            }
          | {
              type: 'style.toggle'
              style: string
            }
          | {
              type: 'text block.set'
              at: [KeyedSegment]
              level?: number
              listItem?: string
              style?: string
            }
          | {
              type: 'text block.unset'
              at: [KeyedSegment]
              props: Array<'level' | 'listItem' | 'style'>
            }
          | ({
              type: 'serialization.failure'
              mimeType: `${string}/${string}`
              reason: string
            } & {
              dataTransfer: DataTransfer
            })
          | ({
              type: 'serialization.success'
              data: string
              mimeType: `${string}/${string}`
              originEvent: 'copy' | 'cut' | 'unknown'
            } & {
              dataTransfer: DataTransfer
            })
          | ({
              type: 'deserialization.failure'
              mimeType: `${string}/${string}`
              reason: string
            } & {
              dataTransfer: DataTransfer
            })
          | ({
              type: 'deserialization.success'
              data: Array<PortableTextBlock>
              mimeType: `${string}/${string}`
            } & {
              dataTransfer: DataTransfer
            })
          | PatchEvent
          | MutationEvent
          | {
              type: 'normalizing'
            }
          | {
              type: 'done normalizing'
            }
          | {
              type: 'done syncing initial value'
            }
          | {
              type: 'behavior event'
              behaviorEvent: SyntheticBehaviorEvent | NativeBehaviorEvent
              editor: PortableTextSlateEditor
              defaultActionCallback?: () => void
              nativeEvent?: {
                preventDefault: () => void
              }
            }
          | {
              type: 'custom behavior event'
              behaviorEvent: CustomBehaviorEvent
              editor: PortableTextSlateEditor
              nativeEvent?: {
                preventDefault: () => void
              }
            }
          | CustomBehaviorEvent
          | {
              type: 'add behavior'
              behavior: Behavior
            }
          | {
              type: 'remove behavior'
              behavior: Behavior
            }
          | {
              type: 'update readOnly'
              readOnly: boolean
            }
          | {
              type: 'update schema'
              schema: EditorSchema
            }
          | {
              type: 'update behaviors'
              behaviors: Array<Behavior>
            }
          | {
              type: 'update key generator'
              keyGenerator: () => string
            }
          | {
              type: 'update value'
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'update maxBlocks'
              maxBlocks: number | undefined
            }
          | PatchesEvent
          | {
              type: 'notify.patch'
              patch: Patch
            }
          | {
              type: 'notify.mutation'
              patches: Array<Patch>
              snapshot: Array<PortableTextBlock> | undefined
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'notify.blurred'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'notify.done loading'
            }
          | {
              type: 'notify.editable'
            }
          | {
              type: 'notify.error'
              name: string
              description: string
              data: unknown
            }
          | {
              type: 'notify.focused'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'notify.invalid value'
              resolution: InvalidValueResolution | null
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'notify.loading'
            }
          | {
              type: 'notify.read only'
            }
          | {
              type: 'notify.ready'
            }
          | {
              type: 'notify.selection'
              selection: EditorSelection
            }
          | {
              type: 'notify.value changed'
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'notify.unset'
              previousValue: Array<PortableTextBlock>
            },
          undefined,
          never,
          never,
          never,
          never,
          | {
              type: 'annotation.add'
              annotation: {
                name: string
                value: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'annotation.remove'
              annotation: {
                name: string
              }
            }
          | {
              type: 'annotation.toggle'
              annotation: {
                name: string
                value: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              [props: string]: unknown
              type: 'block.set'
              at: [KeyedSegment]
            }
          | {
              type: 'block.unset'
              at: [KeyedSegment]
              props: Array<string>
            }
          | {
              type: 'blur'
            }
          | {
              type: 'data transfer.set'
              data: string
              dataTransfer: DataTransfer
              mimeType: MIMEType_2
            }
          | {
              type: 'decorator.add'
              decorator: string
              selection?: NonNullable<EditorSelection>
            }
          | {
              type: 'decorator.remove'
              decorator: string
            }
          | {
              type: 'decorator.toggle'
              decorator: string
            }
          | {
              type: 'delete'
              selection: NonNullable<EditorSelection>
            }
          | {
              type: 'delete.backward'
              unit: TextUnit
            }
          | {
              type: 'delete.block'
              blockPath: [KeyedSegment]
            }
          | {
              type: 'delete.forward'
              unit: TextUnit
            }
          | {
              type: 'delete.text'
              anchor: BlockOffset_2
              focus: BlockOffset_2
            }
          | {
              type: 'focus'
            }
          | {
              type: 'history.redo'
            }
          | {
              type: 'history.undo'
            }
          | {
              type: 'insert.blocks'
              blocks: Array<PortableTextBlock>
            }
          | {
              type: 'insert.block object'
              placement: 'auto' | 'after' | 'before'
              blockObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'insert.inline object'
              inlineObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'insert.break'
            }
          | {
              type: 'insert.soft break'
            }
          | {
              type: 'insert.block'
              block: PortableTextBlock
              placement: 'auto' | 'after' | 'before'
            }
          | {
              type: 'insert.span'
              text: string
              annotations?: Array<{
                name: string
                value: {
                  [prop: string]: unknown
                }
              }>
              decorators?: Array<string>
            }
          | {
              type: 'insert.text'
              text: string
              options?: TextInsertTextOptions
            }
          | {
              type: 'insert.text block'
              placement: 'auto' | 'after' | 'before'
              textBlock?: {
                children?: PortableTextTextBlock['children']
              }
            }
          | {
              type: 'list item.add'
              listItem: string
            }
          | {
              type: 'list item.remove'
              listItem: string
            }
          | {
              type: 'list item.toggle'
              listItem: string
            }
          | {
              type: 'move.block'
              at: [KeyedSegment]
              to: [KeyedSegment]
            }
          | {
              type: 'move.block down'
              at: [KeyedSegment]
            }
          | {
              type: 'move.block up'
              at: [KeyedSegment]
            }
          | {
              type: 'select'
              selection: EditorSelection
            }
          | {
              type: 'select.previous block'
            }
          | {
              type: 'select.next block'
            }
          | {
              type: 'style.add'
              style: string
            }
          | {
              type: 'style.remove'
              style: string
            }
          | {
              type: 'style.toggle'
              style: string
            }
          | {
              type: 'text block.set'
              at: [KeyedSegment]
              level?: number
              listItem?: string
              style?: string
            }
          | {
              type: 'text block.unset'
              at: [KeyedSegment]
              props: Array<'level' | 'listItem' | 'style'>
            }
          | ({
              type: 'serialization.failure'
              mimeType: `${string}/${string}`
              reason: string
            } & {
              dataTransfer: DataTransfer
            })
          | ({
              type: 'serialization.success'
              data: string
              mimeType: `${string}/${string}`
              originEvent: 'copy' | 'cut' | 'unknown'
            } & {
              dataTransfer: DataTransfer
            })
          | ({
              type: 'deserialization.failure'
              mimeType: `${string}/${string}`
              reason: string
            } & {
              dataTransfer: DataTransfer
            })
          | ({
              type: 'deserialization.success'
              data: Array<PortableTextBlock>
              mimeType: `${string}/${string}`
            } & {
              dataTransfer: DataTransfer
            })
          | PatchEvent
          | MutationEvent
          | PatchesEvent
          | {
              type: 'blurred'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'done loading'
            }
          | {
              type: 'editable'
            }
          | {
              type: 'error'
              name: string
              description: string
              data: unknown
            }
          | {
              type: 'focused'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'invalid value'
              resolution: InvalidValueResolution | null
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'loading'
            }
          | {
              type: 'read only'
            }
          | {
              type: 'ready'
            }
          | {
              type: 'selection'
              selection: EditorSelection
            }
          | {
              type: 'value changed'
              value: Array<PortableTextBlock> | undefined
            }
          | UnsetEvent
          | {
              type: 'custom.*'
              event: CustomBehaviorEvent
            }
        >
      }
      readonly 'notify.done loading': {
        readonly actions: ActionFunction<
          {
            behaviors: Set<Behavior>
            converters: Set<Converter>
            keyGenerator: () => string
            pendingEvents: Array<PatchEvent | MutationEvent>
            schema: EditorSchema
            initialReadOnly: boolean
            maxBlocks: number | undefined
            selection: EditorSelection
            value: Array<PortableTextBlock> | undefined
          },
          {
            type: 'notify.done loading'
          },
          | {
              type: 'annotation.add'
              annotation: {
                name: string
                value: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'annotation.remove'
              annotation: {
                name: string
              }
            }
          | {
              type: 'annotation.toggle'
              annotation: {
                name: string
                value: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              [props: string]: unknown
              type: 'block.set'
              at: [KeyedSegment]
            }
          | {
              type: 'block.unset'
              at: [KeyedSegment]
              props: Array<string>
            }
          | {
              type: 'blur'
            }
          | {
              type: 'data transfer.set'
              data: string
              dataTransfer: DataTransfer
              mimeType: MIMEType_2
            }
          | {
              type: 'decorator.add'
              decorator: string
              selection?: NonNullable<EditorSelection>
            }
          | {
              type: 'decorator.remove'
              decorator: string
            }
          | {
              type: 'decorator.toggle'
              decorator: string
            }
          | {
              type: 'delete'
              selection: NonNullable<EditorSelection>
            }
          | {
              type: 'delete.backward'
              unit: TextUnit
            }
          | {
              type: 'delete.block'
              blockPath: [KeyedSegment]
            }
          | {
              type: 'delete.forward'
              unit: TextUnit
            }
          | {
              type: 'delete.text'
              anchor: BlockOffset_2
              focus: BlockOffset_2
            }
          | {
              type: 'focus'
            }
          | {
              type: 'history.redo'
            }
          | {
              type: 'history.undo'
            }
          | {
              type: 'insert.blocks'
              blocks: Array<PortableTextBlock>
            }
          | {
              type: 'insert.block object'
              placement: 'auto' | 'after' | 'before'
              blockObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'insert.inline object'
              inlineObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'insert.break'
            }
          | {
              type: 'insert.soft break'
            }
          | {
              type: 'insert.block'
              block: PortableTextBlock
              placement: 'auto' | 'after' | 'before'
            }
          | {
              type: 'insert.span'
              text: string
              annotations?: Array<{
                name: string
                value: {
                  [prop: string]: unknown
                }
              }>
              decorators?: Array<string>
            }
          | {
              type: 'insert.text'
              text: string
              options?: TextInsertTextOptions
            }
          | {
              type: 'insert.text block'
              placement: 'auto' | 'after' | 'before'
              textBlock?: {
                children?: PortableTextTextBlock['children']
              }
            }
          | {
              type: 'list item.add'
              listItem: string
            }
          | {
              type: 'list item.remove'
              listItem: string
            }
          | {
              type: 'list item.toggle'
              listItem: string
            }
          | {
              type: 'move.block'
              at: [KeyedSegment]
              to: [KeyedSegment]
            }
          | {
              type: 'move.block down'
              at: [KeyedSegment]
            }
          | {
              type: 'move.block up'
              at: [KeyedSegment]
            }
          | {
              type: 'select'
              selection: EditorSelection
            }
          | {
              type: 'select.previous block'
            }
          | {
              type: 'select.next block'
            }
          | {
              type: 'style.add'
              style: string
            }
          | {
              type: 'style.remove'
              style: string
            }
          | {
              type: 'style.toggle'
              style: string
            }
          | {
              type: 'text block.set'
              at: [KeyedSegment]
              level?: number
              listItem?: string
              style?: string
            }
          | {
              type: 'text block.unset'
              at: [KeyedSegment]
              props: Array<'level' | 'listItem' | 'style'>
            }
          | ({
              type: 'serialization.failure'
              mimeType: `${string}/${string}`
              reason: string
            } & {
              dataTransfer: DataTransfer
            })
          | ({
              type: 'serialization.success'
              data: string
              mimeType: `${string}/${string}`
              originEvent: 'copy' | 'cut' | 'unknown'
            } & {
              dataTransfer: DataTransfer
            })
          | ({
              type: 'deserialization.failure'
              mimeType: `${string}/${string}`
              reason: string
            } & {
              dataTransfer: DataTransfer
            })
          | ({
              type: 'deserialization.success'
              data: Array<PortableTextBlock>
              mimeType: `${string}/${string}`
            } & {
              dataTransfer: DataTransfer
            })
          | PatchEvent
          | MutationEvent
          | {
              type: 'normalizing'
            }
          | {
              type: 'done normalizing'
            }
          | {
              type: 'done syncing initial value'
            }
          | {
              type: 'behavior event'
              behaviorEvent: SyntheticBehaviorEvent | NativeBehaviorEvent
              editor: PortableTextSlateEditor
              defaultActionCallback?: () => void
              nativeEvent?: {
                preventDefault: () => void
              }
            }
          | {
              type: 'custom behavior event'
              behaviorEvent: CustomBehaviorEvent
              editor: PortableTextSlateEditor
              nativeEvent?: {
                preventDefault: () => void
              }
            }
          | CustomBehaviorEvent
          | {
              type: 'add behavior'
              behavior: Behavior
            }
          | {
              type: 'remove behavior'
              behavior: Behavior
            }
          | {
              type: 'update readOnly'
              readOnly: boolean
            }
          | {
              type: 'update schema'
              schema: EditorSchema
            }
          | {
              type: 'update behaviors'
              behaviors: Array<Behavior>
            }
          | {
              type: 'update key generator'
              keyGenerator: () => string
            }
          | {
              type: 'update value'
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'update maxBlocks'
              maxBlocks: number | undefined
            }
          | PatchesEvent
          | {
              type: 'notify.patch'
              patch: Patch
            }
          | {
              type: 'notify.mutation'
              patches: Array<Patch>
              snapshot: Array<PortableTextBlock> | undefined
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'notify.blurred'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'notify.done loading'
            }
          | {
              type: 'notify.editable'
            }
          | {
              type: 'notify.error'
              name: string
              description: string
              data: unknown
            }
          | {
              type: 'notify.focused'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'notify.invalid value'
              resolution: InvalidValueResolution | null
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'notify.loading'
            }
          | {
              type: 'notify.read only'
            }
          | {
              type: 'notify.ready'
            }
          | {
              type: 'notify.selection'
              selection: EditorSelection
            }
          | {
              type: 'notify.value changed'
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'notify.unset'
              previousValue: Array<PortableTextBlock>
            },
          undefined,
          never,
          never,
          never,
          never,
          | {
              type: 'annotation.add'
              annotation: {
                name: string
                value: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'annotation.remove'
              annotation: {
                name: string
              }
            }
          | {
              type: 'annotation.toggle'
              annotation: {
                name: string
                value: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              [props: string]: unknown
              type: 'block.set'
              at: [KeyedSegment]
            }
          | {
              type: 'block.unset'
              at: [KeyedSegment]
              props: Array<string>
            }
          | {
              type: 'blur'
            }
          | {
              type: 'data transfer.set'
              data: string
              dataTransfer: DataTransfer
              mimeType: MIMEType_2
            }
          | {
              type: 'decorator.add'
              decorator: string
              selection?: NonNullable<EditorSelection>
            }
          | {
              type: 'decorator.remove'
              decorator: string
            }
          | {
              type: 'decorator.toggle'
              decorator: string
            }
          | {
              type: 'delete'
              selection: NonNullable<EditorSelection>
            }
          | {
              type: 'delete.backward'
              unit: TextUnit
            }
          | {
              type: 'delete.block'
              blockPath: [KeyedSegment]
            }
          | {
              type: 'delete.forward'
              unit: TextUnit
            }
          | {
              type: 'delete.text'
              anchor: BlockOffset_2
              focus: BlockOffset_2
            }
          | {
              type: 'focus'
            }
          | {
              type: 'history.redo'
            }
          | {
              type: 'history.undo'
            }
          | {
              type: 'insert.blocks'
              blocks: Array<PortableTextBlock>
            }
          | {
              type: 'insert.block object'
              placement: 'auto' | 'after' | 'before'
              blockObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'insert.inline object'
              inlineObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'insert.break'
            }
          | {
              type: 'insert.soft break'
            }
          | {
              type: 'insert.block'
              block: PortableTextBlock
              placement: 'auto' | 'after' | 'before'
            }
          | {
              type: 'insert.span'
              text: string
              annotations?: Array<{
                name: string
                value: {
                  [prop: string]: unknown
                }
              }>
              decorators?: Array<string>
            }
          | {
              type: 'insert.text'
              text: string
              options?: TextInsertTextOptions
            }
          | {
              type: 'insert.text block'
              placement: 'auto' | 'after' | 'before'
              textBlock?: {
                children?: PortableTextTextBlock['children']
              }
            }
          | {
              type: 'list item.add'
              listItem: string
            }
          | {
              type: 'list item.remove'
              listItem: string
            }
          | {
              type: 'list item.toggle'
              listItem: string
            }
          | {
              type: 'move.block'
              at: [KeyedSegment]
              to: [KeyedSegment]
            }
          | {
              type: 'move.block down'
              at: [KeyedSegment]
            }
          | {
              type: 'move.block up'
              at: [KeyedSegment]
            }
          | {
              type: 'select'
              selection: EditorSelection
            }
          | {
              type: 'select.previous block'
            }
          | {
              type: 'select.next block'
            }
          | {
              type: 'style.add'
              style: string
            }
          | {
              type: 'style.remove'
              style: string
            }
          | {
              type: 'style.toggle'
              style: string
            }
          | {
              type: 'text block.set'
              at: [KeyedSegment]
              level?: number
              listItem?: string
              style?: string
            }
          | {
              type: 'text block.unset'
              at: [KeyedSegment]
              props: Array<'level' | 'listItem' | 'style'>
            }
          | ({
              type: 'serialization.failure'
              mimeType: `${string}/${string}`
              reason: string
            } & {
              dataTransfer: DataTransfer
            })
          | ({
              type: 'serialization.success'
              data: string
              mimeType: `${string}/${string}`
              originEvent: 'copy' | 'cut' | 'unknown'
            } & {
              dataTransfer: DataTransfer
            })
          | ({
              type: 'deserialization.failure'
              mimeType: `${string}/${string}`
              reason: string
            } & {
              dataTransfer: DataTransfer
            })
          | ({
              type: 'deserialization.success'
              data: Array<PortableTextBlock>
              mimeType: `${string}/${string}`
            } & {
              dataTransfer: DataTransfer
            })
          | PatchEvent
          | MutationEvent
          | PatchesEvent
          | {
              type: 'blurred'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'done loading'
            }
          | {
              type: 'editable'
            }
          | {
              type: 'error'
              name: string
              description: string
              data: unknown
            }
          | {
              type: 'focused'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'invalid value'
              resolution: InvalidValueResolution | null
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'loading'
            }
          | {
              type: 'read only'
            }
          | {
              type: 'ready'
            }
          | {
              type: 'selection'
              selection: EditorSelection
            }
          | {
              type: 'value changed'
              value: Array<PortableTextBlock> | undefined
            }
          | UnsetEvent
          | {
              type: 'custom.*'
              event: CustomBehaviorEvent
            }
        >
      }
      readonly 'notify.error': {
        readonly actions: ActionFunction<
          {
            behaviors: Set<Behavior>
            converters: Set<Converter>
            keyGenerator: () => string
            pendingEvents: Array<PatchEvent | MutationEvent>
            schema: EditorSchema
            initialReadOnly: boolean
            maxBlocks: number | undefined
            selection: EditorSelection
            value: Array<PortableTextBlock> | undefined
          },
          {
            type: 'notify.error'
            name: string
            description: string
            data: unknown
          },
          | {
              type: 'annotation.add'
              annotation: {
                name: string
                value: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'annotation.remove'
              annotation: {
                name: string
              }
            }
          | {
              type: 'annotation.toggle'
              annotation: {
                name: string
                value: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              [props: string]: unknown
              type: 'block.set'
              at: [KeyedSegment]
            }
          | {
              type: 'block.unset'
              at: [KeyedSegment]
              props: Array<string>
            }
          | {
              type: 'blur'
            }
          | {
              type: 'data transfer.set'
              data: string
              dataTransfer: DataTransfer
              mimeType: MIMEType_2
            }
          | {
              type: 'decorator.add'
              decorator: string
              selection?: NonNullable<EditorSelection>
            }
          | {
              type: 'decorator.remove'
              decorator: string
            }
          | {
              type: 'decorator.toggle'
              decorator: string
            }
          | {
              type: 'delete'
              selection: NonNullable<EditorSelection>
            }
          | {
              type: 'delete.backward'
              unit: TextUnit
            }
          | {
              type: 'delete.block'
              blockPath: [KeyedSegment]
            }
          | {
              type: 'delete.forward'
              unit: TextUnit
            }
          | {
              type: 'delete.text'
              anchor: BlockOffset_2
              focus: BlockOffset_2
            }
          | {
              type: 'focus'
            }
          | {
              type: 'history.redo'
            }
          | {
              type: 'history.undo'
            }
          | {
              type: 'insert.blocks'
              blocks: Array<PortableTextBlock>
            }
          | {
              type: 'insert.block object'
              placement: 'auto' | 'after' | 'before'
              blockObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'insert.inline object'
              inlineObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'insert.break'
            }
          | {
              type: 'insert.soft break'
            }
          | {
              type: 'insert.block'
              block: PortableTextBlock
              placement: 'auto' | 'after' | 'before'
            }
          | {
              type: 'insert.span'
              text: string
              annotations?: Array<{
                name: string
                value: {
                  [prop: string]: unknown
                }
              }>
              decorators?: Array<string>
            }
          | {
              type: 'insert.text'
              text: string
              options?: TextInsertTextOptions
            }
          | {
              type: 'insert.text block'
              placement: 'auto' | 'after' | 'before'
              textBlock?: {
                children?: PortableTextTextBlock['children']
              }
            }
          | {
              type: 'list item.add'
              listItem: string
            }
          | {
              type: 'list item.remove'
              listItem: string
            }
          | {
              type: 'list item.toggle'
              listItem: string
            }
          | {
              type: 'move.block'
              at: [KeyedSegment]
              to: [KeyedSegment]
            }
          | {
              type: 'move.block down'
              at: [KeyedSegment]
            }
          | {
              type: 'move.block up'
              at: [KeyedSegment]
            }
          | {
              type: 'select'
              selection: EditorSelection
            }
          | {
              type: 'select.previous block'
            }
          | {
              type: 'select.next block'
            }
          | {
              type: 'style.add'
              style: string
            }
          | {
              type: 'style.remove'
              style: string
            }
          | {
              type: 'style.toggle'
              style: string
            }
          | {
              type: 'text block.set'
              at: [KeyedSegment]
              level?: number
              listItem?: string
              style?: string
            }
          | {
              type: 'text block.unset'
              at: [KeyedSegment]
              props: Array<'level' | 'listItem' | 'style'>
            }
          | ({
              type: 'serialization.failure'
              mimeType: `${string}/${string}`
              reason: string
            } & {
              dataTransfer: DataTransfer
            })
          | ({
              type: 'serialization.success'
              data: string
              mimeType: `${string}/${string}`
              originEvent: 'copy' | 'cut' | 'unknown'
            } & {
              dataTransfer: DataTransfer
            })
          | ({
              type: 'deserialization.failure'
              mimeType: `${string}/${string}`
              reason: string
            } & {
              dataTransfer: DataTransfer
            })
          | ({
              type: 'deserialization.success'
              data: Array<PortableTextBlock>
              mimeType: `${string}/${string}`
            } & {
              dataTransfer: DataTransfer
            })
          | PatchEvent
          | MutationEvent
          | {
              type: 'normalizing'
            }
          | {
              type: 'done normalizing'
            }
          | {
              type: 'done syncing initial value'
            }
          | {
              type: 'behavior event'
              behaviorEvent: SyntheticBehaviorEvent | NativeBehaviorEvent
              editor: PortableTextSlateEditor
              defaultActionCallback?: () => void
              nativeEvent?: {
                preventDefault: () => void
              }
            }
          | {
              type: 'custom behavior event'
              behaviorEvent: CustomBehaviorEvent
              editor: PortableTextSlateEditor
              nativeEvent?: {
                preventDefault: () => void
              }
            }
          | CustomBehaviorEvent
          | {
              type: 'add behavior'
              behavior: Behavior
            }
          | {
              type: 'remove behavior'
              behavior: Behavior
            }
          | {
              type: 'update readOnly'
              readOnly: boolean
            }
          | {
              type: 'update schema'
              schema: EditorSchema
            }
          | {
              type: 'update behaviors'
              behaviors: Array<Behavior>
            }
          | {
              type: 'update key generator'
              keyGenerator: () => string
            }
          | {
              type: 'update value'
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'update maxBlocks'
              maxBlocks: number | undefined
            }
          | PatchesEvent
          | {
              type: 'notify.patch'
              patch: Patch
            }
          | {
              type: 'notify.mutation'
              patches: Array<Patch>
              snapshot: Array<PortableTextBlock> | undefined
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'notify.blurred'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'notify.done loading'
            }
          | {
              type: 'notify.editable'
            }
          | {
              type: 'notify.error'
              name: string
              description: string
              data: unknown
            }
          | {
              type: 'notify.focused'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'notify.invalid value'
              resolution: InvalidValueResolution | null
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'notify.loading'
            }
          | {
              type: 'notify.read only'
            }
          | {
              type: 'notify.ready'
            }
          | {
              type: 'notify.selection'
              selection: EditorSelection
            }
          | {
              type: 'notify.value changed'
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'notify.unset'
              previousValue: Array<PortableTextBlock>
            },
          undefined,
          never,
          never,
          never,
          never,
          | {
              type: 'annotation.add'
              annotation: {
                name: string
                value: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'annotation.remove'
              annotation: {
                name: string
              }
            }
          | {
              type: 'annotation.toggle'
              annotation: {
                name: string
                value: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              [props: string]: unknown
              type: 'block.set'
              at: [KeyedSegment]
            }
          | {
              type: 'block.unset'
              at: [KeyedSegment]
              props: Array<string>
            }
          | {
              type: 'blur'
            }
          | {
              type: 'data transfer.set'
              data: string
              dataTransfer: DataTransfer
              mimeType: MIMEType_2
            }
          | {
              type: 'decorator.add'
              decorator: string
              selection?: NonNullable<EditorSelection>
            }
          | {
              type: 'decorator.remove'
              decorator: string
            }
          | {
              type: 'decorator.toggle'
              decorator: string
            }
          | {
              type: 'delete'
              selection: NonNullable<EditorSelection>
            }
          | {
              type: 'delete.backward'
              unit: TextUnit
            }
          | {
              type: 'delete.block'
              blockPath: [KeyedSegment]
            }
          | {
              type: 'delete.forward'
              unit: TextUnit
            }
          | {
              type: 'delete.text'
              anchor: BlockOffset_2
              focus: BlockOffset_2
            }
          | {
              type: 'focus'
            }
          | {
              type: 'history.redo'
            }
          | {
              type: 'history.undo'
            }
          | {
              type: 'insert.blocks'
              blocks: Array<PortableTextBlock>
            }
          | {
              type: 'insert.block object'
              placement: 'auto' | 'after' | 'before'
              blockObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'insert.inline object'
              inlineObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'insert.break'
            }
          | {
              type: 'insert.soft break'
            }
          | {
              type: 'insert.block'
              block: PortableTextBlock
              placement: 'auto' | 'after' | 'before'
            }
          | {
              type: 'insert.span'
              text: string
              annotations?: Array<{
                name: string
                value: {
                  [prop: string]: unknown
                }
              }>
              decorators?: Array<string>
            }
          | {
              type: 'insert.text'
              text: string
              options?: TextInsertTextOptions
            }
          | {
              type: 'insert.text block'
              placement: 'auto' | 'after' | 'before'
              textBlock?: {
                children?: PortableTextTextBlock['children']
              }
            }
          | {
              type: 'list item.add'
              listItem: string
            }
          | {
              type: 'list item.remove'
              listItem: string
            }
          | {
              type: 'list item.toggle'
              listItem: string
            }
          | {
              type: 'move.block'
              at: [KeyedSegment]
              to: [KeyedSegment]
            }
          | {
              type: 'move.block down'
              at: [KeyedSegment]
            }
          | {
              type: 'move.block up'
              at: [KeyedSegment]
            }
          | {
              type: 'select'
              selection: EditorSelection
            }
          | {
              type: 'select.previous block'
            }
          | {
              type: 'select.next block'
            }
          | {
              type: 'style.add'
              style: string
            }
          | {
              type: 'style.remove'
              style: string
            }
          | {
              type: 'style.toggle'
              style: string
            }
          | {
              type: 'text block.set'
              at: [KeyedSegment]
              level?: number
              listItem?: string
              style?: string
            }
          | {
              type: 'text block.unset'
              at: [KeyedSegment]
              props: Array<'level' | 'listItem' | 'style'>
            }
          | ({
              type: 'serialization.failure'
              mimeType: `${string}/${string}`
              reason: string
            } & {
              dataTransfer: DataTransfer
            })
          | ({
              type: 'serialization.success'
              data: string
              mimeType: `${string}/${string}`
              originEvent: 'copy' | 'cut' | 'unknown'
            } & {
              dataTransfer: DataTransfer
            })
          | ({
              type: 'deserialization.failure'
              mimeType: `${string}/${string}`
              reason: string
            } & {
              dataTransfer: DataTransfer
            })
          | ({
              type: 'deserialization.success'
              data: Array<PortableTextBlock>
              mimeType: `${string}/${string}`
            } & {
              dataTransfer: DataTransfer
            })
          | PatchEvent
          | MutationEvent
          | PatchesEvent
          | {
              type: 'blurred'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'done loading'
            }
          | {
              type: 'editable'
            }
          | {
              type: 'error'
              name: string
              description: string
              data: unknown
            }
          | {
              type: 'focused'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'invalid value'
              resolution: InvalidValueResolution | null
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'loading'
            }
          | {
              type: 'read only'
            }
          | {
              type: 'ready'
            }
          | {
              type: 'selection'
              selection: EditorSelection
            }
          | {
              type: 'value changed'
              value: Array<PortableTextBlock> | undefined
            }
          | UnsetEvent
          | {
              type: 'custom.*'
              event: CustomBehaviorEvent
            }
        >
      }
      readonly 'notify.invalid value': {
        readonly actions: ActionFunction<
          {
            behaviors: Set<Behavior>
            converters: Set<Converter>
            keyGenerator: () => string
            pendingEvents: Array<PatchEvent | MutationEvent>
            schema: EditorSchema
            initialReadOnly: boolean
            maxBlocks: number | undefined
            selection: EditorSelection
            value: Array<PortableTextBlock> | undefined
          },
          {
            type: 'notify.invalid value'
            resolution: InvalidValueResolution | null
            value: Array<PortableTextBlock> | undefined
          },
          | {
              type: 'annotation.add'
              annotation: {
                name: string
                value: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'annotation.remove'
              annotation: {
                name: string
              }
            }
          | {
              type: 'annotation.toggle'
              annotation: {
                name: string
                value: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              [props: string]: unknown
              type: 'block.set'
              at: [KeyedSegment]
            }
          | {
              type: 'block.unset'
              at: [KeyedSegment]
              props: Array<string>
            }
          | {
              type: 'blur'
            }
          | {
              type: 'data transfer.set'
              data: string
              dataTransfer: DataTransfer
              mimeType: MIMEType_2
            }
          | {
              type: 'decorator.add'
              decorator: string
              selection?: NonNullable<EditorSelection>
            }
          | {
              type: 'decorator.remove'
              decorator: string
            }
          | {
              type: 'decorator.toggle'
              decorator: string
            }
          | {
              type: 'delete'
              selection: NonNullable<EditorSelection>
            }
          | {
              type: 'delete.backward'
              unit: TextUnit
            }
          | {
              type: 'delete.block'
              blockPath: [KeyedSegment]
            }
          | {
              type: 'delete.forward'
              unit: TextUnit
            }
          | {
              type: 'delete.text'
              anchor: BlockOffset_2
              focus: BlockOffset_2
            }
          | {
              type: 'focus'
            }
          | {
              type: 'history.redo'
            }
          | {
              type: 'history.undo'
            }
          | {
              type: 'insert.blocks'
              blocks: Array<PortableTextBlock>
            }
          | {
              type: 'insert.block object'
              placement: 'auto' | 'after' | 'before'
              blockObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'insert.inline object'
              inlineObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'insert.break'
            }
          | {
              type: 'insert.soft break'
            }
          | {
              type: 'insert.block'
              block: PortableTextBlock
              placement: 'auto' | 'after' | 'before'
            }
          | {
              type: 'insert.span'
              text: string
              annotations?: Array<{
                name: string
                value: {
                  [prop: string]: unknown
                }
              }>
              decorators?: Array<string>
            }
          | {
              type: 'insert.text'
              text: string
              options?: TextInsertTextOptions
            }
          | {
              type: 'insert.text block'
              placement: 'auto' | 'after' | 'before'
              textBlock?: {
                children?: PortableTextTextBlock['children']
              }
            }
          | {
              type: 'list item.add'
              listItem: string
            }
          | {
              type: 'list item.remove'
              listItem: string
            }
          | {
              type: 'list item.toggle'
              listItem: string
            }
          | {
              type: 'move.block'
              at: [KeyedSegment]
              to: [KeyedSegment]
            }
          | {
              type: 'move.block down'
              at: [KeyedSegment]
            }
          | {
              type: 'move.block up'
              at: [KeyedSegment]
            }
          | {
              type: 'select'
              selection: EditorSelection
            }
          | {
              type: 'select.previous block'
            }
          | {
              type: 'select.next block'
            }
          | {
              type: 'style.add'
              style: string
            }
          | {
              type: 'style.remove'
              style: string
            }
          | {
              type: 'style.toggle'
              style: string
            }
          | {
              type: 'text block.set'
              at: [KeyedSegment]
              level?: number
              listItem?: string
              style?: string
            }
          | {
              type: 'text block.unset'
              at: [KeyedSegment]
              props: Array<'level' | 'listItem' | 'style'>
            }
          | ({
              type: 'serialization.failure'
              mimeType: `${string}/${string}`
              reason: string
            } & {
              dataTransfer: DataTransfer
            })
          | ({
              type: 'serialization.success'
              data: string
              mimeType: `${string}/${string}`
              originEvent: 'copy' | 'cut' | 'unknown'
            } & {
              dataTransfer: DataTransfer
            })
          | ({
              type: 'deserialization.failure'
              mimeType: `${string}/${string}`
              reason: string
            } & {
              dataTransfer: DataTransfer
            })
          | ({
              type: 'deserialization.success'
              data: Array<PortableTextBlock>
              mimeType: `${string}/${string}`
            } & {
              dataTransfer: DataTransfer
            })
          | PatchEvent
          | MutationEvent
          | {
              type: 'normalizing'
            }
          | {
              type: 'done normalizing'
            }
          | {
              type: 'done syncing initial value'
            }
          | {
              type: 'behavior event'
              behaviorEvent: SyntheticBehaviorEvent | NativeBehaviorEvent
              editor: PortableTextSlateEditor
              defaultActionCallback?: () => void
              nativeEvent?: {
                preventDefault: () => void
              }
            }
          | {
              type: 'custom behavior event'
              behaviorEvent: CustomBehaviorEvent
              editor: PortableTextSlateEditor
              nativeEvent?: {
                preventDefault: () => void
              }
            }
          | CustomBehaviorEvent
          | {
              type: 'add behavior'
              behavior: Behavior
            }
          | {
              type: 'remove behavior'
              behavior: Behavior
            }
          | {
              type: 'update readOnly'
              readOnly: boolean
            }
          | {
              type: 'update schema'
              schema: EditorSchema
            }
          | {
              type: 'update behaviors'
              behaviors: Array<Behavior>
            }
          | {
              type: 'update key generator'
              keyGenerator: () => string
            }
          | {
              type: 'update value'
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'update maxBlocks'
              maxBlocks: number | undefined
            }
          | PatchesEvent
          | {
              type: 'notify.patch'
              patch: Patch
            }
          | {
              type: 'notify.mutation'
              patches: Array<Patch>
              snapshot: Array<PortableTextBlock> | undefined
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'notify.blurred'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'notify.done loading'
            }
          | {
              type: 'notify.editable'
            }
          | {
              type: 'notify.error'
              name: string
              description: string
              data: unknown
            }
          | {
              type: 'notify.focused'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'notify.invalid value'
              resolution: InvalidValueResolution | null
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'notify.loading'
            }
          | {
              type: 'notify.read only'
            }
          | {
              type: 'notify.ready'
            }
          | {
              type: 'notify.selection'
              selection: EditorSelection
            }
          | {
              type: 'notify.value changed'
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'notify.unset'
              previousValue: Array<PortableTextBlock>
            },
          undefined,
          never,
          never,
          never,
          never,
          | {
              type: 'annotation.add'
              annotation: {
                name: string
                value: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'annotation.remove'
              annotation: {
                name: string
              }
            }
          | {
              type: 'annotation.toggle'
              annotation: {
                name: string
                value: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              [props: string]: unknown
              type: 'block.set'
              at: [KeyedSegment]
            }
          | {
              type: 'block.unset'
              at: [KeyedSegment]
              props: Array<string>
            }
          | {
              type: 'blur'
            }
          | {
              type: 'data transfer.set'
              data: string
              dataTransfer: DataTransfer
              mimeType: MIMEType_2
            }
          | {
              type: 'decorator.add'
              decorator: string
              selection?: NonNullable<EditorSelection>
            }
          | {
              type: 'decorator.remove'
              decorator: string
            }
          | {
              type: 'decorator.toggle'
              decorator: string
            }
          | {
              type: 'delete'
              selection: NonNullable<EditorSelection>
            }
          | {
              type: 'delete.backward'
              unit: TextUnit
            }
          | {
              type: 'delete.block'
              blockPath: [KeyedSegment]
            }
          | {
              type: 'delete.forward'
              unit: TextUnit
            }
          | {
              type: 'delete.text'
              anchor: BlockOffset_2
              focus: BlockOffset_2
            }
          | {
              type: 'focus'
            }
          | {
              type: 'history.redo'
            }
          | {
              type: 'history.undo'
            }
          | {
              type: 'insert.blocks'
              blocks: Array<PortableTextBlock>
            }
          | {
              type: 'insert.block object'
              placement: 'auto' | 'after' | 'before'
              blockObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'insert.inline object'
              inlineObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'insert.break'
            }
          | {
              type: 'insert.soft break'
            }
          | {
              type: 'insert.block'
              block: PortableTextBlock
              placement: 'auto' | 'after' | 'before'
            }
          | {
              type: 'insert.span'
              text: string
              annotations?: Array<{
                name: string
                value: {
                  [prop: string]: unknown
                }
              }>
              decorators?: Array<string>
            }
          | {
              type: 'insert.text'
              text: string
              options?: TextInsertTextOptions
            }
          | {
              type: 'insert.text block'
              placement: 'auto' | 'after' | 'before'
              textBlock?: {
                children?: PortableTextTextBlock['children']
              }
            }
          | {
              type: 'list item.add'
              listItem: string
            }
          | {
              type: 'list item.remove'
              listItem: string
            }
          | {
              type: 'list item.toggle'
              listItem: string
            }
          | {
              type: 'move.block'
              at: [KeyedSegment]
              to: [KeyedSegment]
            }
          | {
              type: 'move.block down'
              at: [KeyedSegment]
            }
          | {
              type: 'move.block up'
              at: [KeyedSegment]
            }
          | {
              type: 'select'
              selection: EditorSelection
            }
          | {
              type: 'select.previous block'
            }
          | {
              type: 'select.next block'
            }
          | {
              type: 'style.add'
              style: string
            }
          | {
              type: 'style.remove'
              style: string
            }
          | {
              type: 'style.toggle'
              style: string
            }
          | {
              type: 'text block.set'
              at: [KeyedSegment]
              level?: number
              listItem?: string
              style?: string
            }
          | {
              type: 'text block.unset'
              at: [KeyedSegment]
              props: Array<'level' | 'listItem' | 'style'>
            }
          | ({
              type: 'serialization.failure'
              mimeType: `${string}/${string}`
              reason: string
            } & {
              dataTransfer: DataTransfer
            })
          | ({
              type: 'serialization.success'
              data: string
              mimeType: `${string}/${string}`
              originEvent: 'copy' | 'cut' | 'unknown'
            } & {
              dataTransfer: DataTransfer
            })
          | ({
              type: 'deserialization.failure'
              mimeType: `${string}/${string}`
              reason: string
            } & {
              dataTransfer: DataTransfer
            })
          | ({
              type: 'deserialization.success'
              data: Array<PortableTextBlock>
              mimeType: `${string}/${string}`
            } & {
              dataTransfer: DataTransfer
            })
          | PatchEvent
          | MutationEvent
          | PatchesEvent
          | {
              type: 'blurred'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'done loading'
            }
          | {
              type: 'editable'
            }
          | {
              type: 'error'
              name: string
              description: string
              data: unknown
            }
          | {
              type: 'focused'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'invalid value'
              resolution: InvalidValueResolution | null
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'loading'
            }
          | {
              type: 'read only'
            }
          | {
              type: 'ready'
            }
          | {
              type: 'selection'
              selection: EditorSelection
            }
          | {
              type: 'value changed'
              value: Array<PortableTextBlock> | undefined
            }
          | UnsetEvent
          | {
              type: 'custom.*'
              event: CustomBehaviorEvent
            }
        >
      }
      readonly 'notify.focused': {
        readonly actions: ActionFunction<
          {
            behaviors: Set<Behavior>
            converters: Set<Converter>
            keyGenerator: () => string
            pendingEvents: Array<PatchEvent | MutationEvent>
            schema: EditorSchema
            initialReadOnly: boolean
            maxBlocks: number | undefined
            selection: EditorSelection
            value: Array<PortableTextBlock> | undefined
          },
          {
            type: 'notify.focused'
            event: FocusEvent_2<HTMLDivElement, Element>
          },
          | {
              type: 'annotation.add'
              annotation: {
                name: string
                value: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'annotation.remove'
              annotation: {
                name: string
              }
            }
          | {
              type: 'annotation.toggle'
              annotation: {
                name: string
                value: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              [props: string]: unknown
              type: 'block.set'
              at: [KeyedSegment]
            }
          | {
              type: 'block.unset'
              at: [KeyedSegment]
              props: Array<string>
            }
          | {
              type: 'blur'
            }
          | {
              type: 'data transfer.set'
              data: string
              dataTransfer: DataTransfer
              mimeType: MIMEType_2
            }
          | {
              type: 'decorator.add'
              decorator: string
              selection?: NonNullable<EditorSelection>
            }
          | {
              type: 'decorator.remove'
              decorator: string
            }
          | {
              type: 'decorator.toggle'
              decorator: string
            }
          | {
              type: 'delete'
              selection: NonNullable<EditorSelection>
            }
          | {
              type: 'delete.backward'
              unit: TextUnit
            }
          | {
              type: 'delete.block'
              blockPath: [KeyedSegment]
            }
          | {
              type: 'delete.forward'
              unit: TextUnit
            }
          | {
              type: 'delete.text'
              anchor: BlockOffset_2
              focus: BlockOffset_2
            }
          | {
              type: 'focus'
            }
          | {
              type: 'history.redo'
            }
          | {
              type: 'history.undo'
            }
          | {
              type: 'insert.blocks'
              blocks: Array<PortableTextBlock>
            }
          | {
              type: 'insert.block object'
              placement: 'auto' | 'after' | 'before'
              blockObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'insert.inline object'
              inlineObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'insert.break'
            }
          | {
              type: 'insert.soft break'
            }
          | {
              type: 'insert.block'
              block: PortableTextBlock
              placement: 'auto' | 'after' | 'before'
            }
          | {
              type: 'insert.span'
              text: string
              annotations?: Array<{
                name: string
                value: {
                  [prop: string]: unknown
                }
              }>
              decorators?: Array<string>
            }
          | {
              type: 'insert.text'
              text: string
              options?: TextInsertTextOptions
            }
          | {
              type: 'insert.text block'
              placement: 'auto' | 'after' | 'before'
              textBlock?: {
                children?: PortableTextTextBlock['children']
              }
            }
          | {
              type: 'list item.add'
              listItem: string
            }
          | {
              type: 'list item.remove'
              listItem: string
            }
          | {
              type: 'list item.toggle'
              listItem: string
            }
          | {
              type: 'move.block'
              at: [KeyedSegment]
              to: [KeyedSegment]
            }
          | {
              type: 'move.block down'
              at: [KeyedSegment]
            }
          | {
              type: 'move.block up'
              at: [KeyedSegment]
            }
          | {
              type: 'select'
              selection: EditorSelection
            }
          | {
              type: 'select.previous block'
            }
          | {
              type: 'select.next block'
            }
          | {
              type: 'style.add'
              style: string
            }
          | {
              type: 'style.remove'
              style: string
            }
          | {
              type: 'style.toggle'
              style: string
            }
          | {
              type: 'text block.set'
              at: [KeyedSegment]
              level?: number
              listItem?: string
              style?: string
            }
          | {
              type: 'text block.unset'
              at: [KeyedSegment]
              props: Array<'level' | 'listItem' | 'style'>
            }
          | ({
              type: 'serialization.failure'
              mimeType: `${string}/${string}`
              reason: string
            } & {
              dataTransfer: DataTransfer
            })
          | ({
              type: 'serialization.success'
              data: string
              mimeType: `${string}/${string}`
              originEvent: 'copy' | 'cut' | 'unknown'
            } & {
              dataTransfer: DataTransfer
            })
          | ({
              type: 'deserialization.failure'
              mimeType: `${string}/${string}`
              reason: string
            } & {
              dataTransfer: DataTransfer
            })
          | ({
              type: 'deserialization.success'
              data: Array<PortableTextBlock>
              mimeType: `${string}/${string}`
            } & {
              dataTransfer: DataTransfer
            })
          | PatchEvent
          | MutationEvent
          | {
              type: 'normalizing'
            }
          | {
              type: 'done normalizing'
            }
          | {
              type: 'done syncing initial value'
            }
          | {
              type: 'behavior event'
              behaviorEvent: SyntheticBehaviorEvent | NativeBehaviorEvent
              editor: PortableTextSlateEditor
              defaultActionCallback?: () => void
              nativeEvent?: {
                preventDefault: () => void
              }
            }
          | {
              type: 'custom behavior event'
              behaviorEvent: CustomBehaviorEvent
              editor: PortableTextSlateEditor
              nativeEvent?: {
                preventDefault: () => void
              }
            }
          | CustomBehaviorEvent
          | {
              type: 'add behavior'
              behavior: Behavior
            }
          | {
              type: 'remove behavior'
              behavior: Behavior
            }
          | {
              type: 'update readOnly'
              readOnly: boolean
            }
          | {
              type: 'update schema'
              schema: EditorSchema
            }
          | {
              type: 'update behaviors'
              behaviors: Array<Behavior>
            }
          | {
              type: 'update key generator'
              keyGenerator: () => string
            }
          | {
              type: 'update value'
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'update maxBlocks'
              maxBlocks: number | undefined
            }
          | PatchesEvent
          | {
              type: 'notify.patch'
              patch: Patch
            }
          | {
              type: 'notify.mutation'
              patches: Array<Patch>
              snapshot: Array<PortableTextBlock> | undefined
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'notify.blurred'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'notify.done loading'
            }
          | {
              type: 'notify.editable'
            }
          | {
              type: 'notify.error'
              name: string
              description: string
              data: unknown
            }
          | {
              type: 'notify.focused'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'notify.invalid value'
              resolution: InvalidValueResolution | null
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'notify.loading'
            }
          | {
              type: 'notify.read only'
            }
          | {
              type: 'notify.ready'
            }
          | {
              type: 'notify.selection'
              selection: EditorSelection
            }
          | {
              type: 'notify.value changed'
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'notify.unset'
              previousValue: Array<PortableTextBlock>
            },
          undefined,
          never,
          never,
          never,
          never,
          | {
              type: 'annotation.add'
              annotation: {
                name: string
                value: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'annotation.remove'
              annotation: {
                name: string
              }
            }
          | {
              type: 'annotation.toggle'
              annotation: {
                name: string
                value: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              [props: string]: unknown
              type: 'block.set'
              at: [KeyedSegment]
            }
          | {
              type: 'block.unset'
              at: [KeyedSegment]
              props: Array<string>
            }
          | {
              type: 'blur'
            }
          | {
              type: 'data transfer.set'
              data: string
              dataTransfer: DataTransfer
              mimeType: MIMEType_2
            }
          | {
              type: 'decorator.add'
              decorator: string
              selection?: NonNullable<EditorSelection>
            }
          | {
              type: 'decorator.remove'
              decorator: string
            }
          | {
              type: 'decorator.toggle'
              decorator: string
            }
          | {
              type: 'delete'
              selection: NonNullable<EditorSelection>
            }
          | {
              type: 'delete.backward'
              unit: TextUnit
            }
          | {
              type: 'delete.block'
              blockPath: [KeyedSegment]
            }
          | {
              type: 'delete.forward'
              unit: TextUnit
            }
          | {
              type: 'delete.text'
              anchor: BlockOffset_2
              focus: BlockOffset_2
            }
          | {
              type: 'focus'
            }
          | {
              type: 'history.redo'
            }
          | {
              type: 'history.undo'
            }
          | {
              type: 'insert.blocks'
              blocks: Array<PortableTextBlock>
            }
          | {
              type: 'insert.block object'
              placement: 'auto' | 'after' | 'before'
              blockObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'insert.inline object'
              inlineObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'insert.break'
            }
          | {
              type: 'insert.soft break'
            }
          | {
              type: 'insert.block'
              block: PortableTextBlock
              placement: 'auto' | 'after' | 'before'
            }
          | {
              type: 'insert.span'
              text: string
              annotations?: Array<{
                name: string
                value: {
                  [prop: string]: unknown
                }
              }>
              decorators?: Array<string>
            }
          | {
              type: 'insert.text'
              text: string
              options?: TextInsertTextOptions
            }
          | {
              type: 'insert.text block'
              placement: 'auto' | 'after' | 'before'
              textBlock?: {
                children?: PortableTextTextBlock['children']
              }
            }
          | {
              type: 'list item.add'
              listItem: string
            }
          | {
              type: 'list item.remove'
              listItem: string
            }
          | {
              type: 'list item.toggle'
              listItem: string
            }
          | {
              type: 'move.block'
              at: [KeyedSegment]
              to: [KeyedSegment]
            }
          | {
              type: 'move.block down'
              at: [KeyedSegment]
            }
          | {
              type: 'move.block up'
              at: [KeyedSegment]
            }
          | {
              type: 'select'
              selection: EditorSelection
            }
          | {
              type: 'select.previous block'
            }
          | {
              type: 'select.next block'
            }
          | {
              type: 'style.add'
              style: string
            }
          | {
              type: 'style.remove'
              style: string
            }
          | {
              type: 'style.toggle'
              style: string
            }
          | {
              type: 'text block.set'
              at: [KeyedSegment]
              level?: number
              listItem?: string
              style?: string
            }
          | {
              type: 'text block.unset'
              at: [KeyedSegment]
              props: Array<'level' | 'listItem' | 'style'>
            }
          | ({
              type: 'serialization.failure'
              mimeType: `${string}/${string}`
              reason: string
            } & {
              dataTransfer: DataTransfer
            })
          | ({
              type: 'serialization.success'
              data: string
              mimeType: `${string}/${string}`
              originEvent: 'copy' | 'cut' | 'unknown'
            } & {
              dataTransfer: DataTransfer
            })
          | ({
              type: 'deserialization.failure'
              mimeType: `${string}/${string}`
              reason: string
            } & {
              dataTransfer: DataTransfer
            })
          | ({
              type: 'deserialization.success'
              data: Array<PortableTextBlock>
              mimeType: `${string}/${string}`
            } & {
              dataTransfer: DataTransfer
            })
          | PatchEvent
          | MutationEvent
          | PatchesEvent
          | {
              type: 'blurred'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'done loading'
            }
          | {
              type: 'editable'
            }
          | {
              type: 'error'
              name: string
              description: string
              data: unknown
            }
          | {
              type: 'focused'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'invalid value'
              resolution: InvalidValueResolution | null
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'loading'
            }
          | {
              type: 'read only'
            }
          | {
              type: 'ready'
            }
          | {
              type: 'selection'
              selection: EditorSelection
            }
          | {
              type: 'value changed'
              value: Array<PortableTextBlock> | undefined
            }
          | UnsetEvent
          | {
              type: 'custom.*'
              event: CustomBehaviorEvent
            }
        >
      }
      readonly 'notify.selection': {
        readonly actions: readonly [
          ActionFunction<
            {
              behaviors: Set<Behavior>
              converters: Set<Converter>
              keyGenerator: () => string
              pendingEvents: Array<PatchEvent | MutationEvent>
              schema: EditorSchema
              initialReadOnly: boolean
              maxBlocks: number | undefined
              selection: EditorSelection
              value: Array<PortableTextBlock> | undefined
            },
            {
              type: 'notify.selection'
              selection: EditorSelection
            },
            | {
                type: 'annotation.add'
                annotation: {
                  name: string
                  value: {
                    [prop: string]: unknown
                  }
                }
              }
            | {
                type: 'annotation.remove'
                annotation: {
                  name: string
                }
              }
            | {
                type: 'annotation.toggle'
                annotation: {
                  name: string
                  value: {
                    [prop: string]: unknown
                  }
                }
              }
            | {
                [props: string]: unknown
                type: 'block.set'
                at: [KeyedSegment]
              }
            | {
                type: 'block.unset'
                at: [KeyedSegment]
                props: Array<string>
              }
            | {
                type: 'blur'
              }
            | {
                type: 'data transfer.set'
                data: string
                dataTransfer: DataTransfer
                mimeType: MIMEType_2
              }
            | {
                type: 'decorator.add'
                decorator: string
                selection?: NonNullable<EditorSelection>
              }
            | {
                type: 'decorator.remove'
                decorator: string
              }
            | {
                type: 'decorator.toggle'
                decorator: string
              }
            | {
                type: 'delete'
                selection: NonNullable<EditorSelection>
              }
            | {
                type: 'delete.backward'
                unit: TextUnit
              }
            | {
                type: 'delete.block'
                blockPath: [KeyedSegment]
              }
            | {
                type: 'delete.forward'
                unit: TextUnit
              }
            | {
                type: 'delete.text'
                anchor: BlockOffset_2
                focus: BlockOffset_2
              }
            | {
                type: 'focus'
              }
            | {
                type: 'history.redo'
              }
            | {
                type: 'history.undo'
              }
            | {
                type: 'insert.blocks'
                blocks: Array<PortableTextBlock>
              }
            | {
                type: 'insert.block object'
                placement: 'auto' | 'after' | 'before'
                blockObject: {
                  name: string
                  value?: {
                    [prop: string]: unknown
                  }
                }
              }
            | {
                type: 'insert.inline object'
                inlineObject: {
                  name: string
                  value?: {
                    [prop: string]: unknown
                  }
                }
              }
            | {
                type: 'insert.break'
              }
            | {
                type: 'insert.soft break'
              }
            | {
                type: 'insert.block'
                block: PortableTextBlock
                placement: 'auto' | 'after' | 'before'
              }
            | {
                type: 'insert.span'
                text: string
                annotations?: Array<{
                  name: string
                  value: {
                    [prop: string]: unknown
                  }
                }>
                decorators?: Array<string>
              }
            | {
                type: 'insert.text'
                text: string
                options?: TextInsertTextOptions
              }
            | {
                type: 'insert.text block'
                placement: 'auto' | 'after' | 'before'
                textBlock?: {
                  children?: PortableTextTextBlock['children']
                }
              }
            | {
                type: 'list item.add'
                listItem: string
              }
            | {
                type: 'list item.remove'
                listItem: string
              }
            | {
                type: 'list item.toggle'
                listItem: string
              }
            | {
                type: 'move.block'
                at: [KeyedSegment]
                to: [KeyedSegment]
              }
            | {
                type: 'move.block down'
                at: [KeyedSegment]
              }
            | {
                type: 'move.block up'
                at: [KeyedSegment]
              }
            | {
                type: 'select'
                selection: EditorSelection
              }
            | {
                type: 'select.previous block'
              }
            | {
                type: 'select.next block'
              }
            | {
                type: 'style.add'
                style: string
              }
            | {
                type: 'style.remove'
                style: string
              }
            | {
                type: 'style.toggle'
                style: string
              }
            | {
                type: 'text block.set'
                at: [KeyedSegment]
                level?: number
                listItem?: string
                style?: string
              }
            | {
                type: 'text block.unset'
                at: [KeyedSegment]
                props: Array<'level' | 'listItem' | 'style'>
              }
            | ({
                type: 'serialization.failure'
                mimeType: `${string}/${string}`
                reason: string
              } & {
                dataTransfer: DataTransfer
              })
            | ({
                type: 'serialization.success'
                data: string
                mimeType: `${string}/${string}`
                originEvent: 'copy' | 'cut' | 'unknown'
              } & {
                dataTransfer: DataTransfer
              })
            | ({
                type: 'deserialization.failure'
                mimeType: `${string}/${string}`
                reason: string
              } & {
                dataTransfer: DataTransfer
              })
            | ({
                type: 'deserialization.success'
                data: Array<PortableTextBlock>
                mimeType: `${string}/${string}`
              } & {
                dataTransfer: DataTransfer
              })
            | PatchEvent
            | MutationEvent
            | {
                type: 'normalizing'
              }
            | {
                type: 'done normalizing'
              }
            | {
                type: 'done syncing initial value'
              }
            | {
                type: 'behavior event'
                behaviorEvent: SyntheticBehaviorEvent | NativeBehaviorEvent
                editor: PortableTextSlateEditor
                defaultActionCallback?: () => void
                nativeEvent?: {
                  preventDefault: () => void
                }
              }
            | {
                type: 'custom behavior event'
                behaviorEvent: CustomBehaviorEvent
                editor: PortableTextSlateEditor
                nativeEvent?: {
                  preventDefault: () => void
                }
              }
            | CustomBehaviorEvent
            | {
                type: 'add behavior'
                behavior: Behavior
              }
            | {
                type: 'remove behavior'
                behavior: Behavior
              }
            | {
                type: 'update readOnly'
                readOnly: boolean
              }
            | {
                type: 'update schema'
                schema: EditorSchema
              }
            | {
                type: 'update behaviors'
                behaviors: Array<Behavior>
              }
            | {
                type: 'update key generator'
                keyGenerator: () => string
              }
            | {
                type: 'update value'
                value: Array<PortableTextBlock> | undefined
              }
            | {
                type: 'update maxBlocks'
                maxBlocks: number | undefined
              }
            | PatchesEvent
            | {
                type: 'notify.patch'
                patch: Patch
              }
            | {
                type: 'notify.mutation'
                patches: Array<Patch>
                snapshot: Array<PortableTextBlock> | undefined
                value: Array<PortableTextBlock> | undefined
              }
            | {
                type: 'notify.blurred'
                event: FocusEvent_2<HTMLDivElement, Element>
              }
            | {
                type: 'notify.done loading'
              }
            | {
                type: 'notify.editable'
              }
            | {
                type: 'notify.error'
                name: string
                description: string
                data: unknown
              }
            | {
                type: 'notify.focused'
                event: FocusEvent_2<HTMLDivElement, Element>
              }
            | {
                type: 'notify.invalid value'
                resolution: InvalidValueResolution | null
                value: Array<PortableTextBlock> | undefined
              }
            | {
                type: 'notify.loading'
              }
            | {
                type: 'notify.read only'
              }
            | {
                type: 'notify.ready'
              }
            | {
                type: 'notify.selection'
                selection: EditorSelection
              }
            | {
                type: 'notify.value changed'
                value: Array<PortableTextBlock> | undefined
              }
            | {
                type: 'notify.unset'
                previousValue: Array<PortableTextBlock>
              },
            undefined,
            never,
            never,
            never,
            never,
            never
          >,
          ActionFunction<
            {
              behaviors: Set<Behavior>
              converters: Set<Converter>
              keyGenerator: () => string
              pendingEvents: Array<PatchEvent | MutationEvent>
              schema: EditorSchema
              initialReadOnly: boolean
              maxBlocks: number | undefined
              selection: EditorSelection
              value: Array<PortableTextBlock> | undefined
            },
            {
              type: 'notify.selection'
              selection: EditorSelection
            },
            | {
                type: 'annotation.add'
                annotation: {
                  name: string
                  value: {
                    [prop: string]: unknown
                  }
                }
              }
            | {
                type: 'annotation.remove'
                annotation: {
                  name: string
                }
              }
            | {
                type: 'annotation.toggle'
                annotation: {
                  name: string
                  value: {
                    [prop: string]: unknown
                  }
                }
              }
            | {
                [props: string]: unknown
                type: 'block.set'
                at: [KeyedSegment]
              }
            | {
                type: 'block.unset'
                at: [KeyedSegment]
                props: Array<string>
              }
            | {
                type: 'blur'
              }
            | {
                type: 'data transfer.set'
                data: string
                dataTransfer: DataTransfer
                mimeType: MIMEType_2
              }
            | {
                type: 'decorator.add'
                decorator: string
                selection?: NonNullable<EditorSelection>
              }
            | {
                type: 'decorator.remove'
                decorator: string
              }
            | {
                type: 'decorator.toggle'
                decorator: string
              }
            | {
                type: 'delete'
                selection: NonNullable<EditorSelection>
              }
            | {
                type: 'delete.backward'
                unit: TextUnit
              }
            | {
                type: 'delete.block'
                blockPath: [KeyedSegment]
              }
            | {
                type: 'delete.forward'
                unit: TextUnit
              }
            | {
                type: 'delete.text'
                anchor: BlockOffset_2
                focus: BlockOffset_2
              }
            | {
                type: 'focus'
              }
            | {
                type: 'history.redo'
              }
            | {
                type: 'history.undo'
              }
            | {
                type: 'insert.blocks'
                blocks: Array<PortableTextBlock>
              }
            | {
                type: 'insert.block object'
                placement: 'auto' | 'after' | 'before'
                blockObject: {
                  name: string
                  value?: {
                    [prop: string]: unknown
                  }
                }
              }
            | {
                type: 'insert.inline object'
                inlineObject: {
                  name: string
                  value?: {
                    [prop: string]: unknown
                  }
                }
              }
            | {
                type: 'insert.break'
              }
            | {
                type: 'insert.soft break'
              }
            | {
                type: 'insert.block'
                block: PortableTextBlock
                placement: 'auto' | 'after' | 'before'
              }
            | {
                type: 'insert.span'
                text: string
                annotations?: Array<{
                  name: string
                  value: {
                    [prop: string]: unknown
                  }
                }>
                decorators?: Array<string>
              }
            | {
                type: 'insert.text'
                text: string
                options?: TextInsertTextOptions
              }
            | {
                type: 'insert.text block'
                placement: 'auto' | 'after' | 'before'
                textBlock?: {
                  children?: PortableTextTextBlock['children']
                }
              }
            | {
                type: 'list item.add'
                listItem: string
              }
            | {
                type: 'list item.remove'
                listItem: string
              }
            | {
                type: 'list item.toggle'
                listItem: string
              }
            | {
                type: 'move.block'
                at: [KeyedSegment]
                to: [KeyedSegment]
              }
            | {
                type: 'move.block down'
                at: [KeyedSegment]
              }
            | {
                type: 'move.block up'
                at: [KeyedSegment]
              }
            | {
                type: 'select'
                selection: EditorSelection
              }
            | {
                type: 'select.previous block'
              }
            | {
                type: 'select.next block'
              }
            | {
                type: 'style.add'
                style: string
              }
            | {
                type: 'style.remove'
                style: string
              }
            | {
                type: 'style.toggle'
                style: string
              }
            | {
                type: 'text block.set'
                at: [KeyedSegment]
                level?: number
                listItem?: string
                style?: string
              }
            | {
                type: 'text block.unset'
                at: [KeyedSegment]
                props: Array<'level' | 'listItem' | 'style'>
              }
            | ({
                type: 'serialization.failure'
                mimeType: `${string}/${string}`
                reason: string
              } & {
                dataTransfer: DataTransfer
              })
            | ({
                type: 'serialization.success'
                data: string
                mimeType: `${string}/${string}`
                originEvent: 'copy' | 'cut' | 'unknown'
              } & {
                dataTransfer: DataTransfer
              })
            | ({
                type: 'deserialization.failure'
                mimeType: `${string}/${string}`
                reason: string
              } & {
                dataTransfer: DataTransfer
              })
            | ({
                type: 'deserialization.success'
                data: Array<PortableTextBlock>
                mimeType: `${string}/${string}`
              } & {
                dataTransfer: DataTransfer
              })
            | PatchEvent
            | MutationEvent
            | {
                type: 'normalizing'
              }
            | {
                type: 'done normalizing'
              }
            | {
                type: 'done syncing initial value'
              }
            | {
                type: 'behavior event'
                behaviorEvent: SyntheticBehaviorEvent | NativeBehaviorEvent
                editor: PortableTextSlateEditor
                defaultActionCallback?: () => void
                nativeEvent?: {
                  preventDefault: () => void
                }
              }
            | {
                type: 'custom behavior event'
                behaviorEvent: CustomBehaviorEvent
                editor: PortableTextSlateEditor
                nativeEvent?: {
                  preventDefault: () => void
                }
              }
            | CustomBehaviorEvent
            | {
                type: 'add behavior'
                behavior: Behavior
              }
            | {
                type: 'remove behavior'
                behavior: Behavior
              }
            | {
                type: 'update readOnly'
                readOnly: boolean
              }
            | {
                type: 'update schema'
                schema: EditorSchema
              }
            | {
                type: 'update behaviors'
                behaviors: Array<Behavior>
              }
            | {
                type: 'update key generator'
                keyGenerator: () => string
              }
            | {
                type: 'update value'
                value: Array<PortableTextBlock> | undefined
              }
            | {
                type: 'update maxBlocks'
                maxBlocks: number | undefined
              }
            | PatchesEvent
            | {
                type: 'notify.patch'
                patch: Patch
              }
            | {
                type: 'notify.mutation'
                patches: Array<Patch>
                snapshot: Array<PortableTextBlock> | undefined
                value: Array<PortableTextBlock> | undefined
              }
            | {
                type: 'notify.blurred'
                event: FocusEvent_2<HTMLDivElement, Element>
              }
            | {
                type: 'notify.done loading'
              }
            | {
                type: 'notify.editable'
              }
            | {
                type: 'notify.error'
                name: string
                description: string
                data: unknown
              }
            | {
                type: 'notify.focused'
                event: FocusEvent_2<HTMLDivElement, Element>
              }
            | {
                type: 'notify.invalid value'
                resolution: InvalidValueResolution | null
                value: Array<PortableTextBlock> | undefined
              }
            | {
                type: 'notify.loading'
              }
            | {
                type: 'notify.read only'
              }
            | {
                type: 'notify.ready'
              }
            | {
                type: 'notify.selection'
                selection: EditorSelection
              }
            | {
                type: 'notify.value changed'
                value: Array<PortableTextBlock> | undefined
              }
            | {
                type: 'notify.unset'
                previousValue: Array<PortableTextBlock>
              },
            undefined,
            never,
            never,
            never,
            never,
            | {
                type: 'annotation.add'
                annotation: {
                  name: string
                  value: {
                    [prop: string]: unknown
                  }
                }
              }
            | {
                type: 'annotation.remove'
                annotation: {
                  name: string
                }
              }
            | {
                type: 'annotation.toggle'
                annotation: {
                  name: string
                  value: {
                    [prop: string]: unknown
                  }
                }
              }
            | {
                [props: string]: unknown
                type: 'block.set'
                at: [KeyedSegment]
              }
            | {
                type: 'block.unset'
                at: [KeyedSegment]
                props: Array<string>
              }
            | {
                type: 'blur'
              }
            | {
                type: 'data transfer.set'
                data: string
                dataTransfer: DataTransfer
                mimeType: MIMEType_2
              }
            | {
                type: 'decorator.add'
                decorator: string
                selection?: NonNullable<EditorSelection>
              }
            | {
                type: 'decorator.remove'
                decorator: string
              }
            | {
                type: 'decorator.toggle'
                decorator: string
              }
            | {
                type: 'delete'
                selection: NonNullable<EditorSelection>
              }
            | {
                type: 'delete.backward'
                unit: TextUnit
              }
            | {
                type: 'delete.block'
                blockPath: [KeyedSegment]
              }
            | {
                type: 'delete.forward'
                unit: TextUnit
              }
            | {
                type: 'delete.text'
                anchor: BlockOffset_2
                focus: BlockOffset_2
              }
            | {
                type: 'focus'
              }
            | {
                type: 'history.redo'
              }
            | {
                type: 'history.undo'
              }
            | {
                type: 'insert.blocks'
                blocks: Array<PortableTextBlock>
              }
            | {
                type: 'insert.block object'
                placement: 'auto' | 'after' | 'before'
                blockObject: {
                  name: string
                  value?: {
                    [prop: string]: unknown
                  }
                }
              }
            | {
                type: 'insert.inline object'
                inlineObject: {
                  name: string
                  value?: {
                    [prop: string]: unknown
                  }
                }
              }
            | {
                type: 'insert.break'
              }
            | {
                type: 'insert.soft break'
              }
            | {
                type: 'insert.block'
                block: PortableTextBlock
                placement: 'auto' | 'after' | 'before'
              }
            | {
                type: 'insert.span'
                text: string
                annotations?: Array<{
                  name: string
                  value: {
                    [prop: string]: unknown
                  }
                }>
                decorators?: Array<string>
              }
            | {
                type: 'insert.text'
                text: string
                options?: TextInsertTextOptions
              }
            | {
                type: 'insert.text block'
                placement: 'auto' | 'after' | 'before'
                textBlock?: {
                  children?: PortableTextTextBlock['children']
                }
              }
            | {
                type: 'list item.add'
                listItem: string
              }
            | {
                type: 'list item.remove'
                listItem: string
              }
            | {
                type: 'list item.toggle'
                listItem: string
              }
            | {
                type: 'move.block'
                at: [KeyedSegment]
                to: [KeyedSegment]
              }
            | {
                type: 'move.block down'
                at: [KeyedSegment]
              }
            | {
                type: 'move.block up'
                at: [KeyedSegment]
              }
            | {
                type: 'select'
                selection: EditorSelection
              }
            | {
                type: 'select.previous block'
              }
            | {
                type: 'select.next block'
              }
            | {
                type: 'style.add'
                style: string
              }
            | {
                type: 'style.remove'
                style: string
              }
            | {
                type: 'style.toggle'
                style: string
              }
            | {
                type: 'text block.set'
                at: [KeyedSegment]
                level?: number
                listItem?: string
                style?: string
              }
            | {
                type: 'text block.unset'
                at: [KeyedSegment]
                props: Array<'level' | 'listItem' | 'style'>
              }
            | ({
                type: 'serialization.failure'
                mimeType: `${string}/${string}`
                reason: string
              } & {
                dataTransfer: DataTransfer
              })
            | ({
                type: 'serialization.success'
                data: string
                mimeType: `${string}/${string}`
                originEvent: 'copy' | 'cut' | 'unknown'
              } & {
                dataTransfer: DataTransfer
              })
            | ({
                type: 'deserialization.failure'
                mimeType: `${string}/${string}`
                reason: string
              } & {
                dataTransfer: DataTransfer
              })
            | ({
                type: 'deserialization.success'
                data: Array<PortableTextBlock>
                mimeType: `${string}/${string}`
              } & {
                dataTransfer: DataTransfer
              })
            | PatchEvent
            | MutationEvent
            | PatchesEvent
            | {
                type: 'blurred'
                event: FocusEvent_2<HTMLDivElement, Element>
              }
            | {
                type: 'done loading'
              }
            | {
                type: 'editable'
              }
            | {
                type: 'error'
                name: string
                description: string
                data: unknown
              }
            | {
                type: 'focused'
                event: FocusEvent_2<HTMLDivElement, Element>
              }
            | {
                type: 'invalid value'
                resolution: InvalidValueResolution | null
                value: Array<PortableTextBlock> | undefined
              }
            | {
                type: 'loading'
              }
            | {
                type: 'read only'
              }
            | {
                type: 'ready'
              }
            | {
                type: 'selection'
                selection: EditorSelection
              }
            | {
                type: 'value changed'
                value: Array<PortableTextBlock> | undefined
              }
            | UnsetEvent
            | {
                type: 'custom.*'
                event: CustomBehaviorEvent
              }
          >,
        ]
      }
      readonly 'notify.unset': {
        readonly actions: ActionFunction<
          {
            behaviors: Set<Behavior>
            converters: Set<Converter>
            keyGenerator: () => string
            pendingEvents: Array<PatchEvent | MutationEvent>
            schema: EditorSchema
            initialReadOnly: boolean
            maxBlocks: number | undefined
            selection: EditorSelection
            value: Array<PortableTextBlock> | undefined
          },
          {
            type: 'notify.unset'
            previousValue: Array<PortableTextBlock>
          },
          | {
              type: 'annotation.add'
              annotation: {
                name: string
                value: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'annotation.remove'
              annotation: {
                name: string
              }
            }
          | {
              type: 'annotation.toggle'
              annotation: {
                name: string
                value: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              [props: string]: unknown
              type: 'block.set'
              at: [KeyedSegment]
            }
          | {
              type: 'block.unset'
              at: [KeyedSegment]
              props: Array<string>
            }
          | {
              type: 'blur'
            }
          | {
              type: 'data transfer.set'
              data: string
              dataTransfer: DataTransfer
              mimeType: MIMEType_2
            }
          | {
              type: 'decorator.add'
              decorator: string
              selection?: NonNullable<EditorSelection>
            }
          | {
              type: 'decorator.remove'
              decorator: string
            }
          | {
              type: 'decorator.toggle'
              decorator: string
            }
          | {
              type: 'delete'
              selection: NonNullable<EditorSelection>
            }
          | {
              type: 'delete.backward'
              unit: TextUnit
            }
          | {
              type: 'delete.block'
              blockPath: [KeyedSegment]
            }
          | {
              type: 'delete.forward'
              unit: TextUnit
            }
          | {
              type: 'delete.text'
              anchor: BlockOffset_2
              focus: BlockOffset_2
            }
          | {
              type: 'focus'
            }
          | {
              type: 'history.redo'
            }
          | {
              type: 'history.undo'
            }
          | {
              type: 'insert.blocks'
              blocks: Array<PortableTextBlock>
            }
          | {
              type: 'insert.block object'
              placement: 'auto' | 'after' | 'before'
              blockObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'insert.inline object'
              inlineObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'insert.break'
            }
          | {
              type: 'insert.soft break'
            }
          | {
              type: 'insert.block'
              block: PortableTextBlock
              placement: 'auto' | 'after' | 'before'
            }
          | {
              type: 'insert.span'
              text: string
              annotations?: Array<{
                name: string
                value: {
                  [prop: string]: unknown
                }
              }>
              decorators?: Array<string>
            }
          | {
              type: 'insert.text'
              text: string
              options?: TextInsertTextOptions
            }
          | {
              type: 'insert.text block'
              placement: 'auto' | 'after' | 'before'
              textBlock?: {
                children?: PortableTextTextBlock['children']
              }
            }
          | {
              type: 'list item.add'
              listItem: string
            }
          | {
              type: 'list item.remove'
              listItem: string
            }
          | {
              type: 'list item.toggle'
              listItem: string
            }
          | {
              type: 'move.block'
              at: [KeyedSegment]
              to: [KeyedSegment]
            }
          | {
              type: 'move.block down'
              at: [KeyedSegment]
            }
          | {
              type: 'move.block up'
              at: [KeyedSegment]
            }
          | {
              type: 'select'
              selection: EditorSelection
            }
          | {
              type: 'select.previous block'
            }
          | {
              type: 'select.next block'
            }
          | {
              type: 'style.add'
              style: string
            }
          | {
              type: 'style.remove'
              style: string
            }
          | {
              type: 'style.toggle'
              style: string
            }
          | {
              type: 'text block.set'
              at: [KeyedSegment]
              level?: number
              listItem?: string
              style?: string
            }
          | {
              type: 'text block.unset'
              at: [KeyedSegment]
              props: Array<'level' | 'listItem' | 'style'>
            }
          | ({
              type: 'serialization.failure'
              mimeType: `${string}/${string}`
              reason: string
            } & {
              dataTransfer: DataTransfer
            })
          | ({
              type: 'serialization.success'
              data: string
              mimeType: `${string}/${string}`
              originEvent: 'copy' | 'cut' | 'unknown'
            } & {
              dataTransfer: DataTransfer
            })
          | ({
              type: 'deserialization.failure'
              mimeType: `${string}/${string}`
              reason: string
            } & {
              dataTransfer: DataTransfer
            })
          | ({
              type: 'deserialization.success'
              data: Array<PortableTextBlock>
              mimeType: `${string}/${string}`
            } & {
              dataTransfer: DataTransfer
            })
          | PatchEvent
          | MutationEvent
          | {
              type: 'normalizing'
            }
          | {
              type: 'done normalizing'
            }
          | {
              type: 'done syncing initial value'
            }
          | {
              type: 'behavior event'
              behaviorEvent: SyntheticBehaviorEvent | NativeBehaviorEvent
              editor: PortableTextSlateEditor
              defaultActionCallback?: () => void
              nativeEvent?: {
                preventDefault: () => void
              }
            }
          | {
              type: 'custom behavior event'
              behaviorEvent: CustomBehaviorEvent
              editor: PortableTextSlateEditor
              nativeEvent?: {
                preventDefault: () => void
              }
            }
          | CustomBehaviorEvent
          | {
              type: 'add behavior'
              behavior: Behavior
            }
          | {
              type: 'remove behavior'
              behavior: Behavior
            }
          | {
              type: 'update readOnly'
              readOnly: boolean
            }
          | {
              type: 'update schema'
              schema: EditorSchema
            }
          | {
              type: 'update behaviors'
              behaviors: Array<Behavior>
            }
          | {
              type: 'update key generator'
              keyGenerator: () => string
            }
          | {
              type: 'update value'
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'update maxBlocks'
              maxBlocks: number | undefined
            }
          | PatchesEvent
          | {
              type: 'notify.patch'
              patch: Patch
            }
          | {
              type: 'notify.mutation'
              patches: Array<Patch>
              snapshot: Array<PortableTextBlock> | undefined
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'notify.blurred'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'notify.done loading'
            }
          | {
              type: 'notify.editable'
            }
          | {
              type: 'notify.error'
              name: string
              description: string
              data: unknown
            }
          | {
              type: 'notify.focused'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'notify.invalid value'
              resolution: InvalidValueResolution | null
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'notify.loading'
            }
          | {
              type: 'notify.read only'
            }
          | {
              type: 'notify.ready'
            }
          | {
              type: 'notify.selection'
              selection: EditorSelection
            }
          | {
              type: 'notify.value changed'
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'notify.unset'
              previousValue: Array<PortableTextBlock>
            },
          undefined,
          never,
          never,
          never,
          never,
          | {
              type: 'annotation.add'
              annotation: {
                name: string
                value: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'annotation.remove'
              annotation: {
                name: string
              }
            }
          | {
              type: 'annotation.toggle'
              annotation: {
                name: string
                value: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              [props: string]: unknown
              type: 'block.set'
              at: [KeyedSegment]
            }
          | {
              type: 'block.unset'
              at: [KeyedSegment]
              props: Array<string>
            }
          | {
              type: 'blur'
            }
          | {
              type: 'data transfer.set'
              data: string
              dataTransfer: DataTransfer
              mimeType: MIMEType_2
            }
          | {
              type: 'decorator.add'
              decorator: string
              selection?: NonNullable<EditorSelection>
            }
          | {
              type: 'decorator.remove'
              decorator: string
            }
          | {
              type: 'decorator.toggle'
              decorator: string
            }
          | {
              type: 'delete'
              selection: NonNullable<EditorSelection>
            }
          | {
              type: 'delete.backward'
              unit: TextUnit
            }
          | {
              type: 'delete.block'
              blockPath: [KeyedSegment]
            }
          | {
              type: 'delete.forward'
              unit: TextUnit
            }
          | {
              type: 'delete.text'
              anchor: BlockOffset_2
              focus: BlockOffset_2
            }
          | {
              type: 'focus'
            }
          | {
              type: 'history.redo'
            }
          | {
              type: 'history.undo'
            }
          | {
              type: 'insert.blocks'
              blocks: Array<PortableTextBlock>
            }
          | {
              type: 'insert.block object'
              placement: 'auto' | 'after' | 'before'
              blockObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'insert.inline object'
              inlineObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'insert.break'
            }
          | {
              type: 'insert.soft break'
            }
          | {
              type: 'insert.block'
              block: PortableTextBlock
              placement: 'auto' | 'after' | 'before'
            }
          | {
              type: 'insert.span'
              text: string
              annotations?: Array<{
                name: string
                value: {
                  [prop: string]: unknown
                }
              }>
              decorators?: Array<string>
            }
          | {
              type: 'insert.text'
              text: string
              options?: TextInsertTextOptions
            }
          | {
              type: 'insert.text block'
              placement: 'auto' | 'after' | 'before'
              textBlock?: {
                children?: PortableTextTextBlock['children']
              }
            }
          | {
              type: 'list item.add'
              listItem: string
            }
          | {
              type: 'list item.remove'
              listItem: string
            }
          | {
              type: 'list item.toggle'
              listItem: string
            }
          | {
              type: 'move.block'
              at: [KeyedSegment]
              to: [KeyedSegment]
            }
          | {
              type: 'move.block down'
              at: [KeyedSegment]
            }
          | {
              type: 'move.block up'
              at: [KeyedSegment]
            }
          | {
              type: 'select'
              selection: EditorSelection
            }
          | {
              type: 'select.previous block'
            }
          | {
              type: 'select.next block'
            }
          | {
              type: 'style.add'
              style: string
            }
          | {
              type: 'style.remove'
              style: string
            }
          | {
              type: 'style.toggle'
              style: string
            }
          | {
              type: 'text block.set'
              at: [KeyedSegment]
              level?: number
              listItem?: string
              style?: string
            }
          | {
              type: 'text block.unset'
              at: [KeyedSegment]
              props: Array<'level' | 'listItem' | 'style'>
            }
          | ({
              type: 'serialization.failure'
              mimeType: `${string}/${string}`
              reason: string
            } & {
              dataTransfer: DataTransfer
            })
          | ({
              type: 'serialization.success'
              data: string
              mimeType: `${string}/${string}`
              originEvent: 'copy' | 'cut' | 'unknown'
            } & {
              dataTransfer: DataTransfer
            })
          | ({
              type: 'deserialization.failure'
              mimeType: `${string}/${string}`
              reason: string
            } & {
              dataTransfer: DataTransfer
            })
          | ({
              type: 'deserialization.success'
              data: Array<PortableTextBlock>
              mimeType: `${string}/${string}`
            } & {
              dataTransfer: DataTransfer
            })
          | PatchEvent
          | MutationEvent
          | PatchesEvent
          | {
              type: 'blurred'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'done loading'
            }
          | {
              type: 'editable'
            }
          | {
              type: 'error'
              name: string
              description: string
              data: unknown
            }
          | {
              type: 'focused'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'invalid value'
              resolution: InvalidValueResolution | null
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'loading'
            }
          | {
              type: 'read only'
            }
          | {
              type: 'ready'
            }
          | {
              type: 'selection'
              selection: EditorSelection
            }
          | {
              type: 'value changed'
              value: Array<PortableTextBlock> | undefined
            }
          | UnsetEvent
          | {
              type: 'custom.*'
              event: CustomBehaviorEvent
            }
        >
      }
      readonly 'notify.loading': {
        readonly actions: ActionFunction<
          {
            behaviors: Set<Behavior>
            converters: Set<Converter>
            keyGenerator: () => string
            pendingEvents: Array<PatchEvent | MutationEvent>
            schema: EditorSchema
            initialReadOnly: boolean
            maxBlocks: number | undefined
            selection: EditorSelection
            value: Array<PortableTextBlock> | undefined
          },
          {
            type: 'notify.loading'
          },
          | {
              type: 'annotation.add'
              annotation: {
                name: string
                value: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'annotation.remove'
              annotation: {
                name: string
              }
            }
          | {
              type: 'annotation.toggle'
              annotation: {
                name: string
                value: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              [props: string]: unknown
              type: 'block.set'
              at: [KeyedSegment]
            }
          | {
              type: 'block.unset'
              at: [KeyedSegment]
              props: Array<string>
            }
          | {
              type: 'blur'
            }
          | {
              type: 'data transfer.set'
              data: string
              dataTransfer: DataTransfer
              mimeType: MIMEType_2
            }
          | {
              type: 'decorator.add'
              decorator: string
              selection?: NonNullable<EditorSelection>
            }
          | {
              type: 'decorator.remove'
              decorator: string
            }
          | {
              type: 'decorator.toggle'
              decorator: string
            }
          | {
              type: 'delete'
              selection: NonNullable<EditorSelection>
            }
          | {
              type: 'delete.backward'
              unit: TextUnit
            }
          | {
              type: 'delete.block'
              blockPath: [KeyedSegment]
            }
          | {
              type: 'delete.forward'
              unit: TextUnit
            }
          | {
              type: 'delete.text'
              anchor: BlockOffset_2
              focus: BlockOffset_2
            }
          | {
              type: 'focus'
            }
          | {
              type: 'history.redo'
            }
          | {
              type: 'history.undo'
            }
          | {
              type: 'insert.blocks'
              blocks: Array<PortableTextBlock>
            }
          | {
              type: 'insert.block object'
              placement: 'auto' | 'after' | 'before'
              blockObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'insert.inline object'
              inlineObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'insert.break'
            }
          | {
              type: 'insert.soft break'
            }
          | {
              type: 'insert.block'
              block: PortableTextBlock
              placement: 'auto' | 'after' | 'before'
            }
          | {
              type: 'insert.span'
              text: string
              annotations?: Array<{
                name: string
                value: {
                  [prop: string]: unknown
                }
              }>
              decorators?: Array<string>
            }
          | {
              type: 'insert.text'
              text: string
              options?: TextInsertTextOptions
            }
          | {
              type: 'insert.text block'
              placement: 'auto' | 'after' | 'before'
              textBlock?: {
                children?: PortableTextTextBlock['children']
              }
            }
          | {
              type: 'list item.add'
              listItem: string
            }
          | {
              type: 'list item.remove'
              listItem: string
            }
          | {
              type: 'list item.toggle'
              listItem: string
            }
          | {
              type: 'move.block'
              at: [KeyedSegment]
              to: [KeyedSegment]
            }
          | {
              type: 'move.block down'
              at: [KeyedSegment]
            }
          | {
              type: 'move.block up'
              at: [KeyedSegment]
            }
          | {
              type: 'select'
              selection: EditorSelection
            }
          | {
              type: 'select.previous block'
            }
          | {
              type: 'select.next block'
            }
          | {
              type: 'style.add'
              style: string
            }
          | {
              type: 'style.remove'
              style: string
            }
          | {
              type: 'style.toggle'
              style: string
            }
          | {
              type: 'text block.set'
              at: [KeyedSegment]
              level?: number
              listItem?: string
              style?: string
            }
          | {
              type: 'text block.unset'
              at: [KeyedSegment]
              props: Array<'level' | 'listItem' | 'style'>
            }
          | ({
              type: 'serialization.failure'
              mimeType: `${string}/${string}`
              reason: string
            } & {
              dataTransfer: DataTransfer
            })
          | ({
              type: 'serialization.success'
              data: string
              mimeType: `${string}/${string}`
              originEvent: 'copy' | 'cut' | 'unknown'
            } & {
              dataTransfer: DataTransfer
            })
          | ({
              type: 'deserialization.failure'
              mimeType: `${string}/${string}`
              reason: string
            } & {
              dataTransfer: DataTransfer
            })
          | ({
              type: 'deserialization.success'
              data: Array<PortableTextBlock>
              mimeType: `${string}/${string}`
            } & {
              dataTransfer: DataTransfer
            })
          | PatchEvent
          | MutationEvent
          | {
              type: 'normalizing'
            }
          | {
              type: 'done normalizing'
            }
          | {
              type: 'done syncing initial value'
            }
          | {
              type: 'behavior event'
              behaviorEvent: SyntheticBehaviorEvent | NativeBehaviorEvent
              editor: PortableTextSlateEditor
              defaultActionCallback?: () => void
              nativeEvent?: {
                preventDefault: () => void
              }
            }
          | {
              type: 'custom behavior event'
              behaviorEvent: CustomBehaviorEvent
              editor: PortableTextSlateEditor
              nativeEvent?: {
                preventDefault: () => void
              }
            }
          | CustomBehaviorEvent
          | {
              type: 'add behavior'
              behavior: Behavior
            }
          | {
              type: 'remove behavior'
              behavior: Behavior
            }
          | {
              type: 'update readOnly'
              readOnly: boolean
            }
          | {
              type: 'update schema'
              schema: EditorSchema
            }
          | {
              type: 'update behaviors'
              behaviors: Array<Behavior>
            }
          | {
              type: 'update key generator'
              keyGenerator: () => string
            }
          | {
              type: 'update value'
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'update maxBlocks'
              maxBlocks: number | undefined
            }
          | PatchesEvent
          | {
              type: 'notify.patch'
              patch: Patch
            }
          | {
              type: 'notify.mutation'
              patches: Array<Patch>
              snapshot: Array<PortableTextBlock> | undefined
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'notify.blurred'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'notify.done loading'
            }
          | {
              type: 'notify.editable'
            }
          | {
              type: 'notify.error'
              name: string
              description: string
              data: unknown
            }
          | {
              type: 'notify.focused'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'notify.invalid value'
              resolution: InvalidValueResolution | null
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'notify.loading'
            }
          | {
              type: 'notify.read only'
            }
          | {
              type: 'notify.ready'
            }
          | {
              type: 'notify.selection'
              selection: EditorSelection
            }
          | {
              type: 'notify.value changed'
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'notify.unset'
              previousValue: Array<PortableTextBlock>
            },
          undefined,
          never,
          never,
          never,
          never,
          | {
              type: 'annotation.add'
              annotation: {
                name: string
                value: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'annotation.remove'
              annotation: {
                name: string
              }
            }
          | {
              type: 'annotation.toggle'
              annotation: {
                name: string
                value: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              [props: string]: unknown
              type: 'block.set'
              at: [KeyedSegment]
            }
          | {
              type: 'block.unset'
              at: [KeyedSegment]
              props: Array<string>
            }
          | {
              type: 'blur'
            }
          | {
              type: 'data transfer.set'
              data: string
              dataTransfer: DataTransfer
              mimeType: MIMEType_2
            }
          | {
              type: 'decorator.add'
              decorator: string
              selection?: NonNullable<EditorSelection>
            }
          | {
              type: 'decorator.remove'
              decorator: string
            }
          | {
              type: 'decorator.toggle'
              decorator: string
            }
          | {
              type: 'delete'
              selection: NonNullable<EditorSelection>
            }
          | {
              type: 'delete.backward'
              unit: TextUnit
            }
          | {
              type: 'delete.block'
              blockPath: [KeyedSegment]
            }
          | {
              type: 'delete.forward'
              unit: TextUnit
            }
          | {
              type: 'delete.text'
              anchor: BlockOffset_2
              focus: BlockOffset_2
            }
          | {
              type: 'focus'
            }
          | {
              type: 'history.redo'
            }
          | {
              type: 'history.undo'
            }
          | {
              type: 'insert.blocks'
              blocks: Array<PortableTextBlock>
            }
          | {
              type: 'insert.block object'
              placement: 'auto' | 'after' | 'before'
              blockObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'insert.inline object'
              inlineObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'insert.break'
            }
          | {
              type: 'insert.soft break'
            }
          | {
              type: 'insert.block'
              block: PortableTextBlock
              placement: 'auto' | 'after' | 'before'
            }
          | {
              type: 'insert.span'
              text: string
              annotations?: Array<{
                name: string
                value: {
                  [prop: string]: unknown
                }
              }>
              decorators?: Array<string>
            }
          | {
              type: 'insert.text'
              text: string
              options?: TextInsertTextOptions
            }
          | {
              type: 'insert.text block'
              placement: 'auto' | 'after' | 'before'
              textBlock?: {
                children?: PortableTextTextBlock['children']
              }
            }
          | {
              type: 'list item.add'
              listItem: string
            }
          | {
              type: 'list item.remove'
              listItem: string
            }
          | {
              type: 'list item.toggle'
              listItem: string
            }
          | {
              type: 'move.block'
              at: [KeyedSegment]
              to: [KeyedSegment]
            }
          | {
              type: 'move.block down'
              at: [KeyedSegment]
            }
          | {
              type: 'move.block up'
              at: [KeyedSegment]
            }
          | {
              type: 'select'
              selection: EditorSelection
            }
          | {
              type: 'select.previous block'
            }
          | {
              type: 'select.next block'
            }
          | {
              type: 'style.add'
              style: string
            }
          | {
              type: 'style.remove'
              style: string
            }
          | {
              type: 'style.toggle'
              style: string
            }
          | {
              type: 'text block.set'
              at: [KeyedSegment]
              level?: number
              listItem?: string
              style?: string
            }
          | {
              type: 'text block.unset'
              at: [KeyedSegment]
              props: Array<'level' | 'listItem' | 'style'>
            }
          | ({
              type: 'serialization.failure'
              mimeType: `${string}/${string}`
              reason: string
            } & {
              dataTransfer: DataTransfer
            })
          | ({
              type: 'serialization.success'
              data: string
              mimeType: `${string}/${string}`
              originEvent: 'copy' | 'cut' | 'unknown'
            } & {
              dataTransfer: DataTransfer
            })
          | ({
              type: 'deserialization.failure'
              mimeType: `${string}/${string}`
              reason: string
            } & {
              dataTransfer: DataTransfer
            })
          | ({
              type: 'deserialization.success'
              data: Array<PortableTextBlock>
              mimeType: `${string}/${string}`
            } & {
              dataTransfer: DataTransfer
            })
          | PatchEvent
          | MutationEvent
          | PatchesEvent
          | {
              type: 'blurred'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'done loading'
            }
          | {
              type: 'editable'
            }
          | {
              type: 'error'
              name: string
              description: string
              data: unknown
            }
          | {
              type: 'focused'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'invalid value'
              resolution: InvalidValueResolution | null
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'loading'
            }
          | {
              type: 'read only'
            }
          | {
              type: 'ready'
            }
          | {
              type: 'selection'
              selection: EditorSelection
            }
          | {
              type: 'value changed'
              value: Array<PortableTextBlock> | undefined
            }
          | UnsetEvent
          | {
              type: 'custom.*'
              event: CustomBehaviorEvent
            }
        >
      }
      readonly 'notify.value changed': {
        readonly actions: ActionFunction<
          {
            behaviors: Set<Behavior>
            converters: Set<Converter>
            keyGenerator: () => string
            pendingEvents: Array<PatchEvent | MutationEvent>
            schema: EditorSchema
            initialReadOnly: boolean
            maxBlocks: number | undefined
            selection: EditorSelection
            value: Array<PortableTextBlock> | undefined
          },
          {
            type: 'notify.value changed'
            value: Array<PortableTextBlock> | undefined
          },
          | {
              type: 'annotation.add'
              annotation: {
                name: string
                value: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'annotation.remove'
              annotation: {
                name: string
              }
            }
          | {
              type: 'annotation.toggle'
              annotation: {
                name: string
                value: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              [props: string]: unknown
              type: 'block.set'
              at: [KeyedSegment]
            }
          | {
              type: 'block.unset'
              at: [KeyedSegment]
              props: Array<string>
            }
          | {
              type: 'blur'
            }
          | {
              type: 'data transfer.set'
              data: string
              dataTransfer: DataTransfer
              mimeType: MIMEType_2
            }
          | {
              type: 'decorator.add'
              decorator: string
              selection?: NonNullable<EditorSelection>
            }
          | {
              type: 'decorator.remove'
              decorator: string
            }
          | {
              type: 'decorator.toggle'
              decorator: string
            }
          | {
              type: 'delete'
              selection: NonNullable<EditorSelection>
            }
          | {
              type: 'delete.backward'
              unit: TextUnit
            }
          | {
              type: 'delete.block'
              blockPath: [KeyedSegment]
            }
          | {
              type: 'delete.forward'
              unit: TextUnit
            }
          | {
              type: 'delete.text'
              anchor: BlockOffset_2
              focus: BlockOffset_2
            }
          | {
              type: 'focus'
            }
          | {
              type: 'history.redo'
            }
          | {
              type: 'history.undo'
            }
          | {
              type: 'insert.blocks'
              blocks: Array<PortableTextBlock>
            }
          | {
              type: 'insert.block object'
              placement: 'auto' | 'after' | 'before'
              blockObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'insert.inline object'
              inlineObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'insert.break'
            }
          | {
              type: 'insert.soft break'
            }
          | {
              type: 'insert.block'
              block: PortableTextBlock
              placement: 'auto' | 'after' | 'before'
            }
          | {
              type: 'insert.span'
              text: string
              annotations?: Array<{
                name: string
                value: {
                  [prop: string]: unknown
                }
              }>
              decorators?: Array<string>
            }
          | {
              type: 'insert.text'
              text: string
              options?: TextInsertTextOptions
            }
          | {
              type: 'insert.text block'
              placement: 'auto' | 'after' | 'before'
              textBlock?: {
                children?: PortableTextTextBlock['children']
              }
            }
          | {
              type: 'list item.add'
              listItem: string
            }
          | {
              type: 'list item.remove'
              listItem: string
            }
          | {
              type: 'list item.toggle'
              listItem: string
            }
          | {
              type: 'move.block'
              at: [KeyedSegment]
              to: [KeyedSegment]
            }
          | {
              type: 'move.block down'
              at: [KeyedSegment]
            }
          | {
              type: 'move.block up'
              at: [KeyedSegment]
            }
          | {
              type: 'select'
              selection: EditorSelection
            }
          | {
              type: 'select.previous block'
            }
          | {
              type: 'select.next block'
            }
          | {
              type: 'style.add'
              style: string
            }
          | {
              type: 'style.remove'
              style: string
            }
          | {
              type: 'style.toggle'
              style: string
            }
          | {
              type: 'text block.set'
              at: [KeyedSegment]
              level?: number
              listItem?: string
              style?: string
            }
          | {
              type: 'text block.unset'
              at: [KeyedSegment]
              props: Array<'level' | 'listItem' | 'style'>
            }
          | ({
              type: 'serialization.failure'
              mimeType: `${string}/${string}`
              reason: string
            } & {
              dataTransfer: DataTransfer
            })
          | ({
              type: 'serialization.success'
              data: string
              mimeType: `${string}/${string}`
              originEvent: 'copy' | 'cut' | 'unknown'
            } & {
              dataTransfer: DataTransfer
            })
          | ({
              type: 'deserialization.failure'
              mimeType: `${string}/${string}`
              reason: string
            } & {
              dataTransfer: DataTransfer
            })
          | ({
              type: 'deserialization.success'
              data: Array<PortableTextBlock>
              mimeType: `${string}/${string}`
            } & {
              dataTransfer: DataTransfer
            })
          | PatchEvent
          | MutationEvent
          | {
              type: 'normalizing'
            }
          | {
              type: 'done normalizing'
            }
          | {
              type: 'done syncing initial value'
            }
          | {
              type: 'behavior event'
              behaviorEvent: SyntheticBehaviorEvent | NativeBehaviorEvent
              editor: PortableTextSlateEditor
              defaultActionCallback?: () => void
              nativeEvent?: {
                preventDefault: () => void
              }
            }
          | {
              type: 'custom behavior event'
              behaviorEvent: CustomBehaviorEvent
              editor: PortableTextSlateEditor
              nativeEvent?: {
                preventDefault: () => void
              }
            }
          | CustomBehaviorEvent
          | {
              type: 'add behavior'
              behavior: Behavior
            }
          | {
              type: 'remove behavior'
              behavior: Behavior
            }
          | {
              type: 'update readOnly'
              readOnly: boolean
            }
          | {
              type: 'update schema'
              schema: EditorSchema
            }
          | {
              type: 'update behaviors'
              behaviors: Array<Behavior>
            }
          | {
              type: 'update key generator'
              keyGenerator: () => string
            }
          | {
              type: 'update value'
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'update maxBlocks'
              maxBlocks: number | undefined
            }
          | PatchesEvent
          | {
              type: 'notify.patch'
              patch: Patch
            }
          | {
              type: 'notify.mutation'
              patches: Array<Patch>
              snapshot: Array<PortableTextBlock> | undefined
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'notify.blurred'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'notify.done loading'
            }
          | {
              type: 'notify.editable'
            }
          | {
              type: 'notify.error'
              name: string
              description: string
              data: unknown
            }
          | {
              type: 'notify.focused'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'notify.invalid value'
              resolution: InvalidValueResolution | null
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'notify.loading'
            }
          | {
              type: 'notify.read only'
            }
          | {
              type: 'notify.ready'
            }
          | {
              type: 'notify.selection'
              selection: EditorSelection
            }
          | {
              type: 'notify.value changed'
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'notify.unset'
              previousValue: Array<PortableTextBlock>
            },
          undefined,
          never,
          never,
          never,
          never,
          | {
              type: 'annotation.add'
              annotation: {
                name: string
                value: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'annotation.remove'
              annotation: {
                name: string
              }
            }
          | {
              type: 'annotation.toggle'
              annotation: {
                name: string
                value: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              [props: string]: unknown
              type: 'block.set'
              at: [KeyedSegment]
            }
          | {
              type: 'block.unset'
              at: [KeyedSegment]
              props: Array<string>
            }
          | {
              type: 'blur'
            }
          | {
              type: 'data transfer.set'
              data: string
              dataTransfer: DataTransfer
              mimeType: MIMEType_2
            }
          | {
              type: 'decorator.add'
              decorator: string
              selection?: NonNullable<EditorSelection>
            }
          | {
              type: 'decorator.remove'
              decorator: string
            }
          | {
              type: 'decorator.toggle'
              decorator: string
            }
          | {
              type: 'delete'
              selection: NonNullable<EditorSelection>
            }
          | {
              type: 'delete.backward'
              unit: TextUnit
            }
          | {
              type: 'delete.block'
              blockPath: [KeyedSegment]
            }
          | {
              type: 'delete.forward'
              unit: TextUnit
            }
          | {
              type: 'delete.text'
              anchor: BlockOffset_2
              focus: BlockOffset_2
            }
          | {
              type: 'focus'
            }
          | {
              type: 'history.redo'
            }
          | {
              type: 'history.undo'
            }
          | {
              type: 'insert.blocks'
              blocks: Array<PortableTextBlock>
            }
          | {
              type: 'insert.block object'
              placement: 'auto' | 'after' | 'before'
              blockObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'insert.inline object'
              inlineObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'insert.break'
            }
          | {
              type: 'insert.soft break'
            }
          | {
              type: 'insert.block'
              block: PortableTextBlock
              placement: 'auto' | 'after' | 'before'
            }
          | {
              type: 'insert.span'
              text: string
              annotations?: Array<{
                name: string
                value: {
                  [prop: string]: unknown
                }
              }>
              decorators?: Array<string>
            }
          | {
              type: 'insert.text'
              text: string
              options?: TextInsertTextOptions
            }
          | {
              type: 'insert.text block'
              placement: 'auto' | 'after' | 'before'
              textBlock?: {
                children?: PortableTextTextBlock['children']
              }
            }
          | {
              type: 'list item.add'
              listItem: string
            }
          | {
              type: 'list item.remove'
              listItem: string
            }
          | {
              type: 'list item.toggle'
              listItem: string
            }
          | {
              type: 'move.block'
              at: [KeyedSegment]
              to: [KeyedSegment]
            }
          | {
              type: 'move.block down'
              at: [KeyedSegment]
            }
          | {
              type: 'move.block up'
              at: [KeyedSegment]
            }
          | {
              type: 'select'
              selection: EditorSelection
            }
          | {
              type: 'select.previous block'
            }
          | {
              type: 'select.next block'
            }
          | {
              type: 'style.add'
              style: string
            }
          | {
              type: 'style.remove'
              style: string
            }
          | {
              type: 'style.toggle'
              style: string
            }
          | {
              type: 'text block.set'
              at: [KeyedSegment]
              level?: number
              listItem?: string
              style?: string
            }
          | {
              type: 'text block.unset'
              at: [KeyedSegment]
              props: Array<'level' | 'listItem' | 'style'>
            }
          | ({
              type: 'serialization.failure'
              mimeType: `${string}/${string}`
              reason: string
            } & {
              dataTransfer: DataTransfer
            })
          | ({
              type: 'serialization.success'
              data: string
              mimeType: `${string}/${string}`
              originEvent: 'copy' | 'cut' | 'unknown'
            } & {
              dataTransfer: DataTransfer
            })
          | ({
              type: 'deserialization.failure'
              mimeType: `${string}/${string}`
              reason: string
            } & {
              dataTransfer: DataTransfer
            })
          | ({
              type: 'deserialization.success'
              data: Array<PortableTextBlock>
              mimeType: `${string}/${string}`
            } & {
              dataTransfer: DataTransfer
            })
          | PatchEvent
          | MutationEvent
          | PatchesEvent
          | {
              type: 'blurred'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'done loading'
            }
          | {
              type: 'editable'
            }
          | {
              type: 'error'
              name: string
              description: string
              data: unknown
            }
          | {
              type: 'focused'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'invalid value'
              resolution: InvalidValueResolution | null
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'loading'
            }
          | {
              type: 'read only'
            }
          | {
              type: 'ready'
            }
          | {
              type: 'selection'
              selection: EditorSelection
            }
          | {
              type: 'value changed'
              value: Array<PortableTextBlock> | undefined
            }
          | UnsetEvent
          | {
              type: 'custom.*'
              event: CustomBehaviorEvent
            }
        >
      }
      readonly 'add behavior': {
        readonly actions: 'add behavior to context'
      }
      readonly 'remove behavior': {
        readonly actions: 'remove behavior from context'
      }
      readonly 'patches': {
        readonly actions: ActionFunction<
          {
            behaviors: Set<Behavior>
            converters: Set<Converter>
            keyGenerator: () => string
            pendingEvents: Array<PatchEvent | MutationEvent>
            schema: EditorSchema
            initialReadOnly: boolean
            maxBlocks: number | undefined
            selection: EditorSelection
            value: Array<PortableTextBlock> | undefined
          },
          PatchesEvent,
          | {
              type: 'annotation.add'
              annotation: {
                name: string
                value: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'annotation.remove'
              annotation: {
                name: string
              }
            }
          | {
              type: 'annotation.toggle'
              annotation: {
                name: string
                value: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              [props: string]: unknown
              type: 'block.set'
              at: [KeyedSegment]
            }
          | {
              type: 'block.unset'
              at: [KeyedSegment]
              props: Array<string>
            }
          | {
              type: 'blur'
            }
          | {
              type: 'data transfer.set'
              data: string
              dataTransfer: DataTransfer
              mimeType: MIMEType_2
            }
          | {
              type: 'decorator.add'
              decorator: string
              selection?: NonNullable<EditorSelection>
            }
          | {
              type: 'decorator.remove'
              decorator: string
            }
          | {
              type: 'decorator.toggle'
              decorator: string
            }
          | {
              type: 'delete'
              selection: NonNullable<EditorSelection>
            }
          | {
              type: 'delete.backward'
              unit: TextUnit
            }
          | {
              type: 'delete.block'
              blockPath: [KeyedSegment]
            }
          | {
              type: 'delete.forward'
              unit: TextUnit
            }
          | {
              type: 'delete.text'
              anchor: BlockOffset_2
              focus: BlockOffset_2
            }
          | {
              type: 'focus'
            }
          | {
              type: 'history.redo'
            }
          | {
              type: 'history.undo'
            }
          | {
              type: 'insert.blocks'
              blocks: Array<PortableTextBlock>
            }
          | {
              type: 'insert.block object'
              placement: 'auto' | 'after' | 'before'
              blockObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'insert.inline object'
              inlineObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'insert.break'
            }
          | {
              type: 'insert.soft break'
            }
          | {
              type: 'insert.block'
              block: PortableTextBlock
              placement: 'auto' | 'after' | 'before'
            }
          | {
              type: 'insert.span'
              text: string
              annotations?: Array<{
                name: string
                value: {
                  [prop: string]: unknown
                }
              }>
              decorators?: Array<string>
            }
          | {
              type: 'insert.text'
              text: string
              options?: TextInsertTextOptions
            }
          | {
              type: 'insert.text block'
              placement: 'auto' | 'after' | 'before'
              textBlock?: {
                children?: PortableTextTextBlock['children']
              }
            }
          | {
              type: 'list item.add'
              listItem: string
            }
          | {
              type: 'list item.remove'
              listItem: string
            }
          | {
              type: 'list item.toggle'
              listItem: string
            }
          | {
              type: 'move.block'
              at: [KeyedSegment]
              to: [KeyedSegment]
            }
          | {
              type: 'move.block down'
              at: [KeyedSegment]
            }
          | {
              type: 'move.block up'
              at: [KeyedSegment]
            }
          | {
              type: 'select'
              selection: EditorSelection
            }
          | {
              type: 'select.previous block'
            }
          | {
              type: 'select.next block'
            }
          | {
              type: 'style.add'
              style: string
            }
          | {
              type: 'style.remove'
              style: string
            }
          | {
              type: 'style.toggle'
              style: string
            }
          | {
              type: 'text block.set'
              at: [KeyedSegment]
              level?: number
              listItem?: string
              style?: string
            }
          | {
              type: 'text block.unset'
              at: [KeyedSegment]
              props: Array<'level' | 'listItem' | 'style'>
            }
          | ({
              type: 'serialization.failure'
              mimeType: `${string}/${string}`
              reason: string
            } & {
              dataTransfer: DataTransfer
            })
          | ({
              type: 'serialization.success'
              data: string
              mimeType: `${string}/${string}`
              originEvent: 'copy' | 'cut' | 'unknown'
            } & {
              dataTransfer: DataTransfer
            })
          | ({
              type: 'deserialization.failure'
              mimeType: `${string}/${string}`
              reason: string
            } & {
              dataTransfer: DataTransfer
            })
          | ({
              type: 'deserialization.success'
              data: Array<PortableTextBlock>
              mimeType: `${string}/${string}`
            } & {
              dataTransfer: DataTransfer
            })
          | PatchEvent
          | MutationEvent
          | {
              type: 'normalizing'
            }
          | {
              type: 'done normalizing'
            }
          | {
              type: 'done syncing initial value'
            }
          | {
              type: 'behavior event'
              behaviorEvent: SyntheticBehaviorEvent | NativeBehaviorEvent
              editor: PortableTextSlateEditor
              defaultActionCallback?: () => void
              nativeEvent?: {
                preventDefault: () => void
              }
            }
          | {
              type: 'custom behavior event'
              behaviorEvent: CustomBehaviorEvent
              editor: PortableTextSlateEditor
              nativeEvent?: {
                preventDefault: () => void
              }
            }
          | CustomBehaviorEvent
          | {
              type: 'add behavior'
              behavior: Behavior
            }
          | {
              type: 'remove behavior'
              behavior: Behavior
            }
          | {
              type: 'update readOnly'
              readOnly: boolean
            }
          | {
              type: 'update schema'
              schema: EditorSchema
            }
          | {
              type: 'update behaviors'
              behaviors: Array<Behavior>
            }
          | {
              type: 'update key generator'
              keyGenerator: () => string
            }
          | {
              type: 'update value'
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'update maxBlocks'
              maxBlocks: number | undefined
            }
          | PatchesEvent
          | {
              type: 'notify.patch'
              patch: Patch
            }
          | {
              type: 'notify.mutation'
              patches: Array<Patch>
              snapshot: Array<PortableTextBlock> | undefined
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'notify.blurred'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'notify.done loading'
            }
          | {
              type: 'notify.editable'
            }
          | {
              type: 'notify.error'
              name: string
              description: string
              data: unknown
            }
          | {
              type: 'notify.focused'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'notify.invalid value'
              resolution: InvalidValueResolution | null
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'notify.loading'
            }
          | {
              type: 'notify.read only'
            }
          | {
              type: 'notify.ready'
            }
          | {
              type: 'notify.selection'
              selection: EditorSelection
            }
          | {
              type: 'notify.value changed'
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'notify.unset'
              previousValue: Array<PortableTextBlock>
            },
          undefined,
          never,
          never,
          never,
          never,
          | {
              type: 'annotation.add'
              annotation: {
                name: string
                value: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'annotation.remove'
              annotation: {
                name: string
              }
            }
          | {
              type: 'annotation.toggle'
              annotation: {
                name: string
                value: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              [props: string]: unknown
              type: 'block.set'
              at: [KeyedSegment]
            }
          | {
              type: 'block.unset'
              at: [KeyedSegment]
              props: Array<string>
            }
          | {
              type: 'blur'
            }
          | {
              type: 'data transfer.set'
              data: string
              dataTransfer: DataTransfer
              mimeType: MIMEType_2
            }
          | {
              type: 'decorator.add'
              decorator: string
              selection?: NonNullable<EditorSelection>
            }
          | {
              type: 'decorator.remove'
              decorator: string
            }
          | {
              type: 'decorator.toggle'
              decorator: string
            }
          | {
              type: 'delete'
              selection: NonNullable<EditorSelection>
            }
          | {
              type: 'delete.backward'
              unit: TextUnit
            }
          | {
              type: 'delete.block'
              blockPath: [KeyedSegment]
            }
          | {
              type: 'delete.forward'
              unit: TextUnit
            }
          | {
              type: 'delete.text'
              anchor: BlockOffset_2
              focus: BlockOffset_2
            }
          | {
              type: 'focus'
            }
          | {
              type: 'history.redo'
            }
          | {
              type: 'history.undo'
            }
          | {
              type: 'insert.blocks'
              blocks: Array<PortableTextBlock>
            }
          | {
              type: 'insert.block object'
              placement: 'auto' | 'after' | 'before'
              blockObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'insert.inline object'
              inlineObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'insert.break'
            }
          | {
              type: 'insert.soft break'
            }
          | {
              type: 'insert.block'
              block: PortableTextBlock
              placement: 'auto' | 'after' | 'before'
            }
          | {
              type: 'insert.span'
              text: string
              annotations?: Array<{
                name: string
                value: {
                  [prop: string]: unknown
                }
              }>
              decorators?: Array<string>
            }
          | {
              type: 'insert.text'
              text: string
              options?: TextInsertTextOptions
            }
          | {
              type: 'insert.text block'
              placement: 'auto' | 'after' | 'before'
              textBlock?: {
                children?: PortableTextTextBlock['children']
              }
            }
          | {
              type: 'list item.add'
              listItem: string
            }
          | {
              type: 'list item.remove'
              listItem: string
            }
          | {
              type: 'list item.toggle'
              listItem: string
            }
          | {
              type: 'move.block'
              at: [KeyedSegment]
              to: [KeyedSegment]
            }
          | {
              type: 'move.block down'
              at: [KeyedSegment]
            }
          | {
              type: 'move.block up'
              at: [KeyedSegment]
            }
          | {
              type: 'select'
              selection: EditorSelection
            }
          | {
              type: 'select.previous block'
            }
          | {
              type: 'select.next block'
            }
          | {
              type: 'style.add'
              style: string
            }
          | {
              type: 'style.remove'
              style: string
            }
          | {
              type: 'style.toggle'
              style: string
            }
          | {
              type: 'text block.set'
              at: [KeyedSegment]
              level?: number
              listItem?: string
              style?: string
            }
          | {
              type: 'text block.unset'
              at: [KeyedSegment]
              props: Array<'level' | 'listItem' | 'style'>
            }
          | ({
              type: 'serialization.failure'
              mimeType: `${string}/${string}`
              reason: string
            } & {
              dataTransfer: DataTransfer
            })
          | ({
              type: 'serialization.success'
              data: string
              mimeType: `${string}/${string}`
              originEvent: 'copy' | 'cut' | 'unknown'
            } & {
              dataTransfer: DataTransfer
            })
          | ({
              type: 'deserialization.failure'
              mimeType: `${string}/${string}`
              reason: string
            } & {
              dataTransfer: DataTransfer
            })
          | ({
              type: 'deserialization.success'
              data: Array<PortableTextBlock>
              mimeType: `${string}/${string}`
            } & {
              dataTransfer: DataTransfer
            })
          | PatchEvent
          | MutationEvent
          | PatchesEvent
          | {
              type: 'blurred'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'done loading'
            }
          | {
              type: 'editable'
            }
          | {
              type: 'error'
              name: string
              description: string
              data: unknown
            }
          | {
              type: 'focused'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'invalid value'
              resolution: InvalidValueResolution | null
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'loading'
            }
          | {
              type: 'read only'
            }
          | {
              type: 'ready'
            }
          | {
              type: 'selection'
              selection: EditorSelection
            }
          | {
              type: 'value changed'
              value: Array<PortableTextBlock> | undefined
            }
          | UnsetEvent
          | {
              type: 'custom.*'
              event: CustomBehaviorEvent
            }
        >
      }
      readonly 'update behaviors': {
        readonly actions: 'assign behaviors'
      }
      readonly 'update key generator': {
        readonly actions: ActionFunction<
          {
            behaviors: Set<Behavior>
            converters: Set<Converter>
            keyGenerator: () => string
            pendingEvents: Array<PatchEvent | MutationEvent>
            schema: EditorSchema
            initialReadOnly: boolean
            maxBlocks: number | undefined
            selection: EditorSelection
            value: Array<PortableTextBlock> | undefined
          },
          {
            type: 'update key generator'
            keyGenerator: () => string
          },
          | {
              type: 'annotation.add'
              annotation: {
                name: string
                value: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'annotation.remove'
              annotation: {
                name: string
              }
            }
          | {
              type: 'annotation.toggle'
              annotation: {
                name: string
                value: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              [props: string]: unknown
              type: 'block.set'
              at: [KeyedSegment]
            }
          | {
              type: 'block.unset'
              at: [KeyedSegment]
              props: Array<string>
            }
          | {
              type: 'blur'
            }
          | {
              type: 'data transfer.set'
              data: string
              dataTransfer: DataTransfer
              mimeType: MIMEType_2
            }
          | {
              type: 'decorator.add'
              decorator: string
              selection?: NonNullable<EditorSelection>
            }
          | {
              type: 'decorator.remove'
              decorator: string
            }
          | {
              type: 'decorator.toggle'
              decorator: string
            }
          | {
              type: 'delete'
              selection: NonNullable<EditorSelection>
            }
          | {
              type: 'delete.backward'
              unit: TextUnit
            }
          | {
              type: 'delete.block'
              blockPath: [KeyedSegment]
            }
          | {
              type: 'delete.forward'
              unit: TextUnit
            }
          | {
              type: 'delete.text'
              anchor: BlockOffset_2
              focus: BlockOffset_2
            }
          | {
              type: 'focus'
            }
          | {
              type: 'history.redo'
            }
          | {
              type: 'history.undo'
            }
          | {
              type: 'insert.blocks'
              blocks: Array<PortableTextBlock>
            }
          | {
              type: 'insert.block object'
              placement: 'auto' | 'after' | 'before'
              blockObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'insert.inline object'
              inlineObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'insert.break'
            }
          | {
              type: 'insert.soft break'
            }
          | {
              type: 'insert.block'
              block: PortableTextBlock
              placement: 'auto' | 'after' | 'before'
            }
          | {
              type: 'insert.span'
              text: string
              annotations?: Array<{
                name: string
                value: {
                  [prop: string]: unknown
                }
              }>
              decorators?: Array<string>
            }
          | {
              type: 'insert.text'
              text: string
              options?: TextInsertTextOptions
            }
          | {
              type: 'insert.text block'
              placement: 'auto' | 'after' | 'before'
              textBlock?: {
                children?: PortableTextTextBlock['children']
              }
            }
          | {
              type: 'list item.add'
              listItem: string
            }
          | {
              type: 'list item.remove'
              listItem: string
            }
          | {
              type: 'list item.toggle'
              listItem: string
            }
          | {
              type: 'move.block'
              at: [KeyedSegment]
              to: [KeyedSegment]
            }
          | {
              type: 'move.block down'
              at: [KeyedSegment]
            }
          | {
              type: 'move.block up'
              at: [KeyedSegment]
            }
          | {
              type: 'select'
              selection: EditorSelection
            }
          | {
              type: 'select.previous block'
            }
          | {
              type: 'select.next block'
            }
          | {
              type: 'style.add'
              style: string
            }
          | {
              type: 'style.remove'
              style: string
            }
          | {
              type: 'style.toggle'
              style: string
            }
          | {
              type: 'text block.set'
              at: [KeyedSegment]
              level?: number
              listItem?: string
              style?: string
            }
          | {
              type: 'text block.unset'
              at: [KeyedSegment]
              props: Array<'level' | 'listItem' | 'style'>
            }
          | ({
              type: 'serialization.failure'
              mimeType: `${string}/${string}`
              reason: string
            } & {
              dataTransfer: DataTransfer
            })
          | ({
              type: 'serialization.success'
              data: string
              mimeType: `${string}/${string}`
              originEvent: 'copy' | 'cut' | 'unknown'
            } & {
              dataTransfer: DataTransfer
            })
          | ({
              type: 'deserialization.failure'
              mimeType: `${string}/${string}`
              reason: string
            } & {
              dataTransfer: DataTransfer
            })
          | ({
              type: 'deserialization.success'
              data: Array<PortableTextBlock>
              mimeType: `${string}/${string}`
            } & {
              dataTransfer: DataTransfer
            })
          | PatchEvent
          | MutationEvent
          | {
              type: 'normalizing'
            }
          | {
              type: 'done normalizing'
            }
          | {
              type: 'done syncing initial value'
            }
          | {
              type: 'behavior event'
              behaviorEvent: SyntheticBehaviorEvent | NativeBehaviorEvent
              editor: PortableTextSlateEditor
              defaultActionCallback?: () => void
              nativeEvent?: {
                preventDefault: () => void
              }
            }
          | {
              type: 'custom behavior event'
              behaviorEvent: CustomBehaviorEvent
              editor: PortableTextSlateEditor
              nativeEvent?: {
                preventDefault: () => void
              }
            }
          | CustomBehaviorEvent
          | {
              type: 'add behavior'
              behavior: Behavior
            }
          | {
              type: 'remove behavior'
              behavior: Behavior
            }
          | {
              type: 'update readOnly'
              readOnly: boolean
            }
          | {
              type: 'update schema'
              schema: EditorSchema
            }
          | {
              type: 'update behaviors'
              behaviors: Array<Behavior>
            }
          | {
              type: 'update key generator'
              keyGenerator: () => string
            }
          | {
              type: 'update value'
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'update maxBlocks'
              maxBlocks: number | undefined
            }
          | PatchesEvent
          | {
              type: 'notify.patch'
              patch: Patch
            }
          | {
              type: 'notify.mutation'
              patches: Array<Patch>
              snapshot: Array<PortableTextBlock> | undefined
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'notify.blurred'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'notify.done loading'
            }
          | {
              type: 'notify.editable'
            }
          | {
              type: 'notify.error'
              name: string
              description: string
              data: unknown
            }
          | {
              type: 'notify.focused'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'notify.invalid value'
              resolution: InvalidValueResolution | null
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'notify.loading'
            }
          | {
              type: 'notify.read only'
            }
          | {
              type: 'notify.ready'
            }
          | {
              type: 'notify.selection'
              selection: EditorSelection
            }
          | {
              type: 'notify.value changed'
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'notify.unset'
              previousValue: Array<PortableTextBlock>
            },
          undefined,
          never,
          never,
          never,
          never,
          never
        >
      }
      readonly 'update schema': {
        readonly actions: 'assign schema'
      }
      readonly 'update value': {
        readonly actions: ActionFunction<
          {
            behaviors: Set<Behavior>
            converters: Set<Converter>
            keyGenerator: () => string
            pendingEvents: Array<PatchEvent | MutationEvent>
            schema: EditorSchema
            initialReadOnly: boolean
            maxBlocks: number | undefined
            selection: EditorSelection
            value: Array<PortableTextBlock> | undefined
          },
          {
            type: 'update value'
            value: Array<PortableTextBlock> | undefined
          },
          | {
              type: 'annotation.add'
              annotation: {
                name: string
                value: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'annotation.remove'
              annotation: {
                name: string
              }
            }
          | {
              type: 'annotation.toggle'
              annotation: {
                name: string
                value: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              [props: string]: unknown
              type: 'block.set'
              at: [KeyedSegment]
            }
          | {
              type: 'block.unset'
              at: [KeyedSegment]
              props: Array<string>
            }
          | {
              type: 'blur'
            }
          | {
              type: 'data transfer.set'
              data: string
              dataTransfer: DataTransfer
              mimeType: MIMEType_2
            }
          | {
              type: 'decorator.add'
              decorator: string
              selection?: NonNullable<EditorSelection>
            }
          | {
              type: 'decorator.remove'
              decorator: string
            }
          | {
              type: 'decorator.toggle'
              decorator: string
            }
          | {
              type: 'delete'
              selection: NonNullable<EditorSelection>
            }
          | {
              type: 'delete.backward'
              unit: TextUnit
            }
          | {
              type: 'delete.block'
              blockPath: [KeyedSegment]
            }
          | {
              type: 'delete.forward'
              unit: TextUnit
            }
          | {
              type: 'delete.text'
              anchor: BlockOffset_2
              focus: BlockOffset_2
            }
          | {
              type: 'focus'
            }
          | {
              type: 'history.redo'
            }
          | {
              type: 'history.undo'
            }
          | {
              type: 'insert.blocks'
              blocks: Array<PortableTextBlock>
            }
          | {
              type: 'insert.block object'
              placement: 'auto' | 'after' | 'before'
              blockObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'insert.inline object'
              inlineObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'insert.break'
            }
          | {
              type: 'insert.soft break'
            }
          | {
              type: 'insert.block'
              block: PortableTextBlock
              placement: 'auto' | 'after' | 'before'
            }
          | {
              type: 'insert.span'
              text: string
              annotations?: Array<{
                name: string
                value: {
                  [prop: string]: unknown
                }
              }>
              decorators?: Array<string>
            }
          | {
              type: 'insert.text'
              text: string
              options?: TextInsertTextOptions
            }
          | {
              type: 'insert.text block'
              placement: 'auto' | 'after' | 'before'
              textBlock?: {
                children?: PortableTextTextBlock['children']
              }
            }
          | {
              type: 'list item.add'
              listItem: string
            }
          | {
              type: 'list item.remove'
              listItem: string
            }
          | {
              type: 'list item.toggle'
              listItem: string
            }
          | {
              type: 'move.block'
              at: [KeyedSegment]
              to: [KeyedSegment]
            }
          | {
              type: 'move.block down'
              at: [KeyedSegment]
            }
          | {
              type: 'move.block up'
              at: [KeyedSegment]
            }
          | {
              type: 'select'
              selection: EditorSelection
            }
          | {
              type: 'select.previous block'
            }
          | {
              type: 'select.next block'
            }
          | {
              type: 'style.add'
              style: string
            }
          | {
              type: 'style.remove'
              style: string
            }
          | {
              type: 'style.toggle'
              style: string
            }
          | {
              type: 'text block.set'
              at: [KeyedSegment]
              level?: number
              listItem?: string
              style?: string
            }
          | {
              type: 'text block.unset'
              at: [KeyedSegment]
              props: Array<'level' | 'listItem' | 'style'>
            }
          | ({
              type: 'serialization.failure'
              mimeType: `${string}/${string}`
              reason: string
            } & {
              dataTransfer: DataTransfer
            })
          | ({
              type: 'serialization.success'
              data: string
              mimeType: `${string}/${string}`
              originEvent: 'copy' | 'cut' | 'unknown'
            } & {
              dataTransfer: DataTransfer
            })
          | ({
              type: 'deserialization.failure'
              mimeType: `${string}/${string}`
              reason: string
            } & {
              dataTransfer: DataTransfer
            })
          | ({
              type: 'deserialization.success'
              data: Array<PortableTextBlock>
              mimeType: `${string}/${string}`
            } & {
              dataTransfer: DataTransfer
            })
          | PatchEvent
          | MutationEvent
          | {
              type: 'normalizing'
            }
          | {
              type: 'done normalizing'
            }
          | {
              type: 'done syncing initial value'
            }
          | {
              type: 'behavior event'
              behaviorEvent: SyntheticBehaviorEvent | NativeBehaviorEvent
              editor: PortableTextSlateEditor
              defaultActionCallback?: () => void
              nativeEvent?: {
                preventDefault: () => void
              }
            }
          | {
              type: 'custom behavior event'
              behaviorEvent: CustomBehaviorEvent
              editor: PortableTextSlateEditor
              nativeEvent?: {
                preventDefault: () => void
              }
            }
          | CustomBehaviorEvent
          | {
              type: 'add behavior'
              behavior: Behavior
            }
          | {
              type: 'remove behavior'
              behavior: Behavior
            }
          | {
              type: 'update readOnly'
              readOnly: boolean
            }
          | {
              type: 'update schema'
              schema: EditorSchema
            }
          | {
              type: 'update behaviors'
              behaviors: Array<Behavior>
            }
          | {
              type: 'update key generator'
              keyGenerator: () => string
            }
          | {
              type: 'update value'
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'update maxBlocks'
              maxBlocks: number | undefined
            }
          | PatchesEvent
          | {
              type: 'notify.patch'
              patch: Patch
            }
          | {
              type: 'notify.mutation'
              patches: Array<Patch>
              snapshot: Array<PortableTextBlock> | undefined
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'notify.blurred'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'notify.done loading'
            }
          | {
              type: 'notify.editable'
            }
          | {
              type: 'notify.error'
              name: string
              description: string
              data: unknown
            }
          | {
              type: 'notify.focused'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'notify.invalid value'
              resolution: InvalidValueResolution | null
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'notify.loading'
            }
          | {
              type: 'notify.read only'
            }
          | {
              type: 'notify.ready'
            }
          | {
              type: 'notify.selection'
              selection: EditorSelection
            }
          | {
              type: 'notify.value changed'
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'notify.unset'
              previousValue: Array<PortableTextBlock>
            },
          undefined,
          never,
          never,
          never,
          never,
          never
        >
      }
      readonly 'update maxBlocks': {
        readonly actions: ActionFunction<
          {
            behaviors: Set<Behavior>
            converters: Set<Converter>
            keyGenerator: () => string
            pendingEvents: Array<PatchEvent | MutationEvent>
            schema: EditorSchema
            initialReadOnly: boolean
            maxBlocks: number | undefined
            selection: EditorSelection
            value: Array<PortableTextBlock> | undefined
          },
          {
            type: 'update maxBlocks'
            maxBlocks: number | undefined
          },
          | {
              type: 'annotation.add'
              annotation: {
                name: string
                value: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'annotation.remove'
              annotation: {
                name: string
              }
            }
          | {
              type: 'annotation.toggle'
              annotation: {
                name: string
                value: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              [props: string]: unknown
              type: 'block.set'
              at: [KeyedSegment]
            }
          | {
              type: 'block.unset'
              at: [KeyedSegment]
              props: Array<string>
            }
          | {
              type: 'blur'
            }
          | {
              type: 'data transfer.set'
              data: string
              dataTransfer: DataTransfer
              mimeType: MIMEType_2
            }
          | {
              type: 'decorator.add'
              decorator: string
              selection?: NonNullable<EditorSelection>
            }
          | {
              type: 'decorator.remove'
              decorator: string
            }
          | {
              type: 'decorator.toggle'
              decorator: string
            }
          | {
              type: 'delete'
              selection: NonNullable<EditorSelection>
            }
          | {
              type: 'delete.backward'
              unit: TextUnit
            }
          | {
              type: 'delete.block'
              blockPath: [KeyedSegment]
            }
          | {
              type: 'delete.forward'
              unit: TextUnit
            }
          | {
              type: 'delete.text'
              anchor: BlockOffset_2
              focus: BlockOffset_2
            }
          | {
              type: 'focus'
            }
          | {
              type: 'history.redo'
            }
          | {
              type: 'history.undo'
            }
          | {
              type: 'insert.blocks'
              blocks: Array<PortableTextBlock>
            }
          | {
              type: 'insert.block object'
              placement: 'auto' | 'after' | 'before'
              blockObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'insert.inline object'
              inlineObject: {
                name: string
                value?: {
                  [prop: string]: unknown
                }
              }
            }
          | {
              type: 'insert.break'
            }
          | {
              type: 'insert.soft break'
            }
          | {
              type: 'insert.block'
              block: PortableTextBlock
              placement: 'auto' | 'after' | 'before'
            }
          | {
              type: 'insert.span'
              text: string
              annotations?: Array<{
                name: string
                value: {
                  [prop: string]: unknown
                }
              }>
              decorators?: Array<string>
            }
          | {
              type: 'insert.text'
              text: string
              options?: TextInsertTextOptions
            }
          | {
              type: 'insert.text block'
              placement: 'auto' | 'after' | 'before'
              textBlock?: {
                children?: PortableTextTextBlock['children']
              }
            }
          | {
              type: 'list item.add'
              listItem: string
            }
          | {
              type: 'list item.remove'
              listItem: string
            }
          | {
              type: 'list item.toggle'
              listItem: string
            }
          | {
              type: 'move.block'
              at: [KeyedSegment]
              to: [KeyedSegment]
            }
          | {
              type: 'move.block down'
              at: [KeyedSegment]
            }
          | {
              type: 'move.block up'
              at: [KeyedSegment]
            }
          | {
              type: 'select'
              selection: EditorSelection
            }
          | {
              type: 'select.previous block'
            }
          | {
              type: 'select.next block'
            }
          | {
              type: 'style.add'
              style: string
            }
          | {
              type: 'style.remove'
              style: string
            }
          | {
              type: 'style.toggle'
              style: string
            }
          | {
              type: 'text block.set'
              at: [KeyedSegment]
              level?: number
              listItem?: string
              style?: string
            }
          | {
              type: 'text block.unset'
              at: [KeyedSegment]
              props: Array<'level' | 'listItem' | 'style'>
            }
          | ({
              type: 'serialization.failure'
              mimeType: `${string}/${string}`
              reason: string
            } & {
              dataTransfer: DataTransfer
            })
          | ({
              type: 'serialization.success'
              data: string
              mimeType: `${string}/${string}`
              originEvent: 'copy' | 'cut' | 'unknown'
            } & {
              dataTransfer: DataTransfer
            })
          | ({
              type: 'deserialization.failure'
              mimeType: `${string}/${string}`
              reason: string
            } & {
              dataTransfer: DataTransfer
            })
          | ({
              type: 'deserialization.success'
              data: Array<PortableTextBlock>
              mimeType: `${string}/${string}`
            } & {
              dataTransfer: DataTransfer
            })
          | PatchEvent
          | MutationEvent
          | {
              type: 'normalizing'
            }
          | {
              type: 'done normalizing'
            }
          | {
              type: 'done syncing initial value'
            }
          | {
              type: 'behavior event'
              behaviorEvent: SyntheticBehaviorEvent | NativeBehaviorEvent
              editor: PortableTextSlateEditor
              defaultActionCallback?: () => void
              nativeEvent?: {
                preventDefault: () => void
              }
            }
          | {
              type: 'custom behavior event'
              behaviorEvent: CustomBehaviorEvent
              editor: PortableTextSlateEditor
              nativeEvent?: {
                preventDefault: () => void
              }
            }
          | CustomBehaviorEvent
          | {
              type: 'add behavior'
              behavior: Behavior
            }
          | {
              type: 'remove behavior'
              behavior: Behavior
            }
          | {
              type: 'update readOnly'
              readOnly: boolean
            }
          | {
              type: 'update schema'
              schema: EditorSchema
            }
          | {
              type: 'update behaviors'
              behaviors: Array<Behavior>
            }
          | {
              type: 'update key generator'
              keyGenerator: () => string
            }
          | {
              type: 'update value'
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'update maxBlocks'
              maxBlocks: number | undefined
            }
          | PatchesEvent
          | {
              type: 'notify.patch'
              patch: Patch
            }
          | {
              type: 'notify.mutation'
              patches: Array<Patch>
              snapshot: Array<PortableTextBlock> | undefined
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'notify.blurred'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'notify.done loading'
            }
          | {
              type: 'notify.editable'
            }
          | {
              type: 'notify.error'
              name: string
              description: string
              data: unknown
            }
          | {
              type: 'notify.focused'
              event: FocusEvent_2<HTMLDivElement, Element>
            }
          | {
              type: 'notify.invalid value'
              resolution: InvalidValueResolution | null
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'notify.loading'
            }
          | {
              type: 'notify.read only'
            }
          | {
              type: 'notify.ready'
            }
          | {
              type: 'notify.selection'
              selection: EditorSelection
            }
          | {
              type: 'notify.value changed'
              value: Array<PortableTextBlock> | undefined
            }
          | {
              type: 'notify.unset'
              previousValue: Array<PortableTextBlock>
            },
          undefined,
          never,
          never,
          never,
          never,
          never
        >
      }
    }
    readonly type: 'parallel'
    readonly states: {
      readonly 'edit mode': {
        readonly initial: 'read only'
        readonly states: {
          readonly 'read only': {
            readonly initial: 'determine initial edit mode'
            readonly on: {
              readonly 'behavior event': {
                readonly actions: 'handle behavior event'
                readonly guard: ({
                  event,
                }: GuardArgs<
                  {
                    behaviors: Set<Behavior>
                    converters: Set<Converter>
                    keyGenerator: () => string
                    pendingEvents: Array<PatchEvent | MutationEvent>
                    schema: EditorSchema
                    initialReadOnly: boolean
                    maxBlocks: number | undefined
                    selection: EditorSelection
                    value: Array<PortableTextBlock> | undefined
                  },
                  {
                    type: 'behavior event'
                    behaviorEvent: SyntheticBehaviorEvent | NativeBehaviorEvent
                    editor: PortableTextSlateEditor
                    defaultActionCallback?: () => void
                    nativeEvent?: {
                      preventDefault: () => void
                    }
                  }
                >) => boolean
              }
            }
            readonly states: {
              readonly 'determine initial edit mode': {
                readonly on: {
                  readonly 'done syncing initial value': readonly [
                    {
                      readonly target: '#editor.edit mode.read only.read only'
                      readonly guard: ({
                        context,
                      }: GuardArgs<
                        {
                          behaviors: Set<Behavior>
                          converters: Set<Converter>
                          keyGenerator: () => string
                          pendingEvents: Array<PatchEvent | MutationEvent>
                          schema: EditorSchema
                          initialReadOnly: boolean
                          maxBlocks: number | undefined
                          selection: EditorSelection
                          value: Array<PortableTextBlock> | undefined
                        },
                        {
                          type: 'done syncing initial value'
                        }
                      >) => boolean
                    },
                    {
                      readonly target: '#editor.edit mode.editable'
                    },
                  ]
                }
              }
              readonly 'read only': {
                readonly on: {
                  readonly 'update readOnly': {
                    readonly guard: ({
                      event,
                    }: GuardArgs<
                      {
                        behaviors: Set<Behavior>
                        converters: Set<Converter>
                        keyGenerator: () => string
                        pendingEvents: Array<PatchEvent | MutationEvent>
                        schema: EditorSchema
                        initialReadOnly: boolean
                        maxBlocks: number | undefined
                        selection: EditorSelection
                        value: Array<PortableTextBlock> | undefined
                      },
                      {
                        type: 'update readOnly'
                        readOnly: boolean
                      }
                    >) => boolean
                    readonly target: '#editor.edit mode.editable'
                    readonly actions: readonly ['emit editable']
                  }
                }
              }
            }
          }
          readonly 'editable': {
            readonly on: {
              readonly 'update readOnly': {
                readonly guard: ({
                  event,
                }: GuardArgs<
                  {
                    behaviors: Set<Behavior>
                    converters: Set<Converter>
                    keyGenerator: () => string
                    pendingEvents: Array<PatchEvent | MutationEvent>
                    schema: EditorSchema
                    initialReadOnly: boolean
                    maxBlocks: number | undefined
                    selection: EditorSelection
                    value: Array<PortableTextBlock> | undefined
                  },
                  {
                    type: 'update readOnly'
                    readOnly: boolean
                  }
                >) => boolean
                readonly target: '#editor.edit mode.read only.read only'
                readonly actions: readonly ['emit read only']
              }
              readonly 'behavior event': {
                readonly actions: 'handle behavior event'
              }
              readonly 'custom behavior event': {
                readonly actions: 'handle behavior event'
              }
              readonly 'annotation.*': {
                readonly actions: ActionFunction<
                  {
                    behaviors: Set<Behavior>
                    converters: Set<Converter>
                    keyGenerator: () => string
                    pendingEvents: Array<PatchEvent | MutationEvent>
                    schema: EditorSchema
                    initialReadOnly: boolean
                    maxBlocks: number | undefined
                    selection: EditorSelection
                    value: Array<PortableTextBlock> | undefined
                  },
                  | {
                      type: 'annotation.add'
                      annotation: {
                        name: string
                        value: {
                          [prop: string]: unknown
                        }
                      }
                    }
                  | {
                      type: 'annotation.remove'
                      annotation: {
                        name: string
                      }
                    }
                  | {
                      type: 'annotation.toggle'
                      annotation: {
                        name: string
                        value: {
                          [prop: string]: unknown
                        }
                      }
                    },
                  | {
                      type: 'annotation.add'
                      annotation: {
                        name: string
                        value: {
                          [prop: string]: unknown
                        }
                      }
                    }
                  | {
                      type: 'annotation.remove'
                      annotation: {
                        name: string
                      }
                    }
                  | {
                      type: 'annotation.toggle'
                      annotation: {
                        name: string
                        value: {
                          [prop: string]: unknown
                        }
                      }
                    }
                  | {
                      [props: string]: unknown
                      type: 'block.set'
                      at: [KeyedSegment]
                    }
                  | {
                      type: 'block.unset'
                      at: [KeyedSegment]
                      props: Array<string>
                    }
                  | {
                      type: 'blur'
                    }
                  | {
                      type: 'data transfer.set'
                      data: string
                      dataTransfer: DataTransfer
                      mimeType: MIMEType_2
                    }
                  | {
                      type: 'decorator.add'
                      decorator: string
                      selection?: NonNullable<EditorSelection>
                    }
                  | {
                      type: 'decorator.remove'
                      decorator: string
                    }
                  | {
                      type: 'decorator.toggle'
                      decorator: string
                    }
                  | {
                      type: 'delete'
                      selection: NonNullable<EditorSelection>
                    }
                  | {
                      type: 'delete.backward'
                      unit: TextUnit
                    }
                  | {
                      type: 'delete.block'
                      blockPath: [KeyedSegment]
                    }
                  | {
                      type: 'delete.forward'
                      unit: TextUnit
                    }
                  | {
                      type: 'delete.text'
                      anchor: BlockOffset_2
                      focus: BlockOffset_2
                    }
                  | {
                      type: 'focus'
                    }
                  | {
                      type: 'history.redo'
                    }
                  | {
                      type: 'history.undo'
                    }
                  | {
                      type: 'insert.blocks'
                      blocks: Array<PortableTextBlock>
                    }
                  | {
                      type: 'insert.block object'
                      placement: 'auto' | 'after' | 'before'
                      blockObject: {
                        name: string
                        value?: {
                          [prop: string]: unknown
                        }
                      }
                    }
                  | {
                      type: 'insert.inline object'
                      inlineObject: {
                        name: string
                        value?: {
                          [prop: string]: unknown
                        }
                      }
                    }
                  | {
                      type: 'insert.break'
                    }
                  | {
                      type: 'insert.soft break'
                    }
                  | {
                      type: 'insert.block'
                      block: PortableTextBlock
                      placement: 'auto' | 'after' | 'before'
                    }
                  | {
                      type: 'insert.span'
                      text: string
                      annotations?: Array<{
                        name: string
                        value: {
                          [prop: string]: unknown
                        }
                      }>
                      decorators?: Array<string>
                    }
                  | {
                      type: 'insert.text'
                      text: string
                      options?: TextInsertTextOptions
                    }
                  | {
                      type: 'insert.text block'
                      placement: 'auto' | 'after' | 'before'
                      textBlock?: {
                        children?: PortableTextTextBlock['children']
                      }
                    }
                  | {
                      type: 'list item.add'
                      listItem: string
                    }
                  | {
                      type: 'list item.remove'
                      listItem: string
                    }
                  | {
                      type: 'list item.toggle'
                      listItem: string
                    }
                  | {
                      type: 'move.block'
                      at: [KeyedSegment]
                      to: [KeyedSegment]
                    }
                  | {
                      type: 'move.block down'
                      at: [KeyedSegment]
                    }
                  | {
                      type: 'move.block up'
                      at: [KeyedSegment]
                    }
                  | {
                      type: 'select'
                      selection: EditorSelection
                    }
                  | {
                      type: 'select.previous block'
                    }
                  | {
                      type: 'select.next block'
                    }
                  | {
                      type: 'style.add'
                      style: string
                    }
                  | {
                      type: 'style.remove'
                      style: string
                    }
                  | {
                      type: 'style.toggle'
                      style: string
                    }
                  | {
                      type: 'text block.set'
                      at: [KeyedSegment]
                      level?: number
                      listItem?: string
                      style?: string
                    }
                  | {
                      type: 'text block.unset'
                      at: [KeyedSegment]
                      props: Array<'level' | 'listItem' | 'style'>
                    }
                  | ({
                      type: 'serialization.failure'
                      mimeType: `${string}/${string}`
                      reason: string
                    } & {
                      dataTransfer: DataTransfer
                    })
                  | ({
                      type: 'serialization.success'
                      data: string
                      mimeType: `${string}/${string}`
                      originEvent: 'copy' | 'cut' | 'unknown'
                    } & {
                      dataTransfer: DataTransfer
                    })
                  | ({
                      type: 'deserialization.failure'
                      mimeType: `${string}/${string}`
                      reason: string
                    } & {
                      dataTransfer: DataTransfer
                    })
                  | ({
                      type: 'deserialization.success'
                      data: Array<PortableTextBlock>
                      mimeType: `${string}/${string}`
                    } & {
                      dataTransfer: DataTransfer
                    })
                  | PatchEvent
                  | MutationEvent
                  | {
                      type: 'normalizing'
                    }
                  | {
                      type: 'done normalizing'
                    }
                  | {
                      type: 'done syncing initial value'
                    }
                  | {
                      type: 'behavior event'
                      behaviorEvent:
                        | SyntheticBehaviorEvent
                        | NativeBehaviorEvent
                      editor: PortableTextSlateEditor
                      defaultActionCallback?: () => void
                      nativeEvent?: {
                        preventDefault: () => void
                      }
                    }
                  | {
                      type: 'custom behavior event'
                      behaviorEvent: CustomBehaviorEvent
                      editor: PortableTextSlateEditor
                      nativeEvent?: {
                        preventDefault: () => void
                      }
                    }
                  | CustomBehaviorEvent
                  | {
                      type: 'add behavior'
                      behavior: Behavior
                    }
                  | {
                      type: 'remove behavior'
                      behavior: Behavior
                    }
                  | {
                      type: 'update readOnly'
                      readOnly: boolean
                    }
                  | {
                      type: 'update schema'
                      schema: EditorSchema
                    }
                  | {
                      type: 'update behaviors'
                      behaviors: Array<Behavior>
                    }
                  | {
                      type: 'update key generator'
                      keyGenerator: () => string
                    }
                  | {
                      type: 'update value'
                      value: Array<PortableTextBlock> | undefined
                    }
                  | {
                      type: 'update maxBlocks'
                      maxBlocks: number | undefined
                    }
                  | PatchesEvent
                  | {
                      type: 'notify.patch'
                      patch: Patch
                    }
                  | {
                      type: 'notify.mutation'
                      patches: Array<Patch>
                      snapshot: Array<PortableTextBlock> | undefined
                      value: Array<PortableTextBlock> | undefined
                    }
                  | {
                      type: 'notify.blurred'
                      event: FocusEvent_2<HTMLDivElement, Element>
                    }
                  | {
                      type: 'notify.done loading'
                    }
                  | {
                      type: 'notify.editable'
                    }
                  | {
                      type: 'notify.error'
                      name: string
                      description: string
                      data: unknown
                    }
                  | {
                      type: 'notify.focused'
                      event: FocusEvent_2<HTMLDivElement, Element>
                    }
                  | {
                      type: 'notify.invalid value'
                      resolution: InvalidValueResolution | null
                      value: Array<PortableTextBlock> | undefined
                    }
                  | {
                      type: 'notify.loading'
                    }
                  | {
                      type: 'notify.read only'
                    }
                  | {
                      type: 'notify.ready'
                    }
                  | {
                      type: 'notify.selection'
                      selection: EditorSelection
                    }
                  | {
                      type: 'notify.value changed'
                      value: Array<PortableTextBlock> | undefined
                    }
                  | {
                      type: 'notify.unset'
                      previousValue: Array<PortableTextBlock>
                    },
                  undefined,
                  never,
                  never,
                  never,
                  never,
                  | {
                      type: 'annotation.add'
                      annotation: {
                        name: string
                        value: {
                          [prop: string]: unknown
                        }
                      }
                    }
                  | {
                      type: 'annotation.remove'
                      annotation: {
                        name: string
                      }
                    }
                  | {
                      type: 'annotation.toggle'
                      annotation: {
                        name: string
                        value: {
                          [prop: string]: unknown
                        }
                      }
                    }
                  | {
                      [props: string]: unknown
                      type: 'block.set'
                      at: [KeyedSegment]
                    }
                  | {
                      type: 'block.unset'
                      at: [KeyedSegment]
                      props: Array<string>
                    }
                  | {
                      type: 'blur'
                    }
                  | {
                      type: 'data transfer.set'
                      data: string
                      dataTransfer: DataTransfer
                      mimeType: MIMEType_2
                    }
                  | {
                      type: 'decorator.add'
                      decorator: string
                      selection?: NonNullable<EditorSelection>
                    }
                  | {
                      type: 'decorator.remove'
                      decorator: string
                    }
                  | {
                      type: 'decorator.toggle'
                      decorator: string
                    }
                  | {
                      type: 'delete'
                      selection: NonNullable<EditorSelection>
                    }
                  | {
                      type: 'delete.backward'
                      unit: TextUnit
                    }
                  | {
                      type: 'delete.block'
                      blockPath: [KeyedSegment]
                    }
                  | {
                      type: 'delete.forward'
                      unit: TextUnit
                    }
                  | {
                      type: 'delete.text'
                      anchor: BlockOffset_2
                      focus: BlockOffset_2
                    }
                  | {
                      type: 'focus'
                    }
                  | {
                      type: 'history.redo'
                    }
                  | {
                      type: 'history.undo'
                    }
                  | {
                      type: 'insert.blocks'
                      blocks: Array<PortableTextBlock>
                    }
                  | {
                      type: 'insert.block object'
                      placement: 'auto' | 'after' | 'before'
                      blockObject: {
                        name: string
                        value?: {
                          [prop: string]: unknown
                        }
                      }
                    }
                  | {
                      type: 'insert.inline object'
                      inlineObject: {
                        name: string
                        value?: {
                          [prop: string]: unknown
                        }
                      }
                    }
                  | {
                      type: 'insert.break'
                    }
                  | {
                      type: 'insert.soft break'
                    }
                  | {
                      type: 'insert.block'
                      block: PortableTextBlock
                      placement: 'auto' | 'after' | 'before'
                    }
                  | {
                      type: 'insert.span'
                      text: string
                      annotations?: Array<{
                        name: string
                        value: {
                          [prop: string]: unknown
                        }
                      }>
                      decorators?: Array<string>
                    }
                  | {
                      type: 'insert.text'
                      text: string
                      options?: TextInsertTextOptions
                    }
                  | {
                      type: 'insert.text block'
                      placement: 'auto' | 'after' | 'before'
                      textBlock?: {
                        children?: PortableTextTextBlock['children']
                      }
                    }
                  | {
                      type: 'list item.add'
                      listItem: string
                    }
                  | {
                      type: 'list item.remove'
                      listItem: string
                    }
                  | {
                      type: 'list item.toggle'
                      listItem: string
                    }
                  | {
                      type: 'move.block'
                      at: [KeyedSegment]
                      to: [KeyedSegment]
                    }
                  | {
                      type: 'move.block down'
                      at: [KeyedSegment]
                    }
                  | {
                      type: 'move.block up'
                      at: [KeyedSegment]
                    }
                  | {
                      type: 'select'
                      selection: EditorSelection
                    }
                  | {
                      type: 'select.previous block'
                    }
                  | {
                      type: 'select.next block'
                    }
                  | {
                      type: 'style.add'
                      style: string
                    }
                  | {
                      type: 'style.remove'
                      style: string
                    }
                  | {
                      type: 'style.toggle'
                      style: string
                    }
                  | {
                      type: 'text block.set'
                      at: [KeyedSegment]
                      level?: number
                      listItem?: string
                      style?: string
                    }
                  | {
                      type: 'text block.unset'
                      at: [KeyedSegment]
                      props: Array<'level' | 'listItem' | 'style'>
                    }
                  | ({
                      type: 'serialization.failure'
                      mimeType: `${string}/${string}`
                      reason: string
                    } & {
                      dataTransfer: DataTransfer
                    })
                  | ({
                      type: 'serialization.success'
                      data: string
                      mimeType: `${string}/${string}`
                      originEvent: 'copy' | 'cut' | 'unknown'
                    } & {
                      dataTransfer: DataTransfer
                    })
                  | ({
                      type: 'deserialization.failure'
                      mimeType: `${string}/${string}`
                      reason: string
                    } & {
                      dataTransfer: DataTransfer
                    })
                  | ({
                      type: 'deserialization.success'
                      data: Array<PortableTextBlock>
                      mimeType: `${string}/${string}`
                    } & {
                      dataTransfer: DataTransfer
                    })
                  | PatchEvent
                  | MutationEvent
                  | PatchesEvent
                  | {
                      type: 'blurred'
                      event: FocusEvent_2<HTMLDivElement, Element>
                    }
                  | {
                      type: 'done loading'
                    }
                  | {
                      type: 'editable'
                    }
                  | {
                      type: 'error'
                      name: string
                      description: string
                      data: unknown
                    }
                  | {
                      type: 'focused'
                      event: FocusEvent_2<HTMLDivElement, Element>
                    }
                  | {
                      type: 'invalid value'
                      resolution: InvalidValueResolution | null
                      value: Array<PortableTextBlock> | undefined
                    }
                  | {
                      type: 'loading'
                    }
                  | {
                      type: 'read only'
                    }
                  | {
                      type: 'ready'
                    }
                  | {
                      type: 'selection'
                      selection: EditorSelection
                    }
                  | {
                      type: 'value changed'
                      value: Array<PortableTextBlock> | undefined
                    }
                  | UnsetEvent
                  | {
                      type: 'custom.*'
                      event: CustomBehaviorEvent
                    }
                >
              }
              readonly 'block.*': {
                readonly actions: ActionFunction<
                  {
                    behaviors: Set<Behavior>
                    converters: Set<Converter>
                    keyGenerator: () => string
                    pendingEvents: Array<PatchEvent | MutationEvent>
                    schema: EditorSchema
                    initialReadOnly: boolean
                    maxBlocks: number | undefined
                    selection: EditorSelection
                    value: Array<PortableTextBlock> | undefined
                  },
                  | {
                      [props: string]: unknown
                      type: 'block.set'
                      at: [KeyedSegment]
                    }
                  | {
                      type: 'block.unset'
                      at: [KeyedSegment]
                      props: Array<string>
                    },
                  | {
                      type: 'annotation.add'
                      annotation: {
                        name: string
                        value: {
                          [prop: string]: unknown
                        }
                      }
                    }
                  | {
                      type: 'annotation.remove'
                      annotation: {
                        name: string
                      }
                    }
                  | {
                      type: 'annotation.toggle'
                      annotation: {
                        name: string
                        value: {
                          [prop: string]: unknown
                        }
                      }
                    }
                  | {
                      [props: string]: unknown
                      type: 'block.set'
                      at: [KeyedSegment]
                    }
                  | {
                      type: 'block.unset'
                      at: [KeyedSegment]
                      props: Array<string>
                    }
                  | {
                      type: 'blur'
                    }
                  | {
                      type: 'data transfer.set'
                      data: string
                      dataTransfer: DataTransfer
                      mimeType: MIMEType_2
                    }
                  | {
                      type: 'decorator.add'
                      decorator: string
                      selection?: NonNullable<EditorSelection>
                    }
                  | {
                      type: 'decorator.remove'
                      decorator: string
                    }
                  | {
                      type: 'decorator.toggle'
                      decorator: string
                    }
                  | {
                      type: 'delete'
                      selection: NonNullable<EditorSelection>
                    }
                  | {
                      type: 'delete.backward'
                      unit: TextUnit
                    }
                  | {
                      type: 'delete.block'
                      blockPath: [KeyedSegment]
                    }
                  | {
                      type: 'delete.forward'
                      unit: TextUnit
                    }
                  | {
                      type: 'delete.text'
                      anchor: BlockOffset_2
                      focus: BlockOffset_2
                    }
                  | {
                      type: 'focus'
                    }
                  | {
                      type: 'history.redo'
                    }
                  | {
                      type: 'history.undo'
                    }
                  | {
                      type: 'insert.blocks'
                      blocks: Array<PortableTextBlock>
                    }
                  | {
                      type: 'insert.block object'
                      placement: 'auto' | 'after' | 'before'
                      blockObject: {
                        name: string
                        value?: {
                          [prop: string]: unknown
                        }
                      }
                    }
                  | {
                      type: 'insert.inline object'
                      inlineObject: {
                        name: string
                        value?: {
                          [prop: string]: unknown
                        }
                      }
                    }
                  | {
                      type: 'insert.break'
                    }
                  | {
                      type: 'insert.soft break'
                    }
                  | {
                      type: 'insert.block'
                      block: PortableTextBlock
                      placement: 'auto' | 'after' | 'before'
                    }
                  | {
                      type: 'insert.span'
                      text: string
                      annotations?: Array<{
                        name: string
                        value: {
                          [prop: string]: unknown
                        }
                      }>
                      decorators?: Array<string>
                    }
                  | {
                      type: 'insert.text'
                      text: string
                      options?: TextInsertTextOptions
                    }
                  | {
                      type: 'insert.text block'
                      placement: 'auto' | 'after' | 'before'
                      textBlock?: {
                        children?: PortableTextTextBlock['children']
                      }
                    }
                  | {
                      type: 'list item.add'
                      listItem: string
                    }
                  | {
                      type: 'list item.remove'
                      listItem: string
                    }
                  | {
                      type: 'list item.toggle'
                      listItem: string
                    }
                  | {
                      type: 'move.block'
                      at: [KeyedSegment]
                      to: [KeyedSegment]
                    }
                  | {
                      type: 'move.block down'
                      at: [KeyedSegment]
                    }
                  | {
                      type: 'move.block up'
                      at: [KeyedSegment]
                    }
                  | {
                      type: 'select'
                      selection: EditorSelection
                    }
                  | {
                      type: 'select.previous block'
                    }
                  | {
                      type: 'select.next block'
                    }
                  | {
                      type: 'style.add'
                      style: string
                    }
                  | {
                      type: 'style.remove'
                      style: string
                    }
                  | {
                      type: 'style.toggle'
                      style: string
                    }
                  | {
                      type: 'text block.set'
                      at: [KeyedSegment]
                      level?: number
                      listItem?: string
                      style?: string
                    }
                  | {
                      type: 'text block.unset'
                      at: [KeyedSegment]
                      props: Array<'level' | 'listItem' | 'style'>
                    }
                  | ({
                      type: 'serialization.failure'
                      mimeType: `${string}/${string}`
                      reason: string
                    } & {
                      dataTransfer: DataTransfer
                    })
                  | ({
                      type: 'serialization.success'
                      data: string
                      mimeType: `${string}/${string}`
                      originEvent: 'copy' | 'cut' | 'unknown'
                    } & {
                      dataTransfer: DataTransfer
                    })
                  | ({
                      type: 'deserialization.failure'
                      mimeType: `${string}/${string}`
                      reason: string
                    } & {
                      dataTransfer: DataTransfer
                    })
                  | ({
                      type: 'deserialization.success'
                      data: Array<PortableTextBlock>
                      mimeType: `${string}/${string}`
                    } & {
                      dataTransfer: DataTransfer
                    })
                  | PatchEvent
                  | MutationEvent
                  | {
                      type: 'normalizing'
                    }
                  | {
                      type: 'done normalizing'
                    }
                  | {
                      type: 'done syncing initial value'
                    }
                  | {
                      type: 'behavior event'
                      behaviorEvent:
                        | SyntheticBehaviorEvent
                        | NativeBehaviorEvent
                      editor: PortableTextSlateEditor
                      defaultActionCallback?: () => void
                      nativeEvent?: {
                        preventDefault: () => void
                      }
                    }
                  | {
                      type: 'custom behavior event'
                      behaviorEvent: CustomBehaviorEvent
                      editor: PortableTextSlateEditor
                      nativeEvent?: {
                        preventDefault: () => void
                      }
                    }
                  | CustomBehaviorEvent
                  | {
                      type: 'add behavior'
                      behavior: Behavior
                    }
                  | {
                      type: 'remove behavior'
                      behavior: Behavior
                    }
                  | {
                      type: 'update readOnly'
                      readOnly: boolean
                    }
                  | {
                      type: 'update schema'
                      schema: EditorSchema
                    }
                  | {
                      type: 'update behaviors'
                      behaviors: Array<Behavior>
                    }
                  | {
                      type: 'update key generator'
                      keyGenerator: () => string
                    }
                  | {
                      type: 'update value'
                      value: Array<PortableTextBlock> | undefined
                    }
                  | {
                      type: 'update maxBlocks'
                      maxBlocks: number | undefined
                    }
                  | PatchesEvent
                  | {
                      type: 'notify.patch'
                      patch: Patch
                    }
                  | {
                      type: 'notify.mutation'
                      patches: Array<Patch>
                      snapshot: Array<PortableTextBlock> | undefined
                      value: Array<PortableTextBlock> | undefined
                    }
                  | {
                      type: 'notify.blurred'
                      event: FocusEvent_2<HTMLDivElement, Element>
                    }
                  | {
                      type: 'notify.done loading'
                    }
                  | {
                      type: 'notify.editable'
                    }
                  | {
                      type: 'notify.error'
                      name: string
                      description: string
                      data: unknown
                    }
                  | {
                      type: 'notify.focused'
                      event: FocusEvent_2<HTMLDivElement, Element>
                    }
                  | {
                      type: 'notify.invalid value'
                      resolution: InvalidValueResolution | null
                      value: Array<PortableTextBlock> | undefined
                    }
                  | {
                      type: 'notify.loading'
                    }
                  | {
                      type: 'notify.read only'
                    }
                  | {
                      type: 'notify.ready'
                    }
                  | {
                      type: 'notify.selection'
                      selection: EditorSelection
                    }
                  | {
                      type: 'notify.value changed'
                      value: Array<PortableTextBlock> | undefined
                    }
                  | {
                      type: 'notify.unset'
                      previousValue: Array<PortableTextBlock>
                    },
                  undefined,
                  never,
                  never,
                  never,
                  never,
                  | {
                      type: 'annotation.add'
                      annotation: {
                        name: string
                        value: {
                          [prop: string]: unknown
                        }
                      }
                    }
                  | {
                      type: 'annotation.remove'
                      annotation: {
                        name: string
                      }
                    }
                  | {
                      type: 'annotation.toggle'
                      annotation: {
                        name: string
                        value: {
                          [prop: string]: unknown
                        }
                      }
                    }
                  | {
                      [props: string]: unknown
                      type: 'block.set'
                      at: [KeyedSegment]
                    }
                  | {
                      type: 'block.unset'
                      at: [KeyedSegment]
                      props: Array<string>
                    }
                  | {
                      type: 'blur'
                    }
                  | {
                      type: 'data transfer.set'
                      data: string
                      dataTransfer: DataTransfer
                      mimeType: MIMEType_2
                    }
                  | {
                      type: 'decorator.add'
                      decorator: string
                      selection?: NonNullable<EditorSelection>
                    }
                  | {
                      type: 'decorator.remove'
                      decorator: string
                    }
                  | {
                      type: 'decorator.toggle'
                      decorator: string
                    }
                  | {
                      type: 'delete'
                      selection: NonNullable<EditorSelection>
                    }
                  | {
                      type: 'delete.backward'
                      unit: TextUnit
                    }
                  | {
                      type: 'delete.block'
                      blockPath: [KeyedSegment]
                    }
                  | {
                      type: 'delete.forward'
                      unit: TextUnit
                    }
                  | {
                      type: 'delete.text'
                      anchor: BlockOffset_2
                      focus: BlockOffset_2
                    }
                  | {
                      type: 'focus'
                    }
                  | {
                      type: 'history.redo'
                    }
                  | {
                      type: 'history.undo'
                    }
                  | {
                      type: 'insert.blocks'
                      blocks: Array<PortableTextBlock>
                    }
                  | {
                      type: 'insert.block object'
                      placement: 'auto' | 'after' | 'before'
                      blockObject: {
                        name: string
                        value?: {
                          [prop: string]: unknown
                        }
                      }
                    }
                  | {
                      type: 'insert.inline object'
                      inlineObject: {
                        name: string
                        value?: {
                          [prop: string]: unknown
                        }
                      }
                    }
                  | {
                      type: 'insert.break'
                    }
                  | {
                      type: 'insert.soft break'
                    }
                  | {
                      type: 'insert.block'
                      block: PortableTextBlock
                      placement: 'auto' | 'after' | 'before'
                    }
                  | {
                      type: 'insert.span'
                      text: string
                      annotations?: Array<{
                        name: string
                        value: {
                          [prop: string]: unknown
                        }
                      }>
                      decorators?: Array<string>
                    }
                  | {
                      type: 'insert.text'
                      text: string
                      options?: TextInsertTextOptions
                    }
                  | {
                      type: 'insert.text block'
                      placement: 'auto' | 'after' | 'before'
                      textBlock?: {
                        children?: PortableTextTextBlock['children']
                      }
                    }
                  | {
                      type: 'list item.add'
                      listItem: string
                    }
                  | {
                      type: 'list item.remove'
                      listItem: string
                    }
                  | {
                      type: 'list item.toggle'
                      listItem: string
                    }
                  | {
                      type: 'move.block'
                      at: [KeyedSegment]
                      to: [KeyedSegment]
                    }
                  | {
                      type: 'move.block down'
                      at: [KeyedSegment]
                    }
                  | {
                      type: 'move.block up'
                      at: [KeyedSegment]
                    }
                  | {
                      type: 'select'
                      selection: EditorSelection
                    }
                  | {
                      type: 'select.previous block'
                    }
                  | {
                      type: 'select.next block'
                    }
                  | {
                      type: 'style.add'
                      style: string
                    }
                  | {
                      type: 'style.remove'
                      style: string
                    }
                  | {
                      type: 'style.toggle'
                      style: string
                    }
                  | {
                      type: 'text block.set'
                      at: [KeyedSegment]
                      level?: number
                      listItem?: string
                      style?: string
                    }
                  | {
                      type: 'text block.unset'
                      at: [KeyedSegment]
                      props: Array<'level' | 'listItem' | 'style'>
                    }
                  | ({
                      type: 'serialization.failure'
                      mimeType: `${string}/${string}`
                      reason: string
                    } & {
                      dataTransfer: DataTransfer
                    })
                  | ({
                      type: 'serialization.success'
                      data: string
                      mimeType: `${string}/${string}`
                      originEvent: 'copy' | 'cut' | 'unknown'
                    } & {
                      dataTransfer: DataTransfer
                    })
                  | ({
                      type: 'deserialization.failure'
                      mimeType: `${string}/${string}`
                      reason: string
                    } & {
                      dataTransfer: DataTransfer
                    })
                  | ({
                      type: 'deserialization.success'
                      data: Array<PortableTextBlock>
                      mimeType: `${string}/${string}`
                    } & {
                      dataTransfer: DataTransfer
                    })
                  | PatchEvent
                  | MutationEvent
                  | PatchesEvent
                  | {
                      type: 'blurred'
                      event: FocusEvent_2<HTMLDivElement, Element>
                    }
                  | {
                      type: 'done loading'
                    }
                  | {
                      type: 'editable'
                    }
                  | {
                      type: 'error'
                      name: string
                      description: string
                      data: unknown
                    }
                  | {
                      type: 'focused'
                      event: FocusEvent_2<HTMLDivElement, Element>
                    }
                  | {
                      type: 'invalid value'
                      resolution: InvalidValueResolution | null
                      value: Array<PortableTextBlock> | undefined
                    }
                  | {
                      type: 'loading'
                    }
                  | {
                      type: 'read only'
                    }
                  | {
                      type: 'ready'
                    }
                  | {
                      type: 'selection'
                      selection: EditorSelection
                    }
                  | {
                      type: 'value changed'
                      value: Array<PortableTextBlock> | undefined
                    }
                  | UnsetEvent
                  | {
                      type: 'custom.*'
                      event: CustomBehaviorEvent
                    }
                >
              }
              readonly 'blur': {
                readonly actions: ActionFunction<
                  {
                    behaviors: Set<Behavior>
                    converters: Set<Converter>
                    keyGenerator: () => string
                    pendingEvents: Array<PatchEvent | MutationEvent>
                    schema: EditorSchema
                    initialReadOnly: boolean
                    maxBlocks: number | undefined
                    selection: EditorSelection
                    value: Array<PortableTextBlock> | undefined
                  },
                  {
                    type: 'blur'
                  },
                  | {
                      type: 'annotation.add'
                      annotation: {
                        name: string
                        value: {
                          [prop: string]: unknown
                        }
                      }
                    }
                  | {
                      type: 'annotation.remove'
                      annotation: {
                        name: string
                      }
                    }
                  | {
                      type: 'annotation.toggle'
                      annotation: {
                        name: string
                        value: {
                          [prop: string]: unknown
                        }
                      }
                    }
                  | {
                      [props: string]: unknown
                      type: 'block.set'
                      at: [KeyedSegment]
                    }
                  | {
                      type: 'block.unset'
                      at: [KeyedSegment]
                      props: Array<string>
                    }
                  | {
                      type: 'blur'
                    }
                  | {
                      type: 'data transfer.set'
                      data: string
                      dataTransfer: DataTransfer
                      mimeType: MIMEType_2
                    }
                  | {
                      type: 'decorator.add'
                      decorator: string
                      selection?: NonNullable<EditorSelection>
                    }
                  | {
                      type: 'decorator.remove'
                      decorator: string
                    }
                  | {
                      type: 'decorator.toggle'
                      decorator: string
                    }
                  | {
                      type: 'delete'
                      selection: NonNullable<EditorSelection>
                    }
                  | {
                      type: 'delete.backward'
                      unit: TextUnit
                    }
                  | {
                      type: 'delete.block'
                      blockPath: [KeyedSegment]
                    }
                  | {
                      type: 'delete.forward'
                      unit: TextUnit
                    }
                  | {
                      type: 'delete.text'
                      anchor: BlockOffset_2
                      focus: BlockOffset_2
                    }
                  | {
                      type: 'focus'
                    }
                  | {
                      type: 'history.redo'
                    }
                  | {
                      type: 'history.undo'
                    }
                  | {
                      type: 'insert.blocks'
                      blocks: Array<PortableTextBlock>
                    }
                  | {
                      type: 'insert.block object'
                      placement: 'auto' | 'after' | 'before'
                      blockObject: {
                        name: string
                        value?: {
                          [prop: string]: unknown
                        }
                      }
                    }
                  | {
                      type: 'insert.inline object'
                      inlineObject: {
                        name: string
                        value?: {
                          [prop: string]: unknown
                        }
                      }
                    }
                  | {
                      type: 'insert.break'
                    }
                  | {
                      type: 'insert.soft break'
                    }
                  | {
                      type: 'insert.block'
                      block: PortableTextBlock
                      placement: 'auto' | 'after' | 'before'
                    }
                  | {
                      type: 'insert.span'
                      text: string
                      annotations?: Array<{
                        name: string
                        value: {
                          [prop: string]: unknown
                        }
                      }>
                      decorators?: Array<string>
                    }
                  | {
                      type: 'insert.text'
                      text: string
                      options?: TextInsertTextOptions
                    }
                  | {
                      type: 'insert.text block'
                      placement: 'auto' | 'after' | 'before'
                      textBlock?: {
                        children?: PortableTextTextBlock['children']
                      }
                    }
                  | {
                      type: 'list item.add'
                      listItem: string
                    }
                  | {
                      type: 'list item.remove'
                      listItem: string
                    }
                  | {
                      type: 'list item.toggle'
                      listItem: string
                    }
                  | {
                      type: 'move.block'
                      at: [KeyedSegment]
                      to: [KeyedSegment]
                    }
                  | {
                      type: 'move.block down'
                      at: [KeyedSegment]
                    }
                  | {
                      type: 'move.block up'
                      at: [KeyedSegment]
                    }
                  | {
                      type: 'select'
                      selection: EditorSelection
                    }
                  | {
                      type: 'select.previous block'
                    }
                  | {
                      type: 'select.next block'
                    }
                  | {
                      type: 'style.add'
                      style: string
                    }
                  | {
                      type: 'style.remove'
                      style: string
                    }
                  | {
                      type: 'style.toggle'
                      style: string
                    }
                  | {
                      type: 'text block.set'
                      at: [KeyedSegment]
                      level?: number
                      listItem?: string
                      style?: string
                    }
                  | {
                      type: 'text block.unset'
                      at: [KeyedSegment]
                      props: Array<'level' | 'listItem' | 'style'>
                    }
                  | ({
                      type: 'serialization.failure'
                      mimeType: `${string}/${string}`
                      reason: string
                    } & {
                      dataTransfer: DataTransfer
                    })
                  | ({
                      type: 'serialization.success'
                      data: string
                      mimeType: `${string}/${string}`
                      originEvent: 'copy' | 'cut' | 'unknown'
                    } & {
                      dataTransfer: DataTransfer
                    })
                  | ({
                      type: 'deserialization.failure'
                      mimeType: `${string}/${string}`
                      reason: string
                    } & {
                      dataTransfer: DataTransfer
                    })
                  | ({
                      type: 'deserialization.success'
                      data: Array<PortableTextBlock>
                      mimeType: `${string}/${string}`
                    } & {
                      dataTransfer: DataTransfer
                    })
                  | PatchEvent
                  | MutationEvent
                  | {
                      type: 'normalizing'
                    }
                  | {
                      type: 'done normalizing'
                    }
                  | {
                      type: 'done syncing initial value'
                    }
                  | {
                      type: 'behavior event'
                      behaviorEvent:
                        | SyntheticBehaviorEvent
                        | NativeBehaviorEvent
                      editor: PortableTextSlateEditor
                      defaultActionCallback?: () => void
                      nativeEvent?: {
                        preventDefault: () => void
                      }
                    }
                  | {
                      type: 'custom behavior event'
                      behaviorEvent: CustomBehaviorEvent
                      editor: PortableTextSlateEditor
                      nativeEvent?: {
                        preventDefault: () => void
                      }
                    }
                  | CustomBehaviorEvent
                  | {
                      type: 'add behavior'
                      behavior: Behavior
                    }
                  | {
                      type: 'remove behavior'
                      behavior: Behavior
                    }
                  | {
                      type: 'update readOnly'
                      readOnly: boolean
                    }
                  | {
                      type: 'update schema'
                      schema: EditorSchema
                    }
                  | {
                      type: 'update behaviors'
                      behaviors: Array<Behavior>
                    }
                  | {
                      type: 'update key generator'
                      keyGenerator: () => string
                    }
                  | {
                      type: 'update value'
                      value: Array<PortableTextBlock> | undefined
                    }
                  | {
                      type: 'update maxBlocks'
                      maxBlocks: number | undefined
                    }
                  | PatchesEvent
                  | {
                      type: 'notify.patch'
                      patch: Patch
                    }
                  | {
                      type: 'notify.mutation'
                      patches: Array<Patch>
                      snapshot: Array<PortableTextBlock> | undefined
                      value: Array<PortableTextBlock> | undefined
                    }
                  | {
                      type: 'notify.blurred'
                      event: FocusEvent_2<HTMLDivElement, Element>
                    }
                  | {
                      type: 'notify.done loading'
                    }
                  | {
                      type: 'notify.editable'
                    }
                  | {
                      type: 'notify.error'
                      name: string
                      description: string
                      data: unknown
                    }
                  | {
                      type: 'notify.focused'
                      event: FocusEvent_2<HTMLDivElement, Element>
                    }
                  | {
                      type: 'notify.invalid value'
                      resolution: InvalidValueResolution | null
                      value: Array<PortableTextBlock> | undefined
                    }
                  | {
                      type: 'notify.loading'
                    }
                  | {
                      type: 'notify.read only'
                    }
                  | {
                      type: 'notify.ready'
                    }
                  | {
                      type: 'notify.selection'
                      selection: EditorSelection
                    }
                  | {
                      type: 'notify.value changed'
                      value: Array<PortableTextBlock> | undefined
                    }
                  | {
                      type: 'notify.unset'
                      previousValue: Array<PortableTextBlock>
                    },
                  undefined,
                  never,
                  never,
                  never,
                  never,
                  | {
                      type: 'annotation.add'
                      annotation: {
                        name: string
                        value: {
                          [prop: string]: unknown
                        }
                      }
                    }
                  | {
                      type: 'annotation.remove'
                      annotation: {
                        name: string
                      }
                    }
                  | {
                      type: 'annotation.toggle'
                      annotation: {
                        name: string
                        value: {
                          [prop: string]: unknown
                        }
                      }
                    }
                  | {
                      [props: string]: unknown
                      type: 'block.set'
                      at: [KeyedSegment]
                    }
                  | {
                      type: 'block.unset'
                      at: [KeyedSegment]
                      props: Array<string>
                    }
                  | {
                      type: 'blur'
                    }
                  | {
                      type: 'data transfer.set'
                      data: string
                      dataTransfer: DataTransfer
                      mimeType: MIMEType_2
                    }
                  | {
                      type: 'decorator.add'
                      decorator: string
                      selection?: NonNullable<EditorSelection>
                    }
                  | {
                      type: 'decorator.remove'
                      decorator: string
                    }
                  | {
                      type: 'decorator.toggle'
                      decorator: string
                    }
                  | {
                      type: 'delete'
                      selection: NonNullable<EditorSelection>
                    }
                  | {
                      type: 'delete.backward'
                      unit: TextUnit
                    }
                  | {
                      type: 'delete.block'
                      blockPath: [KeyedSegment]
                    }
                  | {
                      type: 'delete.forward'
                      unit: TextUnit
                    }
                  | {
                      type: 'delete.text'
                      anchor: BlockOffset_2
                      focus: BlockOffset_2
                    }
                  | {
                      type: 'focus'
                    }
                  | {
                      type: 'history.redo'
                    }
                  | {
                      type: 'history.undo'
                    }
                  | {
                      type: 'insert.blocks'
                      blocks: Array<PortableTextBlock>
                    }
                  | {
                      type: 'insert.block object'
                      placement: 'auto' | 'after' | 'before'
                      blockObject: {
                        name: string
                        value?: {
                          [prop: string]: unknown
                        }
                      }
                    }
                  | {
                      type: 'insert.inline object'
                      inlineObject: {
                        name: string
                        value?: {
                          [prop: string]: unknown
                        }
                      }
                    }
                  | {
                      type: 'insert.break'
                    }
                  | {
                      type: 'insert.soft break'
                    }
                  | {
                      type: 'insert.block'
                      block: PortableTextBlock
                      placement: 'auto' | 'after' | 'before'
                    }
                  | {
                      type: 'insert.span'
                      text: string
                      annotations?: Array<{
                        name: string
                        value: {
                          [prop: string]: unknown
                        }
                      }>
                      decorators?: Array<string>
                    }
                  | {
                      type: 'insert.text'
                      text: string
                      options?: TextInsertTextOptions
                    }
                  | {
                      type: 'insert.text block'
                      placement: 'auto' | 'after' | 'before'
                      textBlock?: {
                        children?: PortableTextTextBlock['children']
                      }
                    }
                  | {
                      type: 'list item.add'
                      listItem: string
                    }
                  | {
                      type: 'list item.remove'
                      listItem: string
                    }
                  | {
                      type: 'list item.toggle'
                      listItem: string
                    }
                  | {
                      type: 'move.block'
                      at: [KeyedSegment]
                      to: [KeyedSegment]
                    }
                  | {
                      type: 'move.block down'
                      at: [KeyedSegment]
                    }
                  | {
                      type: 'move.block up'
                      at: [KeyedSegment]
                    }
                  | {
                      type: 'select'
                      selection: EditorSelection
                    }
                  | {
                      type: 'select.previous block'
                    }
                  | {
                      type: 'select.next block'
                    }
                  | {
                      type: 'style.add'
                      style: string
                    }
                  | {
                      type: 'style.remove'
                      style: string
                    }
                  | {
                      type: 'style.toggle'
                      style: string
                    }
                  | {
                      type: 'text block.set'
                      at: [KeyedSegment]
                      level?: number
                      listItem?: string
                      style?: string
                    }
                  | {
                      type: 'text block.unset'
                      at: [KeyedSegment]
                      props: Array<'level' | 'listItem' | 'style'>
                    }
                  | ({
                      type: 'serialization.failure'
                      mimeType: `${string}/${string}`
                      reason: string
                    } & {
                      dataTransfer: DataTransfer
                    })
                  | ({
                      type: 'serialization.success'
                      data: string
                      mimeType: `${string}/${string}`
                      originEvent: 'copy' | 'cut' | 'unknown'
                    } & {
                      dataTransfer: DataTransfer
                    })
                  | ({
                      type: 'deserialization.failure'
                      mimeType: `${string}/${string}`
                      reason: string
                    } & {
                      dataTransfer: DataTransfer
                    })
                  | ({
                      type: 'deserialization.success'
                      data: Array<PortableTextBlock>
                      mimeType: `${string}/${string}`
                    } & {
                      dataTransfer: DataTransfer
                    })
                  | PatchEvent
                  | MutationEvent
                  | PatchesEvent
                  | {
                      type: 'blurred'
                      event: FocusEvent_2<HTMLDivElement, Element>
                    }
                  | {
                      type: 'done loading'
                    }
                  | {
                      type: 'editable'
                    }
                  | {
                      type: 'error'
                      name: string
                      description: string
                      data: unknown
                    }
                  | {
                      type: 'focused'
                      event: FocusEvent_2<HTMLDivElement, Element>
                    }
                  | {
                      type: 'invalid value'
                      resolution: InvalidValueResolution | null
                      value: Array<PortableTextBlock> | undefined
                    }
                  | {
                      type: 'loading'
                    }
                  | {
                      type: 'read only'
                    }
                  | {
                      type: 'ready'
                    }
                  | {
                      type: 'selection'
                      selection: EditorSelection
                    }
                  | {
                      type: 'value changed'
                      value: Array<PortableTextBlock> | undefined
                    }
                  | UnsetEvent
                  | {
                      type: 'custom.*'
                      event: CustomBehaviorEvent
                    }
                >
              }
              readonly 'custom.*': {
                readonly actions: ActionFunction<
                  {
                    behaviors: Set<Behavior>
                    converters: Set<Converter>
                    keyGenerator: () => string
                    pendingEvents: Array<PatchEvent | MutationEvent>
                    schema: EditorSchema
                    initialReadOnly: boolean
                    maxBlocks: number | undefined
                    selection: EditorSelection
                    value: Array<PortableTextBlock> | undefined
                  },
                  {
                    type: `custom.${string}`
                  } & Record<string, unknown>,
                  | {
                      type: 'annotation.add'
                      annotation: {
                        name: string
                        value: {
                          [prop: string]: unknown
                        }
                      }
                    }
                  | {
                      type: 'annotation.remove'
                      annotation: {
                        name: string
                      }
                    }
                  | {
                      type: 'annotation.toggle'
                      annotation: {
                        name: string
                        value: {
                          [prop: string]: unknown
                        }
                      }
                    }
                  | {
                      [props: string]: unknown
                      type: 'block.set'
                      at: [KeyedSegment]
                    }
                  | {
                      type: 'block.unset'
                      at: [KeyedSegment]
                      props: Array<string>
                    }
                  | {
                      type: 'blur'
                    }
                  | {
                      type: 'data transfer.set'
                      data: string
                      dataTransfer: DataTransfer
                      mimeType: MIMEType_2
                    }
                  | {
                      type: 'decorator.add'
                      decorator: string
                      selection?: NonNullable<EditorSelection>
                    }
                  | {
                      type: 'decorator.remove'
                      decorator: string
                    }
                  | {
                      type: 'decorator.toggle'
                      decorator: string
                    }
                  | {
                      type: 'delete'
                      selection: NonNullable<EditorSelection>
                    }
                  | {
                      type: 'delete.backward'
                      unit: TextUnit
                    }
                  | {
                      type: 'delete.block'
                      blockPath: [KeyedSegment]
                    }
                  | {
                      type: 'delete.forward'
                      unit: TextUnit
                    }
                  | {
                      type: 'delete.text'
                      anchor: BlockOffset_2
                      focus: BlockOffset_2
                    }
                  | {
                      type: 'focus'
                    }
                  | {
                      type: 'history.redo'
                    }
                  | {
                      type: 'history.undo'
                    }
                  | {
                      type: 'insert.blocks'
                      blocks: Array<PortableTextBlock>
                    }
                  | {
                      type: 'insert.block object'
                      placement: 'auto' | 'after' | 'before'
                      blockObject: {
                        name: string
                        value?: {
                          [prop: string]: unknown
                        }
                      }
                    }
                  | {
                      type: 'insert.inline object'
                      inlineObject: {
                        name: string
                        value?: {
                          [prop: string]: unknown
                        }
                      }
                    }
                  | {
                      type: 'insert.break'
                    }
                  | {
                      type: 'insert.soft break'
                    }
                  | {
                      type: 'insert.block'
                      block: PortableTextBlock
                      placement: 'auto' | 'after' | 'before'
                    }
                  | {
                      type: 'insert.span'
                      text: string
                      annotations?: Array<{
                        name: string
                        value: {
                          [prop: string]: unknown
                        }
                      }>
                      decorators?: Array<string>
                    }
                  | {
                      type: 'insert.text'
                      text: string
                      options?: TextInsertTextOptions
                    }
                  | {
                      type: 'insert.text block'
                      placement: 'auto' | 'after' | 'before'
                      textBlock?: {
                        children?: PortableTextTextBlock['children']
                      }
                    }
                  | {
                      type: 'list item.add'
                      listItem: string
                    }
                  | {
                      type: 'list item.remove'
                      listItem: string
                    }
                  | {
                      type: 'list item.toggle'
                      listItem: string
                    }
                  | {
                      type: 'move.block'
                      at: [KeyedSegment]
                      to: [KeyedSegment]
                    }
                  | {
                      type: 'move.block down'
                      at: [KeyedSegment]
                    }
                  | {
                      type: 'move.block up'
                      at: [KeyedSegment]
                    }
                  | {
                      type: 'select'
                      selection: EditorSelection
                    }
                  | {
                      type: 'select.previous block'
                    }
                  | {
                      type: 'select.next block'
                    }
                  | {
                      type: 'style.add'
                      style: string
                    }
                  | {
                      type: 'style.remove'
                      style: string
                    }
                  | {
                      type: 'style.toggle'
                      style: string
                    }
                  | {
                      type: 'text block.set'
                      at: [KeyedSegment]
                      level?: number
                      listItem?: string
                      style?: string
                    }
                  | {
                      type: 'text block.unset'
                      at: [KeyedSegment]
                      props: Array<'level' | 'listItem' | 'style'>
                    }
                  | ({
                      type: 'serialization.failure'
                      mimeType: `${string}/${string}`
                      reason: string
                    } & {
                      dataTransfer: DataTransfer
                    })
                  | ({
                      type: 'serialization.success'
                      data: string
                      mimeType: `${string}/${string}`
                      originEvent: 'copy' | 'cut' | 'unknown'
                    } & {
                      dataTransfer: DataTransfer
                    })
                  | ({
                      type: 'deserialization.failure'
                      mimeType: `${string}/${string}`
                      reason: string
                    } & {
                      dataTransfer: DataTransfer
                    })
                  | ({
                      type: 'deserialization.success'
                      data: Array<PortableTextBlock>
                      mimeType: `${string}/${string}`
                    } & {
                      dataTransfer: DataTransfer
                    })
                  | PatchEvent
                  | MutationEvent
                  | {
                      type: 'normalizing'
                    }
                  | {
                      type: 'done normalizing'
                    }
                  | {
                      type: 'done syncing initial value'
                    }
                  | {
                      type: 'behavior event'
                      behaviorEvent:
                        | SyntheticBehaviorEvent
                        | NativeBehaviorEvent
                      editor: PortableTextSlateEditor
                      defaultActionCallback?: () => void
                      nativeEvent?: {
                        preventDefault: () => void
                      }
                    }
                  | {
                      type: 'custom behavior event'
                      behaviorEvent: CustomBehaviorEvent
                      editor: PortableTextSlateEditor
                      nativeEvent?: {
                        preventDefault: () => void
                      }
                    }
                  | CustomBehaviorEvent
                  | {
                      type: 'add behavior'
                      behavior: Behavior
                    }
                  | {
                      type: 'remove behavior'
                      behavior: Behavior
                    }
                  | {
                      type: 'update readOnly'
                      readOnly: boolean
                    }
                  | {
                      type: 'update schema'
                      schema: EditorSchema
                    }
                  | {
                      type: 'update behaviors'
                      behaviors: Array<Behavior>
                    }
                  | {
                      type: 'update key generator'
                      keyGenerator: () => string
                    }
                  | {
                      type: 'update value'
                      value: Array<PortableTextBlock> | undefined
                    }
                  | {
                      type: 'update maxBlocks'
                      maxBlocks: number | undefined
                    }
                  | PatchesEvent
                  | {
                      type: 'notify.patch'
                      patch: Patch
                    }
                  | {
                      type: 'notify.mutation'
                      patches: Array<Patch>
                      snapshot: Array<PortableTextBlock> | undefined
                      value: Array<PortableTextBlock> | undefined
                    }
                  | {
                      type: 'notify.blurred'
                      event: FocusEvent_2<HTMLDivElement, Element>
                    }
                  | {
                      type: 'notify.done loading'
                    }
                  | {
                      type: 'notify.editable'
                    }
                  | {
                      type: 'notify.error'
                      name: string
                      description: string
                      data: unknown
                    }
                  | {
                      type: 'notify.focused'
                      event: FocusEvent_2<HTMLDivElement, Element>
                    }
                  | {
                      type: 'notify.invalid value'
                      resolution: InvalidValueResolution | null
                      value: Array<PortableTextBlock> | undefined
                    }
                  | {
                      type: 'notify.loading'
                    }
                  | {
                      type: 'notify.read only'
                    }
                  | {
                      type: 'notify.ready'
                    }
                  | {
                      type: 'notify.selection'
                      selection: EditorSelection
                    }
                  | {
                      type: 'notify.value changed'
                      value: Array<PortableTextBlock> | undefined
                    }
                  | {
                      type: 'notify.unset'
                      previousValue: Array<PortableTextBlock>
                    },
                  undefined,
                  never,
                  never,
                  never,
                  never,
                  | {
                      type: 'annotation.add'
                      annotation: {
                        name: string
                        value: {
                          [prop: string]: unknown
                        }
                      }
                    }
                  | {
                      type: 'annotation.remove'
                      annotation: {
                        name: string
                      }
                    }
                  | {
                      type: 'annotation.toggle'
                      annotation: {
                        name: string
                        value: {
                          [prop: string]: unknown
                        }
                      }
                    }
                  | {
                      [props: string]: unknown
                      type: 'block.set'
                      at: [KeyedSegment]
                    }
                  | {
                      type: 'block.unset'
                      at: [KeyedSegment]
                      props: Array<string>
                    }
                  | {
                      type: 'blur'
                    }
                  | {
                      type: 'data transfer.set'
                      data: string
                      dataTransfer: DataTransfer
                      mimeType: MIMEType_2
                    }
                  | {
                      type: 'decorator.add'
                      decorator: string
                      selection?: NonNullable<EditorSelection>
                    }
                  | {
                      type: 'decorator.remove'
                      decorator: string
                    }
                  | {
                      type: 'decorator.toggle'
                      decorator: string
                    }
                  | {
                      type: 'delete'
                      selection: NonNullable<EditorSelection>
                    }
                  | {
                      type: 'delete.backward'
                      unit: TextUnit
                    }
                  | {
                      type: 'delete.block'
                      blockPath: [KeyedSegment]
                    }
                  | {
                      type: 'delete.forward'
                      unit: TextUnit
                    }
                  | {
                      type: 'delete.text'
                      anchor: BlockOffset_2
                      focus: BlockOffset_2
                    }
                  | {
                      type: 'focus'
                    }
                  | {
                      type: 'history.redo'
                    }
                  | {
                      type: 'history.undo'
                    }
                  | {
                      type: 'insert.blocks'
                      blocks: Array<PortableTextBlock>
                    }
                  | {
                      type: 'insert.block object'
                      placement: 'auto' | 'after' | 'before'
                      blockObject: {
                        name: string
                        value?: {
                          [prop: string]: unknown
                        }
                      }
                    }
                  | {
                      type: 'insert.inline object'
                      inlineObject: {
                        name: string
                        value?: {
                          [prop: string]: unknown
                        }
                      }
                    }
                  | {
                      type: 'insert.break'
                    }
                  | {
                      type: 'insert.soft break'
                    }
                  | {
                      type: 'insert.block'
                      block: PortableTextBlock
                      placement: 'auto' | 'after' | 'before'
                    }
                  | {
                      type: 'insert.span'
                      text: string
                      annotations?: Array<{
                        name: string
                        value: {
                          [prop: string]: unknown
                        }
                      }>
                      decorators?: Array<string>
                    }
                  | {
                      type: 'insert.text'
                      text: string
                      options?: TextInsertTextOptions
                    }
                  | {
                      type: 'insert.text block'
                      placement: 'auto' | 'after' | 'before'
                      textBlock?: {
                        children?: PortableTextTextBlock['children']
                      }
                    }
                  | {
                      type: 'list item.add'
                      listItem: string
                    }
                  | {
                      type: 'list item.remove'
                      listItem: string
                    }
                  | {
                      type: 'list item.toggle'
                      listItem: string
                    }
                  | {
                      type: 'move.block'
                      at: [KeyedSegment]
                      to: [KeyedSegment]
                    }
                  | {
                      type: 'move.block down'
                      at: [KeyedSegment]
                    }
                  | {
                      type: 'move.block up'
                      at: [KeyedSegment]
                    }
                  | {
                      type: 'select'
                      selection: EditorSelection
                    }
                  | {
                      type: 'select.previous block'
                    }
                  | {
                      type: 'select.next block'
                    }
                  | {
                      type: 'style.add'
                      style: string
                    }
                  | {
                      type: 'style.remove'
                      style: string
                    }
                  | {
                      type: 'style.toggle'
                      style: string
                    }
                  | {
                      type: 'text block.set'
                      at: [KeyedSegment]
                      level?: number
                      listItem?: string
                      style?: string
                    }
                  | {
                      type: 'text block.unset'
                      at: [KeyedSegment]
                      props: Array<'level' | 'listItem' | 'style'>
                    }
                  | ({
                      type: 'serialization.failure'
                      mimeType: `${string}/${string}`
                      reason: string
                    } & {
                      dataTransfer: DataTransfer
                    })
                  | ({
                      type: 'serialization.success'
                      data: string
                      mimeType: `${string}/${string}`
                      originEvent: 'copy' | 'cut' | 'unknown'
                    } & {
                      dataTransfer: DataTransfer
                    })
                  | ({
                      type: 'deserialization.failure'
                      mimeType: `${string}/${string}`
                      reason: string
                    } & {
                      dataTransfer: DataTransfer
                    })
                  | ({
                      type: 'deserialization.success'
                      data: Array<PortableTextBlock>
                      mimeType: `${string}/${string}`
                    } & {
                      dataTransfer: DataTransfer
                    })
                  | PatchEvent
                  | MutationEvent
                  | PatchesEvent
                  | {
                      type: 'blurred'
                      event: FocusEvent_2<HTMLDivElement, Element>
                    }
                  | {
                      type: 'done loading'
                    }
                  | {
                      type: 'editable'
                    }
                  | {
                      type: 'error'
                      name: string
                      description: string
                      data: unknown
                    }
                  | {
                      type: 'focused'
                      event: FocusEvent_2<HTMLDivElement, Element>
                    }
                  | {
                      type: 'invalid value'
                      resolution: InvalidValueResolution | null
                      value: Array<PortableTextBlock> | undefined
                    }
                  | {
                      type: 'loading'
                    }
                  | {
                      type: 'read only'
                    }
                  | {
                      type: 'ready'
                    }
                  | {
                      type: 'selection'
                      selection: EditorSelection
                    }
                  | {
                      type: 'value changed'
                      value: Array<PortableTextBlock> | undefined
                    }
                  | UnsetEvent
                  | {
                      type: 'custom.*'
                      event: CustomBehaviorEvent
                    }
                >
              }
              readonly 'decorator.*': {
                readonly actions: ActionFunction<
                  {
                    behaviors: Set<Behavior>
                    converters: Set<Converter>
                    keyGenerator: () => string
                    pendingEvents: Array<PatchEvent | MutationEvent>
                    schema: EditorSchema
                    initialReadOnly: boolean
                    maxBlocks: number | undefined
                    selection: EditorSelection
                    value: Array<PortableTextBlock> | undefined
                  },
                  | {
                      type: 'decorator.add'
                      decorator: string
                      selection?: NonNullable<EditorSelection>
                    }
                  | {
                      type: 'decorator.remove'
                      decorator: string
                    }
                  | {
                      type: 'decorator.toggle'
                      decorator: string
                    },
                  | {
                      type: 'annotation.add'
                      annotation: {
                        name: string
                        value: {
                          [prop: string]: unknown
                        }
                      }
                    }
                  | {
                      type: 'annotation.remove'
                      annotation: {
                        name: string
                      }
                    }
                  | {
                      type: 'annotation.toggle'
                      annotation: {
                        name: string
                        value: {
                          [prop: string]: unknown
                        }
                      }
                    }
                  | {
                      [props: string]: unknown
                      type: 'block.set'
                      at: [KeyedSegment]
                    }
                  | {
                      type: 'block.unset'
                      at: [KeyedSegment]
                      props: Array<string>
                    }
                  | {
                      type: 'blur'
                    }
                  | {
                      type: 'data transfer.set'
                      data: string
                      dataTransfer: DataTransfer
                      mimeType: MIMEType_2
                    }
                  | {
                      type: 'decorator.add'
                      decorator: string
                      selection?: NonNullable<EditorSelection>
                    }
                  | {
                      type: 'decorator.remove'
                      decorator: string
                    }
                  | {
                      type: 'decorator.toggle'
                      decorator: string
                    }
                  | {
                      type: 'delete'
                      selection: NonNullable<EditorSelection>
                    }
                  | {
                      type: 'delete.backward'
                      unit: TextUnit
                    }
                  | {
                      type: 'delete.block'
                      blockPath: [KeyedSegment]
                    }
                  | {
                      type: 'delete.forward'
                      unit: TextUnit
                    }
                  | {
                      type: 'delete.text'
                      anchor: BlockOffset_2
                      focus: BlockOffset_2
                    }
                  | {
                      type: 'focus'
                    }
                  | {
                      type: 'history.redo'
                    }
                  | {
                      type: 'history.undo'
                    }
                  | {
                      type: 'insert.blocks'
                      blocks: Array<PortableTextBlock>
                    }
                  | {
                      type: 'insert.block object'
                      placement: 'auto' | 'after' | 'before'
                      blockObject: {
                        name: string
                        value?: {
                          [prop: string]: unknown
                        }
                      }
                    }
                  | {
                      type: 'insert.inline object'
                      inlineObject: {
                        name: string
                        value?: {
                          [prop: string]: unknown
                        }
                      }
                    }
                  | {
                      type: 'insert.break'
                    }
                  | {
                      type: 'insert.soft break'
                    }
                  | {
                      type: 'insert.block'
                      block: PortableTextBlock
                      placement: 'auto' | 'after' | 'before'
                    }
                  | {
                      type: 'insert.span'
                      text: string
                      annotations?: Array<{
                        name: string
                        value: {
                          [prop: string]: unknown
                        }
                      }>
                      decorators?: Array<string>
                    }
                  | {
                      type: 'insert.text'
                      text: string
                      options?: TextInsertTextOptions
                    }
                  | {
                      type: 'insert.text block'
                      placement: 'auto' | 'after' | 'before'
                      textBlock?: {
                        children?: PortableTextTextBlock['children']
                      }
                    }
                  | {
                      type: 'list item.add'
                      listItem: string
                    }
                  | {
                      type: 'list item.remove'
                      listItem: string
                    }
                  | {
                      type: 'list item.toggle'
                      listItem: string
                    }
                  | {
                      type: 'move.block'
                      at: [KeyedSegment]
                      to: [KeyedSegment]
                    }
                  | {
                      type: 'move.block down'
                      at: [KeyedSegment]
                    }
                  | {
                      type: 'move.block up'
                      at: [KeyedSegment]
                    }
                  | {
                      type: 'select'
                      selection: EditorSelection
                    }
                  | {
                      type: 'select.previous block'
                    }
                  | {
                      type: 'select.next block'
                    }
                  | {
                      type: 'style.add'
                      style: string
                    }
                  | {
                      type: 'style.remove'
                      style: string
                    }
                  | {
                      type: 'style.toggle'
                      style: string
                    }
                  | {
                      type: 'text block.set'
                      at: [KeyedSegment]
                      level?: number
                      listItem?: string
                      style?: string
                    }
                  | {
                      type: 'text block.unset'
                      at: [KeyedSegment]
                      props: Array<'level' | 'listItem' | 'style'>
                    }
                  | ({
                      type: 'serialization.failure'
                      mimeType: `${string}/${string}`
                      reason: string
                    } & {
                      dataTransfer: DataTransfer
                    })
                  | ({
                      type: 'serialization.success'
                      data: string
                      mimeType: `${string}/${string}`
                      originEvent: 'copy' | 'cut' | 'unknown'
                    } & {
                      dataTransfer: DataTransfer
                    })
                  | ({
                      type: 'deserialization.failure'
                      mimeType: `${string}/${string}`
                      reason: string
                    } & {
                      dataTransfer: DataTransfer
                    })
                  | ({
                      type: 'deserialization.success'
                      data: Array<PortableTextBlock>
                      mimeType: `${string}/${string}`
                    } & {
                      dataTransfer: DataTransfer
                    })
                  | PatchEvent
                  | MutationEvent
                  | {
                      type: 'normalizing'
                    }
                  | {
                      type: 'done normalizing'
                    }
                  | {
                      type: 'done syncing initial value'
                    }
                  | {
                      type: 'behavior event'
                      behaviorEvent:
                        | SyntheticBehaviorEvent
                        | NativeBehaviorEvent
                      editor: PortableTextSlateEditor
                      defaultActionCallback?: () => void
                      nativeEvent?: {
                        preventDefault: () => void
                      }
                    }
                  | {
                      type: 'custom behavior event'
                      behaviorEvent: CustomBehaviorEvent
                      editor: PortableTextSlateEditor
                      nativeEvent?: {
                        preventDefault: () => void
                      }
                    }
                  | CustomBehaviorEvent
                  | {
                      type: 'add behavior'
                      behavior: Behavior
                    }
                  | {
                      type: 'remove behavior'
                      behavior: Behavior
                    }
                  | {
                      type: 'update readOnly'
                      readOnly: boolean
                    }
                  | {
                      type: 'update schema'
                      schema: EditorSchema
                    }
                  | {
                      type: 'update behaviors'
                      behaviors: Array<Behavior>
                    }
                  | {
                      type: 'update key generator'
                      keyGenerator: () => string
                    }
                  | {
                      type: 'update value'
                      value: Array<PortableTextBlock> | undefined
                    }
                  | {
                      type: 'update maxBlocks'
                      maxBlocks: number | undefined
                    }
                  | PatchesEvent
                  | {
                      type: 'notify.patch'
                      patch: Patch
                    }
                  | {
                      type: 'notify.mutation'
                      patches: Array<Patch>
                      snapshot: Array<PortableTextBlock> | undefined
                      value: Array<PortableTextBlock> | undefined
                    }
                  | {
                      type: 'notify.blurred'
                      event: FocusEvent_2<HTMLDivElement, Element>
                    }
                  | {
                      type: 'notify.done loading'
                    }
                  | {
                      type: 'notify.editable'
                    }
                  | {
                      type: 'notify.error'
                      name: string
                      description: string
                      data: unknown
                    }
                  | {
                      type: 'notify.focused'
                      event: FocusEvent_2<HTMLDivElement, Element>
                    }
                  | {
                      type: 'notify.invalid value'
                      resolution: InvalidValueResolution | null
                      value: Array<PortableTextBlock> | undefined
                    }
                  | {
                      type: 'notify.loading'
                    }
                  | {
                      type: 'notify.read only'
                    }
                  | {
                      type: 'notify.ready'
                    }
                  | {
                      type: 'notify.selection'
                      selection: EditorSelection
                    }
                  | {
                      type: 'notify.value changed'
                      value: Array<PortableTextBlock> | undefined
                    }
                  | {
                      type: 'notify.unset'
                      previousValue: Array<PortableTextBlock>
                    },
                  undefined,
                  never,
                  never,
                  never,
                  never,
                  | {
                      type: 'annotation.add'
                      annotation: {
                        name: string
                        value: {
                          [prop: string]: unknown
                        }
                      }
                    }
                  | {
                      type: 'annotation.remove'
                      annotation: {
                        name: string
                      }
                    }
                  | {
                      type: 'annotation.toggle'
                      annotation: {
                        name: string
                        value: {
                          [prop: string]: unknown
                        }
                      }
                    }
                  | {
                      [props: string]: unknown
                      type: 'block.set'
                      at: [KeyedSegment]
                    }
                  | {
                      type: 'block.unset'
                      at: [KeyedSegment]
                      props: Array<string>
                    }
                  | {
                      type: 'blur'
                    }
                  | {
                      type: 'data transfer.set'
                      data: string
                      dataTransfer: DataTransfer
                      mimeType: MIMEType_2
                    }
                  | {
                      type: 'decorator.add'
                      decorator: string
                      selection?: NonNullable<EditorSelection>
                    }
                  | {
                      type: 'decorator.remove'
                      decorator: string
                    }
                  | {
                      type: 'decorator.toggle'
                      decorator: string
                    }
                  | {
                      type: 'delete'
                      selection: NonNullable<EditorSelection>
                    }
                  | {
                      type: 'delete.backward'
                      unit: TextUnit
                    }
                  | {
                      type: 'delete.block'
                      blockPath: [KeyedSegment]
                    }
                  | {
                      type: 'delete.forward'
                      unit: TextUnit
                    }
                  | {
                      type: 'delete.text'
                      anchor: BlockOffset_2
                      focus: BlockOffset_2
                    }
                  | {
                      type: 'focus'
                    }
                  | {
                      type: 'history.redo'
                    }
                  | {
                      type: 'history.undo'
                    }
                  | {
                      type: 'insert.blocks'
                      blocks: Array<PortableTextBlock>
                    }
                  | {
                      type: 'insert.block object'
                      placement: 'auto' | 'after' | 'before'
                      blockObject: {
                        name: string
                        value?: {
                          [prop: string]: unknown
                        }
                      }
                    }
                  | {
                      type: 'insert.inline object'
                      inlineObject: {
                        name: string
                        value?: {
                          [prop: string]: unknown
                        }
                      }
                    }
                  | {
                      type: 'insert.break'
                    }
                  | {
                      type: 'insert.soft break'
                    }
                  | {
                      type: 'insert.block'
                      block: PortableTextBlock
                      placement: 'auto' | 'after' | 'before'
                    }
                  | {
                      type: 'insert.span'
                      text: string
                      annotations?: Array<{
                        name: string
                        value: {
                          [prop: string]: unknown
                        }
                      }>
                      decorators?: Array<string>
                    }
                  | {
                      type: 'insert.text'
                      text: string
                      options?: TextInsertTextOptions
                    }
                  | {
                      type: 'insert.text block'
                      placement: 'auto' | 'after' | 'before'
                      textBlock?: {
                        children?: PortableTextTextBlock['children']
                      }
                    }
                  | {
                      type: 'list item.add'
                      listItem: string
                    }
                  | {
                      type: 'list item.remove'
                      listItem: string
                    }
                  | {
                      type: 'list item.toggle'
                      listItem: string
                    }
                  | {
                      type: 'move.block'
                      at: [KeyedSegment]
                      to: [KeyedSegment]
                    }
                  | {
                      type: 'move.block down'
                      at: [KeyedSegment]
                    }
                  | {
                      type: 'move.block up'
                      at: [KeyedSegment]
                    }
                  | {
                      type: 'select'
                      selection: EditorSelection
                    }
                  | {
                      type: 'select.previous block'
                    }
                  | {
                      type: 'select.next block'
                    }
                  | {
                      type: 'style.add'
                      style: string
                    }
                  | {
                      type: 'style.remove'
                      style: string
                    }
                  | {
                      type: 'style.toggle'
                      style: string
                    }
                  | {
                      type: 'text block.set'
                      at: [KeyedSegment]
                      level?: number
                      listItem?: string
                      style?: string
                    }
                  | {
                      type: 'text block.unset'
                      at: [KeyedSegment]
                      props: Array<'level' | 'listItem' | 'style'>
                    }
                  | ({
                      type: 'serialization.failure'
                      mimeType: `${string}/${string}`
                      reason: string
                    } & {
                      dataTransfer: DataTransfer
                    })
                  | ({
                      type: 'serialization.success'
                      data: string
                      mimeType: `${string}/${string}`
                      originEvent: 'copy' | 'cut' | 'unknown'
                    } & {
                      dataTransfer: DataTransfer
                    })
                  | ({
                      type: 'deserialization.failure'
                      mimeType: `${string}/${string}`
                      reason: string
                    } & {
                      dataTransfer: DataTransfer
                    })
                  | ({
                      type: 'deserialization.success'
                      data: Array<PortableTextBlock>
                      mimeType: `${string}/${string}`
                    } & {
                      dataTransfer: DataTransfer
                    })
                  | PatchEvent
                  | MutationEvent
                  | PatchesEvent
                  | {
                      type: 'blurred'
                      event: FocusEvent_2<HTMLDivElement, Element>
                    }
                  | {
                      type: 'done loading'
                    }
                  | {
                      type: 'editable'
                    }
                  | {
                      type: 'error'
                      name: string
                      description: string
                      data: unknown
                    }
                  | {
                      type: 'focused'
                      event: FocusEvent_2<HTMLDivElement, Element>
                    }
                  | {
                      type: 'invalid value'
                      resolution: InvalidValueResolution | null
                      value: Array<PortableTextBlock> | undefined
                    }
                  | {
                      type: 'loading'
                    }
                  | {
                      type: 'read only'
                    }
                  | {
                      type: 'ready'
                    }
                  | {
                      type: 'selection'
                      selection: EditorSelection
                    }
                  | {
                      type: 'value changed'
                      value: Array<PortableTextBlock> | undefined
                    }
                  | UnsetEvent
                  | {
                      type: 'custom.*'
                      event: CustomBehaviorEvent
                    }
                >
              }
              readonly 'delete.*': {
                readonly actions: ActionFunction<
                  {
                    behaviors: Set<Behavior>
                    converters: Set<Converter>
                    keyGenerator: () => string
                    pendingEvents: Array<PatchEvent | MutationEvent>
                    schema: EditorSchema
                    initialReadOnly: boolean
                    maxBlocks: number | undefined
                    selection: EditorSelection
                    value: Array<PortableTextBlock> | undefined
                  },
                  | {
                      type: 'delete.backward'
                      unit: TextUnit
                    }
                  | {
                      type: 'delete.block'
                      blockPath: [KeyedSegment]
                    }
                  | {
                      type: 'delete.forward'
                      unit: TextUnit
                    }
                  | {
                      type: 'delete.text'
                      anchor: BlockOffset_2
                      focus: BlockOffset_2
                    },
                  | {
                      type: 'annotation.add'
                      annotation: {
                        name: string
                        value: {
                          [prop: string]: unknown
                        }
                      }
                    }
                  | {
                      type: 'annotation.remove'
                      annotation: {
                        name: string
                      }
                    }
                  | {
                      type: 'annotation.toggle'
                      annotation: {
                        name: string
                        value: {
                          [prop: string]: unknown
                        }
                      }
                    }
                  | {
                      [props: string]: unknown
                      type: 'block.set'
                      at: [KeyedSegment]
                    }
                  | {
                      type: 'block.unset'
                      at: [KeyedSegment]
                      props: Array<string>
                    }
                  | {
                      type: 'blur'
                    }
                  | {
                      type: 'data transfer.set'
                      data: string
                      dataTransfer: DataTransfer
                      mimeType: MIMEType_2
                    }
                  | {
                      type: 'decorator.add'
                      decorator: string
                      selection?: NonNullable<EditorSelection>
                    }
                  | {
                      type: 'decorator.remove'
                      decorator: string
                    }
                  | {
                      type: 'decorator.toggle'
                      decorator: string
                    }
                  | {
                      type: 'delete'
                      selection: NonNullable<EditorSelection>
                    }
                  | {
                      type: 'delete.backward'
                      unit: TextUnit
                    }
                  | {
                      type: 'delete.block'
                      blockPath: [KeyedSegment]
                    }
                  | {
                      type: 'delete.forward'
                      unit: TextUnit
                    }
                  | {
                      type: 'delete.text'
                      anchor: BlockOffset_2
                      focus: BlockOffset_2
                    }
                  | {
                      type: 'focus'
                    }
                  | {
                      type: 'history.redo'
                    }
                  | {
                      type: 'history.undo'
                    }
                  | {
                      type: 'insert.blocks'
                      blocks: Array<PortableTextBlock>
                    }
                  | {
                      type: 'insert.block object'
                      placement: 'auto' | 'after' | 'before'
                      blockObject: {
                        name: string
                        value?: {
                          [prop: string]: unknown
                        }
                      }
                    }
                  | {
                      type: 'insert.inline object'
                      inlineObject: {
                        name: string
                        value?: {
                          [prop: string]: unknown
                        }
                      }
                    }
                  | {
                      type: 'insert.break'
                    }
                  | {
                      type: 'insert.soft break'
                    }
                  | {
                      type: 'insert.block'
                      block: PortableTextBlock
                      placement: 'auto' | 'after' | 'before'
                    }
                  | {
                      type: 'insert.span'
                      text: string
                      annotations?: Array<{
                        name: string
                        value: {
                          [prop: string]: unknown
                        }
                      }>
                      decorators?: Array<string>
                    }
                  | {
                      type: 'insert.text'
                      text: string
                      options?: TextInsertTextOptions
                    }
                  | {
                      type: 'insert.text block'
                      placement: 'auto' | 'after' | 'before'
                      textBlock?: {
                        children?: PortableTextTextBlock['children']
                      }
                    }
                  | {
                      type: 'list item.add'
                      listItem: string
                    }
                  | {
                      type: 'list item.remove'
                      listItem: string
                    }
                  | {
                      type: 'list item.toggle'
                      listItem: string
                    }
                  | {
                      type: 'move.block'
                      at: [KeyedSegment]
                      to: [KeyedSegment]
                    }
                  | {
                      type: 'move.block down'
                      at: [KeyedSegment]
                    }
                  | {
                      type: 'move.block up'
                      at: [KeyedSegment]
                    }
                  | {
                      type: 'select'
                      selection: EditorSelection
                    }
                  | {
                      type: 'select.previous block'
                    }
                  | {
                      type: 'select.next block'
                    }
                  | {
                      type: 'style.add'
                      style: string
                    }
                  | {
                      type: 'style.remove'
                      style: string
                    }
                  | {
                      type: 'style.toggle'
                      style: string
                    }
                  | {
                      type: 'text block.set'
                      at: [KeyedSegment]
                      level?: number
                      listItem?: string
                      style?: string
                    }
                  | {
                      type: 'text block.unset'
                      at: [KeyedSegment]
                      props: Array<'level' | 'listItem' | 'style'>
                    }
                  | ({
                      type: 'serialization.failure'
                      mimeType: `${string}/${string}`
                      reason: string
                    } & {
                      dataTransfer: DataTransfer
                    })
                  | ({
                      type: 'serialization.success'
                      data: string
                      mimeType: `${string}/${string}`
                      originEvent: 'copy' | 'cut' | 'unknown'
                    } & {
                      dataTransfer: DataTransfer
                    })
                  | ({
                      type: 'deserialization.failure'
                      mimeType: `${string}/${string}`
                      reason: string
                    } & {
                      dataTransfer: DataTransfer
                    })
                  | ({
                      type: 'deserialization.success'
                      data: Array<PortableTextBlock>
                      mimeType: `${string}/${string}`
                    } & {
                      dataTransfer: DataTransfer
                    })
                  | PatchEvent
                  | MutationEvent
                  | {
                      type: 'normalizing'
                    }
                  | {
                      type: 'done normalizing'
                    }
                  | {
                      type: 'done syncing initial value'
                    }
                  | {
                      type: 'behavior event'
                      behaviorEvent:
                        | SyntheticBehaviorEvent
                        | NativeBehaviorEvent
                      editor: PortableTextSlateEditor
                      defaultActionCallback?: () => void
                      nativeEvent?: {
                        preventDefault: () => void
                      }
                    }
                  | {
                      type: 'custom behavior event'
                      behaviorEvent: CustomBehaviorEvent
                      editor: PortableTextSlateEditor
                      nativeEvent?: {
                        preventDefault: () => void
                      }
                    }
                  | CustomBehaviorEvent
                  | {
                      type: 'add behavior'
                      behavior: Behavior
                    }
                  | {
                      type: 'remove behavior'
                      behavior: Behavior
                    }
                  | {
                      type: 'update readOnly'
                      readOnly: boolean
                    }
                  | {
                      type: 'update schema'
                      schema: EditorSchema
                    }
                  | {
                      type: 'update behaviors'
                      behaviors: Array<Behavior>
                    }
                  | {
                      type: 'update key generator'
                      keyGenerator: () => string
                    }
                  | {
                      type: 'update value'
                      value: Array<PortableTextBlock> | undefined
                    }
                  | {
                      type: 'update maxBlocks'
                      maxBlocks: number | undefined
                    }
                  | PatchesEvent
                  | {
                      type: 'notify.patch'
                      patch: Patch
                    }
                  | {
                      type: 'notify.mutation'
                      patches: Array<Patch>
                      snapshot: Array<PortableTextBlock> | undefined
                      value: Array<PortableTextBlock> | undefined
                    }
                  | {
                      type: 'notify.blurred'
                      event: FocusEvent_2<HTMLDivElement, Element>
                    }
                  | {
                      type: 'notify.done loading'
                    }
                  | {
                      type: 'notify.editable'
                    }
                  | {
                      type: 'notify.error'
                      name: string
                      description: string
                      data: unknown
                    }
                  | {
                      type: 'notify.focused'
                      event: FocusEvent_2<HTMLDivElement, Element>
                    }
                  | {
                      type: 'notify.invalid value'
                      resolution: InvalidValueResolution | null
                      value: Array<PortableTextBlock> | undefined
                    }
                  | {
                      type: 'notify.loading'
                    }
                  | {
                      type: 'notify.read only'
                    }
                  | {
                      type: 'notify.ready'
                    }
                  | {
                      type: 'notify.selection'
                      selection: EditorSelection
                    }
                  | {
                      type: 'notify.value changed'
                      value: Array<PortableTextBlock> | undefined
                    }
                  | {
                      type: 'notify.unset'
                      previousValue: Array<PortableTextBlock>
                    },
                  undefined,
                  never,
                  never,
                  never,
                  never,
                  | {
                      type: 'annotation.add'
                      annotation: {
                        name: string
                        value: {
                          [prop: string]: unknown
                        }
                      }
                    }
                  | {
                      type: 'annotation.remove'
                      annotation: {
                        name: string
                      }
                    }
                  | {
                      type: 'annotation.toggle'
                      annotation: {
                        name: string
                        value: {
                          [prop: string]: unknown
                        }
                      }
                    }
                  | {
                      [props: string]: unknown
                      type: 'block.set'
                      at: [KeyedSegment]
                    }
                  | {
                      type: 'block.unset'
                      at: [KeyedSegment]
                      props: Array<string>
                    }
                  | {
                      type: 'blur'
                    }
                  | {
                      type: 'data transfer.set'
                      data: string
                      dataTransfer: DataTransfer
                      mimeType: MIMEType_2
                    }
                  | {
                      type: 'decorator.add'
                      decorator: string
                      selection?: NonNullable<EditorSelection>
                    }
                  | {
                      type: 'decorator.remove'
                      decorator: string
                    }
                  | {
                      type: 'decorator.toggle'
                      decorator: string
                    }
                  | {
                      type: 'delete'
                      selection: NonNullable<EditorSelection>
                    }
                  | {
                      type: 'delete.backward'
                      unit: TextUnit
                    }
                  | {
                      type: 'delete.block'
                      blockPath: [KeyedSegment]
                    }
                  | {
                      type: 'delete.forward'
                      unit: TextUnit
                    }
                  | {
                      type: 'delete.text'
                      anchor: BlockOffset_2
                      focus: BlockOffset_2
                    }
                  | {
                      type: 'focus'
                    }
                  | {
                      type: 'history.redo'
                    }
                  | {
                      type: 'history.undo'
                    }
                  | {
                      type: 'insert.blocks'
                      blocks: Array<PortableTextBlock>
                    }
                  | {
                      type: 'insert.block object'
                      placement: 'auto' | 'after' | 'before'
                      blockObject: {
                        name: string
                        value?: {
                          [prop: string]: unknown
                        }
                      }
                    }
                  | {
                      type: 'insert.inline object'
                      inlineObject: {
                        name: string
                        value?: {
                          [prop: string]: unknown
                        }
                      }
                    }
                  | {
                      type: 'insert.break'
                    }
                  | {
                      type: 'insert.soft break'
                    }
                  | {
                      type: 'insert.block'
                      block: PortableTextBlock
                      placement: 'auto' | 'after' | 'before'
                    }
                  | {
                      type: 'insert.span'
                      text: string
                      annotations?: Array<{
                        name: string
                        value: {
                          [prop: string]: unknown
                        }
                      }>
                      decorators?: Array<string>
                    }
                  | {
                      type: 'insert.text'
                      text: string
                      options?: TextInsertTextOptions
                    }
                  | {
                      type: 'insert.text block'
                      placement: 'auto' | 'after' | 'before'
                      textBlock?: {
                        children?: PortableTextTextBlock['children']
                      }
                    }
                  | {
                      type: 'list item.add'
                      listItem: string
                    }
                  | {
                      type: 'list item.remove'
                      listItem: string
                    }
                  | {
                      type: 'list item.toggle'
                      listItem: string
                    }
                  | {
                      type: 'move.block'
                      at: [KeyedSegment]
                      to: [KeyedSegment]
                    }
                  | {
                      type: 'move.block down'
                      at: [KeyedSegment]
                    }
                  | {
                      type: 'move.block up'
                      at: [KeyedSegment]
                    }
                  | {
                      type: 'select'
                      selection: EditorSelection
                    }
                  | {
                      type: 'select.previous block'
                    }
                  | {
                      type: 'select.next block'
                    }
                  | {
                      type: 'style.add'
                      style: string
                    }
                  | {
                      type: 'style.remove'
                      style: string
                    }
                  | {
                      type: 'style.toggle'
                      style: string
                    }
                  | {
                      type: 'text block.set'
                      at: [KeyedSegment]
                      level?: number
                      listItem?: string
                      style?: string
                    }
                  | {
                      type: 'text block.unset'
                      at: [KeyedSegment]
                      props: Array<'level' | 'listItem' | 'style'>
                    }
                  | ({
                      type: 'serialization.failure'
                      mimeType: `${string}/${string}`
                      reason: string
                    } & {
                      dataTransfer: DataTransfer
                    })
                  | ({
                      type: 'serialization.success'
                      data: string
                      mimeType: `${string}/${string}`
                      originEvent: 'copy' | 'cut' | 'unknown'
                    } & {
                      dataTransfer: DataTransfer
                    })
                  | ({
                      type: 'deserialization.failure'
                      mimeType: `${string}/${string}`
                      reason: string
                    } & {
                      dataTransfer: DataTransfer
                    })
                  | ({
                      type: 'deserialization.success'
                      data: Array<PortableTextBlock>
                      mimeType: `${string}/${string}`
                    } & {
                      dataTransfer: DataTransfer
                    })
                  | PatchEvent
                  | MutationEvent
                  | PatchesEvent
                  | {
                      type: 'blurred'
                      event: FocusEvent_2<HTMLDivElement, Element>
                    }
                  | {
                      type: 'done loading'
                    }
                  | {
                      type: 'editable'
                    }
                  | {
                      type: 'error'
                      name: string
                      description: string
                      data: unknown
                    }
                  | {
                      type: 'focused'
                      event: FocusEvent_2<HTMLDivElement, Element>
                    }
                  | {
                      type: 'invalid value'
                      resolution: InvalidValueResolution | null
                      value: Array<PortableTextBlock> | undefined
                    }
                  | {
                      type: 'loading'
                    }
                  | {
                      type: 'read only'
                    }
                  | {
                      type: 'ready'
                    }
                  | {
                      type: 'selection'
                      selection: EditorSelection
                    }
                  | {
                      type: 'value changed'
                      value: Array<PortableTextBlock> | undefined
                    }
                  | UnsetEvent
                  | {
                      type: 'custom.*'
                      event: CustomBehaviorEvent
                    }
                >
              }
              readonly 'focus': {
                readonly actions: ActionFunction<
                  {
                    behaviors: Set<Behavior>
                    converters: Set<Converter>
                    keyGenerator: () => string
                    pendingEvents: Array<PatchEvent | MutationEvent>
                    schema: EditorSchema
                    initialReadOnly: boolean
                    maxBlocks: number | undefined
                    selection: EditorSelection
                    value: Array<PortableTextBlock> | undefined
                  },
                  {
                    type: 'focus'
                  },
                  | {
                      type: 'annotation.add'
                      annotation: {
                        name: string
                        value: {
                          [prop: string]: unknown
                        }
                      }
                    }
                  | {
                      type: 'annotation.remove'
                      annotation: {
                        name: string
                      }
                    }
                  | {
                      type: 'annotation.toggle'
                      annotation: {
                        name: string
                        value: {
                          [prop: string]: unknown
                        }
                      }
                    }
                  | {
                      [props: string]: unknown
                      type: 'block.set'
                      at: [KeyedSegment]
                    }
                  | {
                      type: 'block.unset'
                      at: [KeyedSegment]
                      props: Array<string>
                    }
                  | {
                      type: 'blur'
                    }
                  | {
                      type: 'data transfer.set'
                      data: string
                      dataTransfer: DataTransfer
                      mimeType: MIMEType_2
                    }
                  | {
                      type: 'decorator.add'
                      decorator: string
                      selection?: NonNullable<EditorSelection>
                    }
                  | {
                      type: 'decorator.remove'
                      decorator: string
                    }
                  | {
                      type: 'decorator.toggle'
                      decorator: string
                    }
                  | {
                      type: 'delete'
                      selection: NonNullable<EditorSelection>
                    }
                  | {
                      type: 'delete.backward'
                      unit: TextUnit
                    }
                  | {
                      type: 'delete.block'
                      blockPath: [KeyedSegment]
                    }
                  | {
                      type: 'delete.forward'
                      unit: TextUnit
                    }
                  | {
                      type: 'delete.text'
                      anchor: BlockOffset_2
                      focus: BlockOffset_2
                    }
                  | {
                      type: 'focus'
                    }
                  | {
                      type: 'history.redo'
                    }
                  | {
                      type: 'history.undo'
                    }
                  | {
                      type: 'insert.blocks'
                      blocks: Array<PortableTextBlock>
                    }
                  | {
                      type: 'insert.block object'
                      placement: 'auto' | 'after' | 'before'
                      blockObject: {
                        name: string
                        value?: {
                          [prop: string]: unknown
                        }
                      }
                    }
                  | {
                      type: 'insert.inline object'
                      inlineObject: {
                        name: string
                        value?: {
                          [prop: string]: unknown
                        }
                      }
                    }
                  | {
                      type: 'insert.break'
                    }
                  | {
                      type: 'insert.soft break'
                    }
                  | {
                      type: 'insert.block'
                      block: PortableTextBlock
                      placement: 'auto' | 'after' | 'before'
                    }
                  | {
                      type: 'insert.span'
                      text: string
                      annotations?: Array<{
                        name: string
                        value: {
                          [prop: string]: unknown
                        }
                      }>
                      decorators?: Array<string>
                    }
                  | {
                      type: 'insert.text'
                      text: string
                      options?: TextInsertTextOptions
                    }
                  | {
                      type: 'insert.text block'
                      placement: 'auto' | 'after' | 'before'
                      textBlock?: {
                        children?: PortableTextTextBlock['children']
                      }
                    }
                  | {
                      type: 'list item.add'
                      listItem: string
                    }
                  | {
                      type: 'list item.remove'
                      listItem: string
                    }
                  | {
                      type: 'list item.toggle'
                      listItem: string
                    }
                  | {
                      type: 'move.block'
                      at: [KeyedSegment]
                      to: [KeyedSegment]
                    }
                  | {
                      type: 'move.block down'
                      at: [KeyedSegment]
                    }
                  | {
                      type: 'move.block up'
                      at: [KeyedSegment]
                    }
                  | {
                      type: 'select'
                      selection: EditorSelection
                    }
                  | {
                      type: 'select.previous block'
                    }
                  | {
                      type: 'select.next block'
                    }
                  | {
                      type: 'style.add'
                      style: string
                    }
                  | {
                      type: 'style.remove'
                      style: string
                    }
                  | {
                      type: 'style.toggle'
                      style: string
                    }
                  | {
                      type: 'text block.set'
                      at: [KeyedSegment]
                      level?: number
                      listItem?: string
                      style?: string
                    }
                  | {
                      type: 'text block.unset'
                      at: [KeyedSegment]
                      props: Array<'level' | 'listItem' | 'style'>
                    }
                  | ({
                      type: 'serialization.failure'
                      mimeType: `${string}/${string}`
                      reason: string
                    } & {
                      dataTransfer: DataTransfer
                    })
                  | ({
                      type: 'serialization.success'
                      data: string
                      mimeType: `${string}/${string}`
                      originEvent: 'copy' | 'cut' | 'unknown'
                    } & {
                      dataTransfer: DataTransfer
                    })
                  | ({
                      type: 'deserialization.failure'
                      mimeType: `${string}/${string}`
                      reason: string
                    } & {
                      dataTransfer: DataTransfer
                    })
                  | ({
                      type: 'deserialization.success'
                      data: Array<PortableTextBlock>
                      mimeType: `${string}/${string}`
                    } & {
                      dataTransfer: DataTransfer
                    })
                  | PatchEvent
                  | MutationEvent
                  | {
                      type: 'normalizing'
                    }
                  | {
                      type: 'done normalizing'
                    }
                  | {
                      type: 'done syncing initial value'
                    }
                  | {
                      type: 'behavior event'
                      behaviorEvent:
                        | SyntheticBehaviorEvent
                        | NativeBehaviorEvent
                      editor: PortableTextSlateEditor
                      defaultActionCallback?: () => void
                      nativeEvent?: {
                        preventDefault: () => void
                      }
                    }
                  | {
                      type: 'custom behavior event'
                      behaviorEvent: CustomBehaviorEvent
                      editor: PortableTextSlateEditor
                      nativeEvent?: {
                        preventDefault: () => void
                      }
                    }
                  | CustomBehaviorEvent
                  | {
                      type: 'add behavior'
                      behavior: Behavior
                    }
                  | {
                      type: 'remove behavior'
                      behavior: Behavior
                    }
                  | {
                      type: 'update readOnly'
                      readOnly: boolean
                    }
                  | {
                      type: 'update schema'
                      schema: EditorSchema
                    }
                  | {
                      type: 'update behaviors'
                      behaviors: Array<Behavior>
                    }
                  | {
                      type: 'update key generator'
                      keyGenerator: () => string
                    }
                  | {
                      type: 'update value'
                      value: Array<PortableTextBlock> | undefined
                    }
                  | {
                      type: 'update maxBlocks'
                      maxBlocks: number | undefined
                    }
                  | PatchesEvent
                  | {
                      type: 'notify.patch'
                      patch: Patch
                    }
                  | {
                      type: 'notify.mutation'
                      patches: Array<Patch>
                      snapshot: Array<PortableTextBlock> | undefined
                      value: Array<PortableTextBlock> | undefined
                    }
                  | {
                      type: 'notify.blurred'
                      event: FocusEvent_2<HTMLDivElement, Element>
                    }
                  | {
                      type: 'notify.done loading'
                    }
                  | {
                      type: 'notify.editable'
                    }
                  | {
                      type: 'notify.error'
                      name: string
                      description: string
                      data: unknown
                    }
                  | {
                      type: 'notify.focused'
                      event: FocusEvent_2<HTMLDivElement, Element>
                    }
                  | {
                      type: 'notify.invalid value'
                      resolution: InvalidValueResolution | null
                      value: Array<PortableTextBlock> | undefined
                    }
                  | {
                      type: 'notify.loading'
                    }
                  | {
                      type: 'notify.read only'
                    }
                  | {
                      type: 'notify.ready'
                    }
                  | {
                      type: 'notify.selection'
                      selection: EditorSelection
                    }
                  | {
                      type: 'notify.value changed'
                      value: Array<PortableTextBlock> | undefined
                    }
                  | {
                      type: 'notify.unset'
                      previousValue: Array<PortableTextBlock>
                    },
                  undefined,
                  never,
                  never,
                  never,
                  never,
                  | {
                      type: 'annotation.add'
                      annotation: {
                        name: string
                        value: {
                          [prop: string]: unknown
                        }
                      }
                    }
                  | {
                      type: 'annotation.remove'
                      annotation: {
                        name: string
                      }
                    }
                  | {
                      type: 'annotation.toggle'
                      annotation: {
                        name: string
                        value: {
                          [prop: string]: unknown
                        }
                      }
                    }
                  | {
                      [props: string]: unknown
                      type: 'block.set'
                      at: [KeyedSegment]
                    }
                  | {
                      type: 'block.unset'
                      at: [KeyedSegment]
                      props: Array<string>
                    }
                  | {
                      type: 'blur'
                    }
                  | {
                      type: 'data transfer.set'
                      data: string
                      dataTransfer: DataTransfer
                      mimeType: MIMEType_2
                    }
                  | {
                      type: 'decorator.add'
                      decorator: string
                      selection?: NonNullable<EditorSelection>
                    }
                  | {
                      type: 'decorator.remove'
                      decorator: string
                    }
                  | {
                      type: 'decorator.toggle'
                      decorator: string
                    }
                  | {
                      type: 'delete'
                      selection: NonNullable<EditorSelection>
                    }
                  | {
                      type: 'delete.backward'
                      unit: TextUnit
                    }
                  | {
                      type: 'delete.block'
                      blockPath: [KeyedSegment]
                    }
                  | {
                      type: 'delete.forward'
                      unit: TextUnit
                    }
                  | {
                      type: 'delete.text'
                      anchor: BlockOffset_2
                      focus: BlockOffset_2
                    }
                  | {
                      type: 'focus'
                    }
                  | {
                      type: 'history.redo'
                    }
                  | {
                      type: 'history.undo'
                    }
                  | {
                      type: 'insert.blocks'
                      blocks: Array<PortableTextBlock>
                    }
                  | {
                      type: 'insert.block object'
                      placement: 'auto' | 'after' | 'before'
                      blockObject: {
                        name: string
                        value?: {
                          [prop: string]: unknown
                        }
                      }
                    }
                  | {
                      type: 'insert.inline object'
                      inlineObject: {
                        name: string
                        value?: {
                          [prop: string]: unknown
                        }
                      }
                    }
                  | {
                      type: 'insert.break'
                    }
                  | {
                      type: 'insert.soft break'
                    }
                  | {
                      type: 'insert.block'
                      block: PortableTextBlock
                      placement: 'auto' | 'after' | 'before'
                    }
                  | {
                      type: 'insert.span'
                      text: string
                      annotations?: Array<{
                        name: string
                        value: {
                          [prop: string]: unknown
                        }
                      }>
                      decorators?: Array<string>
                    }
                  | {
                      type: 'insert.text'
                      text: string
                      options?: TextInsertTextOptions
                    }
                  | {
                      type: 'insert.text block'
                      placement: 'auto' | 'after' | 'before'
                      textBlock?: {
                        children?: PortableTextTextBlock['children']
                      }
                    }
                  | {
                      type: 'list item.add'
                      listItem: string
                    }
                  | {
                      type: 'list item.remove'
                      listItem: string
                    }
                  | {
                      type: 'list item.toggle'
                      listItem: string
                    }
                  | {
                      type: 'move.block'
                      at: [KeyedSegment]
                      to: [KeyedSegment]
                    }
                  | {
                      type: 'move.block down'
                      at: [KeyedSegment]
                    }
                  | {
                      type: 'move.block up'
                      at: [KeyedSegment]
                    }
                  | {
                      type: 'select'
                      selection: EditorSelection
                    }
                  | {
                      type: 'select.previous block'
                    }
                  | {
                      type: 'select.next block'
                    }
                  | {
                      type: 'style.add'
                      style: string
                    }
                  | {
                      type: 'style.remove'
                      style: string
                    }
                  | {
                      type: 'style.toggle'
                      style: string
                    }
                  | {
                      type: 'text block.set'
                      at: [KeyedSegment]
                      level?: number
                      listItem?: string
                      style?: string
                    }
                  | {
                      type: 'text block.unset'
                      at: [KeyedSegment]
                      props: Array<'level' | 'listItem' | 'style'>
                    }
                  | ({
                      type: 'serialization.failure'
                      mimeType: `${string}/${string}`
                      reason: string
                    } & {
                      dataTransfer: DataTransfer
                    })
                  | ({
                      type: 'serialization.success'
                      data: string
                      mimeType: `${string}/${string}`
                      originEvent: 'copy' | 'cut' | 'unknown'
                    } & {
                      dataTransfer: DataTransfer
                    })
                  | ({
                      type: 'deserialization.failure'
                      mimeType: `${string}/${string}`
                      reason: string
                    } & {
                      dataTransfer: DataTransfer
                    })
                  | ({
                      type: 'deserialization.success'
                      data: Array<PortableTextBlock>
                      mimeType: `${string}/${string}`
                    } & {
                      dataTransfer: DataTransfer
                    })
                  | PatchEvent
                  | MutationEvent
                  | PatchesEvent
                  | {
                      type: 'blurred'
                      event: FocusEvent_2<HTMLDivElement, Element>
                    }
                  | {
                      type: 'done loading'
                    }
                  | {
                      type: 'editable'
                    }
                  | {
                      type: 'error'
                      name: string
                      description: string
                      data: unknown
                    }
                  | {
                      type: 'focused'
                      event: FocusEvent_2<HTMLDivElement, Element>
                    }
                  | {
                      type: 'invalid value'
                      resolution: InvalidValueResolution | null
                      value: Array<PortableTextBlock> | undefined
                    }
                  | {
                      type: 'loading'
                    }
                  | {
                      type: 'read only'
                    }
                  | {
                      type: 'ready'
                    }
                  | {
                      type: 'selection'
                      selection: EditorSelection
                    }
                  | {
                      type: 'value changed'
                      value: Array<PortableTextBlock> | undefined
                    }
                  | UnsetEvent
                  | {
                      type: 'custom.*'
                      event: CustomBehaviorEvent
                    }
                >
              }
              readonly 'history.*': {
                readonly actions: ActionFunction<
                  {
                    behaviors: Set<Behavior>
                    converters: Set<Converter>
                    keyGenerator: () => string
                    pendingEvents: Array<PatchEvent | MutationEvent>
                    schema: EditorSchema
                    initialReadOnly: boolean
                    maxBlocks: number | undefined
                    selection: EditorSelection
                    value: Array<PortableTextBlock> | undefined
                  },
                  | {
                      type: 'history.redo'
                    }
                  | {
                      type: 'history.undo'
                    },
                  | {
                      type: 'annotation.add'
                      annotation: {
                        name: string
                        value: {
                          [prop: string]: unknown
                        }
                      }
                    }
                  | {
                      type: 'annotation.remove'
                      annotation: {
                        name: string
                      }
                    }
                  | {
                      type: 'annotation.toggle'
                      annotation: {
                        name: string
                        value: {
                          [prop: string]: unknown
                        }
                      }
                    }
                  | {
                      [props: string]: unknown
                      type: 'block.set'
                      at: [KeyedSegment]
                    }
                  | {
                      type: 'block.unset'
                      at: [KeyedSegment]
                      props: Array<string>
                    }
                  | {
                      type: 'blur'
                    }
                  | {
                      type: 'data transfer.set'
                      data: string
                      dataTransfer: DataTransfer
                      mimeType: MIMEType_2
                    }
                  | {
                      type: 'decorator.add'
                      decorator: string
                      selection?: NonNullable<EditorSelection>
                    }
                  | {
                      type: 'decorator.remove'
                      decorator: string
                    }
                  | {
                      type: 'decorator.toggle'
                      decorator: string
                    }
                  | {
                      type: 'delete'
                      selection: NonNullable<EditorSelection>
                    }
                  | {
                      type: 'delete.backward'
                      unit: TextUnit
                    }
                  | {
                      type: 'delete.block'
                      blockPath: [KeyedSegment]
                    }
                  | {
                      type: 'delete.forward'
                      unit: TextUnit
                    }
                  | {
                      type: 'delete.text'
                      anchor: BlockOffset_2
                      focus: BlockOffset_2
                    }
                  | {
                      type: 'focus'
                    }
                  | {
                      type: 'history.redo'
                    }
                  | {
                      type: 'history.undo'
                    }
                  | {
                      type: 'insert.blocks'
                      blocks: Array<PortableTextBlock>
                    }
                  | {
                      type: 'insert.block object'
                      placement: 'auto' | 'after' | 'before'
                      blockObject: {
                        name: string
                        value?: {
                          [prop: string]: unknown
                        }
                      }
                    }
                  | {
                      type: 'insert.inline object'
                      inlineObject: {
                        name: string
                        value?: {
                          [prop: string]: unknown
                        }
                      }
                    }
                  | {
                      type: 'insert.break'
                    }
                  | {
                      type: 'insert.soft break'
                    }
                  | {
                      type: 'insert.block'
                      block: PortableTextBlock
                      placement: 'auto' | 'after' | 'before'
                    }
                  | {
                      type: 'insert.span'
                      text: string
                      annotations?: Array<{
                        name: string
                        value: {
                          [prop: string]: unknown
                        }
                      }>
                      decorators?: Array<string>
                    }
                  | {
                      type: 'insert.text'
                      text: string
                      options?: TextInsertTextOptions
                    }
                  | {
                      type: 'insert.text block'
                      placement: 'auto' | 'after' | 'before'
                      textBlock?: {
                        children?: PortableTextTextBlock['children']
                      }
                    }
                  | {
                      type: 'list item.add'
                      listItem: string
                    }
                  | {
                      type: 'list item.remove'
                      listItem: string
                    }
                  | {
                      type: 'list item.toggle'
                      listItem: string
                    }
                  | {
                      type: 'move.block'
                      at: [KeyedSegment]
                      to: [KeyedSegment]
                    }
                  | {
                      type: 'move.block down'
                      at: [KeyedSegment]
                    }
                  | {
                      type: 'move.block up'
                      at: [KeyedSegment]
                    }
                  | {
                      type: 'select'
                      selection: EditorSelection
                    }
                  | {
                      type: 'select.previous block'
                    }
                  | {
                      type: 'select.next block'
                    }
                  | {
                      type: 'style.add'
                      style: string
                    }
                  | {
                      type: 'style.remove'
                      style: string
                    }
                  | {
                      type: 'style.toggle'
                      style: string
                    }
                  | {
                      type: 'text block.set'
                      at: [KeyedSegment]
                      level?: number
                      listItem?: string
                      style?: string
                    }
                  | {
                      type: 'text block.unset'
                      at: [KeyedSegment]
                      props: Array<'level' | 'listItem' | 'style'>
                    }
                  | ({
                      type: 'serialization.failure'
                      mimeType: `${string}/${string}`
                      reason: string
                    } & {
                      dataTransfer: DataTransfer
                    })
                  | ({
                      type: 'serialization.success'
                      data: string
                      mimeType: `${string}/${string}`
                      originEvent: 'copy' | 'cut' | 'unknown'
                    } & {
                      dataTransfer: DataTransfer
                    })
                  | ({
                      type: 'deserialization.failure'
                      mimeType: `${string}/${string}`
                      reason: string
                    } & {
                      dataTransfer: DataTransfer
                    })
                  | ({
                      type: 'deserialization.success'
                      data: Array<PortableTextBlock>
                      mimeType: `${string}/${string}`
                    } & {
                      dataTransfer: DataTransfer
                    })
                  | PatchEvent
                  | MutationEvent
                  | {
                      type: 'normalizing'
                    }
                  | {
                      type: 'done normalizing'
                    }
                  | {
                      type: 'done syncing initial value'
                    }
                  | {
                      type: 'behavior event'
                      behaviorEvent:
                        | SyntheticBehaviorEvent
                        | NativeBehaviorEvent
                      editor: PortableTextSlateEditor
                      defaultActionCallback?: () => void
                      nativeEvent?: {
                        preventDefault: () => void
                      }
                    }
                  | {
                      type: 'custom behavior event'
                      behaviorEvent: CustomBehaviorEvent
                      editor: PortableTextSlateEditor
                      nativeEvent?: {
                        preventDefault: () => void
                      }
                    }
                  | CustomBehaviorEvent
                  | {
                      type: 'add behavior'
                      behavior: Behavior
                    }
                  | {
                      type: 'remove behavior'
                      behavior: Behavior
                    }
                  | {
                      type: 'update readOnly'
                      readOnly: boolean
                    }
                  | {
                      type: 'update schema'
                      schema: EditorSchema
                    }
                  | {
                      type: 'update behaviors'
                      behaviors: Array<Behavior>
                    }
                  | {
                      type: 'update key generator'
                      keyGenerator: () => string
                    }
                  | {
                      type: 'update value'
                      value: Array<PortableTextBlock> | undefined
                    }
                  | {
                      type: 'update maxBlocks'
                      maxBlocks: number | undefined
                    }
                  | PatchesEvent
                  | {
                      type: 'notify.patch'
                      patch: Patch
                    }
                  | {
                      type: 'notify.mutation'
                      patches: Array<Patch>
                      snapshot: Array<PortableTextBlock> | undefined
                      value: Array<PortableTextBlock> | undefined
                    }
                  | {
                      type: 'notify.blurred'
                      event: FocusEvent_2<HTMLDivElement, Element>
                    }
                  | {
                      type: 'notify.done loading'
                    }
                  | {
                      type: 'notify.editable'
                    }
                  | {
                      type: 'notify.error'
                      name: string
                      description: string
                      data: unknown
                    }
                  | {
                      type: 'notify.focused'
                      event: FocusEvent_2<HTMLDivElement, Element>
                    }
                  | {
                      type: 'notify.invalid value'
                      resolution: InvalidValueResolution | null
                      value: Array<PortableTextBlock> | undefined
                    }
                  | {
                      type: 'notify.loading'
                    }
                  | {
                      type: 'notify.read only'
                    }
                  | {
                      type: 'notify.ready'
                    }
                  | {
                      type: 'notify.selection'
                      selection: EditorSelection
                    }
                  | {
                      type: 'notify.value changed'
                      value: Array<PortableTextBlock> | undefined
                    }
                  | {
                      type: 'notify.unset'
                      previousValue: Array<PortableTextBlock>
                    },
                  undefined,
                  never,
                  never,
                  never,
                  never,
                  | {
                      type: 'annotation.add'
                      annotation: {
                        name: string
                        value: {
                          [prop: string]: unknown
                        }
                      }
                    }
                  | {
                      type: 'annotation.remove'
                      annotation: {
                        name: string
                      }
                    }
                  | {
                      type: 'annotation.toggle'
                      annotation: {
                        name: string
                        value: {
                          [prop: string]: unknown
                        }
                      }
                    }
                  | {
                      [props: string]: unknown
                      type: 'block.set'
                      at: [KeyedSegment]
                    }
                  | {
                      type: 'block.unset'
                      at: [KeyedSegment]
                      props: Array<string>
                    }
                  | {
                      type: 'blur'
                    }
                  | {
                      type: 'data transfer.set'
                      data: string
                      dataTransfer: DataTransfer
                      mimeType: MIMEType_2
                    }
                  | {
                      type: 'decorator.add'
                      decorator: string
                      selection?: NonNullable<EditorSelection>
                    }
                  | {
                      type: 'decorator.remove'
                      decorator: string
                    }
                  | {
                      type: 'decorator.toggle'
                      decorator: string
                    }
                  | {
                      type: 'delete'
                      selection: NonNullable<EditorSelection>
                    }
                  | {
                      type: 'delete.backward'
                      unit: TextUnit
                    }
                  | {
                      type: 'delete.block'
                      blockPath: [KeyedSegment]
                    }
                  | {
                      type: 'delete.forward'
                      unit: TextUnit
                    }
                  | {
                      type: 'delete.text'
                      anchor: BlockOffset_2
                      focus: BlockOffset_2
                    }
                  | {
                      type: 'focus'
                    }
                  | {
                      type: 'history.redo'
                    }
                  | {
                      type: 'history.undo'
                    }
                  | {
                      type: 'insert.blocks'
                      blocks: Array<PortableTextBlock>
                    }
                  | {
                      type: 'insert.block object'
                      placement: 'auto' | 'after' | 'before'
                      blockObject: {
                        name: string
                        value?: {
                          [prop: string]: unknown
                        }
                      }
                    }
                  | {
                      type: 'insert.inline object'
                      inlineObject: {
                        name: string
                        value?: {
                          [prop: string]: unknown
                        }
                      }
                    }
                  | {
                      type: 'insert.break'
                    }
                  | {
                      type: 'insert.soft break'
                    }
                  | {
                      type: 'insert.block'
                      block: PortableTextBlock
                      placement: 'auto' | 'after' | 'before'
                    }
                  | {
                      type: 'insert.span'
                      text: string
                      annotations?: Array<{
                        name: string
                        value: {
                          [prop: string]: unknown
                        }
                      }>
                      decorators?: Array<string>
                    }
                  | {
                      type: 'insert.text'
                      text: string
                      options?: TextInsertTextOptions
                    }
                  | {
                      type: 'insert.text block'
                      placement: 'auto' | 'after' | 'before'
                      textBlock?: {
                        children?: PortableTextTextBlock['children']
                      }
                    }
                  | {
                      type: 'list item.add'
                      listItem: string
                    }
                  | {
                      type: 'list item.remove'
                      listItem: string
                    }
                  | {
                      type: 'list item.toggle'
                      listItem: string
                    }
                  | {
                      type: 'move.block'
                      at: [KeyedSegment]
                      to: [KeyedSegment]
                    }
                  | {
                      type: 'move.block down'
                      at: [KeyedSegment]
                    }
                  | {
                      type: 'move.block up'
                      at: [KeyedSegment]
                    }
                  | {
                      type: 'select'
                      selection: EditorSelection
                    }
                  | {
                      type: 'select.previous block'
                    }
                  | {
                      type: 'select.next block'
                    }
                  | {
                      type: 'style.add'
                      style: string
                    }
                  | {
                      type: 'style.remove'
                      style: string
                    }
                  | {
                      type: 'style.toggle'
                      style: string
                    }
                  | {
                      type: 'text block.set'
                      at: [KeyedSegment]
                      level?: number
                      listItem?: string
                      style?: string
                    }
                  | {
                      type: 'text block.unset'
                      at: [KeyedSegment]
                      props: Array<'level' | 'listItem' | 'style'>
                    }
                  | ({
                      type: 'serialization.failure'
                      mimeType: `${string}/${string}`
                      reason: string
                    } & {
                      dataTransfer: DataTransfer
                    })
                  | ({
                      type: 'serialization.success'
                      data: string
                      mimeType: `${string}/${string}`
                      originEvent: 'copy' | 'cut' | 'unknown'
                    } & {
                      dataTransfer: DataTransfer
                    })
                  | ({
                      type: 'deserialization.failure'
                      mimeType: `${string}/${string}`
                      reason: string
                    } & {
                      dataTransfer: DataTransfer
                    })
                  | ({
                      type: 'deserialization.success'
                      data: Array<PortableTextBlock>
                      mimeType: `${string}/${string}`
                    } & {
                      dataTransfer: DataTransfer
                    })
                  | PatchEvent
                  | MutationEvent
                  | PatchesEvent
                  | {
                      type: 'blurred'
                      event: FocusEvent_2<HTMLDivElement, Element>
                    }
                  | {
                      type: 'done loading'
                    }
                  | {
                      type: 'editable'
                    }
                  | {
                      type: 'error'
                      name: string
                      description: string
                      data: unknown
                    }
                  | {
                      type: 'focused'
                      event: FocusEvent_2<HTMLDivElement, Element>
                    }
                  | {
                      type: 'invalid value'
                      resolution: InvalidValueResolution | null
                      value: Array<PortableTextBlock> | undefined
                    }
                  | {
                      type: 'loading'
                    }
                  | {
                      type: 'read only'
                    }
                  | {
                      type: 'ready'
                    }
                  | {
                      type: 'selection'
                      selection: EditorSelection
                    }
                  | {
                      type: 'value changed'
                      value: Array<PortableTextBlock> | undefined
                    }
                  | UnsetEvent
                  | {
                      type: 'custom.*'
                      event: CustomBehaviorEvent
                    }
                >
              }
              readonly 'insert.*': {
                readonly actions: ActionFunction<
                  {
                    behaviors: Set<Behavior>
                    converters: Set<Converter>
                    keyGenerator: () => string
                    pendingEvents: Array<PatchEvent | MutationEvent>
                    schema: EditorSchema
                    initialReadOnly: boolean
                    maxBlocks: number | undefined
                    selection: EditorSelection
                    value: Array<PortableTextBlock> | undefined
                  },
                  | {
                      type: 'insert.blocks'
                      blocks: Array<PortableTextBlock>
                    }
                  | {
                      type: 'insert.block object'
                      placement: 'auto' | 'after' | 'before'
                      blockObject: {
                        name: string
                        value?: {
                          [prop: string]: unknown
                        }
                      }
                    }
                  | {
                      type: 'insert.inline object'
                      inlineObject: {
                        name: string
                        value?: {
                          [prop: string]: unknown
                        }
                      }
                    }
                  | {
                      type: 'insert.break'
                    }
                  | {
                      type: 'insert.soft break'
                    }
                  | {
                      type: 'insert.block'
                      block: PortableTextBlock
                      placement: 'auto' | 'after' | 'before'
                    }
                  | {
                      type: 'insert.span'
                      text: string
                      annotations?: Array<{
                        name: string
                        value: {
                          [prop: string]: unknown
                        }
                      }>
                      decorators?: Array<string>
                    }
                  | {
                      type: 'insert.text'
                      text: string
                      options?: TextInsertTextOptions
                    }
                  | {
                      type: 'insert.text block'
                      placement: 'auto' | 'after' | 'before'
                      textBlock?: {
                        children?: PortableTextTextBlock['children']
                      }
                    },
                  | {
                      type: 'annotation.add'
                      annotation: {
                        name: string
                        value: {
                          [prop: string]: unknown
                        }
                      }
                    }
                  | {
                      type: 'annotation.remove'
                      annotation: {
                        name: string
                      }
                    }
                  | {
                      type: 'annotation.toggle'
                      annotation: {
                        name: string
                        value: {
                          [prop: string]: unknown
                        }
                      }
                    }
                  | {
                      [props: string]: unknown
                      type: 'block.set'
                      at: [KeyedSegment]
                    }
                  | {
                      type: 'block.unset'
                      at: [KeyedSegment]
                      props: Array<string>
                    }
                  | {
                      type: 'blur'
                    }
                  | {
                      type: 'data transfer.set'
                      data: string
                      dataTransfer: DataTransfer
                      mimeType: MIMEType_2
                    }
                  | {
                      type: 'decorator.add'
                      decorator: string
                      selection?: NonNullable<EditorSelection>
                    }
                  | {
                      type: 'decorator.remove'
                      decorator: string
                    }
                  | {
                      type: 'decorator.toggle'
                      decorator: string
                    }
                  | {
                      type: 'delete'
                      selection: NonNullable<EditorSelection>
                    }
                  | {
                      type: 'delete.backward'
                      unit: TextUnit
                    }
                  | {
                      type: 'delete.block'
                      blockPath: [KeyedSegment]
                    }
                  | {
                      type: 'delete.forward'
                      unit: TextUnit
                    }
                  | {
                      type: 'delete.text'
                      anchor: BlockOffset_2
                      focus: BlockOffset_2
                    }
                  | {
                      type: 'focus'
                    }
                  | {
                      type: 'history.redo'
                    }
                  | {
                      type: 'history.undo'
                    }
                  | {
                      type: 'insert.blocks'
                      blocks: Array<PortableTextBlock>
                    }
                  | {
                      type: 'insert.block object'
                      placement: 'auto' | 'after' | 'before'
                      blockObject: {
                        name: string
                        value?: {
                          [prop: string]: unknown
                        }
                      }
                    }
                  | {
                      type: 'insert.inline object'
                      inlineObject: {
                        name: string
                        value?: {
                          [prop: string]: unknown
                        }
                      }
                    }
                  | {
                      type: 'insert.break'
                    }
                  | {
                      type: 'insert.soft break'
                    }
                  | {
                      type: 'insert.block'
                      block: PortableTextBlock
                      placement: 'auto' | 'after' | 'before'
                    }
                  | {
                      type: 'insert.span'
                      text: string
                      annotations?: Array<{
                        name: string
                        value: {
                          [prop: string]: unknown
                        }
                      }>
                      decorators?: Array<string>
                    }
                  | {
                      type: 'insert.text'
                      text: string
                      options?: TextInsertTextOptions
                    }
                  | {
                      type: 'insert.text block'
                      placement: 'auto' | 'after' | 'before'
                      textBlock?: {
                        children?: PortableTextTextBlock['children']
                      }
                    }
                  | {
                      type: 'list item.add'
                      listItem: string
                    }
                  | {
                      type: 'list item.remove'
                      listItem: string
                    }
                  | {
                      type: 'list item.toggle'
                      listItem: string
                    }
                  | {
                      type: 'move.block'
                      at: [KeyedSegment]
                      to: [KeyedSegment]
                    }
                  | {
                      type: 'move.block down'
                      at: [KeyedSegment]
                    }
                  | {
                      type: 'move.block up'
                      at: [KeyedSegment]
                    }
                  | {
                      type: 'select'
                      selection: EditorSelection
                    }
                  | {
                      type: 'select.previous block'
                    }
                  | {
                      type: 'select.next block'
                    }
                  | {
                      type: 'style.add'
                      style: string
                    }
                  | {
                      type: 'style.remove'
                      style: string
                    }
                  | {
                      type: 'style.toggle'
                      style: string
                    }
                  | {
                      type: 'text block.set'
                      at: [KeyedSegment]
                      level?: number
                      listItem?: string
                      style?: string
                    }
                  | {
                      type: 'text block.unset'
                      at: [KeyedSegment]
                      props: Array<'level' | 'listItem' | 'style'>
                    }
                  | ({
                      type: 'serialization.failure'
                      mimeType: `${string}/${string}`
                      reason: string
                    } & {
                      dataTransfer: DataTransfer
                    })
                  | ({
                      type: 'serialization.success'
                      data: string
                      mimeType: `${string}/${string}`
                      originEvent: 'copy' | 'cut' | 'unknown'
                    } & {
                      dataTransfer: DataTransfer
                    })
                  | ({
                      type: 'deserialization.failure'
                      mimeType: `${string}/${string}`
                      reason: string
                    } & {
                      dataTransfer: DataTransfer
                    })
                  | ({
                      type: 'deserialization.success'
                      data: Array<PortableTextBlock>
                      mimeType: `${string}/${string}`
                    } & {
                      dataTransfer: DataTransfer
                    })
                  | PatchEvent
                  | MutationEvent
                  | {
                      type: 'normalizing'
                    }
                  | {
                      type: 'done normalizing'
                    }
                  | {
                      type: 'done syncing initial value'
                    }
                  | {
                      type: 'behavior event'
                      behaviorEvent:
                        | SyntheticBehaviorEvent
                        | NativeBehaviorEvent
                      editor: PortableTextSlateEditor
                      defaultActionCallback?: () => void
                      nativeEvent?: {
                        preventDefault: () => void
                      }
                    }
                  | {
                      type: 'custom behavior event'
                      behaviorEvent: CustomBehaviorEvent
                      editor: PortableTextSlateEditor
                      nativeEvent?: {
                        preventDefault: () => void
                      }
                    }
                  | CustomBehaviorEvent
                  | {
                      type: 'add behavior'
                      behavior: Behavior
                    }
                  | {
                      type: 'remove behavior'
                      behavior: Behavior
                    }
                  | {
                      type: 'update readOnly'
                      readOnly: boolean
                    }
                  | {
                      type: 'update schema'
                      schema: EditorSchema
                    }
                  | {
                      type: 'update behaviors'
                      behaviors: Array<Behavior>
                    }
                  | {
                      type: 'update key generator'
                      keyGenerator: () => string
                    }
                  | {
                      type: 'update value'
                      value: Array<PortableTextBlock> | undefined
                    }
                  | {
                      type: 'update maxBlocks'
                      maxBlocks: number | undefined
                    }
                  | PatchesEvent
                  | {
                      type: 'notify.patch'
                      patch: Patch
                    }
                  | {
                      type: 'notify.mutation'
                      patches: Array<Patch>
                      snapshot: Array<PortableTextBlock> | undefined
                      value: Array<PortableTextBlock> | undefined
                    }
                  | {
                      type: 'notify.blurred'
                      event: FocusEvent_2<HTMLDivElement, Element>
                    }
                  | {
                      type: 'notify.done loading'
                    }
                  | {
                      type: 'notify.editable'
                    }
                  | {
                      type: 'notify.error'
                      name: string
                      description: string
                      data: unknown
                    }
                  | {
                      type: 'notify.focused'
                      event: FocusEvent_2<HTMLDivElement, Element>
                    }
                  | {
                      type: 'notify.invalid value'
                      resolution: InvalidValueResolution | null
                      value: Array<PortableTextBlock> | undefined
                    }
                  | {
                      type: 'notify.loading'
                    }
                  | {
                      type: 'notify.read only'
                    }
                  | {
                      type: 'notify.ready'
                    }
                  | {
                      type: 'notify.selection'
                      selection: EditorSelection
                    }
                  | {
                      type: 'notify.value changed'
                      value: Array<PortableTextBlock> | undefined
                    }
                  | {
                      type: 'notify.unset'
                      previousValue: Array<PortableTextBlock>
                    },
                  undefined,
                  never,
                  never,
                  never,
                  never,
                  | {
                      type: 'annotation.add'
                      annotation: {
                        name: string
                        value: {
                          [prop: string]: unknown
                        }
                      }
                    }
                  | {
                      type: 'annotation.remove'
                      annotation: {
                        name: string
                      }
                    }
                  | {
                      type: 'annotation.toggle'
                      annotation: {
                        name: string
                        value: {
                          [prop: string]: unknown
                        }
                      }
                    }
                  | {
                      [props: string]: unknown
                      type: 'block.set'
                      at: [KeyedSegment]
                    }
                  | {
                      type: 'block.unset'
                      at: [KeyedSegment]
                      props: Array<string>
                    }
                  | {
                      type: 'blur'
                    }
                  | {
                      type: 'data transfer.set'
                      data: string
                      dataTransfer: DataTransfer
                      mimeType: MIMEType_2
                    }
                  | {
                      type: 'decorator.add'
                      decorator: string
                      selection?: NonNullable<EditorSelection>
                    }
                  | {
                      type: 'decorator.remove'
                      decorator: string
                    }
                  | {
                      type: 'decorator.toggle'
                      decorator: string
                    }
                  | {
                      type: 'delete'
                      selection: NonNullable<EditorSelection>
                    }
                  | {
                      type: 'delete.backward'
                      unit: TextUnit
                    }
                  | {
                      type: 'delete.block'
                      blockPath: [KeyedSegment]
                    }
                  | {
                      type: 'delete.forward'
                      unit: TextUnit
                    }
                  | {
                      type: 'delete.text'
                      anchor: BlockOffset_2
                      focus: BlockOffset_2
                    }
                  | {
                      type: 'focus'
                    }
                  | {
                      type: 'history.redo'
                    }
                  | {
                      type: 'history.undo'
                    }
                  | {
                      type: 'insert.blocks'
                      blocks: Array<PortableTextBlock>
                    }
                  | {
                      type: 'insert.block object'
                      placement: 'auto' | 'after' | 'before'
                      blockObject: {
                        name: string
                        value?: {
                          [prop: string]: unknown
                        }
                      }
                    }
                  | {
                      type: 'insert.inline object'
                      inlineObject: {
                        name: string
                        value?: {
                          [prop: string]: unknown
                        }
                      }
                    }
                  | {
                      type: 'insert.break'
                    }
                  | {
                      type: 'insert.soft break'
                    }
                  | {
                      type: 'insert.block'
                      block: PortableTextBlock
                      placement: 'auto' | 'after' | 'before'
                    }
                  | {
                      type: 'insert.span'
                      text: string
                      annotations?: Array<{
                        name: string
                        value: {
                          [prop: string]: unknown
                        }
                      }>
                      decorators?: Array<string>
                    }
                  | {
                      type: 'insert.text'
                      text: string
                      options?: TextInsertTextOptions
                    }
                  | {
                      type: 'insert.text block'
                      placement: 'auto' | 'after' | 'before'
                      textBlock?: {
                        children?: PortableTextTextBlock['children']
                      }
                    }
                  | {
                      type: 'list item.add'
                      listItem: string
                    }
                  | {
                      type: 'list item.remove'
                      listItem: string
                    }
                  | {
                      type: 'list item.toggle'
                      listItem: string
                    }
                  | {
                      type: 'move.block'
                      at: [KeyedSegment]
                      to: [KeyedSegment]
                    }
                  | {
                      type: 'move.block down'
                      at: [KeyedSegment]
                    }
                  | {
                      type: 'move.block up'
                      at: [KeyedSegment]
                    }
                  | {
                      type: 'select'
                      selection: EditorSelection
                    }
                  | {
                      type: 'select.previous block'
                    }
                  | {
                      type: 'select.next block'
                    }
                  | {
                      type: 'style.add'
                      style: string
                    }
                  | {
                      type: 'style.remove'
                      style: string
                    }
                  | {
                      type: 'style.toggle'
                      style: string
                    }
                  | {
                      type: 'text block.set'
                      at: [KeyedSegment]
                      level?: number
                      listItem?: string
                      style?: string
                    }
                  | {
                      type: 'text block.unset'
                      at: [KeyedSegment]
                      props: Array<'level' | 'listItem' | 'style'>
                    }
                  | ({
                      type: 'serialization.failure'
                      mimeType: `${string}/${string}`
                      reason: string
                    } & {
                      dataTransfer: DataTransfer
                    })
                  | ({
                      type: 'serialization.success'
                      data: string
                      mimeType: `${string}/${string}`
                      originEvent: 'copy' | 'cut' | 'unknown'
                    } & {
                      dataTransfer: DataTransfer
                    })
                  | ({
                      type: 'deserialization.failure'
                      mimeType: `${string}/${string}`
                      reason: string
                    } & {
                      dataTransfer: DataTransfer
                    })
                  | ({
                      type: 'deserialization.success'
                      data: Array<PortableTextBlock>
                      mimeType: `${string}/${string}`
                    } & {
                      dataTransfer: DataTransfer
                    })
                  | PatchEvent
                  | MutationEvent
                  | PatchesEvent
                  | {
                      type: 'blurred'
                      event: FocusEvent_2<HTMLDivElement, Element>
                    }
                  | {
                      type: 'done loading'
                    }
                  | {
                      type: 'editable'
                    }
                  | {
                      type: 'error'
                      name: string
                      description: string
                      data: unknown
                    }
                  | {
                      type: 'focused'
                      event: FocusEvent_2<HTMLDivElement, Element>
                    }
                  | {
                      type: 'invalid value'
                      resolution: InvalidValueResolution | null
                      value: Array<PortableTextBlock> | undefined
                    }
                  | {
                      type: 'loading'
                    }
                  | {
                      type: 'read only'
                    }
                  | {
                      type: 'ready'
                    }
                  | {
                      type: 'selection'
                      selection: EditorSelection
                    }
                  | {
                      type: 'value changed'
                      value: Array<PortableTextBlock> | undefined
                    }
                  | UnsetEvent
                  | {
                      type: 'custom.*'
                      event: CustomBehaviorEvent
                    }
                >
              }
              readonly 'list item.*': {
                readonly actions: ActionFunction<
                  {
                    behaviors: Set<Behavior>
                    converters: Set<Converter>
                    keyGenerator: () => string
                    pendingEvents: Array<PatchEvent | MutationEvent>
                    schema: EditorSchema
                    initialReadOnly: boolean
                    maxBlocks: number | undefined
                    selection: EditorSelection
                    value: Array<PortableTextBlock> | undefined
                  },
                  | {
                      type: 'list item.add'
                      listItem: string
                    }
                  | {
                      type: 'list item.remove'
                      listItem: string
                    }
                  | {
                      type: 'list item.toggle'
                      listItem: string
                    },
                  | {
                      type: 'annotation.add'
                      annotation: {
                        name: string
                        value: {
                          [prop: string]: unknown
                        }
                      }
                    }
                  | {
                      type: 'annotation.remove'
                      annotation: {
                        name: string
                      }
                    }
                  | {
                      type: 'annotation.toggle'
                      annotation: {
                        name: string
                        value: {
                          [prop: string]: unknown
                        }
                      }
                    }
                  | {
                      [props: string]: unknown
                      type: 'block.set'
                      at: [KeyedSegment]
                    }
                  | {
                      type: 'block.unset'
                      at: [KeyedSegment]
                      props: Array<string>
                    }
                  | {
                      type: 'blur'
                    }
                  | {
                      type: 'data transfer.set'
                      data: string
                      dataTransfer: DataTransfer
                      mimeType: MIMEType_2
                    }
                  | {
                      type: 'decorator.add'
                      decorator: string
                      selection?: NonNullable<EditorSelection>
                    }
                  | {
                      type: 'decorator.remove'
                      decorator: string
                    }
                  | {
                      type: 'decorator.toggle'
                      decorator: string
                    }
                  | {
                      type: 'delete'
                      selection: NonNullable<EditorSelection>
                    }
                  | {
                      type: 'delete.backward'
                      unit: TextUnit
                    }
                  | {
                      type: 'delete.block'
                      blockPath: [KeyedSegment]
                    }
                  | {
                      type: 'delete.forward'
                      unit: TextUnit
                    }
                  | {
                      type: 'delete.text'
                      anchor: BlockOffset_2
                      focus: BlockOffset_2
                    }
                  | {
                      type: 'focus'
                    }
                  | {
                      type: 'history.redo'
                    }
                  | {
                      type: 'history.undo'
                    }
                  | {
                      type: 'insert.blocks'
                      blocks: Array<PortableTextBlock>
                    }
                  | {
                      type: 'insert.block object'
                      placement: 'auto' | 'after' | 'before'
                      blockObject: {
                        name: string
                        value?: {
                          [prop: string]: unknown
                        }
                      }
                    }
                  | {
                      type: 'insert.inline object'
                      inlineObject: {
                        name: string
                        value?: {
                          [prop: string]: unknown
                        }
                      }
                    }
                  | {
                      type: 'insert.break'
                    }
                  | {
                      type: 'insert.soft break'
                    }
                  | {
                      type: 'insert.block'
                      block: PortableTextBlock
                      placement: 'auto' | 'after' | 'before'
                    }
                  | {
                      type: 'insert.span'
                      text: string
                      annotations?: Array<{
                        name: string
                        value: {
                          [prop: string]: unknown
                        }
                      }>
                      decorators?: Array<string>
                    }
                  | {
                      type: 'insert.text'
                      text: string
                      options?: TextInsertTextOptions
                    }
                  | {
                      type: 'insert.text block'
                      placement: 'auto' | 'after' | 'before'
                      textBlock?: {
                        children?: PortableTextTextBlock['children']
                      }
                    }
                  | {
                      type: 'list item.add'
                      listItem: string
                    }
                  | {
                      type: 'list item.remove'
                      listItem: string
                    }
                  | {
                      type: 'list item.toggle'
                      listItem: string
                    }
                  | {
                      type: 'move.block'
                      at: [KeyedSegment]
                      to: [KeyedSegment]
                    }
                  | {
                      type: 'move.block down'
                      at: [KeyedSegment]
                    }
                  | {
                      type: 'move.block up'
                      at: [KeyedSegment]
                    }
                  | {
                      type: 'select'
                      selection: EditorSelection
                    }
                  | {
                      type: 'select.previous block'
                    }
                  | {
                      type: 'select.next block'
                    }
                  | {
                      type: 'style.add'
                      style: string
                    }
                  | {
                      type: 'style.remove'
                      style: string
                    }
                  | {
                      type: 'style.toggle'
                      style: string
                    }
                  | {
                      type: 'text block.set'
                      at: [KeyedSegment]
                      level?: number
                      listItem?: string
                      style?: string
                    }
                  | {
                      type: 'text block.unset'
                      at: [KeyedSegment]
                      props: Array<'level' | 'listItem' | 'style'>
                    }
                  | ({
                      type: 'serialization.failure'
                      mimeType: `${string}/${string}`
                      reason: string
                    } & {
                      dataTransfer: DataTransfer
                    })
                  | ({
                      type: 'serialization.success'
                      data: string
                      mimeType: `${string}/${string}`
                      originEvent: 'copy' | 'cut' | 'unknown'
                    } & {
                      dataTransfer: DataTransfer
                    })
                  | ({
                      type: 'deserialization.failure'
                      mimeType: `${string}/${string}`
                      reason: string
                    } & {
                      dataTransfer: DataTransfer
                    })
                  | ({
                      type: 'deserialization.success'
                      data: Array<PortableTextBlock>
                      mimeType: `${string}/${string}`
                    } & {
                      dataTransfer: DataTransfer
                    })
                  | PatchEvent
                  | MutationEvent
                  | {
                      type: 'normalizing'
                    }
                  | {
                      type: 'done normalizing'
                    }
                  | {
                      type: 'done syncing initial value'
                    }
                  | {
                      type: 'behavior event'
                      behaviorEvent:
                        | SyntheticBehaviorEvent
                        | NativeBehaviorEvent
                      editor: PortableTextSlateEditor
                      defaultActionCallback?: () => void
                      nativeEvent?: {
                        preventDefault: () => void
                      }
                    }
                  | {
                      type: 'custom behavior event'
                      behaviorEvent: CustomBehaviorEvent
                      editor: PortableTextSlateEditor
                      nativeEvent?: {
                        preventDefault: () => void
                      }
                    }
                  | CustomBehaviorEvent
                  | {
                      type: 'add behavior'
                      behavior: Behavior
                    }
                  | {
                      type: 'remove behavior'
                      behavior: Behavior
                    }
                  | {
                      type: 'update readOnly'
                      readOnly: boolean
                    }
                  | {
                      type: 'update schema'
                      schema: EditorSchema
                    }
                  | {
                      type: 'update behaviors'
                      behaviors: Array<Behavior>
                    }
                  | {
                      type: 'update key generator'
                      keyGenerator: () => string
                    }
                  | {
                      type: 'update value'
                      value: Array<PortableTextBlock> | undefined
                    }
                  | {
                      type: 'update maxBlocks'
                      maxBlocks: number | undefined
                    }
                  | PatchesEvent
                  | {
                      type: 'notify.patch'
                      patch: Patch
                    }
                  | {
                      type: 'notify.mutation'
                      patches: Array<Patch>
                      snapshot: Array<PortableTextBlock> | undefined
                      value: Array<PortableTextBlock> | undefined
                    }
                  | {
                      type: 'notify.blurred'
                      event: FocusEvent_2<HTMLDivElement, Element>
                    }
                  | {
                      type: 'notify.done loading'
                    }
                  | {
                      type: 'notify.editable'
                    }
                  | {
                      type: 'notify.error'
                      name: string
                      description: string
                      data: unknown
                    }
                  | {
                      type: 'notify.focused'
                      event: FocusEvent_2<HTMLDivElement, Element>
                    }
                  | {
                      type: 'notify.invalid value'
                      resolution: InvalidValueResolution | null
                      value: Array<PortableTextBlock> | undefined
                    }
                  | {
                      type: 'notify.loading'
                    }
                  | {
                      type: 'notify.read only'
                    }
                  | {
                      type: 'notify.ready'
                    }
                  | {
                      type: 'notify.selection'
                      selection: EditorSelection
                    }
                  | {
                      type: 'notify.value changed'
                      value: Array<PortableTextBlock> | undefined
                    }
                  | {
                      type: 'notify.unset'
                      previousValue: Array<PortableTextBlock>
                    },
                  undefined,
                  never,
                  never,
                  never,
                  never,
                  | {
                      type: 'annotation.add'
                      annotation: {
                        name: string
                        value: {
                          [prop: string]: unknown
                        }
                      }
                    }
                  | {
                      type: 'annotation.remove'
                      annotation: {
                        name: string
                      }
                    }
                  | {
                      type: 'annotation.toggle'
                      annotation: {
                        name: string
                        value: {
                          [prop: string]: unknown
                        }
                      }
                    }
                  | {
                      [props: string]: unknown
                      type: 'block.set'
                      at: [KeyedSegment]
                    }
                  | {
                      type: 'block.unset'
                      at: [KeyedSegment]
                      props: Array<string>
                    }
                  | {
                      type: 'blur'
                    }
                  | {
                      type: 'data transfer.set'
                      data: string
                      dataTransfer: DataTransfer
                      mimeType: MIMEType_2
                    }
                  | {
                      type: 'decorator.add'
                      decorator: string
                      selection?: NonNullable<EditorSelection>
                    }
                  | {
                      type: 'decorator.remove'
                      decorator: string
                    }
                  | {
                      type: 'decorator.toggle'
                      decorator: string
                    }
                  | {
                      type: 'delete'
                      selection: NonNullable<EditorSelection>
                    }
                  | {
                      type: 'delete.backward'
                      unit: TextUnit
                    }
                  | {
                      type: 'delete.block'
                      blockPath: [KeyedSegment]
                    }
                  | {
                      type: 'delete.forward'
                      unit: TextUnit
                    }
                  | {
                      type: 'delete.text'
                      anchor: BlockOffset_2
                      focus: BlockOffset_2
                    }
                  | {
                      type: 'focus'
                    }
                  | {
                      type: 'history.redo'
                    }
                  | {
                      type: 'history.undo'
                    }
                  | {
                      type: 'insert.blocks'
                      blocks: Array<PortableTextBlock>
                    }
                  | {
                      type: 'insert.block object'
                      placement: 'auto' | 'after' | 'before'
                      blockObject: {
                        name: string
                        value?: {
                          [prop: string]: unknown
                        }
                      }
                    }
                  | {
                      type: 'insert.inline object'
                      inlineObject: {
                        name: string
                        value?: {
                          [prop: string]: unknown
                        }
                      }
                    }
                  | {
                      type: 'insert.break'
                    }
                  | {
                      type: 'insert.soft break'
                    }
                  | {
                      type: 'insert.block'
                      block: PortableTextBlock
                      placement: 'auto' | 'after' | 'before'
                    }
                  | {
                      type: 'insert.span'
                      text: string
                      annotations?: Array<{
                        name: string
                        value: {
                          [prop: string]: unknown
                        }
                      }>
                      decorators?: Array<string>
                    }
                  | {
                      type: 'insert.text'
                      text: string
                      options?: TextInsertTextOptions
                    }
                  | {
                      type: 'insert.text block'
                      placement: 'auto' | 'after' | 'before'
                      textBlock?: {
                        children?: PortableTextTextBlock['children']
                      }
                    }
                  | {
                      type: 'list item.add'
                      listItem: string
                    }
                  | {
                      type: 'list item.remove'
                      listItem: string
                    }
                  | {
                      type: 'list item.toggle'
                      listItem: string
                    }
                  | {
                      type: 'move.block'
                      at: [KeyedSegment]
                      to: [KeyedSegment]
                    }
                  | {
                      type: 'move.block down'
                      at: [KeyedSegment]
                    }
                  | {
                      type: 'move.block up'
                      at: [KeyedSegment]
                    }
                  | {
                      type: 'select'
                      selection: EditorSelection
                    }
                  | {
                      type: 'select.previous block'
                    }
                  | {
                      type: 'select.next block'
                    }
                  | {
                      type: 'style.add'
                      style: string
                    }
                  | {
                      type: 'style.remove'
                      style: string
                    }
                  | {
                      type: 'style.toggle'
                      style: string
                    }
                  | {
                      type: 'text block.set'
                      at: [KeyedSegment]
                      level?: number
                      listItem?: string
                      style?: string
                    }
                  | {
                      type: 'text block.unset'
                      at: [KeyedSegment]
                      props: Array<'level' | 'listItem' | 'style'>
                    }
                  | ({
                      type: 'serialization.failure'
                      mimeType: `${string}/${string}`
                      reason: string
                    } & {
                      dataTransfer: DataTransfer
                    })
                  | ({
                      type: 'serialization.success'
                      data: string
                      mimeType: `${string}/${string}`
                      originEvent: 'copy' | 'cut' | 'unknown'
                    } & {
                      dataTransfer: DataTransfer
                    })
                  | ({
                      type: 'deserialization.failure'
                      mimeType: `${string}/${string}`
                      reason: string
                    } & {
                      dataTransfer: DataTransfer
                    })
                  | ({
                      type: 'deserialization.success'
                      data: Array<PortableTextBlock>
                      mimeType: `${string}/${string}`
                    } & {
                      dataTransfer: DataTransfer
                    })
                  | PatchEvent
                  | MutationEvent
                  | PatchesEvent
                  | {
                      type: 'blurred'
                      event: FocusEvent_2<HTMLDivElement, Element>
                    }
                  | {
                      type: 'done loading'
                    }
                  | {
                      type: 'editable'
                    }
                  | {
                      type: 'error'
                      name: string
                      description: string
                      data: unknown
                    }
                  | {
                      type: 'focused'
                      event: FocusEvent_2<HTMLDivElement, Element>
                    }
                  | {
                      type: 'invalid value'
                      resolution: InvalidValueResolution | null
                      value: Array<PortableTextBlock> | undefined
                    }
                  | {
                      type: 'loading'
                    }
                  | {
                      type: 'read only'
                    }
                  | {
                      type: 'ready'
                    }
                  | {
                      type: 'selection'
                      selection: EditorSelection
                    }
                  | {
                      type: 'value changed'
                      value: Array<PortableTextBlock> | undefined
                    }
                  | UnsetEvent
                  | {
                      type: 'custom.*'
                      event: CustomBehaviorEvent
                    }
                >
              }
              readonly 'move.*': {
                readonly actions: ActionFunction<
                  {
                    behaviors: Set<Behavior>
                    converters: Set<Converter>
                    keyGenerator: () => string
                    pendingEvents: Array<PatchEvent | MutationEvent>
                    schema: EditorSchema
                    initialReadOnly: boolean
                    maxBlocks: number | undefined
                    selection: EditorSelection
                    value: Array<PortableTextBlock> | undefined
                  },
                  | {
                      type: 'move.block'
                      at: [KeyedSegment]
                      to: [KeyedSegment]
                    }
                  | {
                      type: 'move.block down'
                      at: [KeyedSegment]
                    }
                  | {
                      type: 'move.block up'
                      at: [KeyedSegment]
                    },
                  | {
                      type: 'annotation.add'
                      annotation: {
                        name: string
                        value: {
                          [prop: string]: unknown
                        }
                      }
                    }
                  | {
                      type: 'annotation.remove'
                      annotation: {
                        name: string
                      }
                    }
                  | {
                      type: 'annotation.toggle'
                      annotation: {
                        name: string
                        value: {
                          [prop: string]: unknown
                        }
                      }
                    }
                  | {
                      [props: string]: unknown
                      type: 'block.set'
                      at: [KeyedSegment]
                    }
                  | {
                      type: 'block.unset'
                      at: [KeyedSegment]
                      props: Array<string>
                    }
                  | {
                      type: 'blur'
                    }
                  | {
                      type: 'data transfer.set'
                      data: string
                      dataTransfer: DataTransfer
                      mimeType: MIMEType_2
                    }
                  | {
                      type: 'decorator.add'
                      decorator: string
                      selection?: NonNullable<EditorSelection>
                    }
                  | {
                      type: 'decorator.remove'
                      decorator: string
                    }
                  | {
                      type: 'decorator.toggle'
                      decorator: string
                    }
                  | {
                      type: 'delete'
                      selection: NonNullable<EditorSelection>
                    }
                  | {
                      type: 'delete.backward'
                      unit: TextUnit
                    }
                  | {
                      type: 'delete.block'
                      blockPath: [KeyedSegment]
                    }
                  | {
                      type: 'delete.forward'
                      unit: TextUnit
                    }
                  | {
                      type: 'delete.text'
                      anchor: BlockOffset_2
                      focus: BlockOffset_2
                    }
                  | {
                      type: 'focus'
                    }
                  | {
                      type: 'history.redo'
                    }
                  | {
                      type: 'history.undo'
                    }
                  | {
                      type: 'insert.blocks'
                      blocks: Array<PortableTextBlock>
                    }
                  | {
                      type: 'insert.block object'
                      placement: 'auto' | 'after' | 'before'
                      blockObject: {
                        name: string
                        value?: {
                          [prop: string]: unknown
                        }
                      }
                    }
                  | {
                      type: 'insert.inline object'
                      inlineObject: {
                        name: string
                        value?: {
                          [prop: string]: unknown
                        }
                      }
                    }
                  | {
                      type: 'insert.break'
                    }
                  | {
                      type: 'insert.soft break'
                    }
                  | {
                      type: 'insert.block'
                      block: PortableTextBlock
                      placement: 'auto' | 'after' | 'before'
                    }
                  | {
                      type: 'insert.span'
                      text: string
                      annotations?: Array<{
                        name: string
                        value: {
                          [prop: string]: unknown
                        }
                      }>
                      decorators?: Array<string>
                    }
                  | {
                      type: 'insert.text'
                      text: string
                      options?: TextInsertTextOptions
                    }
                  | {
                      type: 'insert.text block'
                      placement: 'auto' | 'after' | 'before'
                      textBlock?: {
                        children?: PortableTextTextBlock['children']
                      }
                    }
                  | {
                      type: 'list item.add'
                      listItem: string
                    }
                  | {
                      type: 'list item.remove'
                      listItem: string
                    }
                  | {
                      type: 'list item.toggle'
                      listItem: string
                    }
                  | {
                      type: 'move.block'
                      at: [KeyedSegment]
                      to: [KeyedSegment]
                    }
                  | {
                      type: 'move.block down'
                      at: [KeyedSegment]
                    }
                  | {
                      type: 'move.block up'
                      at: [KeyedSegment]
                    }
                  | {
                      type: 'select'
                      selection: EditorSelection
                    }
                  | {
                      type: 'select.previous block'
                    }
                  | {
                      type: 'select.next block'
                    }
                  | {
                      type: 'style.add'
                      style: string
                    }
                  | {
                      type: 'style.remove'
                      style: string
                    }
                  | {
                      type: 'style.toggle'
                      style: string
                    }
                  | {
                      type: 'text block.set'
                      at: [KeyedSegment]
                      level?: number
                      listItem?: string
                      style?: string
                    }
                  | {
                      type: 'text block.unset'
                      at: [KeyedSegment]
                      props: Array<'level' | 'listItem' | 'style'>
                    }
                  | ({
                      type: 'serialization.failure'
                      mimeType: `${string}/${string}`
                      reason: string
                    } & {
                      dataTransfer: DataTransfer
                    })
                  | ({
                      type: 'serialization.success'
                      data: string
                      mimeType: `${string}/${string}`
                      originEvent: 'copy' | 'cut' | 'unknown'
                    } & {
                      dataTransfer: DataTransfer
                    })
                  | ({
                      type: 'deserialization.failure'
                      mimeType: `${string}/${string}`
                      reason: string
                    } & {
                      dataTransfer: DataTransfer
                    })
                  | ({
                      type: 'deserialization.success'
                      data: Array<PortableTextBlock>
                      mimeType: `${string}/${string}`
                    } & {
                      dataTransfer: DataTransfer
                    })
                  | PatchEvent
                  | MutationEvent
                  | {
                      type: 'normalizing'
                    }
                  | {
                      type: 'done normalizing'
                    }
                  | {
                      type: 'done syncing initial value'
                    }
                  | {
                      type: 'behavior event'
                      behaviorEvent:
                        | SyntheticBehaviorEvent
                        | NativeBehaviorEvent
                      editor: PortableTextSlateEditor
                      defaultActionCallback?: () => void
                      nativeEvent?: {
                        preventDefault: () => void
                      }
                    }
                  | {
                      type: 'custom behavior event'
                      behaviorEvent: CustomBehaviorEvent
                      editor: PortableTextSlateEditor
                      nativeEvent?: {
                        preventDefault: () => void
                      }
                    }
                  | CustomBehaviorEvent
                  | {
                      type: 'add behavior'
                      behavior: Behavior
                    }
                  | {
                      type: 'remove behavior'
                      behavior: Behavior
                    }
                  | {
                      type: 'update readOnly'
                      readOnly: boolean
                    }
                  | {
                      type: 'update schema'
                      schema: EditorSchema
                    }
                  | {
                      type: 'update behaviors'
                      behaviors: Array<Behavior>
                    }
                  | {
                      type: 'update key generator'
                      keyGenerator: () => string
                    }
                  | {
                      type: 'update value'
                      value: Array<PortableTextBlock> | undefined
                    }
                  | {
                      type: 'update maxBlocks'
                      maxBlocks: number | undefined
                    }
                  | PatchesEvent
                  | {
                      type: 'notify.patch'
                      patch: Patch
                    }
                  | {
                      type: 'notify.mutation'
                      patches: Array<Patch>
                      snapshot: Array<PortableTextBlock> | undefined
                      value: Array<PortableTextBlock> | undefined
                    }
                  | {
                      type: 'notify.blurred'
                      event: FocusEvent_2<HTMLDivElement, Element>
                    }
                  | {
                      type: 'notify.done loading'
                    }
                  | {
                      type: 'notify.editable'
                    }
                  | {
                      type: 'notify.error'
                      name: string
                      description: string
                      data: unknown
                    }
                  | {
                      type: 'notify.focused'
                      event: FocusEvent_2<HTMLDivElement, Element>
                    }
                  | {
                      type: 'notify.invalid value'
                      resolution: InvalidValueResolution | null
                      value: Array<PortableTextBlock> | undefined
                    }
                  | {
                      type: 'notify.loading'
                    }
                  | {
                      type: 'notify.read only'
                    }
                  | {
                      type: 'notify.ready'
                    }
                  | {
                      type: 'notify.selection'
                      selection: EditorSelection
                    }
                  | {
                      type: 'notify.value changed'
                      value: Array<PortableTextBlock> | undefined
                    }
                  | {
                      type: 'notify.unset'
                      previousValue: Array<PortableTextBlock>
                    },
                  undefined,
                  never,
                  never,
                  never,
                  never,
                  | {
                      type: 'annotation.add'
                      annotation: {
                        name: string
                        value: {
                          [prop: string]: unknown
                        }
                      }
                    }
                  | {
                      type: 'annotation.remove'
                      annotation: {
                        name: string
                      }
                    }
                  | {
                      type: 'annotation.toggle'
                      annotation: {
                        name: string
                        value: {
                          [prop: string]: unknown
                        }
                      }
                    }
                  | {
                      [props: string]: unknown
                      type: 'block.set'
                      at: [KeyedSegment]
                    }
                  | {
                      type: 'block.unset'
                      at: [KeyedSegment]
                      props: Array<string>
                    }
                  | {
                      type: 'blur'
                    }
                  | {
                      type: 'data transfer.set'
                      data: string
                      dataTransfer: DataTransfer
                      mimeType: MIMEType_2
                    }
                  | {
                      type: 'decorator.add'
                      decorator: string
                      selection?: NonNullable<EditorSelection>
                    }
                  | {
                      type: 'decorator.remove'
                      decorator: string
                    }
                  | {
                      type: 'decorator.toggle'
                      decorator: string
                    }
                  | {
                      type: 'delete'
                      selection: NonNullable<EditorSelection>
                    }
                  | {
                      type: 'delete.backward'
                      unit: TextUnit
                    }
                  | {
                      type: 'delete.block'
                      blockPath: [KeyedSegment]
                    }
                  | {
                      type: 'delete.forward'
                      unit: TextUnit
                    }
                  | {
                      type: 'delete.text'
                      anchor: BlockOffset_2
                      focus: BlockOffset_2
                    }
                  | {
                      type: 'focus'
                    }
                  | {
                      type: 'history.redo'
                    }
                  | {
                      type: 'history.undo'
                    }
                  | {
                      type: 'insert.blocks'
                      blocks: Array<PortableTextBlock>
                    }
                  | {
                      type: 'insert.block object'
                      placement: 'auto' | 'after' | 'before'
                      blockObject: {
                        name: string
                        value?: {
                          [prop: string]: unknown
                        }
                      }
                    }
                  | {
                      type: 'insert.inline object'
                      inlineObject: {
                        name: string
                        value?: {
                          [prop: string]: unknown
                        }
                      }
                    }
                  | {
                      type: 'insert.break'
                    }
                  | {
                      type: 'insert.soft break'
                    }
                  | {
                      type: 'insert.block'
                      block: PortableTextBlock
                      placement: 'auto' | 'after' | 'before'
                    }
                  | {
                      type: 'insert.span'
                      text: string
                      annotations?: Array<{
                        name: string
                        value: {
                          [prop: string]: unknown
                        }
                      }>
                      decorators?: Array<string>
                    }
                  | {
                      type: 'insert.text'
                      text: string
                      options?: TextInsertTextOptions
                    }
                  | {
                      type: 'insert.text block'
                      placement: 'auto' | 'after' | 'before'
                      textBlock?: {
                        children?: PortableTextTextBlock['children']
                      }
                    }
                  | {
                      type: 'list item.add'
                      listItem: string
                    }
                  | {
                      type: 'list item.remove'
                      listItem: string
                    }
                  | {
                      type: 'list item.toggle'
                      listItem: string
                    }
                  | {
                      type: 'move.block'
                      at: [KeyedSegment]
                      to: [KeyedSegment]
                    }
                  | {
                      type: 'move.block down'
                      at: [KeyedSegment]
                    }
                  | {
                      type: 'move.block up'
                      at: [KeyedSegment]
                    }
                  | {
                      type: 'select'
                      selection: EditorSelection
                    }
                  | {
                      type: 'select.previous block'
                    }
                  | {
                      type: 'select.next block'
                    }
                  | {
                      type: 'style.add'
                      style: string
                    }
                  | {
                      type: 'style.remove'
                      style: string
                    }
                  | {
                      type: 'style.toggle'
                      style: string
                    }
                  | {
                      type: 'text block.set'
                      at: [KeyedSegment]
                      level?: number
                      listItem?: string
                      style?: string
                    }
                  | {
                      type: 'text block.unset'
                      at: [KeyedSegment]
                      props: Array<'level' | 'listItem' | 'style'>
                    }
                  | ({
                      type: 'serialization.failure'
                      mimeType: `${string}/${string}`
                      reason: string
                    } & {
                      dataTransfer: DataTransfer
                    })
                  | ({
                      type: 'serialization.success'
                      data: string
                      mimeType: `${string}/${string}`
                      originEvent: 'copy' | 'cut' | 'unknown'
                    } & {
                      dataTransfer: DataTransfer
                    })
                  | ({
                      type: 'deserialization.failure'
                      mimeType: `${string}/${string}`
                      reason: string
                    } & {
                      dataTransfer: DataTransfer
                    })
                  | ({
                      type: 'deserialization.success'
                      data: Array<PortableTextBlock>
                      mimeType: `${string}/${string}`
                    } & {
                      dataTransfer: DataTransfer
                    })
                  | PatchEvent
                  | MutationEvent
                  | PatchesEvent
                  | {
                      type: 'blurred'
                      event: FocusEvent_2<HTMLDivElement, Element>
                    }
                  | {
                      type: 'done loading'
                    }
                  | {
                      type: 'editable'
                    }
                  | {
                      type: 'error'
                      name: string
                      description: string
                      data: unknown
                    }
                  | {
                      type: 'focused'
                      event: FocusEvent_2<HTMLDivElement, Element>
                    }
                  | {
                      type: 'invalid value'
                      resolution: InvalidValueResolution | null
                      value: Array<PortableTextBlock> | undefined
                    }
                  | {
                      type: 'loading'
                    }
                  | {
                      type: 'read only'
                    }
                  | {
                      type: 'ready'
                    }
                  | {
                      type: 'selection'
                      selection: EditorSelection
                    }
                  | {
                      type: 'value changed'
                      value: Array<PortableTextBlock> | undefined
                    }
                  | UnsetEvent
                  | {
                      type: 'custom.*'
                      event: CustomBehaviorEvent
                    }
                >
              }
              readonly 'select': {
                readonly actions: ActionFunction<
                  {
                    behaviors: Set<Behavior>
                    converters: Set<Converter>
                    keyGenerator: () => string
                    pendingEvents: Array<PatchEvent | MutationEvent>
                    schema: EditorSchema
                    initialReadOnly: boolean
                    maxBlocks: number | undefined
                    selection: EditorSelection
                    value: Array<PortableTextBlock> | undefined
                  },
                  {
                    type: 'select'
                    selection: EditorSelection
                  },
                  | {
                      type: 'annotation.add'
                      annotation: {
                        name: string
                        value: {
                          [prop: string]: unknown
                        }
                      }
                    }
                  | {
                      type: 'annotation.remove'
                      annotation: {
                        name: string
                      }
                    }
                  | {
                      type: 'annotation.toggle'
                      annotation: {
                        name: string
                        value: {
                          [prop: string]: unknown
                        }
                      }
                    }
                  | {
                      [props: string]: unknown
                      type: 'block.set'
                      at: [KeyedSegment]
                    }
                  | {
                      type: 'block.unset'
                      at: [KeyedSegment]
                      props: Array<string>
                    }
                  | {
                      type: 'blur'
                    }
                  | {
                      type: 'data transfer.set'
                      data: string
                      dataTransfer: DataTransfer
                      mimeType: MIMEType_2
                    }
                  | {
                      type: 'decorator.add'
                      decorator: string
                      selection?: NonNullable<EditorSelection>
                    }
                  | {
                      type: 'decorator.remove'
                      decorator: string
                    }
                  | {
                      type: 'decorator.toggle'
                      decorator: string
                    }
                  | {
                      type: 'delete'
                      selection: NonNullable<EditorSelection>
                    }
                  | {
                      type: 'delete.backward'
                      unit: TextUnit
                    }
                  | {
                      type: 'delete.block'
                      blockPath: [KeyedSegment]
                    }
                  | {
                      type: 'delete.forward'
                      unit: TextUnit
                    }
                  | {
                      type: 'delete.text'
                      anchor: BlockOffset_2
                      focus: BlockOffset_2
                    }
                  | {
                      type: 'focus'
                    }
                  | {
                      type: 'history.redo'
                    }
                  | {
                      type: 'history.undo'
                    }
                  | {
                      type: 'insert.blocks'
                      blocks: Array<PortableTextBlock>
                    }
                  | {
                      type: 'insert.block object'
                      placement: 'auto' | 'after' | 'before'
                      blockObject: {
                        name: string
                        value?: {
                          [prop: string]: unknown
                        }
                      }
                    }
                  | {
                      type: 'insert.inline object'
                      inlineObject: {
                        name: string
                        value?: {
                          [prop: string]: unknown
                        }
                      }
                    }
                  | {
                      type: 'insert.break'
                    }
                  | {
                      type: 'insert.soft break'
                    }
                  | {
                      type: 'insert.block'
                      block: PortableTextBlock
                      placement: 'auto' | 'after' | 'before'
                    }
                  | {
                      type: 'insert.span'
                      text: string
                      annotations?: Array<{
                        name: string
                        value: {
                          [prop: string]: unknown
                        }
                      }>
                      decorators?: Array<string>
                    }
                  | {
                      type: 'insert.text'
                      text: string
                      options?: TextInsertTextOptions
                    }
                  | {
                      type: 'insert.text block'
                      placement: 'auto' | 'after' | 'before'
                      textBlock?: {
                        children?: PortableTextTextBlock['children']
                      }
                    }
                  | {
                      type: 'list item.add'
                      listItem: string
                    }
                  | {
                      type: 'list item.remove'
                      listItem: string
                    }
                  | {
                      type: 'list item.toggle'
                      listItem: string
                    }
                  | {
                      type: 'move.block'
                      at: [KeyedSegment]
                      to: [KeyedSegment]
                    }
                  | {
                      type: 'move.block down'
                      at: [KeyedSegment]
                    }
                  | {
                      type: 'move.block up'
                      at: [KeyedSegment]
                    }
                  | {
                      type: 'select'
                      selection: EditorSelection
                    }
                  | {
                      type: 'select.previous block'
                    }
                  | {
                      type: 'select.next block'
                    }
                  | {
                      type: 'style.add'
                      style: string
                    }
                  | {
                      type: 'style.remove'
                      style: string
                    }
                  | {
                      type: 'style.toggle'
                      style: string
                    }
                  | {
                      type: 'text block.set'
                      at: [KeyedSegment]
                      level?: number
                      listItem?: string
                      style?: string
                    }
                  | {
                      type: 'text block.unset'
                      at: [KeyedSegment]
                      props: Array<'level' | 'listItem' | 'style'>
                    }
                  | ({
                      type: 'serialization.failure'
                      mimeType: `${string}/${string}`
                      reason: string
                    } & {
                      dataTransfer: DataTransfer
                    })
                  | ({
                      type: 'serialization.success'
                      data: string
                      mimeType: `${string}/${string}`
                      originEvent: 'copy' | 'cut' | 'unknown'
                    } & {
                      dataTransfer: DataTransfer
                    })
                  | ({
                      type: 'deserialization.failure'
                      mimeType: `${string}/${string}`
                      reason: string
                    } & {
                      dataTransfer: DataTransfer
                    })
                  | ({
                      type: 'deserialization.success'
                      data: Array<PortableTextBlock>
                      mimeType: `${string}/${string}`
                    } & {
                      dataTransfer: DataTransfer
                    })
                  | PatchEvent
                  | MutationEvent
                  | {
                      type: 'normalizing'
                    }
                  | {
                      type: 'done normalizing'
                    }
                  | {
                      type: 'done syncing initial value'
                    }
                  | {
                      type: 'behavior event'
                      behaviorEvent:
                        | SyntheticBehaviorEvent
                        | NativeBehaviorEvent
                      editor: PortableTextSlateEditor
                      defaultActionCallback?: () => void
                      nativeEvent?: {
                        preventDefault: () => void
                      }
                    }
                  | {
                      type: 'custom behavior event'
                      behaviorEvent: CustomBehaviorEvent
                      editor: PortableTextSlateEditor
                      nativeEvent?: {
                        preventDefault: () => void
                      }
                    }
                  | CustomBehaviorEvent
                  | {
                      type: 'add behavior'
                      behavior: Behavior
                    }
                  | {
                      type: 'remove behavior'
                      behavior: Behavior
                    }
                  | {
                      type: 'update readOnly'
                      readOnly: boolean
                    }
                  | {
                      type: 'update schema'
                      schema: EditorSchema
                    }
                  | {
                      type: 'update behaviors'
                      behaviors: Array<Behavior>
                    }
                  | {
                      type: 'update key generator'
                      keyGenerator: () => string
                    }
                  | {
                      type: 'update value'
                      value: Array<PortableTextBlock> | undefined
                    }
                  | {
                      type: 'update maxBlocks'
                      maxBlocks: number | undefined
                    }
                  | PatchesEvent
                  | {
                      type: 'notify.patch'
                      patch: Patch
                    }
                  | {
                      type: 'notify.mutation'
                      patches: Array<Patch>
                      snapshot: Array<PortableTextBlock> | undefined
                      value: Array<PortableTextBlock> | undefined
                    }
                  | {
                      type: 'notify.blurred'
                      event: FocusEvent_2<HTMLDivElement, Element>
                    }
                  | {
                      type: 'notify.done loading'
                    }
                  | {
                      type: 'notify.editable'
                    }
                  | {
                      type: 'notify.error'
                      name: string
                      description: string
                      data: unknown
                    }
                  | {
                      type: 'notify.focused'
                      event: FocusEvent_2<HTMLDivElement, Element>
                    }
                  | {
                      type: 'notify.invalid value'
                      resolution: InvalidValueResolution | null
                      value: Array<PortableTextBlock> | undefined
                    }
                  | {
                      type: 'notify.loading'
                    }
                  | {
                      type: 'notify.read only'
                    }
                  | {
                      type: 'notify.ready'
                    }
                  | {
                      type: 'notify.selection'
                      selection: EditorSelection
                    }
                  | {
                      type: 'notify.value changed'
                      value: Array<PortableTextBlock> | undefined
                    }
                  | {
                      type: 'notify.unset'
                      previousValue: Array<PortableTextBlock>
                    },
                  undefined,
                  never,
                  never,
                  never,
                  never,
                  | {
                      type: 'annotation.add'
                      annotation: {
                        name: string
                        value: {
                          [prop: string]: unknown
                        }
                      }
                    }
                  | {
                      type: 'annotation.remove'
                      annotation: {
                        name: string
                      }
                    }
                  | {
                      type: 'annotation.toggle'
                      annotation: {
                        name: string
                        value: {
                          [prop: string]: unknown
                        }
                      }
                    }
                  | {
                      [props: string]: unknown
                      type: 'block.set'
                      at: [KeyedSegment]
                    }
                  | {
                      type: 'block.unset'
                      at: [KeyedSegment]
                      props: Array<string>
                    }
                  | {
                      type: 'blur'
                    }
                  | {
                      type: 'data transfer.set'
                      data: string
                      dataTransfer: DataTransfer
                      mimeType: MIMEType_2
                    }
                  | {
                      type: 'decorator.add'
                      decorator: string
                      selection?: NonNullable<EditorSelection>
                    }
                  | {
                      type: 'decorator.remove'
                      decorator: string
                    }
                  | {
                      type: 'decorator.toggle'
                      decorator: string
                    }
                  | {
                      type: 'delete'
                      selection: NonNullable<EditorSelection>
                    }
                  | {
                      type: 'delete.backward'
                      unit: TextUnit
                    }
                  | {
                      type: 'delete.block'
                      blockPath: [KeyedSegment]
                    }
                  | {
                      type: 'delete.forward'
                      unit: TextUnit
                    }
                  | {
                      type: 'delete.text'
                      anchor: BlockOffset_2
                      focus: BlockOffset_2
                    }
                  | {
                      type: 'focus'
                    }
                  | {
                      type: 'history.redo'
                    }
                  | {
                      type: 'history.undo'
                    }
                  | {
                      type: 'insert.blocks'
                      blocks: Array<PortableTextBlock>
                    }
                  | {
                      type: 'insert.block object'
                      placement: 'auto' | 'after' | 'before'
                      blockObject: {
                        name: string
                        value?: {
                          [prop: string]: unknown
                        }
                      }
                    }
                  | {
                      type: 'insert.inline object'
                      inlineObject: {
                        name: string
                        value?: {
                          [prop: string]: unknown
                        }
                      }
                    }
                  | {
                      type: 'insert.break'
                    }
                  | {
                      type: 'insert.soft break'
                    }
                  | {
                      type: 'insert.block'
                      block: PortableTextBlock
                      placement: 'auto' | 'after' | 'before'
                    }
                  | {
                      type: 'insert.span'
                      text: string
                      annotations?: Array<{
                        name: string
                        value: {
                          [prop: string]: unknown
                        }
                      }>
                      decorators?: Array<string>
                    }
                  | {
                      type: 'insert.text'
                      text: string
                      options?: TextInsertTextOptions
                    }
                  | {
                      type: 'insert.text block'
                      placement: 'auto' | 'after' | 'before'
                      textBlock?: {
                        children?: PortableTextTextBlock['children']
                      }
                    }
                  | {
                      type: 'list item.add'
                      listItem: string
                    }
                  | {
                      type: 'list item.remove'
                      listItem: string
                    }
                  | {
                      type: 'list item.toggle'
                      listItem: string
                    }
                  | {
                      type: 'move.block'
                      at: [KeyedSegment]
                      to: [KeyedSegment]
                    }
                  | {
                      type: 'move.block down'
                      at: [KeyedSegment]
                    }
                  | {
                      type: 'move.block up'
                      at: [KeyedSegment]
                    }
                  | {
                      type: 'select'
                      selection: EditorSelection
                    }
                  | {
                      type: 'select.previous block'
                    }
                  | {
                      type: 'select.next block'
                    }
                  | {
                      type: 'style.add'
                      style: string
                    }
                  | {
                      type: 'style.remove'
                      style: string
                    }
                  | {
                      type: 'style.toggle'
                      style: string
                    }
                  | {
                      type: 'text block.set'
                      at: [KeyedSegment]
                      level?: number
                      listItem?: string
                      style?: string
                    }
                  | {
                      type: 'text block.unset'
                      at: [KeyedSegment]
                      props: Array<'level' | 'listItem' | 'style'>
                    }
                  | ({
                      type: 'serialization.failure'
                      mimeType: `${string}/${string}`
                      reason: string
                    } & {
                      dataTransfer: DataTransfer
                    })
                  | ({
                      type: 'serialization.success'
                      data: string
                      mimeType: `${string}/${string}`
                      originEvent: 'copy' | 'cut' | 'unknown'
                    } & {
                      dataTransfer: DataTransfer
                    })
                  | ({
                      type: 'deserialization.failure'
                      mimeType: `${string}/${string}`
                      reason: string
                    } & {
                      dataTransfer: DataTransfer
                    })
                  | ({
                      type: 'deserialization.success'
                      data: Array<PortableTextBlock>
                      mimeType: `${string}/${string}`
                    } & {
                      dataTransfer: DataTransfer
                    })
                  | PatchEvent
                  | MutationEvent
                  | PatchesEvent
                  | {
                      type: 'blurred'
                      event: FocusEvent_2<HTMLDivElement, Element>
                    }
                  | {
                      type: 'done loading'
                    }
                  | {
                      type: 'editable'
                    }
                  | {
                      type: 'error'
                      name: string
                      description: string
                      data: unknown
                    }
                  | {
                      type: 'focused'
                      event: FocusEvent_2<HTMLDivElement, Element>
                    }
                  | {
                      type: 'invalid value'
                      resolution: InvalidValueResolution | null
                      value: Array<PortableTextBlock> | undefined
                    }
                  | {
                      type: 'loading'
                    }
                  | {
                      type: 'read only'
                    }
                  | {
                      type: 'ready'
                    }
                  | {
                      type: 'selection'
                      selection: EditorSelection
                    }
                  | {
                      type: 'value changed'
                      value: Array<PortableTextBlock> | undefined
                    }
                  | UnsetEvent
                  | {
                      type: 'custom.*'
                      event: CustomBehaviorEvent
                    }
                >
              }
              readonly 'select.*': {
                readonly actions: ActionFunction<
                  {
                    behaviors: Set<Behavior>
                    converters: Set<Converter>
                    keyGenerator: () => string
                    pendingEvents: Array<PatchEvent | MutationEvent>
                    schema: EditorSchema
                    initialReadOnly: boolean
                    maxBlocks: number | undefined
                    selection: EditorSelection
                    value: Array<PortableTextBlock> | undefined
                  },
                  | {
                      type: 'select.previous block'
                    }
                  | {
                      type: 'select.next block'
                    },
                  | {
                      type: 'annotation.add'
                      annotation: {
                        name: string
                        value: {
                          [prop: string]: unknown
                        }
                      }
                    }
                  | {
                      type: 'annotation.remove'
                      annotation: {
                        name: string
                      }
                    }
                  | {
                      type: 'annotation.toggle'
                      annotation: {
                        name: string
                        value: {
                          [prop: string]: unknown
                        }
                      }
                    }
                  | {
                      [props: string]: unknown
                      type: 'block.set'
                      at: [KeyedSegment]
                    }
                  | {
                      type: 'block.unset'
                      at: [KeyedSegment]
                      props: Array<string>
                    }
                  | {
                      type: 'blur'
                    }
                  | {
                      type: 'data transfer.set'
                      data: string
                      dataTransfer: DataTransfer
                      mimeType: MIMEType_2
                    }
                  | {
                      type: 'decorator.add'
                      decorator: string
                      selection?: NonNullable<EditorSelection>
                    }
                  | {
                      type: 'decorator.remove'
                      decorator: string
                    }
                  | {
                      type: 'decorator.toggle'
                      decorator: string
                    }
                  | {
                      type: 'delete'
                      selection: NonNullable<EditorSelection>
                    }
                  | {
                      type: 'delete.backward'
                      unit: TextUnit
                    }
                  | {
                      type: 'delete.block'
                      blockPath: [KeyedSegment]
                    }
                  | {
                      type: 'delete.forward'
                      unit: TextUnit
                    }
                  | {
                      type: 'delete.text'
                      anchor: BlockOffset_2
                      focus: BlockOffset_2
                    }
                  | {
                      type: 'focus'
                    }
                  | {
                      type: 'history.redo'
                    }
                  | {
                      type: 'history.undo'
                    }
                  | {
                      type: 'insert.blocks'
                      blocks: Array<PortableTextBlock>
                    }
                  | {
                      type: 'insert.block object'
                      placement: 'auto' | 'after' | 'before'
                      blockObject: {
                        name: string
                        value?: {
                          [prop: string]: unknown
                        }
                      }
                    }
                  | {
                      type: 'insert.inline object'
                      inlineObject: {
                        name: string
                        value?: {
                          [prop: string]: unknown
                        }
                      }
                    }
                  | {
                      type: 'insert.break'
                    }
                  | {
                      type: 'insert.soft break'
                    }
                  | {
                      type: 'insert.block'
                      block: PortableTextBlock
                      placement: 'auto' | 'after' | 'before'
                    }
                  | {
                      type: 'insert.span'
                      text: string
                      annotations?: Array<{
                        name: string
                        value: {
                          [prop: string]: unknown
                        }
                      }>
                      decorators?: Array<string>
                    }
                  | {
                      type: 'insert.text'
                      text: string
                      options?: TextInsertTextOptions
                    }
                  | {
                      type: 'insert.text block'
                      placement: 'auto' | 'after' | 'before'
                      textBlock?: {
                        children?: PortableTextTextBlock['children']
                      }
                    }
                  | {
                      type: 'list item.add'
                      listItem: string
                    }
                  | {
                      type: 'list item.remove'
                      listItem: string
                    }
                  | {
                      type: 'list item.toggle'
                      listItem: string
                    }
                  | {
                      type: 'move.block'
                      at: [KeyedSegment]
                      to: [KeyedSegment]
                    }
                  | {
                      type: 'move.block down'
                      at: [KeyedSegment]
                    }
                  | {
                      type: 'move.block up'
                      at: [KeyedSegment]
                    }
                  | {
                      type: 'select'
                      selection: EditorSelection
                    }
                  | {
                      type: 'select.previous block'
                    }
                  | {
                      type: 'select.next block'
                    }
                  | {
                      type: 'style.add'
                      style: string
                    }
                  | {
                      type: 'style.remove'
                      style: string
                    }
                  | {
                      type: 'style.toggle'
                      style: string
                    }
                  | {
                      type: 'text block.set'
                      at: [KeyedSegment]
                      level?: number
                      listItem?: string
                      style?: string
                    }
                  | {
                      type: 'text block.unset'
                      at: [KeyedSegment]
                      props: Array<'level' | 'listItem' | 'style'>
                    }
                  | ({
                      type: 'serialization.failure'
                      mimeType: `${string}/${string}`
                      reason: string
                    } & {
                      dataTransfer: DataTransfer
                    })
                  | ({
                      type: 'serialization.success'
                      data: string
                      mimeType: `${string}/${string}`
                      originEvent: 'copy' | 'cut' | 'unknown'
                    } & {
                      dataTransfer: DataTransfer
                    })
                  | ({
                      type: 'deserialization.failure'
                      mimeType: `${string}/${string}`
                      reason: string
                    } & {
                      dataTransfer: DataTransfer
                    })
                  | ({
                      type: 'deserialization.success'
                      data: Array<PortableTextBlock>
                      mimeType: `${string}/${string}`
                    } & {
                      dataTransfer: DataTransfer
                    })
                  | PatchEvent
                  | MutationEvent
                  | {
                      type: 'normalizing'
                    }
                  | {
                      type: 'done normalizing'
                    }
                  | {
                      type: 'done syncing initial value'
                    }
                  | {
                      type: 'behavior event'
                      behaviorEvent:
                        | SyntheticBehaviorEvent
                        | NativeBehaviorEvent
                      editor: PortableTextSlateEditor
                      defaultActionCallback?: () => void
                      nativeEvent?: {
                        preventDefault: () => void
                      }
                    }
                  | {
                      type: 'custom behavior event'
                      behaviorEvent: CustomBehaviorEvent
                      editor: PortableTextSlateEditor
                      nativeEvent?: {
                        preventDefault: () => void
                      }
                    }
                  | CustomBehaviorEvent
                  | {
                      type: 'add behavior'
                      behavior: Behavior
                    }
                  | {
                      type: 'remove behavior'
                      behavior: Behavior
                    }
                  | {
                      type: 'update readOnly'
                      readOnly: boolean
                    }
                  | {
                      type: 'update schema'
                      schema: EditorSchema
                    }
                  | {
                      type: 'update behaviors'
                      behaviors: Array<Behavior>
                    }
                  | {
                      type: 'update key generator'
                      keyGenerator: () => string
                    }
                  | {
                      type: 'update value'
                      value: Array<PortableTextBlock> | undefined
                    }
                  | {
                      type: 'update maxBlocks'
                      maxBlocks: number | undefined
                    }
                  | PatchesEvent
                  | {
                      type: 'notify.patch'
                      patch: Patch
                    }
                  | {
                      type: 'notify.mutation'
                      patches: Array<Patch>
                      snapshot: Array<PortableTextBlock> | undefined
                      value: Array<PortableTextBlock> | undefined
                    }
                  | {
                      type: 'notify.blurred'
                      event: FocusEvent_2<HTMLDivElement, Element>
                    }
                  | {
                      type: 'notify.done loading'
                    }
                  | {
                      type: 'notify.editable'
                    }
                  | {
                      type: 'notify.error'
                      name: string
                      description: string
                      data: unknown
                    }
                  | {
                      type: 'notify.focused'
                      event: FocusEvent_2<HTMLDivElement, Element>
                    }
                  | {
                      type: 'notify.invalid value'
                      resolution: InvalidValueResolution | null
                      value: Array<PortableTextBlock> | undefined
                    }
                  | {
                      type: 'notify.loading'
                    }
                  | {
                      type: 'notify.read only'
                    }
                  | {
                      type: 'notify.ready'
                    }
                  | {
                      type: 'notify.selection'
                      selection: EditorSelection
                    }
                  | {
                      type: 'notify.value changed'
                      value: Array<PortableTextBlock> | undefined
                    }
                  | {
                      type: 'notify.unset'
                      previousValue: Array<PortableTextBlock>
                    },
                  undefined,
                  never,
                  never,
                  never,
                  never,
                  | {
                      type: 'annotation.add'
                      annotation: {
                        name: string
                        value: {
                          [prop: string]: unknown
                        }
                      }
                    }
                  | {
                      type: 'annotation.remove'
                      annotation: {
                        name: string
                      }
                    }
                  | {
                      type: 'annotation.toggle'
                      annotation: {
                        name: string
                        value: {
                          [prop: string]: unknown
                        }
                      }
                    }
                  | {
                      [props: string]: unknown
                      type: 'block.set'
                      at: [KeyedSegment]
                    }
                  | {
                      type: 'block.unset'
                      at: [KeyedSegment]
                      props: Array<string>
                    }
                  | {
                      type: 'blur'
                    }
                  | {
                      type: 'data transfer.set'
                      data: string
                      dataTransfer: DataTransfer
                      mimeType: MIMEType_2
                    }
                  | {
                      type: 'decorator.add'
                      decorator: string
                      selection?: NonNullable<EditorSelection>
                    }
                  | {
                      type: 'decorator.remove'
                      decorator: string
                    }
                  | {
                      type: 'decorator.toggle'
                      decorator: string
                    }
                  | {
                      type: 'delete'
                      selection: NonNullable<EditorSelection>
                    }
                  | {
                      type: 'delete.backward'
                      unit: TextUnit
                    }
                  | {
                      type: 'delete.block'
                      blockPath: [KeyedSegment]
                    }
                  | {
                      type: 'delete.forward'
                      unit: TextUnit
                    }
                  | {
                      type: 'delete.text'
                      anchor: BlockOffset_2
                      focus: BlockOffset_2
                    }
                  | {
                      type: 'focus'
                    }
                  | {
                      type: 'history.redo'
                    }
                  | {
                      type: 'history.undo'
                    }
                  | {
                      type: 'insert.blocks'
                      blocks: Array<PortableTextBlock>
                    }
                  | {
                      type: 'insert.block object'
                      placement: 'auto' | 'after' | 'before'
                      blockObject: {
                        name: string
                        value?: {
                          [prop: string]: unknown
                        }
                      }
                    }
                  | {
                      type: 'insert.inline object'
                      inlineObject: {
                        name: string
                        value?: {
                          [prop: string]: unknown
                        }
                      }
                    }
                  | {
                      type: 'insert.break'
                    }
                  | {
                      type: 'insert.soft break'
                    }
                  | {
                      type: 'insert.block'
                      block: PortableTextBlock
                      placement: 'auto' | 'after' | 'before'
                    }
                  | {
                      type: 'insert.span'
                      text: string
                      annotations?: Array<{
                        name: string
                        value: {
                          [prop: string]: unknown
                        }
                      }>
                      decorators?: Array<string>
                    }
                  | {
                      type: 'insert.text'
                      text: string
                      options?: TextInsertTextOptions
                    }
                  | {
                      type: 'insert.text block'
                      placement: 'auto' | 'after' | 'before'
                      textBlock?: {
                        children?: PortableTextTextBlock['children']
                      }
                    }
                  | {
                      type: 'list item.add'
                      listItem: string
                    }
                  | {
                      type: 'list item.remove'
                      listItem: string
                    }
                  | {
                      type: 'list item.toggle'
                      listItem: string
                    }
                  | {
                      type: 'move.block'
                      at: [KeyedSegment]
                      to: [KeyedSegment]
                    }
                  | {
                      type: 'move.block down'
                      at: [KeyedSegment]
                    }
                  | {
                      type: 'move.block up'
                      at: [KeyedSegment]
                    }
                  | {
                      type: 'select'
                      selection: EditorSelection
                    }
                  | {
                      type: 'select.previous block'
                    }
                  | {
                      type: 'select.next block'
                    }
                  | {
                      type: 'style.add'
                      style: string
                    }
                  | {
                      type: 'style.remove'
                      style: string
                    }
                  | {
                      type: 'style.toggle'
                      style: string
                    }
                  | {
                      type: 'text block.set'
                      at: [KeyedSegment]
                      level?: number
                      listItem?: string
                      style?: string
                    }
                  | {
                      type: 'text block.unset'
                      at: [KeyedSegment]
                      props: Array<'level' | 'listItem' | 'style'>
                    }
                  | ({
                      type: 'serialization.failure'
                      mimeType: `${string}/${string}`
                      reason: string
                    } & {
                      dataTransfer: DataTransfer
                    })
                  | ({
                      type: 'serialization.success'
                      data: string
                      mimeType: `${string}/${string}`
                      originEvent: 'copy' | 'cut' | 'unknown'
                    } & {
                      dataTransfer: DataTransfer
                    })
                  | ({
                      type: 'deserialization.failure'
                      mimeType: `${string}/${string}`
                      reason: string
                    } & {
                      dataTransfer: DataTransfer
                    })
                  | ({
                      type: 'deserialization.success'
                      data: Array<PortableTextBlock>
                      mimeType: `${string}/${string}`
                    } & {
                      dataTransfer: DataTransfer
                    })
                  | PatchEvent
                  | MutationEvent
                  | PatchesEvent
                  | {
                      type: 'blurred'
                      event: FocusEvent_2<HTMLDivElement, Element>
                    }
                  | {
                      type: 'done loading'
                    }
                  | {
                      type: 'editable'
                    }
                  | {
                      type: 'error'
                      name: string
                      description: string
                      data: unknown
                    }
                  | {
                      type: 'focused'
                      event: FocusEvent_2<HTMLDivElement, Element>
                    }
                  | {
                      type: 'invalid value'
                      resolution: InvalidValueResolution | null
                      value: Array<PortableTextBlock> | undefined
                    }
                  | {
                      type: 'loading'
                    }
                  | {
                      type: 'read only'
                    }
                  | {
                      type: 'ready'
                    }
                  | {
                      type: 'selection'
                      selection: EditorSelection
                    }
                  | {
                      type: 'value changed'
                      value: Array<PortableTextBlock> | undefined
                    }
                  | UnsetEvent
                  | {
                      type: 'custom.*'
                      event: CustomBehaviorEvent
                    }
                >
              }
              readonly 'style.*': {
                readonly actions: ActionFunction<
                  {
                    behaviors: Set<Behavior>
                    converters: Set<Converter>
                    keyGenerator: () => string
                    pendingEvents: Array<PatchEvent | MutationEvent>
                    schema: EditorSchema
                    initialReadOnly: boolean
                    maxBlocks: number | undefined
                    selection: EditorSelection
                    value: Array<PortableTextBlock> | undefined
                  },
                  | {
                      type: 'style.add'
                      style: string
                    }
                  | {
                      type: 'style.remove'
                      style: string
                    }
                  | {
                      type: 'style.toggle'
                      style: string
                    },
                  | {
                      type: 'annotation.add'
                      annotation: {
                        name: string
                        value: {
                          [prop: string]: unknown
                        }
                      }
                    }
                  | {
                      type: 'annotation.remove'
                      annotation: {
                        name: string
                      }
                    }
                  | {
                      type: 'annotation.toggle'
                      annotation: {
                        name: string
                        value: {
                          [prop: string]: unknown
                        }
                      }
                    }
                  | {
                      [props: string]: unknown
                      type: 'block.set'
                      at: [KeyedSegment]
                    }
                  | {
                      type: 'block.unset'
                      at: [KeyedSegment]
                      props: Array<string>
                    }
                  | {
                      type: 'blur'
                    }
                  | {
                      type: 'data transfer.set'
                      data: string
                      dataTransfer: DataTransfer
                      mimeType: MIMEType_2
                    }
                  | {
                      type: 'decorator.add'
                      decorator: string
                      selection?: NonNullable<EditorSelection>
                    }
                  | {
                      type: 'decorator.remove'
                      decorator: string
                    }
                  | {
                      type: 'decorator.toggle'
                      decorator: string
                    }
                  | {
                      type: 'delete'
                      selection: NonNullable<EditorSelection>
                    }
                  | {
                      type: 'delete.backward'
                      unit: TextUnit
                    }
                  | {
                      type: 'delete.block'
                      blockPath: [KeyedSegment]
                    }
                  | {
                      type: 'delete.forward'
                      unit: TextUnit
                    }
                  | {
                      type: 'delete.text'
                      anchor: BlockOffset_2
                      focus: BlockOffset_2
                    }
                  | {
                      type: 'focus'
                    }
                  | {
                      type: 'history.redo'
                    }
                  | {
                      type: 'history.undo'
                    }
                  | {
                      type: 'insert.blocks'
                      blocks: Array<PortableTextBlock>
                    }
                  | {
                      type: 'insert.block object'
                      placement: 'auto' | 'after' | 'before'
                      blockObject: {
                        name: string
                        value?: {
                          [prop: string]: unknown
                        }
                      }
                    }
                  | {
                      type: 'insert.inline object'
                      inlineObject: {
                        name: string
                        value?: {
                          [prop: string]: unknown
                        }
                      }
                    }
                  | {
                      type: 'insert.break'
                    }
                  | {
                      type: 'insert.soft break'
                    }
                  | {
                      type: 'insert.block'
                      block: PortableTextBlock
                      placement: 'auto' | 'after' | 'before'
                    }
                  | {
                      type: 'insert.span'
                      text: string
                      annotations?: Array<{
                        name: string
                        value: {
                          [prop: string]: unknown
                        }
                      }>
                      decorators?: Array<string>
                    }
                  | {
                      type: 'insert.text'
                      text: string
                      options?: TextInsertTextOptions
                    }
                  | {
                      type: 'insert.text block'
                      placement: 'auto' | 'after' | 'before'
                      textBlock?: {
                        children?: PortableTextTextBlock['children']
                      }
                    }
                  | {
                      type: 'list item.add'
                      listItem: string
                    }
                  | {
                      type: 'list item.remove'
                      listItem: string
                    }
                  | {
                      type: 'list item.toggle'
                      listItem: string
                    }
                  | {
                      type: 'move.block'
                      at: [KeyedSegment]
                      to: [KeyedSegment]
                    }
                  | {
                      type: 'move.block down'
                      at: [KeyedSegment]
                    }
                  | {
                      type: 'move.block up'
                      at: [KeyedSegment]
                    }
                  | {
                      type: 'select'
                      selection: EditorSelection
                    }
                  | {
                      type: 'select.previous block'
                    }
                  | {
                      type: 'select.next block'
                    }
                  | {
                      type: 'style.add'
                      style: string
                    }
                  | {
                      type: 'style.remove'
                      style: string
                    }
                  | {
                      type: 'style.toggle'
                      style: string
                    }
                  | {
                      type: 'text block.set'
                      at: [KeyedSegment]
                      level?: number
                      listItem?: string
                      style?: string
                    }
                  | {
                      type: 'text block.unset'
                      at: [KeyedSegment]
                      props: Array<'level' | 'listItem' | 'style'>
                    }
                  | ({
                      type: 'serialization.failure'
                      mimeType: `${string}/${string}`
                      reason: string
                    } & {
                      dataTransfer: DataTransfer
                    })
                  | ({
                      type: 'serialization.success'
                      data: string
                      mimeType: `${string}/${string}`
                      originEvent: 'copy' | 'cut' | 'unknown'
                    } & {
                      dataTransfer: DataTransfer
                    })
                  | ({
                      type: 'deserialization.failure'
                      mimeType: `${string}/${string}`
                      reason: string
                    } & {
                      dataTransfer: DataTransfer
                    })
                  | ({
                      type: 'deserialization.success'
                      data: Array<PortableTextBlock>
                      mimeType: `${string}/${string}`
                    } & {
                      dataTransfer: DataTransfer
                    })
                  | PatchEvent
                  | MutationEvent
                  | {
                      type: 'normalizing'
                    }
                  | {
                      type: 'done normalizing'
                    }
                  | {
                      type: 'done syncing initial value'
                    }
                  | {
                      type: 'behavior event'
                      behaviorEvent:
                        | SyntheticBehaviorEvent
                        | NativeBehaviorEvent
                      editor: PortableTextSlateEditor
                      defaultActionCallback?: () => void
                      nativeEvent?: {
                        preventDefault: () => void
                      }
                    }
                  | {
                      type: 'custom behavior event'
                      behaviorEvent: CustomBehaviorEvent
                      editor: PortableTextSlateEditor
                      nativeEvent?: {
                        preventDefault: () => void
                      }
                    }
                  | CustomBehaviorEvent
                  | {
                      type: 'add behavior'
                      behavior: Behavior
                    }
                  | {
                      type: 'remove behavior'
                      behavior: Behavior
                    }
                  | {
                      type: 'update readOnly'
                      readOnly: boolean
                    }
                  | {
                      type: 'update schema'
                      schema: EditorSchema
                    }
                  | {
                      type: 'update behaviors'
                      behaviors: Array<Behavior>
                    }
                  | {
                      type: 'update key generator'
                      keyGenerator: () => string
                    }
                  | {
                      type: 'update value'
                      value: Array<PortableTextBlock> | undefined
                    }
                  | {
                      type: 'update maxBlocks'
                      maxBlocks: number | undefined
                    }
                  | PatchesEvent
                  | {
                      type: 'notify.patch'
                      patch: Patch
                    }
                  | {
                      type: 'notify.mutation'
                      patches: Array<Patch>
                      snapshot: Array<PortableTextBlock> | undefined
                      value: Array<PortableTextBlock> | undefined
                    }
                  | {
                      type: 'notify.blurred'
                      event: FocusEvent_2<HTMLDivElement, Element>
                    }
                  | {
                      type: 'notify.done loading'
                    }
                  | {
                      type: 'notify.editable'
                    }
                  | {
                      type: 'notify.error'
                      name: string
                      description: string
                      data: unknown
                    }
                  | {
                      type: 'notify.focused'
                      event: FocusEvent_2<HTMLDivElement, Element>
                    }
                  | {
                      type: 'notify.invalid value'
                      resolution: InvalidValueResolution | null
                      value: Array<PortableTextBlock> | undefined
                    }
                  | {
                      type: 'notify.loading'
                    }
                  | {
                      type: 'notify.read only'
                    }
                  | {
                      type: 'notify.ready'
                    }
                  | {
                      type: 'notify.selection'
                      selection: EditorSelection
                    }
                  | {
                      type: 'notify.value changed'
                      value: Array<PortableTextBlock> | undefined
                    }
                  | {
                      type: 'notify.unset'
                      previousValue: Array<PortableTextBlock>
                    },
                  undefined,
                  never,
                  never,
                  never,
                  never,
                  | {
                      type: 'annotation.add'
                      annotation: {
                        name: string
                        value: {
                          [prop: string]: unknown
                        }
                      }
                    }
                  | {
                      type: 'annotation.remove'
                      annotation: {
                        name: string
                      }
                    }
                  | {
                      type: 'annotation.toggle'
                      annotation: {
                        name: string
                        value: {
                          [prop: string]: unknown
                        }
                      }
                    }
                  | {
                      [props: string]: unknown
                      type: 'block.set'
                      at: [KeyedSegment]
                    }
                  | {
                      type: 'block.unset'
                      at: [KeyedSegment]
                      props: Array<string>
                    }
                  | {
                      type: 'blur'
                    }
                  | {
                      type: 'data transfer.set'
                      data: string
                      dataTransfer: DataTransfer
                      mimeType: MIMEType_2
                    }
                  | {
                      type: 'decorator.add'
                      decorator: string
                      selection?: NonNullable<EditorSelection>
                    }
                  | {
                      type: 'decorator.remove'
                      decorator: string
                    }
                  | {
                      type: 'decorator.toggle'
                      decorator: string
                    }
                  | {
                      type: 'delete'
                      selection: NonNullable<EditorSelection>
                    }
                  | {
                      type: 'delete.backward'
                      unit: TextUnit
                    }
                  | {
                      type: 'delete.block'
                      blockPath: [KeyedSegment]
                    }
                  | {
                      type: 'delete.forward'
                      unit: TextUnit
                    }
                  | {
                      type: 'delete.text'
                      anchor: BlockOffset_2
                      focus: BlockOffset_2
                    }
                  | {
                      type: 'focus'
                    }
                  | {
                      type: 'history.redo'
                    }
                  | {
                      type: 'history.undo'
                    }
                  | {
                      type: 'insert.blocks'
                      blocks: Array<PortableTextBlock>
                    }
                  | {
                      type: 'insert.block object'
                      placement: 'auto' | 'after' | 'before'
                      blockObject: {
                        name: string
                        value?: {
                          [prop: string]: unknown
                        }
                      }
                    }
                  | {
                      type: 'insert.inline object'
                      inlineObject: {
                        name: string
                        value?: {
                          [prop: string]: unknown
                        }
                      }
                    }
                  | {
                      type: 'insert.break'
                    }
                  | {
                      type: 'insert.soft break'
                    }
                  | {
                      type: 'insert.block'
                      block: PortableTextBlock
                      placement: 'auto' | 'after' | 'before'
                    }
                  | {
                      type: 'insert.span'
                      text: string
                      annotations?: Array<{
                        name: string
                        value: {
                          [prop: string]: unknown
                        }
                      }>
                      decorators?: Array<string>
                    }
                  | {
                      type: 'insert.text'
                      text: string
                      options?: TextInsertTextOptions
                    }
                  | {
                      type: 'insert.text block'
                      placement: 'auto' | 'after' | 'before'
                      textBlock?: {
                        children?: PortableTextTextBlock['children']
                      }
                    }
                  | {
                      type: 'list item.add'
                      listItem: string
                    }
                  | {
                      type: 'list item.remove'
                      listItem: string
                    }
                  | {
                      type: 'list item.toggle'
                      listItem: string
                    }
                  | {
                      type: 'move.block'
                      at: [KeyedSegment]
                      to: [KeyedSegment]
                    }
                  | {
                      type: 'move.block down'
                      at: [KeyedSegment]
                    }
                  | {
                      type: 'move.block up'
                      at: [KeyedSegment]
                    }
                  | {
                      type: 'select'
                      selection: EditorSelection
                    }
                  | {
                      type: 'select.previous block'
                    }
                  | {
                      type: 'select.next block'
                    }
                  | {
                      type: 'style.add'
                      style: string
                    }
                  | {
                      type: 'style.remove'
                      style: string
                    }
                  | {
                      type: 'style.toggle'
                      style: string
                    }
                  | {
                      type: 'text block.set'
                      at: [KeyedSegment]
                      level?: number
                      listItem?: string
                      style?: string
                    }
                  | {
                      type: 'text block.unset'
                      at: [KeyedSegment]
                      props: Array<'level' | 'listItem' | 'style'>
                    }
                  | ({
                      type: 'serialization.failure'
                      mimeType: `${string}/${string}`
                      reason: string
                    } & {
                      dataTransfer: DataTransfer
                    })
                  | ({
                      type: 'serialization.success'
                      data: string
                      mimeType: `${string}/${string}`
                      originEvent: 'copy' | 'cut' | 'unknown'
                    } & {
                      dataTransfer: DataTransfer
                    })
                  | ({
                      type: 'deserialization.failure'
                      mimeType: `${string}/${string}`
                      reason: string
                    } & {
                      dataTransfer: DataTransfer
                    })
                  | ({
                      type: 'deserialization.success'
                      data: Array<PortableTextBlock>
                      mimeType: `${string}/${string}`
                    } & {
                      dataTransfer: DataTransfer
                    })
                  | PatchEvent
                  | MutationEvent
                  | PatchesEvent
                  | {
                      type: 'blurred'
                      event: FocusEvent_2<HTMLDivElement, Element>
                    }
                  | {
                      type: 'done loading'
                    }
                  | {
                      type: 'editable'
                    }
                  | {
                      type: 'error'
                      name: string
                      description: string
                      data: unknown
                    }
                  | {
                      type: 'focused'
                      event: FocusEvent_2<HTMLDivElement, Element>
                    }
                  | {
                      type: 'invalid value'
                      resolution: InvalidValueResolution | null
                      value: Array<PortableTextBlock> | undefined
                    }
                  | {
                      type: 'loading'
                    }
                  | {
                      type: 'read only'
                    }
                  | {
                      type: 'ready'
                    }
                  | {
                      type: 'selection'
                      selection: EditorSelection
                    }
                  | {
                      type: 'value changed'
                      value: Array<PortableTextBlock> | undefined
                    }
                  | UnsetEvent
                  | {
                      type: 'custom.*'
                      event: CustomBehaviorEvent
                    }
                >
              }
              readonly 'text block.*': {
                readonly actions: ActionFunction<
                  {
                    behaviors: Set<Behavior>
                    converters: Set<Converter>
                    keyGenerator: () => string
                    pendingEvents: Array<PatchEvent | MutationEvent>
                    schema: EditorSchema
                    initialReadOnly: boolean
                    maxBlocks: number | undefined
                    selection: EditorSelection
                    value: Array<PortableTextBlock> | undefined
                  },
                  | {
                      type: 'text block.set'
                      at: [KeyedSegment]
                      level?: number
                      listItem?: string
                      style?: string
                    }
                  | {
                      type: 'text block.unset'
                      at: [KeyedSegment]
                      props: Array<'level' | 'listItem' | 'style'>
                    },
                  | {
                      type: 'annotation.add'
                      annotation: {
                        name: string
                        value: {
                          [prop: string]: unknown
                        }
                      }
                    }
                  | {
                      type: 'annotation.remove'
                      annotation: {
                        name: string
                      }
                    }
                  | {
                      type: 'annotation.toggle'
                      annotation: {
                        name: string
                        value: {
                          [prop: string]: unknown
                        }
                      }
                    }
                  | {
                      [props: string]: unknown
                      type: 'block.set'
                      at: [KeyedSegment]
                    }
                  | {
                      type: 'block.unset'
                      at: [KeyedSegment]
                      props: Array<string>
                    }
                  | {
                      type: 'blur'
                    }
                  | {
                      type: 'data transfer.set'
                      data: string
                      dataTransfer: DataTransfer
                      mimeType: MIMEType_2
                    }
                  | {
                      type: 'decorator.add'
                      decorator: string
                      selection?: NonNullable<EditorSelection>
                    }
                  | {
                      type: 'decorator.remove'
                      decorator: string
                    }
                  | {
                      type: 'decorator.toggle'
                      decorator: string
                    }
                  | {
                      type: 'delete'
                      selection: NonNullable<EditorSelection>
                    }
                  | {
                      type: 'delete.backward'
                      unit: TextUnit
                    }
                  | {
                      type: 'delete.block'
                      blockPath: [KeyedSegment]
                    }
                  | {
                      type: 'delete.forward'
                      unit: TextUnit
                    }
                  | {
                      type: 'delete.text'
                      anchor: BlockOffset_2
                      focus: BlockOffset_2
                    }
                  | {
                      type: 'focus'
                    }
                  | {
                      type: 'history.redo'
                    }
                  | {
                      type: 'history.undo'
                    }
                  | {
                      type: 'insert.blocks'
                      blocks: Array<PortableTextBlock>
                    }
                  | {
                      type: 'insert.block object'
                      placement: 'auto' | 'after' | 'before'
                      blockObject: {
                        name: string
                        value?: {
                          [prop: string]: unknown
                        }
                      }
                    }
                  | {
                      type: 'insert.inline object'
                      inlineObject: {
                        name: string
                        value?: {
                          [prop: string]: unknown
                        }
                      }
                    }
                  | {
                      type: 'insert.break'
                    }
                  | {
                      type: 'insert.soft break'
                    }
                  | {
                      type: 'insert.block'
                      block: PortableTextBlock
                      placement: 'auto' | 'after' | 'before'
                    }
                  | {
                      type: 'insert.span'
                      text: string
                      annotations?: Array<{
                        name: string
                        value: {
                          [prop: string]: unknown
                        }
                      }>
                      decorators?: Array<string>
                    }
                  | {
                      type: 'insert.text'
                      text: string
                      options?: TextInsertTextOptions
                    }
                  | {
                      type: 'insert.text block'
                      placement: 'auto' | 'after' | 'before'
                      textBlock?: {
                        children?: PortableTextTextBlock['children']
                      }
                    }
                  | {
                      type: 'list item.add'
                      listItem: string
                    }
                  | {
                      type: 'list item.remove'
                      listItem: string
                    }
                  | {
                      type: 'list item.toggle'
                      listItem: string
                    }
                  | {
                      type: 'move.block'
                      at: [KeyedSegment]
                      to: [KeyedSegment]
                    }
                  | {
                      type: 'move.block down'
                      at: [KeyedSegment]
                    }
                  | {
                      type: 'move.block up'
                      at: [KeyedSegment]
                    }
                  | {
                      type: 'select'
                      selection: EditorSelection
                    }
                  | {
                      type: 'select.previous block'
                    }
                  | {
                      type: 'select.next block'
                    }
                  | {
                      type: 'style.add'
                      style: string
                    }
                  | {
                      type: 'style.remove'
                      style: string
                    }
                  | {
                      type: 'style.toggle'
                      style: string
                    }
                  | {
                      type: 'text block.set'
                      at: [KeyedSegment]
                      level?: number
                      listItem?: string
                      style?: string
                    }
                  | {
                      type: 'text block.unset'
                      at: [KeyedSegment]
                      props: Array<'level' | 'listItem' | 'style'>
                    }
                  | ({
                      type: 'serialization.failure'
                      mimeType: `${string}/${string}`
                      reason: string
                    } & {
                      dataTransfer: DataTransfer
                    })
                  | ({
                      type: 'serialization.success'
                      data: string
                      mimeType: `${string}/${string}`
                      originEvent: 'copy' | 'cut' | 'unknown'
                    } & {
                      dataTransfer: DataTransfer
                    })
                  | ({
                      type: 'deserialization.failure'
                      mimeType: `${string}/${string}`
                      reason: string
                    } & {
                      dataTransfer: DataTransfer
                    })
                  | ({
                      type: 'deserialization.success'
                      data: Array<PortableTextBlock>
                      mimeType: `${string}/${string}`
                    } & {
                      dataTransfer: DataTransfer
                    })
                  | PatchEvent
                  | MutationEvent
                  | {
                      type: 'normalizing'
                    }
                  | {
                      type: 'done normalizing'
                    }
                  | {
                      type: 'done syncing initial value'
                    }
                  | {
                      type: 'behavior event'
                      behaviorEvent:
                        | SyntheticBehaviorEvent
                        | NativeBehaviorEvent
                      editor: PortableTextSlateEditor
                      defaultActionCallback?: () => void
                      nativeEvent?: {
                        preventDefault: () => void
                      }
                    }
                  | {
                      type: 'custom behavior event'
                      behaviorEvent: CustomBehaviorEvent
                      editor: PortableTextSlateEditor
                      nativeEvent?: {
                        preventDefault: () => void
                      }
                    }
                  | CustomBehaviorEvent
                  | {
                      type: 'add behavior'
                      behavior: Behavior
                    }
                  | {
                      type: 'remove behavior'
                      behavior: Behavior
                    }
                  | {
                      type: 'update readOnly'
                      readOnly: boolean
                    }
                  | {
                      type: 'update schema'
                      schema: EditorSchema
                    }
                  | {
                      type: 'update behaviors'
                      behaviors: Array<Behavior>
                    }
                  | {
                      type: 'update key generator'
                      keyGenerator: () => string
                    }
                  | {
                      type: 'update value'
                      value: Array<PortableTextBlock> | undefined
                    }
                  | {
                      type: 'update maxBlocks'
                      maxBlocks: number | undefined
                    }
                  | PatchesEvent
                  | {
                      type: 'notify.patch'
                      patch: Patch
                    }
                  | {
                      type: 'notify.mutation'
                      patches: Array<Patch>
                      snapshot: Array<PortableTextBlock> | undefined
                      value: Array<PortableTextBlock> | undefined
                    }
                  | {
                      type: 'notify.blurred'
                      event: FocusEvent_2<HTMLDivElement, Element>
                    }
                  | {
                      type: 'notify.done loading'
                    }
                  | {
                      type: 'notify.editable'
                    }
                  | {
                      type: 'notify.error'
                      name: string
                      description: string
                      data: unknown
                    }
                  | {
                      type: 'notify.focused'
                      event: FocusEvent_2<HTMLDivElement, Element>
                    }
                  | {
                      type: 'notify.invalid value'
                      resolution: InvalidValueResolution | null
                      value: Array<PortableTextBlock> | undefined
                    }
                  | {
                      type: 'notify.loading'
                    }
                  | {
                      type: 'notify.read only'
                    }
                  | {
                      type: 'notify.ready'
                    }
                  | {
                      type: 'notify.selection'
                      selection: EditorSelection
                    }
                  | {
                      type: 'notify.value changed'
                      value: Array<PortableTextBlock> | undefined
                    }
                  | {
                      type: 'notify.unset'
                      previousValue: Array<PortableTextBlock>
                    },
                  undefined,
                  never,
                  never,
                  never,
                  never,
                  | {
                      type: 'annotation.add'
                      annotation: {
                        name: string
                        value: {
                          [prop: string]: unknown
                        }
                      }
                    }
                  | {
                      type: 'annotation.remove'
                      annotation: {
                        name: string
                      }
                    }
                  | {
                      type: 'annotation.toggle'
                      annotation: {
                        name: string
                        value: {
                          [prop: string]: unknown
                        }
                      }
                    }
                  | {
                      [props: string]: unknown
                      type: 'block.set'
                      at: [KeyedSegment]
                    }
                  | {
                      type: 'block.unset'
                      at: [KeyedSegment]
                      props: Array<string>
                    }
                  | {
                      type: 'blur'
                    }
                  | {
                      type: 'data transfer.set'
                      data: string
                      dataTransfer: DataTransfer
                      mimeType: MIMEType_2
                    }
                  | {
                      type: 'decorator.add'
                      decorator: string
                      selection?: NonNullable<EditorSelection>
                    }
                  | {
                      type: 'decorator.remove'
                      decorator: string
                    }
                  | {
                      type: 'decorator.toggle'
                      decorator: string
                    }
                  | {
                      type: 'delete'
                      selection: NonNullable<EditorSelection>
                    }
                  | {
                      type: 'delete.backward'
                      unit: TextUnit
                    }
                  | {
                      type: 'delete.block'
                      blockPath: [KeyedSegment]
                    }
                  | {
                      type: 'delete.forward'
                      unit: TextUnit
                    }
                  | {
                      type: 'delete.text'
                      anchor: BlockOffset_2
                      focus: BlockOffset_2
                    }
                  | {
                      type: 'focus'
                    }
                  | {
                      type: 'history.redo'
                    }
                  | {
                      type: 'history.undo'
                    }
                  | {
                      type: 'insert.blocks'
                      blocks: Array<PortableTextBlock>
                    }
                  | {
                      type: 'insert.block object'
                      placement: 'auto' | 'after' | 'before'
                      blockObject: {
                        name: string
                        value?: {
                          [prop: string]: unknown
                        }
                      }
                    }
                  | {
                      type: 'insert.inline object'
                      inlineObject: {
                        name: string
                        value?: {
                          [prop: string]: unknown
                        }
                      }
                    }
                  | {
                      type: 'insert.break'
                    }
                  | {
                      type: 'insert.soft break'
                    }
                  | {
                      type: 'insert.block'
                      block: PortableTextBlock
                      placement: 'auto' | 'after' | 'before'
                    }
                  | {
                      type: 'insert.span'
                      text: string
                      annotations?: Array<{
                        name: string
                        value: {
                          [prop: string]: unknown
                        }
                      }>
                      decorators?: Array<string>
                    }
                  | {
                      type: 'insert.text'
                      text: string
                      options?: TextInsertTextOptions
                    }
                  | {
                      type: 'insert.text block'
                      placement: 'auto' | 'after' | 'before'
                      textBlock?: {
                        children?: PortableTextTextBlock['children']
                      }
                    }
                  | {
                      type: 'list item.add'
                      listItem: string
                    }
                  | {
                      type: 'list item.remove'
                      listItem: string
                    }
                  | {
                      type: 'list item.toggle'
                      listItem: string
                    }
                  | {
                      type: 'move.block'
                      at: [KeyedSegment]
                      to: [KeyedSegment]
                    }
                  | {
                      type: 'move.block down'
                      at: [KeyedSegment]
                    }
                  | {
                      type: 'move.block up'
                      at: [KeyedSegment]
                    }
                  | {
                      type: 'select'
                      selection: EditorSelection
                    }
                  | {
                      type: 'select.previous block'
                    }
                  | {
                      type: 'select.next block'
                    }
                  | {
                      type: 'style.add'
                      style: string
                    }
                  | {
                      type: 'style.remove'
                      style: string
                    }
                  | {
                      type: 'style.toggle'
                      style: string
                    }
                  | {
                      type: 'text block.set'
                      at: [KeyedSegment]
                      level?: number
                      listItem?: string
                      style?: string
                    }
                  | {
                      type: 'text block.unset'
                      at: [KeyedSegment]
                      props: Array<'level' | 'listItem' | 'style'>
                    }
                  | ({
                      type: 'serialization.failure'
                      mimeType: `${string}/${string}`
                      reason: string
                    } & {
                      dataTransfer: DataTransfer
                    })
                  | ({
                      type: 'serialization.success'
                      data: string
                      mimeType: `${string}/${string}`
                      originEvent: 'copy' | 'cut' | 'unknown'
                    } & {
                      dataTransfer: DataTransfer
                    })
                  | ({
                      type: 'deserialization.failure'
                      mimeType: `${string}/${string}`
                      reason: string
                    } & {
                      dataTransfer: DataTransfer
                    })
                  | ({
                      type: 'deserialization.success'
                      data: Array<PortableTextBlock>
                      mimeType: `${string}/${string}`
                    } & {
                      dataTransfer: DataTransfer
                    })
                  | PatchEvent
                  | MutationEvent
                  | PatchesEvent
                  | {
                      type: 'blurred'
                      event: FocusEvent_2<HTMLDivElement, Element>
                    }
                  | {
                      type: 'done loading'
                    }
                  | {
                      type: 'editable'
                    }
                  | {
                      type: 'error'
                      name: string
                      description: string
                      data: unknown
                    }
                  | {
                      type: 'focused'
                      event: FocusEvent_2<HTMLDivElement, Element>
                    }
                  | {
                      type: 'invalid value'
                      resolution: InvalidValueResolution | null
                      value: Array<PortableTextBlock> | undefined
                    }
                  | {
                      type: 'loading'
                    }
                  | {
                      type: 'read only'
                    }
                  | {
                      type: 'ready'
                    }
                  | {
                      type: 'selection'
                      selection: EditorSelection
                    }
                  | {
                      type: 'value changed'
                      value: Array<PortableTextBlock> | undefined
                    }
                  | UnsetEvent
                  | {
                      type: 'custom.*'
                      event: CustomBehaviorEvent
                    }
                >
              }
            }
          }
        }
      }
      readonly 'setup': {
        readonly initial: 'setting up'
        readonly states: {
          readonly 'setting up': {
            readonly exit: readonly ['emit ready']
            readonly on: {
              readonly 'patch': {
                readonly actions: 'defer event'
              }
              readonly 'mutation': {
                readonly actions: 'defer event'
              }
              readonly 'done syncing initial value': {
                readonly target: 'pristine'
              }
            }
          }
          readonly 'pristine': {
            readonly initial: 'idle'
            readonly states: {
              readonly idle: {
                readonly on: {
                  readonly normalizing: {
                    readonly target: 'normalizing'
                  }
                  readonly patch: {
                    readonly actions: 'defer event'
                    readonly target: '#editor.setup.dirty'
                  }
                  readonly mutation: {
                    readonly actions: 'defer event'
                    readonly target: '#editor.setup.dirty'
                  }
                }
              }
              readonly normalizing: {
                readonly on: {
                  readonly 'done normalizing': {
                    readonly target: 'idle'
                  }
                  readonly 'patch': {
                    readonly actions: 'defer event'
                  }
                  readonly 'mutation': {
                    readonly actions: 'defer event'
                  }
                }
              }
            }
          }
          readonly 'dirty': {
            readonly entry: readonly [
              'emit pending events',
              'clear pending events',
            ]
            readonly on: {
              readonly patch: {
                readonly actions: 'emit patch event'
              }
              readonly mutation: {
                readonly actions: 'emit mutation event'
              }
            }
          }
        }
      }
    }
  }
>

/**
 * @beta
 */
export declare const EditorRefPlugin: React_2.ForwardRefExoticComponent<
  React_2.RefAttributes<Editor | null>
>

/**
 * @public
 */
declare type EditorSchema = PortableTextMemberSchemaTypes

/** @public */
declare type EditorSelection = {
  anchor: EditorSelectionPoint
  focus: EditorSelectionPoint
  backward?: boolean
} | null

/** @public */
declare type EditorSelectionPoint = {
  path: Path
  offset: number
}

/**
 * @public
 */
declare type EditorSnapshot = {
  context: EditorContext
}

/**
 * @public
 * Listen for events emitted by the editor. Must be used inside `EditorProvider`. Events available include:
 *  - 'blurred'
 *  - 'done loading'
 *  - 'editable'
 *  - 'error'
 *  - 'focused'
 *  - 'invalid value'
 *  - 'loading'
 *  - 'mutation'
 *  - 'patch'
 *  - 'read only'
 *  - 'ready'
 *  - 'selection'
 *  - 'value changed'
 *
 * @example
 * Listen and log events.
 * ```tsx
 * import {EditorProvider} from '@portabletext/editor'
 * import {EventListenerPlugin} from '@portabletext/editor/plugins'
 *
 * function MyComponent() {
 *  return (
 *  <EditorProvider>
 *   <EventListenerPlugin
 *    on={(event) => {
 *     console.log(event)
 *    }
 *   } />
 *   { ... }
 * </EditorProvider>
 *  )
 * }
 * ```
 * @example
 * Handle events when there is a mutation.
 * ```tsx
 * <EventListenerPlugin
 *  on={(event) => {
 *    if (event.type === 'mutation') {
 *      console.log('Value changed:', event.snapshot)
 *    }
 *  }}
 * />
 * ```
 * @group Components
 */
export declare function EventListenerPlugin(props: {
  on: (event: EditorEmittedEvent) => void
}): null

/**
 * @public
 */
declare type ExternalEditorEvent =
  | {
      type: 'add behavior'
      behavior: Behavior
    }
  | {
      type: 'remove behavior'
      behavior: Behavior
    }
  | {
      type: 'update readOnly'
      readOnly: boolean
    }
  | {
      type: 'update schema'
      schema: EditorSchema
    }
  | {
      type: 'update behaviors'
      behaviors: Array<Behavior>
    }
  | {
      type: 'update key generator'
      keyGenerator: () => string
    }
  | {
      type: 'update value'
      value: Array<PortableTextBlock> | undefined
    }
  | {
      type: 'update maxBlocks'
      maxBlocks: number | undefined
    }
  | PatchesEvent

/** @internal */
declare interface History_2 {
  redos: HistoryItem[]
  undos: HistoryItem[]
}

/** @internal */
declare type HistoryItem = {
  operations: Operation[]
  timestamp: Date
}

/**
 * The editor has invalid data in the value that can be resolved by the user
 * @beta */
declare type InvalidValueResolution = {
  autoResolve?: boolean
  patches: Patch[]
  description: string
  action: string
  item: PortableTextBlock[] | PortableTextBlock | PortableTextChild | undefined
  /**
   * i18n keys for the description and action
   *
   * These are in addition to the description and action properties, to decouple the editor from
   * the i18n system, and allow usage without it. The i18n keys take precedence over the
   * description and action properties, if i18n framework is available.
   */
  i18n: {
    description: `inputs.portable-text.invalid-value.${Lowercase<string>}.description`
    action: `inputs.portable-text.invalid-value.${Lowercase<string>}.action`
    values?: Record<string, string | number | string[]>
  }
}

/**
 * @beta
 */
declare type MarkdownBehaviorsConfig = {
  horizontalRuleObject?: (context: {schema: EditorSchema}) =>
    | {
        name: string
        value?: {
          [prop: string]: unknown
        }
      }
    | undefined
  defaultStyle?: (context: {schema: EditorSchema}) => string | undefined
  headingStyle?: (context: {
    schema: EditorSchema
    level: number
  }) => string | undefined
  blockquoteStyle?: (context: {schema: EditorSchema}) => string | undefined
  unorderedListStyle?: (context: {schema: EditorSchema}) => string | undefined
  orderedListStyle?: (context: {schema: EditorSchema}) => string | undefined
}

/**
 * @beta
 */
declare type MarkdownEmphasisBehaviorsConfig = {
  boldDecorator?: ({schema}: {schema: EditorSchema}) => string | undefined
  italicDecorator?: ({schema}: {schema: EditorSchema}) => string | undefined
}

/**
 * @beta
 * Add markdown behaviors for common markdown actions such as converting ### to headings, --- to HRs, and more.
 *
 * @example
 * Configure the bundled markdown behaviors
 * ```ts
 * import {EditorProvider} from '@portabletext/editor'
 * import {MarkdownPlugin} from '@portabletext/editor/plugins'
 *
 * function App() {
 *   return (
 *    <EditorProvider>
 *      <MarkdownPlugin
 *        config={{
 *          boldDecorator: ({schema}) =>
 *            schema.decorators.find((decorator) => decorator.value === 'strong')?.value,
 *          italicDecorator: ({schema}) =>
 *            schema.decorators.find((decorator) => decorator.value === 'em')?.value,
 *          horizontalRuleObject: ({schema}) => {
 *            const name = schema.blockObjects.find(
 *              (object) => object.name === 'break',
 *            )?.name
 *            return name ? {name} : undefined
 *          },
 *          defaultStyle: ({schema}) => schema.styles[0].value,
 *          headingStyle: ({schema, level}) =>
 *            schema.styles.find((style) => style.value === `h${level}`)
 *              ?.value,
 *          blockquoteStyle: ({schema}) =>
 *            schema.styles.find((style) => style.value === 'blockquote')
 *              ?.value,
 *          unorderedListStyle: ({schema}) =>
 *            schema.lists.find((list) => list.value === 'bullet')?.value,
 *          orderedListStyle: ({schema}) =>
 *            schema.lists.find((list) => list.value === 'number')?.value,
 *        }}
 *      />
 *      {...}
 *    </EditorProvider>
 *  )
 * }
 */
export declare function MarkdownPlugin(props: {
  config: MarkdownPluginConfig
}): null

/**
 * @beta
 */
export declare type MarkdownPluginConfig = MarkdownBehaviorsConfig &
  MarkdownEmphasisBehaviorsConfig

declare type MIMEType = `${string}/${string}`

/**
 * @public
 */
declare type MutationEvent = {
  type: 'mutation'
  patches: Array<Patch>
  /**
   * @deprecated Use `value` instead
   */
  snapshot: Array<PortableTextBlock> | undefined
  value: Array<PortableTextBlock> | undefined
}

/**
 * @beta
 */
declare type NativeBehaviorEvent =
  | {
      type: 'copy'
      data: DataTransfer
    }
  | {
      type: 'deserialize'
      dataTransfer: DataTransfer
    }
  | {
      type: 'key.down'
      keyboardEvent: Pick<
        KeyboardEvent,
        'key' | 'code' | 'altKey' | 'ctrlKey' | 'metaKey' | 'shiftKey'
      >
    }
  | {
      type: 'key.up'
      keyboardEvent: Pick<
        KeyboardEvent,
        'key' | 'code' | 'altKey' | 'ctrlKey' | 'metaKey' | 'shiftKey'
      >
    }
  | {
      type: 'paste'
      data: DataTransfer
    }
  | {
      type: 'serialize'
      originEvent: 'copy' | 'cut' | 'unknown'
      dataTransfer: DataTransfer
    }

/**
 * @beta
 * Restrict the editor to one line. The plugin takes care of blocking
 * `insert.break` events and smart handling of other `insert.*` events.
 *
 * Place it with as high priority as possible to make sure other plugins don't
 * overwrite `insert.*` events before this plugin gets a chance to do so.
 */
export declare function OneLinePlugin(): JSX.Element

/**
 * @public
 */
declare type PatchesEvent = {
  type: 'patches'
  patches: Array<Patch>
  snapshot: Array<PortableTextBlock> | undefined
}

declare type PatchEvent = {
  type: 'patch'
  patch: Patch
}

/**
 * @internal
 */
declare type PickFromUnion<
  TUnion,
  TTagKey extends keyof TUnion,
  TPickedTags extends TUnion[TTagKey],
> = TUnion extends Record<TTagKey, TPickedTags> ? TUnion : never

/** @internal */
declare type PortableTextMemberSchemaTypes = {
  annotations: (ObjectSchemaType & {
    i18nTitleKey?: string
  })[]
  block: ObjectSchemaType
  blockObjects: ObjectSchemaType[]
  decorators: BlockDecoratorDefinition[]
  inlineObjects: ObjectSchemaType[]
  portableText: ArraySchemaType<PortableTextBlock>
  span: ObjectSchemaType
  styles: BlockStyleDefinition[]
  lists: BlockListDefinition[]
}

/** @internal */
declare interface PortableTextSlateEditor extends ReactEditor {
  _key: 'editor'
  _type: 'editor'
  createPlaceholderBlock: () => Descendant
  editable: EditableAPI
  history: History_2
  insertPortableTextData: (data: DataTransfer) => boolean
  insertTextOrHTMLData: (data: DataTransfer) => boolean
  isTextBlock: (value: unknown) => value is PortableTextTextBlock
  isTextSpan: (value: unknown) => value is PortableTextSpan
  isListBlock: (value: unknown) => value is PortableTextListBlock
  /**
   * Use hotkeys
   */
  pteWithHotKeys: (event: KeyboardEvent_2<HTMLDivElement>) => void
  /**
   * Helper function that creates a text block
   */
  pteCreateTextBlock: (options: {
    decorators: Array<string>
    listItem?: string
    level?: number
  }) => Descendant
  /**
   * Undo
   */
  undo: () => void
  /**
   * Redo
   */
  redo: () => void
}

declare type Serializer<TMIMEType extends MIMEType> = ({
  context,
  event,
}: {
  context: EditorContext
  event: PickFromUnion<ConverterEvent<TMIMEType>, 'type', 'serialize'>
}) => PickFromUnion<
  ConverterEvent<TMIMEType>,
  'type',
  'serialization.success' | 'serialization.failure'
>

/**
 * @internal
 */
declare type SlateEditor = {
  instance: PortableTextSlateEditor
  initialValue: Array<Descendant>
}

/**
 * @beta
 */
declare type SyntheticBehaviorEvent =
  | {
      type: 'annotation.add'
      annotation: {
        name: string
        value: {
          [prop: string]: unknown
        }
      }
    }
  | {
      type: 'annotation.remove'
      annotation: {
        name: string
      }
    }
  | {
      type: 'annotation.toggle'
      annotation: {
        name: string
        value: {
          [prop: string]: unknown
        }
      }
    }
  | {
      type: 'block.set'
      at: [KeyedSegment]
      [props: string]: unknown
    }
  | {
      type: 'block.unset'
      at: [KeyedSegment]
      props: Array<string>
    }
  | {
      type: 'blur'
    }
  | {
      type: 'data transfer.set'
      data: string
      dataTransfer: DataTransfer
      mimeType: MIMEType
    }
  | {
      type: 'decorator.add'
      decorator: string
      selection?: NonNullable<EditorSelection>
    }
  | {
      type: 'decorator.remove'
      decorator: string
    }
  | {
      type: 'decorator.toggle'
      decorator: string
    }
  | {
      type: 'delete'
      selection: NonNullable<EditorSelection>
    }
  | {
      type: 'delete.backward'
      unit: TextUnit
    }
  | {
      type: 'delete.block'
      blockPath: [KeyedSegment]
    }
  | {
      type: 'delete.forward'
      unit: TextUnit
    }
  | {
      type: 'delete.text'
      anchor: BlockOffset
      focus: BlockOffset
    }
  | {
      type: 'focus'
    }
  | {
      type: 'history.redo'
    }
  | {
      type: 'history.undo'
    }
  | {
      type: 'insert.blocks'
      blocks: Array<PortableTextBlock>
    }
  | {
      type: 'insert.block object'
      placement: 'auto' | 'after' | 'before'
      blockObject: {
        name: string
        value?: {
          [prop: string]: unknown
        }
      }
    }
  | {
      type: 'insert.inline object'
      inlineObject: {
        name: string
        value?: {
          [prop: string]: unknown
        }
      }
    }
  | {
      type: 'insert.break'
    }
  | {
      type: 'insert.soft break'
    }
  | {
      type: 'insert.block'
      block: PortableTextBlock
      placement: 'auto' | 'after' | 'before'
    }
  | {
      type: 'insert.span'
      text: string
      annotations?: Array<{
        name: string
        value: {
          [prop: string]: unknown
        }
      }>
      decorators?: Array<string>
    }
  | {
      type: 'insert.text'
      text: string
      options?: TextInsertTextOptions
    }
  | {
      type: 'insert.text block'
      placement: 'auto' | 'after' | 'before'
      textBlock?: {
        children?: PortableTextTextBlock['children']
      }
    }
  | {
      type: 'list item.add'
      listItem: string
    }
  | {
      type: 'list item.remove'
      listItem: string
    }
  | {
      type: 'list item.toggle'
      listItem: string
    }
  | {
      type: 'move.block'
      at: [KeyedSegment]
      to: [KeyedSegment]
    }
  | {
      type: 'move.block down'
      at: [KeyedSegment]
    }
  | {
      type: 'move.block up'
      at: [KeyedSegment]
    }
  | {
      type: 'select'
      selection: EditorSelection
    }
  | {
      type: 'select.previous block'
    }
  | {
      type: 'select.next block'
    }
  | {
      type: 'style.add'
      style: string
    }
  | {
      type: 'style.remove'
      style: string
    }
  | {
      type: 'style.toggle'
      style: string
    }
  | {
      type: 'text block.set'
      at: [KeyedSegment]
      level?: number
      listItem?: string
      style?: string
    }
  | {
      type: 'text block.unset'
      at: [KeyedSegment]
      props: Array<'level' | 'listItem' | 'style'>
    }
  | (PickFromUnion<
      ConverterEvent,
      'type',
      | 'deserialization.failure'
      | 'deserialization.success'
      | 'serialization.failure'
      | 'serialization.success'
    > & {
      dataTransfer: DataTransfer
    })

declare type UnsetEvent = {
  type: 'unset'
  previousValue: Array<PortableTextBlock>
}

export {}
