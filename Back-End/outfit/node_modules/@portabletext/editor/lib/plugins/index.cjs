"use strict";
Object.defineProperty(exports, "__esModule", { value: !0 });
var reactCompilerRuntime = require("react-compiler-runtime"), React = require("react"), plugin_eventListener = require("../_chunks-cjs/plugin.event-listener.cjs"), behavior_markdown = require("../_chunks-cjs/behavior.markdown.cjs"), react = require("@xstate/react"), isEqual = require("lodash/isEqual.js"), xstate = require("xstate"), selector_isAtTheStartOfBlock = require("../_chunks-cjs/selector.is-at-the-start-of-block.cjs"), util_sliceBlocks = require("../_chunks-cjs/util.slice-blocks.cjs"), selector_getTextBefore = require("../_chunks-cjs/selector.get-text-before.cjs"), behavior_core = require("../_chunks-cjs/behavior.core.cjs"), jsxRuntime = require("react/jsx-runtime"), utils_index = require("../utils/index.cjs");
function _interopDefaultCompat(e) {
  return e && typeof e == "object" && "default" in e ? e : { default: e };
}
var React__default = /* @__PURE__ */ _interopDefaultCompat(React), isEqual__default = /* @__PURE__ */ _interopDefaultCompat(isEqual);
function BehaviorPlugin(props) {
  const $ = reactCompilerRuntime.c(4), editor = plugin_eventListener.useEditor();
  let t0, t1;
  return $[0] !== editor || $[1] !== props.behaviors ? (t0 = () => {
    const unregisterBehaviors = props.behaviors.map((behavior) => editor.registerBehavior({
      behavior
    }));
    return () => {
      unregisterBehaviors.forEach(_temp);
    };
  }, t1 = [editor, props.behaviors], $[0] = editor, $[1] = props.behaviors, $[2] = t0, $[3] = t1) : (t0 = $[2], t1 = $[3]), React.useEffect(t0, t1), null;
}
function _temp(unregister) {
  return unregister();
}
const EditorRefPlugin = React__default.default.forwardRef((_, ref) => {
  const $ = reactCompilerRuntime.c(2), editor = plugin_eventListener.useEditor(), portableTextEditorRef = React__default.default.useRef(editor);
  let t0, t1;
  return $[0] === Symbol.for("react.memo_cache_sentinel") ? (t0 = () => portableTextEditorRef.current, t1 = [], $[0] = t0, $[1] = t1) : (t0 = $[0], t1 = $[1]), React__default.default.useImperativeHandle(ref, t0, t1), null;
});
EditorRefPlugin.displayName = "EditorRefPlugin";
const asteriskPairRegex = "(?<!\\*)\\*(?!\\s)([^*\\n]+?)(?<!\\s)\\*(?!\\*)", underscorePairRegex = "(?<!_)_(?!\\s)([^_\\n]+?)(?<!\\s)_(?!_)", italicRegex = new RegExp(`(${asteriskPairRegex}|${underscorePairRegex})$`), doubleAsteriskPairRegex = "(?<!\\*)\\*\\*(?!\\s)([^*\\n]+?)(?<!\\s)\\*\\*(?!\\*)", doubleUnderscorePairRegex = "(?<!_)__(?!\\s)([^_\\n]+?)(?<!\\s)__(?!_)", boldRegex = new RegExp(`(${doubleAsteriskPairRegex}|${doubleUnderscorePairRegex})$`);
function getTextToItalic(text) {
  return text.match(italicRegex)?.at(0);
}
function getTextToBold(text) {
  return text.match(boldRegex)?.at(0);
}
function useMarkdownEmphasisBehaviors(props) {
  const $ = reactCompilerRuntime.c(10), editor = plugin_eventListener.useEditor();
  let t0;
  $[0] !== editor || $[1] !== props.config ? (t0 = props.config.boldDecorator?.({
    schema: editor.getSnapshot().context.schema
  }), $[0] = editor, $[1] = props.config, $[2] = t0) : t0 = $[2];
  let t1;
  $[3] !== editor || $[4] !== props.config ? (t1 = props.config.italicDecorator?.({
    schema: editor.getSnapshot().context.schema
  }), $[3] = editor, $[4] = props.config, $[5] = t1) : t1 = $[5];
  let t2;
  $[6] !== editor || $[7] !== t0 || $[8] !== t1 ? (t2 = {
    input: {
      editor,
      boldDecorator: t0,
      italicDecorator: t1
    }
  }, $[6] = editor, $[7] = t0, $[8] = t1, $[9] = t2) : t2 = $[9], react.useActorRef(emphasisMachine, t2);
}
const emphasisListener = ({
  sendBack,
  input
}) => input.editor.registerBehavior({
  behavior: behavior_core.defineBehavior({
    on: "insert.text",
    guard: ({
      context,
      event
    }) => {
      const boldDecorator = input.boldDecorator, italicDecorator = input.italicDecorator;
      if (boldDecorator === void 0 && italicDecorator === void 0 || event.text !== "*" && event.text !== "_")
        return !1;
      const focusTextBlock = selector_isAtTheStartOfBlock.getFocusTextBlock({
        context
      }), selectionStartPoint = selector_isAtTheStartOfBlock.getSelectionStartPoint({
        context
      }), selectionStartOffset = selectionStartPoint ? util_sliceBlocks.spanSelectionPointToBlockOffset({
        value: context.value,
        selectionPoint: selectionStartPoint
      }) : void 0;
      if (!focusTextBlock || !selectionStartOffset)
        return !1;
      const textBefore = selector_getTextBefore.getBlockTextBefore({
        context
      }), textToItalic = getTextToItalic(`${textBefore}${event.text}`);
      if (textToItalic !== void 0 && italicDecorator !== void 0) {
        const prefixOffsets = {
          anchor: {
            path: focusTextBlock.path,
            offset: textBefore.length - textToItalic.length + 1
          },
          focus: {
            path: focusTextBlock.path,
            offset: textBefore.length - textToItalic.length + 1 + 1
          }
        }, suffixOffsets = {
          anchor: {
            path: focusTextBlock.path,
            offset: selectionStartOffset.offset
          },
          focus: {
            path: focusTextBlock.path,
            offset: selectionStartOffset.offset + 1
          }
        }, anchor = util_sliceBlocks.blockOffsetToSpanSelectionPoint({
          value: context.value,
          blockOffset: prefixOffsets.focus,
          direction: "backward"
        }), focus = util_sliceBlocks.blockOffsetToSpanSelectionPoint({
          value: context.value,
          blockOffset: suffixOffsets.anchor,
          direction: "forward"
        });
        return !anchor || !focus ? !1 : {
          prefixOffsets,
          suffixOffsets,
          decorator: italicDecorator,
          selection: {
            anchor,
            focus
          }
        };
      }
      const textToBold = getTextToBold(`${textBefore}${event.text}`);
      if (textToBold !== void 0 && boldDecorator !== void 0) {
        const prefixOffsets = {
          anchor: {
            path: focusTextBlock.path,
            offset: textBefore.length - textToBold.length + 1
          },
          focus: {
            path: focusTextBlock.path,
            offset: textBefore.length - textToBold.length + 1 + 2
          }
        }, suffixOffsets = {
          anchor: {
            path: focusTextBlock.path,
            offset: selectionStartOffset.offset - 1
          },
          focus: {
            path: focusTextBlock.path,
            offset: selectionStartOffset.offset + 1
          }
        }, anchor = util_sliceBlocks.blockOffsetToSpanSelectionPoint({
          value: context.value,
          blockOffset: prefixOffsets.focus,
          direction: "backward"
        }), focus = util_sliceBlocks.blockOffsetToSpanSelectionPoint({
          value: context.value,
          blockOffset: suffixOffsets.anchor,
          direction: "forward"
        });
        return !anchor || !focus ? !1 : {
          prefixOffsets,
          suffixOffsets,
          decorator: boldDecorator,
          selection: {
            anchor,
            focus
          }
        };
      }
      return !1;
    },
    actions: [({
      event
    }) => [event], (_, {
      prefixOffsets,
      suffixOffsets,
      decorator,
      selection
    }) => [{
      type: "decorator.add",
      decorator,
      selection
    }, {
      type: "delete.text",
      ...suffixOffsets
    }, {
      type: "delete.text",
      ...prefixOffsets
    }, {
      type: "effect",
      effect: () => {
        sendBack({
          type: "emphasis.add",
          blockOffset: {
            ...suffixOffsets.anchor,
            offset: suffixOffsets.anchor.offset - (prefixOffsets.focus.offset - prefixOffsets.anchor.offset)
          }
        });
      }
    }]]
  })
}), selectionListenerCallback = ({
  sendBack,
  input
}) => input.editor.registerBehavior({
  behavior: behavior_core.defineBehavior({
    on: "select",
    guard: ({
      context,
      event
    }) => {
      if (!event.selection)
        return {
          blockOffsets: void 0
        };
      const anchor = util_sliceBlocks.spanSelectionPointToBlockOffset({
        value: context.value,
        selectionPoint: event.selection.anchor
      }), focus = util_sliceBlocks.spanSelectionPointToBlockOffset({
        value: context.value,
        selectionPoint: event.selection.focus
      });
      return !anchor || !focus ? {
        blockOffsets: void 0
      } : {
        blockOffsets: {
          anchor,
          focus
        }
      };
    },
    actions: [(_, {
      blockOffsets
    }) => [{
      type: "effect",
      effect: () => {
        sendBack({
          type: "selection",
          blockOffsets
        });
      }
    }]]
  })
}), deleteBackwardListenerCallback = ({
  sendBack,
  input
}) => input.editor.registerBehavior({
  behavior: behavior_core.defineBehavior({
    on: "delete.backward",
    actions: [() => [{
      type: "history.undo"
    }, {
      type: "effect",
      effect: () => {
        sendBack({
          type: "delete.backward"
        });
      }
    }]]
  })
}), emphasisMachine = xstate.setup({
  types: {
    context: {},
    input: {},
    events: {}
  },
  actors: {
    "emphasis listener": xstate.fromCallback(emphasisListener),
    "delete.backward listener": xstate.fromCallback(deleteBackwardListenerCallback),
    "selection listener": xstate.fromCallback(selectionListenerCallback)
  }
}).createMachine({
  id: "emphasis",
  context: ({
    input
  }) => ({
    boldDecorator: input.boldDecorator,
    italicDecorator: input.italicDecorator,
    editor: input.editor
  }),
  initial: "idle",
  states: {
    idle: {
      invoke: [{
        src: "emphasis listener",
        input: ({
          context
        }) => ({
          editor: context.editor,
          boldDecorator: context.boldDecorator,
          italicDecorator: context.italicDecorator
        })
      }],
      on: {
        "emphasis.add": {
          target: "emphasis added",
          actions: xstate.assign({
            offsetAfterEmphasis: ({
              event
            }) => event.blockOffset
          })
        }
      }
    },
    "emphasis added": {
      exit: [xstate.assign({
        offsetAfterEmphasis: void 0
      })],
      invoke: [{
        src: "selection listener",
        input: ({
          context
        }) => ({
          editor: context.editor
        })
      }, {
        src: "delete.backward listener",
        input: ({
          context
        }) => ({
          editor: context.editor
        })
      }],
      on: {
        selection: {
          target: "idle",
          guard: ({
            context,
            event
          }) => !isEqual__default.default({
            anchor: context.offsetAfterEmphasis,
            focus: context.offsetAfterEmphasis
          }, event.blockOffsets)
        },
        "delete.backward": {
          target: "idle"
        }
      }
    }
  }
});
function MarkdownPlugin(props) {
  const editor = plugin_eventListener.useEditor();
  return useMarkdownEmphasisBehaviors({
    config: props.config
  }), React.useEffect(() => {
    const unregisterBehaviors = behavior_markdown.createMarkdownBehaviors(props.config).map((behavior) => editor.registerBehavior({
      behavior
    }));
    return () => {
      for (const unregisterBehavior of unregisterBehaviors)
        unregisterBehavior();
    };
  }, [editor, props.config]), null;
}
const oneLineBehaviors = [
  /**
   * Hitting Enter on an expanded selection should just delete that selection
   * without causing a line break.
   */
  behavior_core.defineBehavior({
    on: "insert.break",
    guard: ({
      context
    }) => context.selection && selector_isAtTheStartOfBlock.isSelectionExpanded({
      context
    }) ? {
      selection: context.selection
    } : !1,
    actions: [(_, {
      selection
    }) => [{
      type: "delete",
      selection
    }]]
  }),
  /**
   * All other cases of `insert.break` should be aborted.
   */
  behavior_core.defineBehavior({
    on: "insert.break",
    actions: [() => [{
      type: "noop"
    }]]
  }),
  /**
   * `insert.block` `before` or `after` is not allowed in a one-line editor.
   */
  behavior_core.defineBehavior({
    on: "insert.block",
    guard: ({
      event
    }) => event.placement === "before" || event.placement === "after",
    actions: [() => [{
      type: "noop"
    }]]
  }),
  /**
   * Other cases of `insert.block` are allowed.
   *
   * If a text block is inserted and the focus block is fully selected, then
   * the focus block can be replaced with the inserted block.
   */
  behavior_core.defineBehavior({
    on: "insert.block",
    guard: ({
      context,
      event
    }) => {
      const focusTextBlock = selector_isAtTheStartOfBlock.getFocusTextBlock({
        context
      }), selectionStartPoint = selector_isAtTheStartOfBlock.getSelectionStartPoint({
        context
      }), selectionEndPoint = selector_isAtTheStartOfBlock.getSelectionEndPoint({
        context
      });
      if (!focusTextBlock || !utils_index.isTextBlock(context, event.block) || !selectionStartPoint || !selectionEndPoint)
        return !1;
      const blockStartPoint = util_sliceBlocks.getBlockStartPoint(focusTextBlock), blockEndPoint = util_sliceBlocks.getBlockEndPoint(focusTextBlock), newFocus = util_sliceBlocks.getBlockEndPoint({
        node: event.block,
        path: [{
          _key: event.block._key
        }]
      });
      return util_sliceBlocks.isEqualSelectionPoints(blockStartPoint, selectionStartPoint) && util_sliceBlocks.isEqualSelectionPoints(blockEndPoint, selectionEndPoint) ? {
        focusTextBlock,
        newFocus
      } : !1;
    },
    actions: [({
      event
    }, {
      focusTextBlock,
      newFocus
    }) => [{
      type: "delete.block",
      blockPath: focusTextBlock.path
    }, {
      type: "insert.block",
      block: event.block,
      placement: "auto"
    }, {
      type: "select",
      selection: {
        anchor: newFocus,
        focus: newFocus
      }
    }]]
  }),
  /**
   * An ordinary `insert.block` is acceptable if it's a text block. In that
   * case it will get merged into the existing text block.
   */
  behavior_core.defineBehavior({
    on: "insert.block",
    guard: ({
      context,
      event
    }) => {
      const focusTextBlock = selector_isAtTheStartOfBlock.getFocusTextBlock({
        context
      }), selectionStartPoint = selector_isAtTheStartOfBlock.getSelectionStartPoint({
        context
      }), selectionEndPoint = selector_isAtTheStartOfBlock.getSelectionEndPoint({
        context
      });
      if (!focusTextBlock || !utils_index.isTextBlock(context, event.block) || !selectionStartPoint || !selectionEndPoint)
        return !1;
      const blockBeforeStartPoint = utils_index.splitTextBlock({
        context,
        block: focusTextBlock.node,
        point: selectionStartPoint
      })?.before, blockAfterEndPoint = utils_index.splitTextBlock({
        context,
        block: focusTextBlock.node,
        point: selectionEndPoint
      })?.after;
      if (!blockBeforeStartPoint || !blockAfterEndPoint)
        return !1;
      const targetBlock = utils_index.mergeTextBlocks({
        context,
        targetBlock: blockBeforeStartPoint,
        incomingBlock: event.block
      }), newFocus = util_sliceBlocks.getBlockEndPoint({
        node: targetBlock,
        path: [{
          _key: targetBlock._key
        }]
      }), mergedBlock = utils_index.mergeTextBlocks({
        context,
        targetBlock,
        incomingBlock: blockAfterEndPoint
      });
      return {
        focusTextBlock,
        mergedBlock,
        newFocus
      };
    },
    actions: [(_, {
      focusTextBlock,
      mergedBlock,
      newFocus
    }) => [{
      type: "delete.block",
      blockPath: focusTextBlock.path
    }, {
      type: "insert.block",
      block: mergedBlock,
      placement: "auto"
    }, {
      type: "select",
      selection: {
        anchor: newFocus,
        focus: newFocus
      }
    }]]
  }),
  /**
   * Fallback Behavior to avoid `insert.block` in case the Behaviors above all
   * end up with a falsy guard.
   */
  behavior_core.defineBehavior({
    on: "insert.block",
    actions: [() => [{
      type: "noop"
    }]]
  }),
  /**
   * If multiple blocks are inserted, then the non-text blocks are filtered out
   * and the text blocks are merged into one block
   */
  behavior_core.defineBehavior({
    on: "insert.blocks",
    guard: ({
      context,
      event
    }) => event.blocks.filter((block) => utils_index.isTextBlock(context, block)).reduce((targetBlock, incomingBlock) => utils_index.mergeTextBlocks({
      context,
      targetBlock,
      incomingBlock
    })),
    actions: [
      // `insert.block` is raised so the Behavior above can handle the
      // insertion
      (_, block) => [behavior_core.raise({
        type: "insert.block",
        block,
        placement: "auto"
      })]
    ]
  }),
  /**
   * Block objects do not fit in a one-line editor
   */
  behavior_core.defineBehavior({
    on: "insert.block object",
    actions: [() => [{
      type: "noop"
    }]]
  }),
  /**
   * `insert.text block` is raised as an `insert.block` so it can be handled
   * by the Behaviors above.
   */
  behavior_core.defineBehavior({
    on: "insert.text block",
    actions: [({
      context,
      event
    }) => [behavior_core.raise({
      type: "insert.block",
      block: {
        _key: context.keyGenerator(),
        _type: context.schema.block.name,
        children: event.textBlock?.children ?? []
      },
      placement: event.placement
    })]]
  })
];
function OneLinePlugin() {
  const $ = reactCompilerRuntime.c(1);
  let t0;
  return $[0] === Symbol.for("react.memo_cache_sentinel") ? (t0 = /* @__PURE__ */ jsxRuntime.jsx(BehaviorPlugin, { behaviors: oneLineBehaviors }), $[0] = t0) : t0 = $[0], t0;
}
exports.EventListenerPlugin = plugin_eventListener.EventListenerPlugin;
exports.BehaviorPlugin = BehaviorPlugin;
exports.EditorRefPlugin = EditorRefPlugin;
exports.MarkdownPlugin = MarkdownPlugin;
exports.OneLinePlugin = OneLinePlugin;
//# sourceMappingURL=index.cjs.map
