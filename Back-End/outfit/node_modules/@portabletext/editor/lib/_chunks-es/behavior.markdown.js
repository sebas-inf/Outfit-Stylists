import { isPortableTextTextBlock } from "@sanity/types";
import { isSelectionCollapsed, getFocusTextBlock, getFocusSpan, getPreviousInlineObject, getFocusBlock } from "./selector.is-at-the-start-of-block.js";
import { spanSelectionPointToBlockOffset, getTextBlockText } from "./util.slice-blocks.js";
import { getBlockTextBefore } from "./selector.get-text-before.js";
import { defineBehavior } from "./behavior.core.js";
function createMarkdownBehaviors(config) {
  const automaticBlockquoteOnSpace = defineBehavior({
    on: "insert.text",
    guard: ({
      context,
      event
    }) => {
      if (event.text !== " ")
        return !1;
      const selectionCollapsed = isSelectionCollapsed({
        context
      }), focusTextBlock = getFocusTextBlock({
        context
      }), focusSpan = getFocusSpan({
        context
      });
      if (!selectionCollapsed || !focusTextBlock || !focusSpan)
        return !1;
      const previousInlineObject = getPreviousInlineObject({
        context
      }), blockOffset = spanSelectionPointToBlockOffset({
        value: context.value,
        selectionPoint: {
          path: [{
            _key: focusTextBlock.node._key
          }, "children", {
            _key: focusSpan.node._key
          }],
          offset: context.selection?.focus.offset ?? 0
        }
      });
      if (previousInlineObject || !blockOffset)
        return !1;
      const blockText = getTextBlockText(focusTextBlock.node), caretAtTheEndOfQuote = blockOffset.offset === 1, looksLikeMarkdownQuote = /^>/.test(blockText), blockquoteStyle = config.blockquoteStyle?.(context);
      return caretAtTheEndOfQuote && looksLikeMarkdownQuote && blockquoteStyle !== void 0 ? {
        focusTextBlock,
        style: blockquoteStyle
      } : !1;
    },
    actions: [() => [{
      type: "insert.text",
      text: " "
    }], (_, {
      focusTextBlock,
      style
    }) => [{
      type: "text block.unset",
      props: ["listItem", "level"],
      at: focusTextBlock.path
    }, {
      type: "text block.set",
      style,
      at: focusTextBlock.path
    }, {
      type: "delete.text",
      anchor: {
        path: focusTextBlock.path,
        offset: 0
      },
      focus: {
        path: focusTextBlock.path,
        offset: 2
      }
    }]]
  }), automaticHr = defineBehavior({
    on: "insert.text",
    guard: ({
      context,
      event
    }) => {
      const hrCharacter = event.text === "-" ? "-" : event.text === "*" ? "*" : event.text === "_" ? "_" : void 0;
      if (hrCharacter === void 0)
        return !1;
      const hrObject = config.horizontalRuleObject?.(context), focusBlock = getFocusTextBlock({
        context
      }), selectionCollapsed = isSelectionCollapsed({
        context
      });
      if (!hrObject || !focusBlock || !selectionCollapsed)
        return !1;
      const previousInlineObject = getPreviousInlineObject({
        context
      }), textBefore = getBlockTextBefore({
        context
      }), hrBlockOffsets = {
        anchor: {
          path: focusBlock.path,
          offset: 0
        },
        focus: {
          path: focusBlock.path,
          offset: 3
        }
      };
      return !previousInlineObject && textBefore === `${hrCharacter}${hrCharacter}` ? {
        hrObject,
        focusBlock,
        hrCharacter,
        hrBlockOffsets
      } : !1;
    },
    actions: [(_, {
      hrCharacter
    }) => [{
      type: "insert.text",
      text: hrCharacter
    }], (_, {
      hrObject,
      hrBlockOffsets
    }) => [{
      type: "insert.block object",
      placement: "before",
      blockObject: hrObject
    }, {
      type: "delete.text",
      ...hrBlockOffsets
    }]]
  }), automaticHrOnPaste = defineBehavior({
    on: "paste",
    guard: ({
      context,
      event
    }) => {
      const text = event.data.getData("text/plain"), hrRegExp = /^(---)$|(___)$|(\*\*\*)$/gm, hrCharacters = text.match(hrRegExp)?.[0], hrObject = config.horizontalRuleObject?.(context), focusBlock = getFocusBlock({
        context
      });
      return !hrCharacters || !hrObject || !focusBlock ? !1 : {
        hrCharacters,
        hrObject,
        focusBlock
      };
    },
    actions: [(_, {
      hrCharacters
    }) => [{
      type: "insert.text",
      text: hrCharacters
    }], (_, {
      hrObject,
      focusBlock
    }) => isPortableTextTextBlock(focusBlock.node) ? [{
      type: "insert.text block",
      textBlock: {
        children: focusBlock.node.children
      },
      placement: "after"
    }, {
      type: "insert.block object",
      blockObject: hrObject,
      placement: "after"
    }, {
      type: "delete.block",
      blockPath: focusBlock.path
    }] : [{
      type: "insert.block object",
      blockObject: hrObject,
      placement: "after"
    }]]
  }), automaticHeadingOnSpace = defineBehavior({
    on: "insert.text",
    guard: ({
      context,
      event
    }) => {
      if (event.text !== " ")
        return !1;
      const selectionCollapsed = isSelectionCollapsed({
        context
      }), focusTextBlock = getFocusTextBlock({
        context
      }), focusSpan = getFocusSpan({
        context
      });
      if (!selectionCollapsed || !focusTextBlock || !focusSpan)
        return !1;
      const blockOffset = spanSelectionPointToBlockOffset({
        value: context.value,
        selectionPoint: {
          path: [{
            _key: focusTextBlock.node._key
          }, "children", {
            _key: focusSpan.node._key
          }],
          offset: context.selection?.focus.offset ?? 0
        }
      });
      if (!blockOffset)
        return !1;
      const previousInlineObject = getPreviousInlineObject({
        context
      }), blockText = getTextBlockText(focusTextBlock.node), markdownHeadingSearch = /^#+/.exec(blockText), level = markdownHeadingSearch ? markdownHeadingSearch[0].length : void 0, caretAtTheEndOfHeading = blockOffset.offset === level;
      if (previousInlineObject || !caretAtTheEndOfHeading)
        return !1;
      const style = level !== void 0 ? config.headingStyle?.({
        schema: context.schema,
        level
      }) : void 0;
      return level !== void 0 && style !== void 0 ? {
        focusTextBlock,
        style,
        level
      } : !1;
    },
    actions: [({
      event
    }) => [event], (_, {
      focusTextBlock,
      style,
      level
    }) => [{
      type: "text block.unset",
      props: ["listItem", "level"],
      at: focusTextBlock.path
    }, {
      type: "text block.set",
      style,
      at: focusTextBlock.path
    }, {
      type: "delete.text",
      anchor: {
        path: focusTextBlock.path,
        offset: 0
      },
      focus: {
        path: focusTextBlock.path,
        offset: level + 1
      }
    }]]
  }), clearStyleOnBackspace = defineBehavior({
    on: "delete.backward",
    guard: ({
      context
    }) => {
      const selectionCollapsed = isSelectionCollapsed({
        context
      }), focusTextBlock = getFocusTextBlock({
        context
      }), focusSpan = getFocusSpan({
        context
      });
      if (!selectionCollapsed || !focusTextBlock || !focusSpan)
        return !1;
      const atTheBeginningOfBLock = focusTextBlock.node.children[0]._key === focusSpan.node._key && context.selection?.focus.offset === 0, defaultStyle = config.defaultStyle?.(context);
      return atTheBeginningOfBLock && defaultStyle && focusTextBlock.node.style !== defaultStyle ? {
        defaultStyle,
        focusTextBlock
      } : !1;
    },
    actions: [(_, {
      defaultStyle,
      focusTextBlock
    }) => [{
      type: "text block.set",
      style: defaultStyle,
      at: focusTextBlock.path
    }]]
  }), automaticListOnSpace = defineBehavior({
    on: "insert.text",
    guard: ({
      context,
      event
    }) => {
      if (event.text !== " ")
        return !1;
      const selectionCollapsed = isSelectionCollapsed({
        context
      }), focusTextBlock = getFocusTextBlock({
        context
      }), focusSpan = getFocusSpan({
        context
      });
      if (!selectionCollapsed || !focusTextBlock || !focusSpan)
        return !1;
      const previousInlineObject = getPreviousInlineObject({
        context
      }), blockOffset = spanSelectionPointToBlockOffset({
        value: context.value,
        selectionPoint: {
          path: [{
            _key: focusTextBlock.node._key
          }, "children", {
            _key: focusSpan.node._key
          }],
          offset: context.selection?.focus.offset ?? 0
        }
      });
      if (previousInlineObject || !blockOffset)
        return !1;
      const blockText = getTextBlockText(focusTextBlock.node), defaultStyle = config.defaultStyle?.(context), looksLikeUnorderedList = /^(-|\*)/.test(blockText), unorderedListStyle = config.unorderedListStyle?.(context), caretAtTheEndOfUnorderedList = blockOffset.offset === 1;
      if (defaultStyle && caretAtTheEndOfUnorderedList && looksLikeUnorderedList && unorderedListStyle !== void 0)
        return {
          focusTextBlock,
          listItem: unorderedListStyle,
          listItemLength: 1,
          style: defaultStyle
        };
      const looksLikeOrderedList = /^1\./.test(blockText), orderedListStyle = config.orderedListStyle?.(context), caretAtTheEndOfOrderedList = blockOffset.offset === 2;
      return defaultStyle && caretAtTheEndOfOrderedList && looksLikeOrderedList && orderedListStyle !== void 0 ? {
        focusTextBlock,
        listItem: orderedListStyle,
        listItemLength: 2,
        style: defaultStyle
      } : !1;
    },
    actions: [({
      event
    }) => [event], (_, {
      focusTextBlock,
      style,
      listItem,
      listItemLength
    }) => [{
      type: "text block.set",
      listItem,
      level: 1,
      style,
      at: focusTextBlock.path
    }, {
      type: "delete.text",
      anchor: {
        path: focusTextBlock.path,
        offset: 0
      },
      focus: {
        path: focusTextBlock.path,
        offset: listItemLength + 1
      }
    }]]
  });
  return [automaticBlockquoteOnSpace, automaticHeadingOnSpace, automaticHr, automaticHrOnPaste, clearStyleOnBackspace, automaticListOnSpace];
}
export {
  createMarkdownBehaviors
};
//# sourceMappingURL=behavior.markdown.js.map
