import type {
  ArraySchemaType,
  BlockDecoratorDefinition,
  BlockListDefinition,
  BlockStyleDefinition,
  KeyedSegment,
  ObjectSchemaType,
  Path,
  PortableTextBlock,
  PortableTextTextBlock,
} from '@sanity/types'
import type {TextUnit} from 'slate'
import type {TextInsertTextOptions} from 'slate/dist/interfaces/transforms/text'
import {PickFromUnion as PickFromUnion_2} from '.'
import {
  Behavior as Behavior_2,
  BehaviorEvent as BehaviorEvent_2,
} from './behavior.types'

/**
 * @beta
 */
export declare type Behavior<
  TBehaviorEventType extends BehaviorEvent['type'] = BehaviorEvent['type'],
  TGuardResponse = true,
  TBehaviorEvent extends BehaviorEvent = PickFromUnion<
    BehaviorEvent,
    'type',
    TBehaviorEventType
  >,
> = {
  /**
   * The internal editor event that triggers this behavior.
   */
  on: TBehaviorEventType
  /**
   * Predicate function that determines if the behavior should be executed.
   * Returning a non-nullable value from the guard will pass the value to the
   * actions and execute them.
   */
  guard?: BehaviorGuard<TBehaviorEvent, TGuardResponse>
  /**
   * Array of behavior action sets.
   */
  actions: Array<BehaviorActionIntendSet<TBehaviorEvent, TGuardResponse>>
}

/**
 * @beta
 */
export declare type BehaviorActionIntend =
  | SyntheticBehaviorEvent
  | {
      type: 'raise'
      event: SyntheticBehaviorEvent | CustomBehaviorEvent
    }
  | {
      type: 'noop'
    }
  | {
      type: 'effect'
      effect: () => void
    }

/**
 * @beta
 */
export declare type BehaviorActionIntendSet<TBehaviorEvent, TGuardResponse> = (
  {
    context,
    event,
  }: {
    context: EditorContext
    event: TBehaviorEvent
  },
  guardResponse: TGuardResponse,
) => Array<BehaviorActionIntend>

/**
 * @beta
 */
export declare type BehaviorEvent =
  | SyntheticBehaviorEvent
  | NativeBehaviorEvent
  | CustomBehaviorEvent

/**
 * @beta
 */
export declare type BehaviorGuard<TBehaviorEvent, TGuardResponse> = ({
  context,
  event,
}: {
  context: EditorContext
  event: TBehaviorEvent
}) => TGuardResponse | false

/**
 * @beta
 */
export declare type BlockOffset = {
  path: [KeyedSegment]
  offset: number
}

/**
 * @beta
 */
export declare type CodeEditorBehaviorsConfig = {
  moveBlockUpShortcut: string
  moveBlockDownShortcut: string
}

declare type Converter<TMIMEType extends MIMEType = MIMEType> = {
  mimeType: TMIMEType
  serialize: Serializer<TMIMEType>
  deserialize: Deserializer<TMIMEType>
}

declare type ConverterEvent<TMIMEType extends MIMEType = MIMEType> =
  | {
      type: 'serialize'
      originEvent: 'copy' | 'cut' | 'unknown'
    }
  | {
      type: 'serialization.failure'
      mimeType: TMIMEType
      reason: string
    }
  | {
      type: 'serialization.success'
      data: string
      mimeType: TMIMEType
      originEvent: 'copy' | 'cut' | 'unknown'
    }
  | {
      type: 'deserialize'
      data: string
    }
  | {
      type: 'deserialization.failure'
      mimeType: TMIMEType
      reason: string
    }
  | {
      type: 'deserialization.success'
      data: Array<PortableTextBlock>
      mimeType: TMIMEType
    }

/**
 * @beta
 */
export declare const coreBehaviors: Behavior_2<
  | 'focus'
  | 'delete'
  | 'select'
  | 'serialize'
  | 'copy'
  | 'serialization.failure'
  | 'serialization.success'
  | 'deserialize'
  | 'deserialization.failure'
  | 'deserialization.success'
  | 'annotation.add'
  | 'annotation.remove'
  | 'annotation.toggle'
  | 'block.set'
  | 'block.unset'
  | 'blur'
  | 'data transfer.set'
  | 'decorator.add'
  | 'decorator.remove'
  | 'decorator.toggle'
  | 'delete.backward'
  | 'delete.block'
  | 'delete.forward'
  | 'delete.text'
  | 'history.redo'
  | 'history.undo'
  | 'insert.blocks'
  | 'insert.block object'
  | 'insert.inline object'
  | 'insert.break'
  | 'insert.soft break'
  | 'insert.block'
  | 'insert.span'
  | 'insert.text'
  | 'insert.text block'
  | 'list item.add'
  | 'list item.remove'
  | 'list item.toggle'
  | 'move.block'
  | 'move.block down'
  | 'move.block up'
  | 'select.previous block'
  | 'select.next block'
  | 'style.add'
  | 'style.remove'
  | 'style.toggle'
  | 'text block.set'
  | 'text block.unset'
  | 'key.down'
  | 'key.up'
  | 'paste'
  | `custom.${string}`,
  true,
  PickFromUnion_2<
    BehaviorEvent_2,
    'type',
    | 'focus'
    | 'delete'
    | 'select'
    | 'serialize'
    | 'copy'
    | 'serialization.failure'
    | 'serialization.success'
    | 'deserialize'
    | 'deserialization.failure'
    | 'deserialization.success'
    | 'annotation.add'
    | 'annotation.remove'
    | 'annotation.toggle'
    | 'block.set'
    | 'block.unset'
    | 'blur'
    | 'data transfer.set'
    | 'decorator.add'
    | 'decorator.remove'
    | 'decorator.toggle'
    | 'delete.backward'
    | 'delete.block'
    | 'delete.forward'
    | 'delete.text'
    | 'history.redo'
    | 'history.undo'
    | 'insert.blocks'
    | 'insert.block object'
    | 'insert.inline object'
    | 'insert.break'
    | 'insert.soft break'
    | 'insert.block'
    | 'insert.span'
    | 'insert.text'
    | 'insert.text block'
    | 'list item.add'
    | 'list item.remove'
    | 'list item.toggle'
    | 'move.block'
    | 'move.block down'
    | 'move.block up'
    | 'select.previous block'
    | 'select.next block'
    | 'style.add'
    | 'style.remove'
    | 'style.toggle'
    | 'text block.set'
    | 'text block.unset'
    | 'key.down'
    | 'key.up'
    | 'paste'
    | `custom.${string}`
  >
>[]

/**
 * @beta
 */
export declare function createCodeEditorBehaviors(
  config: CodeEditorBehaviorsConfig,
): Behavior_2<
  | 'focus'
  | 'delete'
  | 'select'
  | 'serialize'
  | 'copy'
  | 'serialization.failure'
  | 'serialization.success'
  | 'deserialize'
  | 'deserialization.failure'
  | 'deserialization.success'
  | 'annotation.add'
  | 'annotation.remove'
  | 'annotation.toggle'
  | 'block.set'
  | 'block.unset'
  | 'blur'
  | 'data transfer.set'
  | 'decorator.add'
  | 'decorator.remove'
  | 'decorator.toggle'
  | 'delete.backward'
  | 'delete.block'
  | 'delete.forward'
  | 'delete.text'
  | 'history.redo'
  | 'history.undo'
  | 'insert.blocks'
  | 'insert.block object'
  | 'insert.inline object'
  | 'insert.break'
  | 'insert.soft break'
  | 'insert.block'
  | 'insert.span'
  | 'insert.text'
  | 'insert.text block'
  | 'list item.add'
  | 'list item.remove'
  | 'list item.toggle'
  | 'move.block'
  | 'move.block down'
  | 'move.block up'
  | 'select.previous block'
  | 'select.next block'
  | 'style.add'
  | 'style.remove'
  | 'style.toggle'
  | 'text block.set'
  | 'text block.unset'
  | 'key.down'
  | 'key.up'
  | 'paste'
  | `custom.${string}`,
  true,
  PickFromUnion_2<
    BehaviorEvent_2,
    'type',
    | 'focus'
    | 'delete'
    | 'select'
    | 'serialize'
    | 'copy'
    | 'serialization.failure'
    | 'serialization.success'
    | 'deserialize'
    | 'deserialization.failure'
    | 'deserialization.success'
    | 'annotation.add'
    | 'annotation.remove'
    | 'annotation.toggle'
    | 'block.set'
    | 'block.unset'
    | 'blur'
    | 'data transfer.set'
    | 'decorator.add'
    | 'decorator.remove'
    | 'decorator.toggle'
    | 'delete.backward'
    | 'delete.block'
    | 'delete.forward'
    | 'delete.text'
    | 'history.redo'
    | 'history.undo'
    | 'insert.blocks'
    | 'insert.block object'
    | 'insert.inline object'
    | 'insert.break'
    | 'insert.soft break'
    | 'insert.block'
    | 'insert.span'
    | 'insert.text'
    | 'insert.text block'
    | 'list item.add'
    | 'list item.remove'
    | 'list item.toggle'
    | 'move.block'
    | 'move.block down'
    | 'move.block up'
    | 'select.previous block'
    | 'select.next block'
    | 'style.add'
    | 'style.remove'
    | 'style.toggle'
    | 'text block.set'
    | 'text block.unset'
    | 'key.down'
    | 'key.up'
    | 'paste'
    | `custom.${string}`
  >
>[]

/**
 * @beta
 */
export declare function createEmojiPickerBehaviors<TEmojiMatch>(
  config: EmojiPickerBehaviorsConfig<TEmojiMatch>,
): Behavior_2<
  | 'focus'
  | 'delete'
  | 'select'
  | 'serialize'
  | 'copy'
  | 'serialization.failure'
  | 'serialization.success'
  | 'deserialize'
  | 'deserialization.failure'
  | 'deserialization.success'
  | 'annotation.add'
  | 'annotation.remove'
  | 'annotation.toggle'
  | 'block.set'
  | 'block.unset'
  | 'blur'
  | 'data transfer.set'
  | 'decorator.add'
  | 'decorator.remove'
  | 'decorator.toggle'
  | 'delete.backward'
  | 'delete.block'
  | 'delete.forward'
  | 'delete.text'
  | 'history.redo'
  | 'history.undo'
  | 'insert.blocks'
  | 'insert.block object'
  | 'insert.inline object'
  | 'insert.break'
  | 'insert.soft break'
  | 'insert.block'
  | 'insert.span'
  | 'insert.text'
  | 'insert.text block'
  | 'list item.add'
  | 'list item.remove'
  | 'list item.toggle'
  | 'move.block'
  | 'move.block down'
  | 'move.block up'
  | 'select.previous block'
  | 'select.next block'
  | 'style.add'
  | 'style.remove'
  | 'style.toggle'
  | 'text block.set'
  | 'text block.unset'
  | 'key.down'
  | 'key.up'
  | 'paste'
  | `custom.${string}`,
  true,
  PickFromUnion_2<
    BehaviorEvent_2,
    'type',
    | 'focus'
    | 'delete'
    | 'select'
    | 'serialize'
    | 'copy'
    | 'serialization.failure'
    | 'serialization.success'
    | 'deserialize'
    | 'deserialization.failure'
    | 'deserialization.success'
    | 'annotation.add'
    | 'annotation.remove'
    | 'annotation.toggle'
    | 'block.set'
    | 'block.unset'
    | 'blur'
    | 'data transfer.set'
    | 'decorator.add'
    | 'decorator.remove'
    | 'decorator.toggle'
    | 'delete.backward'
    | 'delete.block'
    | 'delete.forward'
    | 'delete.text'
    | 'history.redo'
    | 'history.undo'
    | 'insert.blocks'
    | 'insert.block object'
    | 'insert.inline object'
    | 'insert.break'
    | 'insert.soft break'
    | 'insert.block'
    | 'insert.span'
    | 'insert.text'
    | 'insert.text block'
    | 'list item.add'
    | 'list item.remove'
    | 'list item.toggle'
    | 'move.block'
    | 'move.block down'
    | 'move.block up'
    | 'select.previous block'
    | 'select.next block'
    | 'style.add'
    | 'style.remove'
    | 'style.toggle'
    | 'text block.set'
    | 'text block.unset'
    | 'key.down'
    | 'key.up'
    | 'paste'
    | `custom.${string}`
  >
>[]

/**
 * @beta
 */
export declare function createLinkBehaviors(
  config: LinkBehaviorsConfig,
): Behavior_2<
  | 'focus'
  | 'delete'
  | 'select'
  | 'serialize'
  | 'copy'
  | 'serialization.failure'
  | 'serialization.success'
  | 'deserialize'
  | 'deserialization.failure'
  | 'deserialization.success'
  | 'annotation.add'
  | 'annotation.remove'
  | 'annotation.toggle'
  | 'block.set'
  | 'block.unset'
  | 'blur'
  | 'data transfer.set'
  | 'decorator.add'
  | 'decorator.remove'
  | 'decorator.toggle'
  | 'delete.backward'
  | 'delete.block'
  | 'delete.forward'
  | 'delete.text'
  | 'history.redo'
  | 'history.undo'
  | 'insert.blocks'
  | 'insert.block object'
  | 'insert.inline object'
  | 'insert.break'
  | 'insert.soft break'
  | 'insert.block'
  | 'insert.span'
  | 'insert.text'
  | 'insert.text block'
  | 'list item.add'
  | 'list item.remove'
  | 'list item.toggle'
  | 'move.block'
  | 'move.block down'
  | 'move.block up'
  | 'select.previous block'
  | 'select.next block'
  | 'style.add'
  | 'style.remove'
  | 'style.toggle'
  | 'text block.set'
  | 'text block.unset'
  | 'key.down'
  | 'key.up'
  | 'paste'
  | `custom.${string}`,
  true,
  PickFromUnion_2<
    BehaviorEvent_2,
    'type',
    | 'focus'
    | 'delete'
    | 'select'
    | 'serialize'
    | 'copy'
    | 'serialization.failure'
    | 'serialization.success'
    | 'deserialize'
    | 'deserialization.failure'
    | 'deserialization.success'
    | 'annotation.add'
    | 'annotation.remove'
    | 'annotation.toggle'
    | 'block.set'
    | 'block.unset'
    | 'blur'
    | 'data transfer.set'
    | 'decorator.add'
    | 'decorator.remove'
    | 'decorator.toggle'
    | 'delete.backward'
    | 'delete.block'
    | 'delete.forward'
    | 'delete.text'
    | 'history.redo'
    | 'history.undo'
    | 'insert.blocks'
    | 'insert.block object'
    | 'insert.inline object'
    | 'insert.break'
    | 'insert.soft break'
    | 'insert.block'
    | 'insert.span'
    | 'insert.text'
    | 'insert.text block'
    | 'list item.add'
    | 'list item.remove'
    | 'list item.toggle'
    | 'move.block'
    | 'move.block down'
    | 'move.block up'
    | 'select.previous block'
    | 'select.next block'
    | 'style.add'
    | 'style.remove'
    | 'style.toggle'
    | 'text block.set'
    | 'text block.unset'
    | 'key.down'
    | 'key.up'
    | 'paste'
    | `custom.${string}`
  >
>[]

/**
 * @beta
 * Create markdown behaviors for common markdown actions such as converting ### to headings, --- to HRs, and more.
 *
 * @example
 * Configure the bundled markdown behaviors
 * ```ts
 * import {EditorProvider} from '@portabletext/editor'
 * import {createMarkdownBehaviors, coreBehaviors} from '@portabletext/editor/behaviors'
 *
 * function App() {
 *  return (
 *   <EditorProvider
 *    initialConfig={{
 *    behaviors: [
 *    ...coreBehaviors,
 *    ...createMarkdownBehaviors({
 *        horizontalRuleObject: ({schema}) => {
 *          const name = schema.blockObjects.find(
 *            (object) => object.name === 'break',
 *          )?.name
 *          return name ? {name} : undefined
 *        },
 *        defaultStyle: ({schema}) => schema.styles[0].value,
 *        headingStyle: ({schema, level}) =>
 *          schema.styles.find((style) => style.value === `h${level}`)
 *            ?.value,
 *        blockquoteStyle: ({schema}) =>
 *          schema.styles.find((style) => style.value === 'blockquote')
 *            ?.value,
 *        unorderedListStyle: ({schema}) =>
 *          schema.lists.find((list) => list.value === 'bullet')?.value,
 *        orderedListStyle: ({schema}) =>
 *          schema.lists.find((list) => list.value === 'number')?.value,
 *      }),
 *      ]
 *    }}
 *    >
 *    {...}
 *    </EditorProvider>
 *  )
 * }
 * ```
 *
 */
export declare function createMarkdownBehaviors(
  config: MarkdownBehaviorsConfig,
): Behavior_2<
  | 'focus'
  | 'delete'
  | 'select'
  | 'serialize'
  | 'copy'
  | 'serialization.failure'
  | 'serialization.success'
  | 'deserialize'
  | 'deserialization.failure'
  | 'deserialization.success'
  | 'annotation.add'
  | 'annotation.remove'
  | 'annotation.toggle'
  | 'block.set'
  | 'block.unset'
  | 'blur'
  | 'data transfer.set'
  | 'decorator.add'
  | 'decorator.remove'
  | 'decorator.toggle'
  | 'delete.backward'
  | 'delete.block'
  | 'delete.forward'
  | 'delete.text'
  | 'history.redo'
  | 'history.undo'
  | 'insert.blocks'
  | 'insert.block object'
  | 'insert.inline object'
  | 'insert.break'
  | 'insert.soft break'
  | 'insert.block'
  | 'insert.span'
  | 'insert.text'
  | 'insert.text block'
  | 'list item.add'
  | 'list item.remove'
  | 'list item.toggle'
  | 'move.block'
  | 'move.block down'
  | 'move.block up'
  | 'select.previous block'
  | 'select.next block'
  | 'style.add'
  | 'style.remove'
  | 'style.toggle'
  | 'text block.set'
  | 'text block.unset'
  | 'key.down'
  | 'key.up'
  | 'paste'
  | `custom.${string}`,
  true,
  PickFromUnion_2<
    BehaviorEvent_2,
    'type',
    | 'focus'
    | 'delete'
    | 'select'
    | 'serialize'
    | 'copy'
    | 'serialization.failure'
    | 'serialization.success'
    | 'deserialize'
    | 'deserialization.failure'
    | 'deserialization.success'
    | 'annotation.add'
    | 'annotation.remove'
    | 'annotation.toggle'
    | 'block.set'
    | 'block.unset'
    | 'blur'
    | 'data transfer.set'
    | 'decorator.add'
    | 'decorator.remove'
    | 'decorator.toggle'
    | 'delete.backward'
    | 'delete.block'
    | 'delete.forward'
    | 'delete.text'
    | 'history.redo'
    | 'history.undo'
    | 'insert.blocks'
    | 'insert.block object'
    | 'insert.inline object'
    | 'insert.break'
    | 'insert.soft break'
    | 'insert.block'
    | 'insert.span'
    | 'insert.text'
    | 'insert.text block'
    | 'list item.add'
    | 'list item.remove'
    | 'list item.toggle'
    | 'move.block'
    | 'move.block down'
    | 'move.block up'
    | 'select.previous block'
    | 'select.next block'
    | 'style.add'
    | 'style.remove'
    | 'style.toggle'
    | 'text block.set'
    | 'text block.unset'
    | 'key.down'
    | 'key.up'
    | 'paste'
    | `custom.${string}`
  >
>[]

/**
 * @beta
 */
export declare type CustomBehaviorEvent<
  TPayload extends Record<string, unknown> = Record<string, unknown>,
  TType extends string = string,
  TInternalType extends `custom.${TType}` = `custom.${TType}`,
> = {
  type: TInternalType
} & TPayload

/**
 * @beta
 *
 * @example
 *
 * ```tsx
 * const noLowerCaseA = defineBehavior({
 *   on: 'insert.text',
 *   guard: ({event, context}) => event.text === 'a',
 *   actions: [({event, context}) => [{type: 'insert.text', text: 'A'}]],
 * })
 * ```
 *
 *
 *
 *
 *
 */
export declare function defineBehavior<
  TPayload extends Record<string, unknown>,
  TBehaviorEventType extends
    BehaviorEvent['type'] = CustomBehaviorEvent['type'],
  TGuardResponse = true,
>(
  behavior: Behavior<
    TBehaviorEventType,
    TGuardResponse,
    TBehaviorEventType extends `custom.${infer TType}`
      ? CustomBehaviorEvent<TPayload, TType>
      : PickFromUnion<BehaviorEvent, 'type', TBehaviorEventType>
  >,
): Behavior

declare type Deserializer<TMIMEType extends MIMEType> = ({
  context,
  event,
}: {
  context: EditorContext
  event: PickFromUnion<ConverterEvent<TMIMEType>, 'type', 'deserialize'>
}) => PickFromUnion<
  ConverterEvent<TMIMEType>,
  'type',
  'deserialization.success' | 'deserialization.failure'
>

/**
 * @public
 */
export declare type EditorContext = {
  activeDecorators: Array<string>
  converters: Array<Converter>
  keyGenerator: () => string
  schema: EditorSchema
  selection: EditorSelection
  value: Array<PortableTextBlock>
}

/**
 * @public
 */
export declare type EditorSchema = PortableTextMemberSchemaTypes

/** @public */
export declare type EditorSelection = {
  anchor: EditorSelectionPoint
  focus: EditorSelectionPoint
  backward?: boolean
} | null

/** @public */
export declare type EditorSelectionPoint = {
  path: Path
  offset: number
}

/**
 * @beta
 */
export declare type EmojiPickerBehaviorsConfig<TEmojiMatch> = {
  /**
   * Match emojis by keyword.
   */
  matchEmojis: ({keyword}: {keyword: string}) => Array<TEmojiMatch>
  onMatchesChanged: ({matches}: {matches: Array<TEmojiMatch>}) => void
  onSelectedIndexChanged: ({selectedIndex}: {selectedIndex: number}) => void
  /**
   * Parse an emoji match to a string that will be inserted into the editor.
   */
  parseMatch: ({match}: {match: TEmojiMatch}) => string | undefined
}

/**
 * @beta
 */
export declare type LinkBehaviorsConfig = {
  linkAnnotation?: (context: {schema: EditorSchema; url: string}) =>
    | {
        name: string
        value: {
          [prop: string]: unknown
        }
      }
    | undefined
}

/**
 * @beta
 */
export declare type MarkdownBehaviorsConfig = {
  horizontalRuleObject?: (context: {schema: EditorSchema}) =>
    | {
        name: string
        value?: {
          [prop: string]: unknown
        }
      }
    | undefined
  defaultStyle?: (context: {schema: EditorSchema}) => string | undefined
  headingStyle?: (context: {
    schema: EditorSchema
    level: number
  }) => string | undefined
  blockquoteStyle?: (context: {schema: EditorSchema}) => string | undefined
  unorderedListStyle?: (context: {schema: EditorSchema}) => string | undefined
  orderedListStyle?: (context: {schema: EditorSchema}) => string | undefined
}

declare type MIMEType = `${string}/${string}`

/**
 * @beta
 */
export declare type NativeBehaviorEvent =
  | {
      type: 'copy'
      data: DataTransfer
    }
  | {
      type: 'deserialize'
      dataTransfer: DataTransfer
    }
  | {
      type: 'key.down'
      keyboardEvent: Pick<
        KeyboardEvent,
        'key' | 'code' | 'altKey' | 'ctrlKey' | 'metaKey' | 'shiftKey'
      >
    }
  | {
      type: 'key.up'
      keyboardEvent: Pick<
        KeyboardEvent,
        'key' | 'code' | 'altKey' | 'ctrlKey' | 'metaKey' | 'shiftKey'
      >
    }
  | {
      type: 'paste'
      data: DataTransfer
    }
  | {
      type: 'serialize'
      originEvent: 'copy' | 'cut' | 'unknown'
      dataTransfer: DataTransfer
    }

/**
 * @internal
 */
export declare type PickFromUnion<
  TUnion,
  TTagKey extends keyof TUnion,
  TPickedTags extends TUnion[TTagKey],
> = TUnion extends Record<TTagKey, TPickedTags> ? TUnion : never

/** @internal */
export declare type PortableTextMemberSchemaTypes = {
  annotations: (ObjectSchemaType & {
    i18nTitleKey?: string
  })[]
  block: ObjectSchemaType
  blockObjects: ObjectSchemaType[]
  decorators: BlockDecoratorDefinition[]
  inlineObjects: ObjectSchemaType[]
  portableText: ArraySchemaType<PortableTextBlock>
  span: ObjectSchemaType
  styles: BlockStyleDefinition[]
  lists: BlockListDefinition[]
}

/**
 * @beta
 */
export declare function raise(
  event: SyntheticBehaviorEvent | CustomBehaviorEvent,
): PickFromUnion<BehaviorActionIntend, 'type', 'raise'>

declare type Serializer<TMIMEType extends MIMEType> = ({
  context,
  event,
}: {
  context: EditorContext
  event: PickFromUnion<ConverterEvent<TMIMEType>, 'type', 'serialize'>
}) => PickFromUnion<
  ConverterEvent<TMIMEType>,
  'type',
  'serialization.success' | 'serialization.failure'
>

/**
 * @beta
 */
export declare type SyntheticBehaviorEvent =
  | {
      type: 'annotation.add'
      annotation: {
        name: string
        value: {
          [prop: string]: unknown
        }
      }
    }
  | {
      type: 'annotation.remove'
      annotation: {
        name: string
      }
    }
  | {
      type: 'annotation.toggle'
      annotation: {
        name: string
        value: {
          [prop: string]: unknown
        }
      }
    }
  | {
      type: 'block.set'
      at: [KeyedSegment]
      [props: string]: unknown
    }
  | {
      type: 'block.unset'
      at: [KeyedSegment]
      props: Array<string>
    }
  | {
      type: 'blur'
    }
  | {
      type: 'data transfer.set'
      data: string
      dataTransfer: DataTransfer
      mimeType: MIMEType
    }
  | {
      type: 'decorator.add'
      decorator: string
      selection?: NonNullable<EditorSelection>
    }
  | {
      type: 'decorator.remove'
      decorator: string
    }
  | {
      type: 'decorator.toggle'
      decorator: string
    }
  | {
      type: 'delete'
      selection: NonNullable<EditorSelection>
    }
  | {
      type: 'delete.backward'
      unit: TextUnit
    }
  | {
      type: 'delete.block'
      blockPath: [KeyedSegment]
    }
  | {
      type: 'delete.forward'
      unit: TextUnit
    }
  | {
      type: 'delete.text'
      anchor: BlockOffset
      focus: BlockOffset
    }
  | {
      type: 'focus'
    }
  | {
      type: 'history.redo'
    }
  | {
      type: 'history.undo'
    }
  | {
      type: 'insert.blocks'
      blocks: Array<PortableTextBlock>
    }
  | {
      type: 'insert.block object'
      placement: 'auto' | 'after' | 'before'
      blockObject: {
        name: string
        value?: {
          [prop: string]: unknown
        }
      }
    }
  | {
      type: 'insert.inline object'
      inlineObject: {
        name: string
        value?: {
          [prop: string]: unknown
        }
      }
    }
  | {
      type: 'insert.break'
    }
  | {
      type: 'insert.soft break'
    }
  | {
      type: 'insert.block'
      block: PortableTextBlock
      placement: 'auto' | 'after' | 'before'
    }
  | {
      type: 'insert.span'
      text: string
      annotations?: Array<{
        name: string
        value: {
          [prop: string]: unknown
        }
      }>
      decorators?: Array<string>
    }
  | {
      type: 'insert.text'
      text: string
      options?: TextInsertTextOptions
    }
  | {
      type: 'insert.text block'
      placement: 'auto' | 'after' | 'before'
      textBlock?: {
        children?: PortableTextTextBlock['children']
      }
    }
  | {
      type: 'list item.add'
      listItem: string
    }
  | {
      type: 'list item.remove'
      listItem: string
    }
  | {
      type: 'list item.toggle'
      listItem: string
    }
  | {
      type: 'move.block'
      at: [KeyedSegment]
      to: [KeyedSegment]
    }
  | {
      type: 'move.block down'
      at: [KeyedSegment]
    }
  | {
      type: 'move.block up'
      at: [KeyedSegment]
    }
  | {
      type: 'select'
      selection: EditorSelection
    }
  | {
      type: 'select.previous block'
    }
  | {
      type: 'select.next block'
    }
  | {
      type: 'style.add'
      style: string
    }
  | {
      type: 'style.remove'
      style: string
    }
  | {
      type: 'style.toggle'
      style: string
    }
  | {
      type: 'text block.set'
      at: [KeyedSegment]
      level?: number
      listItem?: string
      style?: string
    }
  | {
      type: 'text block.unset'
      at: [KeyedSegment]
      props: Array<'level' | 'listItem' | 'style'>
    }
  | (PickFromUnion<
      ConverterEvent,
      'type',
      | 'deserialization.failure'
      | 'deserialization.success'
      | 'serialization.failure'
      | 'serialization.success'
    > & {
      dataTransfer: DataTransfer
    })

export {}
