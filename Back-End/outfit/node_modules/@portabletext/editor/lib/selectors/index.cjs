"use strict";
Object.defineProperty(exports, "__esModule", { value: !0 });
var types = require("@sanity/types"), selector_isActiveStyle = require("../_chunks-cjs/selector.is-active-style.cjs"), selector_isAtTheStartOfBlock = require("../_chunks-cjs/selector.is-at-the-start-of-block.cjs"), util_sliceBlocks = require("../_chunks-cjs/util.slice-blocks.cjs"), selector_getTextBefore = require("../_chunks-cjs/selector.get-text-before.cjs"), util_reverseSelection = require("../_chunks-cjs/util.reverse-selection.cjs");
const getActiveAnnotations = (snapshot) => {
  if (!snapshot.context.selection)
    return [];
  const selectedBlocks = selector_isAtTheStartOfBlock.getSelectedBlocks(snapshot), selectedSpans = selector_isActiveStyle.getSelectedSpans(snapshot);
  return selectedSpans.length === 0 ? [] : selectedBlocks.flatMap((block) => types.isPortableTextTextBlock(block.node) ? block.node.markDefs ?? [] : []).filter((markDef) => selectedSpans.some((span) => span.node.marks?.includes(markDef._key)));
}, getAnchorBlock = ({
  context
}) => {
  const key = context.selection && util_sliceBlocks.isKeyedSegment(context.selection.anchor.path[0]) ? context.selection.anchor.path[0]._key : void 0, node = key ? context.value.find((block) => block._key === key) : void 0;
  return node && key ? {
    node,
    path: [{
      _key: key
    }]
  } : void 0;
}, getAnchorTextBlock = ({
  context
}) => {
  const anchorBlock = getAnchorBlock({
    context
  });
  return anchorBlock && types.isPortableTextTextBlock(anchorBlock.node) ? {
    node: anchorBlock.node,
    path: anchorBlock.path
  } : void 0;
}, getAnchorChild = ({
  context
}) => {
  const anchorBlock = getAnchorTextBlock({
    context
  });
  if (!anchorBlock)
    return;
  const key = context.selection && util_sliceBlocks.isKeyedSegment(context.selection.anchor.path[2]) ? context.selection.anchor.path[2]._key : void 0, node = key ? anchorBlock.node.children.find((span) => span._key === key) : void 0;
  return node && key ? {
    node,
    path: [...anchorBlock.path, "children", {
      _key: key
    }]
  } : void 0;
}, getAnchorSpan = ({
  context
}) => {
  const anchorChild = getAnchorChild({
    context
  });
  return anchorChild && types.isPortableTextSpan(anchorChild.node) ? {
    node: anchorChild.node,
    path: anchorChild.path
  } : void 0;
}, getBlockOffsets = ({
  context
}) => {
  if (!context.selection)
    return;
  const selectionStartPoint = selector_isAtTheStartOfBlock.getSelectionStartPoint({
    context
  }), selectionEndPoint = selector_isAtTheStartOfBlock.getSelectionEndPoint({
    context
  });
  if (!selectionStartPoint || !selectionEndPoint)
    return;
  const start = util_sliceBlocks.spanSelectionPointToBlockOffset({
    value: context.value,
    selectionPoint: selectionStartPoint
  }), end = util_sliceBlocks.spanSelectionPointToBlockOffset({
    value: context.value,
    selectionPoint: selectionEndPoint
  });
  return start && end ? {
    start,
    end
  } : void 0;
}, getSelection = ({
  context
}) => context.selection, getValue = ({
  context
}) => context.value;
function isPointAfterSelection(point) {
  return (snapshot) => {
    if (!snapshot.context.selection)
      return !1;
    const selection = util_reverseSelection.reverseSelection(snapshot.context.selection), pointBlockKey = types.isKeySegment(point.path[0]) ? point.path[0]._key : void 0, pointChildKey = types.isKeySegment(point.path[2]) ? point.path[2]._key : void 0, endBlockKey = types.isKeySegment(selection.focus.path[0]) ? selection.focus.path[0]._key : void 0, endChildKey = types.isKeySegment(selection.focus.path[2]) ? selection.focus.path[2]._key : void 0;
    if (!pointBlockKey || !endBlockKey)
      return !1;
    let after = !1;
    for (const block of snapshot.context.value) {
      if (block._key === endBlockKey) {
        if (block._key !== pointBlockKey) {
          after = !0;
          break;
        }
        if (!types.isPortableTextTextBlock(block) || !pointChildKey || !endChildKey)
          break;
        for (const child of block.children) {
          if (child._key === endChildKey) {
            if (child._key !== pointChildKey) {
              after = !0;
              break;
            }
            after = point.offset > selection.focus.offset;
            break;
          }
          if (child._key === pointChildKey)
            break;
        }
      }
      if (block._key === pointBlockKey)
        break;
    }
    return after;
  };
}
function isPointBeforeSelection(point) {
  return (snapshot) => {
    if (!snapshot.context.selection)
      return !1;
    const selection = util_reverseSelection.reverseSelection(snapshot.context.selection), pointBlockKey = types.isKeySegment(point.path[0]) ? point.path[0]._key : void 0, pointChildKey = types.isKeySegment(point.path[2]) ? point.path[2]._key : void 0, startBlockKey = types.isKeySegment(selection.anchor.path[0]) ? selection.anchor.path[0]._key : void 0, startChildKey = types.isKeySegment(selection.anchor.path[2]) ? selection.anchor.path[2]._key : void 0;
    if (!pointBlockKey || !startBlockKey)
      return !1;
    let before = !1;
    for (const block of snapshot.context.value) {
      if (block._key === pointBlockKey) {
        if (block._key !== startBlockKey) {
          before = !0;
          break;
        }
        if (!types.isPortableTextTextBlock(block) || !pointChildKey || !startChildKey)
          break;
        for (const child of block.children) {
          if (child._key === pointChildKey) {
            if (child._key !== startChildKey) {
              before = !0;
              break;
            }
            before = point.offset < selection.anchor.offset;
            break;
          }
          if (child._key === startChildKey)
            break;
        }
      }
      if (block._key === startBlockKey)
        break;
    }
    return before;
  };
}
function isOverlappingSelection(selection) {
  return ({
    context
  }) => {
    if (!selection || !context.selection)
      return !1;
    const selectionStartPoint = selector_isAtTheStartOfBlock.getSelectionStartPoint({
      context: {
        ...context,
        selection
      }
    }), selectionEndPoint = selector_isAtTheStartOfBlock.getSelectionEndPoint({
      context: {
        ...context,
        selection
      }
    });
    return !(!selectionStartPoint || !selectionEndPoint || !isPointAfterSelection(selectionStartPoint)({
      context
    }) || !isPointBeforeSelection(selectionEndPoint)({
      context
    }));
  };
}
exports.getActiveListItem = selector_isActiveStyle.getActiveListItem;
exports.getActiveStyle = selector_isActiveStyle.getActiveStyle;
exports.getSelectedSpans = selector_isActiveStyle.getSelectedSpans;
exports.getTrimmedSelection = selector_isActiveStyle.getTrimmedSelection;
exports.isActiveAnnotation = selector_isActiveStyle.isActiveAnnotation;
exports.isActiveDecorator = selector_isActiveStyle.isActiveDecorator;
exports.isActiveListItem = selector_isActiveStyle.isActiveListItem;
exports.isActiveStyle = selector_isActiveStyle.isActiveStyle;
exports.getCaretWordSelection = selector_isAtTheStartOfBlock.getCaretWordSelection;
exports.getFirstBlock = selector_isAtTheStartOfBlock.getFirstBlock;
exports.getFocusBlock = selector_isAtTheStartOfBlock.getFocusBlock;
exports.getFocusBlockObject = selector_isAtTheStartOfBlock.getFocusBlockObject;
exports.getFocusChild = selector_isAtTheStartOfBlock.getFocusChild;
exports.getFocusListBlock = selector_isAtTheStartOfBlock.getFocusListBlock;
exports.getFocusSpan = selector_isAtTheStartOfBlock.getFocusSpan;
exports.getFocusTextBlock = selector_isAtTheStartOfBlock.getFocusTextBlock;
exports.getLastBlock = selector_isAtTheStartOfBlock.getLastBlock;
exports.getNextBlock = selector_isAtTheStartOfBlock.getNextBlock;
exports.getNextInlineObject = selector_isAtTheStartOfBlock.getNextInlineObject;
exports.getPreviousBlock = selector_isAtTheStartOfBlock.getPreviousBlock;
exports.getPreviousInlineObject = selector_isAtTheStartOfBlock.getPreviousInlineObject;
exports.getSelectedBlocks = selector_isAtTheStartOfBlock.getSelectedBlocks;
exports.getSelectedSlice = selector_isAtTheStartOfBlock.getSelectedSlice;
exports.getSelectionEndBlock = selector_isAtTheStartOfBlock.getSelectionEndBlock;
exports.getSelectionEndPoint = selector_isAtTheStartOfBlock.getSelectionEndPoint;
exports.getSelectionStartBlock = selector_isAtTheStartOfBlock.getSelectionStartBlock;
exports.getSelectionStartPoint = selector_isAtTheStartOfBlock.getSelectionStartPoint;
exports.getSelectionText = selector_isAtTheStartOfBlock.getSelectionText;
exports.isAtTheEndOfBlock = selector_isAtTheStartOfBlock.isAtTheEndOfBlock;
exports.isAtTheStartOfBlock = selector_isAtTheStartOfBlock.isAtTheStartOfBlock;
exports.isSelectionCollapsed = selector_isAtTheStartOfBlock.isSelectionCollapsed;
exports.isSelectionExpanded = selector_isAtTheStartOfBlock.isSelectionExpanded;
exports.getBlockTextBefore = selector_getTextBefore.getBlockTextBefore;
exports.getActiveAnnotations = getActiveAnnotations;
exports.getAnchorBlock = getAnchorBlock;
exports.getAnchorChild = getAnchorChild;
exports.getAnchorSpan = getAnchorSpan;
exports.getAnchorTextBlock = getAnchorTextBlock;
exports.getBlockOffsets = getBlockOffsets;
exports.getSelection = getSelection;
exports.getValue = getValue;
exports.isOverlappingSelection = isOverlappingSelection;
exports.isPointAfterSelection = isPointAfterSelection;
exports.isPointBeforeSelection = isPointBeforeSelection;
//# sourceMappingURL=index.cjs.map
