"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf, __hasOwnProp = Object.prototype.hasOwnProperty;
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: !0 }) : target,
  mod
));
var path = require("node:path"), chalk = require("chalk"), runtime = require("./runtime.js"), checkRequiredDependencies = require("./checkRequiredDependencies.js"), servers = require("./servers.js"), timing = require("./timing.js");
function _interopDefaultCompat(e) {
  return e && typeof e == "object" && "default" in e ? e : { default: e };
}
var path__default = /* @__PURE__ */ _interopDefaultCompat(path), chalk__default = /* @__PURE__ */ _interopDefaultCompat(chalk);
async function startDevServer(options) {
  const {
    cwd,
    httpPort,
    httpHost,
    basePath,
    reactStrictMode,
    vite: extendViteConfig,
    reactCompiler,
    appLocation,
    isCoreApp
  } = options, startTime = Date.now();
  runtime.debug("Writing Sanity runtime files"), await runtime.writeSanityRuntime({
    cwd,
    reactStrictMode,
    watch: !0,
    basePath,
    appLocation,
    isCoreApp
  }), runtime.debug("Resolving vite config");
  const mode = "development";
  let viteConfig = await runtime.getViteConfig({
    basePath,
    mode: "development",
    server: {
      port: httpPort,
      host: httpHost
    },
    cwd,
    reactCompiler,
    isCoreApp
  });
  extendViteConfig && (viteConfig = await runtime.extendViteConfigWithUserConfig({
    command: "serve",
    mode
  }, viteConfig, extendViteConfig)), runtime.debug("Creating vite server");
  const {
    createServer
  } = await import("vite"), server = await createServer(viteConfig), info = server.config.logger.info;
  runtime.debug("Listening on specified port"), await server.listen();
  const startupDuration = Date.now() - startTime, url = `http://${httpHost || "localhost"}:${httpPort || "3333"}${basePath}`;
  return info(`${isCoreApp ? "Sanity application" : "Sanity Studio"} using ${chalk__default.default.cyan(`vite@${require("vite/package.json").version}`)} ready in ${chalk__default.default.cyan(`${Math.ceil(startupDuration)}ms`)} and running at ${chalk__default.default.cyan(url)}`), {
    close: () => server.close()
  };
}
async function startSanityDevServer(args, context) {
  const timers = timing.getTimer(), flags = args.extOptions, {
    output,
    workDir,
    cliConfig
  } = context;
  if (timers.start("checkStudioDependencyVersions"), checkRequiredDependencies.checkStudioDependencyVersions(workDir), timers.end("checkStudioDependencyVersions"), (await checkRequiredDependencies.checkRequiredDependencies(context)).didInstall)
    return;
  const config = getDevServerConfig({
    flags,
    workDir,
    cliConfig,
    output
  });
  try {
    await startDevServer(config);
  } catch (err) {
    servers.gracefulServerDeath("dev", config.httpHost, config.httpPort, err);
  }
}
function getDevServerConfig({
  flags,
  workDir,
  cliConfig,
  output
}) {
  const configSpinner = output.spinner("Checking configuration files..."), baseConfig = servers.getSharedServerConfig({
    flags,
    workDir,
    cliConfig
  });
  configSpinner.succeed();
  const env = process.env, reactStrictMode = env.SANITY_STUDIO_REACT_STRICT_MODE ? env.SANITY_STUDIO_REACT_STRICT_MODE === "true" : !!cliConfig?.reactStrictMode;
  return env.SANITY_STUDIO_BASEPATH && cliConfig?.project?.basePath && output.warn(`Overriding configured base path (${cliConfig.project.basePath}) with value from environment variable (${env.SANITY_STUDIO_BASEPATH})`), {
    ...baseConfig,
    staticPath: path__default.default.join(workDir, "static"),
    reactStrictMode,
    reactCompiler: cliConfig && "reactCompiler" in cliConfig ? cliConfig.reactCompiler : void 0
  };
}
exports.default = startSanityDevServer;
//# sourceMappingURL=devAction.js.map
