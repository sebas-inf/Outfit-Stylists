{"version":3,"file":"deployAction.js","sources":["../../src/_internal/cli/actions/deploy/deployAction.ts"],"sourcesContent":["/* eslint-disable max-statements */\nimport path from 'node:path'\nimport zlib from 'node:zlib'\n\nimport {type CliCommandArguments, type CliCommandContext} from '@sanity/cli'\nimport tar from 'tar-fs'\n\nimport {shouldAutoUpdate} from '../../util/shouldAutoUpdate'\nimport buildSanityStudio, {type BuildSanityStudioCommandFlags} from '../build/buildAction'\nimport {extractManifestSafe} from '../manifest/extractManifestAction'\nimport {\n  checkDir,\n  createDeployment,\n  debug,\n  dirIsEmptyOrNonExistent,\n  getInstalledSanityVersion,\n  getOrCreateUserApplication,\n  getOrCreateUserApplicationFromConfig,\n  type UserApplication,\n} from './helpers'\n\nexport interface DeployStudioActionFlags extends BuildSanityStudioCommandFlags {\n  build?: boolean\n}\n\nexport default async function deployStudioAction(\n  args: CliCommandArguments<DeployStudioActionFlags>,\n  context: CliCommandContext,\n): Promise<void> {\n  const {apiClient, workDir, chalk, output, prompt, cliConfig} = context\n  const flags = {build: true, ...args.extOptions}\n  const customSourceDir = args.argsWithoutOptions[0]\n  const sourceDir = path.resolve(process.cwd(), customSourceDir || path.join(workDir, 'dist'))\n  const isAutoUpdating = shouldAutoUpdate({flags, cliConfig})\n\n  const installedSanityVersion = await getInstalledSanityVersion()\n  const configStudioHost = cliConfig && 'studioHost' in cliConfig && cliConfig.studioHost\n\n  const client = apiClient({\n    requireUser: true,\n    requireProject: true,\n  }).withConfig({apiVersion: 'v2024-08-01'})\n\n  if (customSourceDir === 'graphql') {\n    throw new Error('Did you mean `sanity graphql deploy`?')\n  }\n\n  if (customSourceDir) {\n    let relativeOutput = path.relative(process.cwd(), sourceDir)\n    if (relativeOutput[0] !== '.') {\n      relativeOutput = `./${relativeOutput}`\n    }\n\n    const isEmpty = await dirIsEmptyOrNonExistent(sourceDir)\n    const shouldProceed =\n      isEmpty ||\n      (await prompt.single({\n        type: 'confirm',\n        message: `\"${relativeOutput}\" is not empty, do you want to proceed?`,\n        default: false,\n      }))\n\n    if (!shouldProceed) {\n      output.print('Cancelled.')\n      return\n    }\n\n    output.print(`Building to ${relativeOutput}\\n`)\n  }\n\n  // Check that the project has a studio hostname\n  let spinner = output.spinner('Checking project info').start()\n\n  let userApplication: UserApplication\n\n  try {\n    // If the user has provided a studioHost in the config, use that\n    if (configStudioHost) {\n      userApplication = await getOrCreateUserApplicationFromConfig({\n        client,\n        context,\n        spinner,\n        appHost: configStudioHost,\n      })\n    } else {\n      userApplication = await getOrCreateUserApplication({\n        client,\n        context,\n        spinner,\n      })\n    }\n  } catch (err) {\n    if (err.message) {\n      output.error(chalk.red(err.message))\n      return\n    }\n\n    debug('Error creating user application', err)\n    throw err\n  }\n\n  // Always build the project, unless --no-build is passed\n  const shouldBuild = flags.build\n  if (shouldBuild) {\n    const buildArgs = {\n      ...args,\n      extOptions: flags,\n      argsWithoutOptions: [customSourceDir].filter(Boolean),\n    }\n    const {didCompile} = await buildSanityStudio(buildArgs, context, {basePath: '/'})\n\n    if (!didCompile) {\n      return\n    }\n\n    await extractManifestSafe(\n      {\n        ...buildArgs,\n        extOptions: {},\n        extraArguments: [],\n      },\n      context,\n    )\n  }\n\n  // Ensure that the directory exists, is a directory and seems to have valid content\n  spinner = output.spinner('Verifying local content').start()\n  try {\n    await checkDir(sourceDir)\n    spinner.succeed()\n  } catch (err) {\n    spinner.fail()\n    debug('Error checking directory', err)\n    throw err\n  }\n\n  // Now create a tarball of the given directory\n  const parentDir = path.dirname(sourceDir)\n  const base = path.basename(sourceDir)\n  const tarball = tar.pack(parentDir, {entries: [base]}).pipe(zlib.createGzip())\n\n  spinner = output.spinner('Deploying to Sanity.Studio').start()\n  try {\n    const {location} = await createDeployment({\n      client,\n      applicationId: userApplication.id,\n      version: installedSanityVersion,\n      isAutoUpdating,\n      tarball,\n    })\n\n    spinner.succeed()\n\n    // And let the user know we're done\n    output.print(`\\nSuccess! Studio deployed to ${chalk.cyan(location)}`)\n\n    if (!configStudioHost) {\n      output.print(`\\nAdd ${chalk.cyan(`studioHost: '${userApplication.appHost}'`)}`)\n      output.print('to defineCliConfig root properties in sanity.cli.js or sanity.cli.ts')\n      output.print('to avoid prompting for hostname on next deploy.')\n    }\n  } catch (err) {\n    spinner.fail()\n    debug('Error deploying studio', err)\n    throw err\n  }\n}\n"],"names":["deployStudioAction","args","context","apiClient","workDir","chalk","output","prompt","cliConfig","flags","build","extOptions","customSourceDir","argsWithoutOptions","sourceDir","path","resolve","process","cwd","join","isAutoUpdating","shouldAutoUpdate","installedSanityVersion","getInstalledSanityVersion","configStudioHost","studioHost","client","requireUser","requireProject","withConfig","apiVersion","Error","relativeOutput","relative","dirIsEmptyOrNonExistent","single","type","message","default","print","spinner","start","userApplication","getOrCreateUserApplicationFromConfig","appHost","getOrCreateUserApplication","err","error","red","debug","buildArgs","filter","Boolean","didCompile","buildSanityStudio","basePath","extractManifestSafe","extraArguments","checkDir","succeed","fail","parentDir","dirname","base","basename","tarball","tar","pack","entries","pipe","zlib","createGzip","location","createDeployment","applicationId","id","version","cyan"],"mappings":"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"}