{"version":3,"file":"runtime.js","sources":["../../src/_internal/cli/server/debug.ts","../../src/_internal/cli/server/createExternalFromImportMap.ts","../../src/_internal/cli/server/getBrowserAliases.ts","../../src/_internal/cli/server/helpers.ts","../../src/_internal/cli/server/sanityMonorepo.ts","../../src/_internal/cli/server/constants.ts","../../src/_internal/cli/server/renderDocument.tsx","../../src/_internal/cli/server/vite/plugin-sanity-build-entries.ts","../../src/_internal/cli/server/webManifest.ts","../../src/_internal/cli/server/vite/plugin-sanity-favicons.ts","../../src/_internal/cli/server/vite/plugin-sanity-runtime-rewrite.ts","../../src/_internal/cli/server/getViteConfig.ts","../../src/_internal/cli/server/getEntryModule.ts","../../src/_internal/cli/server/sanityConfig.ts","../../src/_internal/cli/server/runtime.ts"],"sourcesContent":["import debugIt from 'debug'\n\nexport const debug = debugIt('sanity:server')\n","import {escapeRegExp} from 'lodash'\n\ntype ImportMap = {imports?: Record<string, string>}\n\n/**\n * Generates a Rollup `external` configuration array based on the provided\n * import map. We derive externals from the import map because this ensures that\n * modules listed in the import map are not bundled into the Rollup output so\n * the browser can load these bare specifiers according to the import map.\n */\nexport function createExternalFromImportMap({imports = {}}: ImportMap = {}): (string | RegExp)[] {\n  return Object.keys(imports).map((specifier) =>\n    specifier.endsWith('/') ? new RegExp(`^${escapeRegExp(specifier)}.+`) : specifier,\n  )\n}\n","import path from 'node:path'\n\nimport {escapeRegExp} from 'lodash'\nimport resolve from 'resolve.exports'\nimport {type Alias} from 'vite'\n\n/**\n * The following are the specifiers that are expected/allowed to be used within\n * a built Sanity studio in the browser. These are used in combination with\n * `resolve.exports` to determine the final entry point locations for each allowed specifier.\n *\n * There is also a corresponding test for this file that expects these to be\n * included in the `sanity` package.json. That test is meant to keep this list\n * in sync in the event we add another package subpath.\n *\n * @internal\n */\nexport const browserCompatibleSanityPackageSpecifiers = [\n  'sanity',\n  'sanity/_createContext',\n  'sanity/_singletons',\n  'sanity/desk',\n  'sanity/presentation',\n  'sanity/router',\n  'sanity/structure',\n  'sanity/package.json',\n]\n\n/**\n * These conditions should align with the conditions present in the\n * `package.json` of the `'sanity'` module. they are given to `resolve.exports`\n * in order to determine the correct entrypoint for the browser-compatible\n * package specifiers listed above.\n */\nconst conditions = ['import', 'browser', 'default']\n\n// locate the entry points for each subpath the Sanity module exports\nexport function getSanityPkgExportAliases(sanityPkgPath: string) {\n  // Load the package.json of the Sanity package\n  // eslint-disable-next-line import/no-dynamic-require\n  const pkg = require(sanityPkgPath)\n  const dirname = path.dirname(sanityPkgPath)\n\n  // Resolve the entry points for each allowed specifier\n  const unifiedSanityAliases = browserCompatibleSanityPackageSpecifiers.reduce<Alias[]>(\n    (acc, next) => {\n      // Resolve the export path for the specifier using resolve.exports\n      const dest = resolve.exports(pkg, next, {browser: true, conditions})?.[0]\n      if (!dest) return acc\n\n      // Map the specifier to its resolved path\n      acc.push({\n        find: new RegExp(`^${escapeRegExp(next)}$`),\n        replacement: path.resolve(dirname, dest),\n      })\n      return acc\n    },\n    [],\n  )\n\n  // Return the aliases configuration for external projects\n  return unifiedSanityAliases\n}\n","import path from 'node:path'\n\nimport readPkgUp from 'read-pkg-up'\nimport resolveFrom from 'resolve-from'\n\n/**\n * Given a module name such as \"styled-components\", will resolve the _module path_,\n * eg if require.resolve(`styled-components`) resolves to:\n *   `/some/node_modules/styled-components/lib/cjs/styled.js`\n * this function will instead return\n *   `/some/node_modules/styled-components`\n *\n * This is done in order for aliases to be pointing to the right module in terms of\n * _file-system location_, without pointing to a specific commonjs/browser/module variant\n *\n * @internal\n */\nexport async function getModulePath(mod: string, fromDir: string): Promise<string> {\n  const modulePath = resolveFrom(fromDir, mod)\n  const pkg = await readPkgUp({cwd: path.dirname(modulePath)})\n\n  return pkg ? path.dirname(pkg.path) : modulePath\n}\n\n/**\n * @internal\n */\nexport function isRecord(value: unknown): value is Record<string, unknown> {\n  return Boolean(value) && typeof value === 'object' && !Array.isArray(value)\n}\n\n/**\n * Ensures that the given path both starts and ends with a single slash\n *\n * @internal\n */\nexport function normalizeBasePath(pathName: string): string {\n  return `/${pathName}/`.replace(/^\\/+/, '/').replace(/\\/+$/, '/')\n}\n","import path from 'node:path'\n\nimport readPkgUp from 'read-pkg-up'\n\n/**\n * @internal\n */\nexport interface SanityMonorepo {\n  path: string\n}\n\nexport async function getMonorepoAliases(monorepoPath: string) {\n  const {default: aliases} = await import('@repo/dev-aliases')\n  return Object.fromEntries(\n    Object.entries(aliases).map(([pkgName, pkgPath]) => {\n      return [pkgName, path.resolve(monorepoPath, path.join('packages', pkgPath))]\n    }),\n  )\n}\n\n/**\n * Load information about the `sanity-io/sanity` monorepo (if applicable)\n *\n * @internal\n */\nexport async function loadSanityMonorepo(cwd: string): Promise<SanityMonorepo | undefined> {\n  let p = cwd\n\n  while (p !== '/') {\n    const readResult = await readPkgUp({cwd: p})\n\n    if (!readResult) {\n      return undefined\n    }\n\n    if (readResult.packageJson.isSanityMonorepo) {\n      return {path: path.dirname(readResult.path)}\n    }\n\n    p = path.dirname(path.dirname(readResult.path))\n  }\n\n  return undefined\n}\n","/**\n * This script takes the import map from the `#__imports` script tag,\n * modifies relevant URLs that match the sanity-cdn hostname by replacing\n * the existing timestamp in the sanity-cdn URLs with a new runtime timestamp,\n * and injects the modified import map back into the HTML.\n *\n * This will be injected into the HTML of the user's bundle.\n *\n * Note that this is in a separate constants file to prevent \"Cannot access\n * before initialization\" errors.\n */\nexport const TIMESTAMPED_IMPORTMAP_INJECTOR_SCRIPT = `<script>\n  // auto-generated script to add import map with timestamp\n  const importsJson = document.getElementById('__imports')?.textContent;\n  const { imports = {}, ...rest } = importsJson ? JSON.parse(importsJson) : {};\n  const importMapEl = document.createElement('script');\n  importMapEl.type = 'importmap';\n  const newTimestamp = \\`/t\\${Math.floor(Date.now() / 1000)}\\`;\n  importMapEl.textContent = JSON.stringify({\n    imports: Object.fromEntries(\n      Object.entries(imports).map(([specifier, path]) => {\n        try {\n          const url = new URL(path);\n          if (/^sanity-cdn\\\\.[a-zA-Z]+$/.test(url.hostname)) {\n            url.pathname = url.pathname.replace(/\\\\/t\\\\d+/, newTimestamp);\n          }\n          return [specifier, url.toString()];\n        } catch {\n          return [specifier, path];\n        }\n      })\n    ),\n    ...rest,\n  });\n  document.head.appendChild(importMapEl);\n</script>`\n","/**\n * Looks for and imports (in preferred order):\n *   - src/_document.js\n *   - src/_document.tsx\n *\n * Then renders using ReactDOM to a string, which is sent back to the parent\n * process over the worker `postMessage` channel.\n */\nimport fs from 'node:fs'\nimport path from 'node:path'\nimport {isMainThread, parentPort, Worker, workerData} from 'node:worker_threads'\n\nimport chalk from 'chalk'\nimport importFresh from 'import-fresh'\nimport {parse as parseHtml} from 'node-html-parser'\nimport {renderToStaticMarkup} from 'react-dom/server'\n\nimport {TIMESTAMPED_IMPORTMAP_INJECTOR_SCRIPT} from './constants'\nimport {debug as serverDebug} from './debug'\nimport {getMonorepoAliases, type SanityMonorepo} from './sanityMonorepo'\n\nconst debug = serverDebug.extend('renderDocument')\n\n// Don't use threads in the jest world\n// eslint-disable-next-line no-process-env, turbo/no-undeclared-env-vars\nconst useThreads = typeof process.env.JEST_WORKER_ID === 'undefined'\nconst hasWarnedAbout = new Set<string>()\n\nconst defaultProps = {\n  entryPath: './.sanity/runtime/app.js',\n}\n\nconst autoGeneratedWarning = `\nThis file is auto-generated from \"sanity dev\".\nModifications to this file are automatically discarded.\n`.trim()\n\ninterface DocumentProps {\n  basePath: string\n  entryPath?: string\n  css?: string[]\n}\n\ninterface RenderDocumentOptions {\n  monorepo?: SanityMonorepo\n  studioRootPath: string\n  props?: DocumentProps\n  importMap?: {\n    imports?: Record<string, string>\n  }\n  isCoreApp?: boolean\n}\n\nexport function renderDocument(options: RenderDocumentOptions): Promise<string> {\n  return new Promise((resolve, reject) => {\n    if (!useThreads) {\n      resolve(\n        getDocumentHtml(\n          options.studioRootPath,\n          options.props,\n          options.importMap,\n          options.isCoreApp,\n        ),\n      )\n      return\n    }\n\n    debug('Starting worker thread for %s', __filename)\n    const worker = new Worker(__filename, {\n      execArgv: __DEV__ ? ['-r', `${__dirname}/esbuild-register.js`] : undefined,\n      workerData: {...options, dev: __DEV__, shouldWarn: true},\n      // eslint-disable-next-line no-process-env\n      env: process.env,\n    })\n\n    worker.on('message', (msg) => {\n      if (msg.type === 'warning') {\n        if (hasWarnedAbout.has(msg.warnKey)) {\n          return\n        }\n\n        if (Array.isArray(msg.message)) {\n          msg.message.forEach((warning: string) =>\n            console.warn(`${chalk.yellow('[warn]')} ${warning}`),\n          )\n        } else {\n          console.warn(`${chalk.yellow('[warn]')} ${msg.message}`)\n        }\n\n        hasWarnedAbout.add(msg.warnKey)\n        return\n      }\n\n      if (msg.type === 'error') {\n        debug('Error from worker: %s', msg.error || 'Unknown error')\n        reject(new Error(msg.error || 'Document rendering worker stopped with an unknown error'))\n        return\n      }\n\n      if (msg.type === 'result') {\n        debug('Document HTML rendered, %d bytes', msg.html.length)\n        resolve(msg.html)\n      }\n    })\n    worker.on('error', (err) => {\n      debug('Worker errored: %s', err.message)\n      reject(err)\n    })\n    worker.on('exit', (code) => {\n      if (code !== 0) {\n        debug('Worker stopped with code %d', code)\n        reject(new Error(`Document rendering worker stopped with exit code ${code}`))\n      }\n    })\n  })\n}\n\nexport function decorateIndexWithAutoGeneratedWarning(template: string): string {\n  return template.replace(/<head/, `\\n<!--\\n${autoGeneratedWarning}\\n-->\\n<head`)\n}\n\n/**\n * Decorates the given HTML template with a script\n * tag that loads the bridge component to communicate\n * with core-ui.\n */\nexport function decorateIndexWithBridgeScript(template: string): string {\n  return template.replace(\n    '</head>',\n    '<script src=\"https://core.sanity-cdn.com/bridge.js\" async type=\"module\"></script>\\n</head>',\n  )\n}\n\nexport function getPossibleDocumentComponentLocations(studioRootPath: string): string[] {\n  return [path.join(studioRootPath, '_document.js'), path.join(studioRootPath, '_document.tsx')]\n}\n\n/**\n * Adds a base path to a URL if necessary, and returns the resulting URL.\n * @param url - The URL to prefix with a base path.\n * @param basePath - The base path to prefix the URL with. Default value is `/`.\n * @returns The resulting URL with the base path.\n * @internal\n */\nexport function _prefixUrlWithBasePath(url: string, basePath: string): string {\n  // Normalize basePath by adding a leading slash if it's missing.\n  const normalizedBasePath = basePath.startsWith('/') ? basePath : `/${basePath}`\n\n  // If the URL starts with a slash, append it to the basePath, removing any trailing slash if present.\n  if (url.startsWith('/')) {\n    if (normalizedBasePath.endsWith('/')) {\n      return `${normalizedBasePath.slice(0, -1)}${url}`\n    }\n    return `${normalizedBasePath}${url}`\n  }\n\n  // If the URL doesn't start with a slash, append it to the basePath with a slash in between.\n  if (normalizedBasePath.endsWith('/')) {\n    return `${normalizedBasePath}${url}`\n  }\n  return `${normalizedBasePath}/${url}`\n}\n\nif (!isMainThread && parentPort) {\n  renderDocumentFromWorkerData()\n}\n\nfunction renderDocumentFromWorkerData() {\n  if (!parentPort || !workerData) {\n    throw new Error('Must be used as a Worker with a valid options object in worker data')\n  }\n\n  const {monorepo, studioRootPath, props, importMap, isCoreApp}: RenderDocumentOptions =\n    workerData || {}\n\n  if (workerData?.dev) {\n    // Define `__DEV__` in the worker thread as well\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    ;(global as any).__DEV__ = true\n  }\n\n  if (typeof studioRootPath !== 'string') {\n    parentPort.postMessage({type: 'error', message: 'Missing/invalid `studioRootPath` option'})\n    return\n  }\n\n  if (props && typeof props !== 'object') {\n    parentPort.postMessage({type: 'error', message: '`props` must be an object if provided'})\n    return\n  }\n\n  // Require hook #1\n  // Alias monorepo modules\n  debug('Registering potential aliases')\n  if (monorepo) {\n    require('module-alias').addAliases(getMonorepoAliases(monorepo.path))\n  }\n\n  // Require hook #2\n  // Use `esbuild` to allow JSX/TypeScript and modern JS features\n  debug('Registering esbuild for node %s', process.version)\n  const {unregister} = __DEV__\n    ? {unregister: () => undefined}\n    : require('esbuild-register/dist/node').register({\n        target: `node${process.version.slice(1)}`,\n        supported: {'dynamic-import': true},\n        jsx: 'automatic',\n        extensions: ['.jsx', '.ts', '.tsx', '.mjs'],\n      })\n\n  // Require hook #3\n  // Same as above, but we don't want to enforce a .jsx extension for anything with JSX\n  debug('Registering esbuild for .js files using jsx loader')\n  const {unregister: unregisterJs} = __DEV__\n    ? {unregister: () => undefined}\n    : require('esbuild-register/dist/node').register({\n        target: `node${process.version.slice(1)}`,\n        supported: {'dynamic-import': true},\n        extensions: ['.js'],\n        jsx: 'automatic',\n        loader: 'jsx',\n      })\n\n  const html = getDocumentHtml(studioRootPath, props, importMap, isCoreApp)\n\n  parentPort.postMessage({type: 'result', html})\n\n  // Be polite and clean up after esbuild-register\n  unregister()\n  unregisterJs()\n}\n\nfunction getDocumentHtml(\n  studioRootPath: string,\n  props?: DocumentProps,\n  importMap?: {imports?: Record<string, string>},\n  isCoreApp?: boolean,\n): string {\n  const Document = getDocumentComponent(studioRootPath, isCoreApp)\n\n  // NOTE: Validate the list of CSS paths so implementers of `_document.tsx` don't have to\n  // - If the path is not a full URL, check if it starts with `/`\n  //   - If not, then prepend a `/` to the string\n  const css = props?.css?.map((url) => {\n    try {\n      // If the URL is absolute, we don't need to prefix it\n      return new URL(url).toString()\n    } catch {\n      return _prefixUrlWithBasePath(url, props.basePath)\n    }\n  })\n\n  debug('Rendering document component using React')\n  const result = addTimestampedImportMapScriptToHtml(\n    renderToStaticMarkup(<Document {...defaultProps} {...props} css={css} />),\n    importMap,\n  )\n\n  return `<!DOCTYPE html>${result}`\n}\n\n/**\n * @internal\n */\nexport function addTimestampedImportMapScriptToHtml(\n  html: string,\n  importMap?: {imports?: Record<string, string>},\n): string {\n  if (!importMap) return html\n\n  let root = parseHtml(html)\n  let htmlEl = root.querySelector('html')\n  if (!htmlEl) {\n    const oldRoot = root\n    root = parseHtml('<html></html>')\n    htmlEl = root.querySelector('html')!\n    htmlEl.appendChild(oldRoot)\n  }\n\n  let headEl = htmlEl.querySelector('head')\n\n  if (!headEl) {\n    htmlEl.insertAdjacentHTML('afterbegin', '<head></head>')\n    headEl = root.querySelector('head')!\n  }\n\n  headEl.insertAdjacentHTML(\n    'beforeend',\n    `<script type=\"application/json\" id=\"__imports\">${JSON.stringify(importMap)}</script>`,\n  )\n  headEl.insertAdjacentHTML('beforeend', TIMESTAMPED_IMPORTMAP_INJECTOR_SCRIPT)\n  return root.outerHTML\n}\n\nfunction getDocumentComponent(studioRootPath: string, isCoreApp?: boolean) {\n  debug('Loading default document component from `sanity` module')\n\n  const {BasicDocument} = __DEV__\n    ? require('../../../core/components/BasicDocument')\n    : require('sanity')\n\n  const {DefaultDocument} = __DEV__\n    ? require('../../../core/components/DefaultDocument')\n    : require('sanity')\n\n  const Document = isCoreApp ? BasicDocument : DefaultDocument\n\n  debug('Attempting to load user-defined document component from %s', studioRootPath)\n  const userDefined = tryLoadDocumentComponent(studioRootPath)\n\n  if (!userDefined) {\n    debug('Using default document component')\n    return Document\n  }\n\n  debug('Found user defined document component at %s', userDefined.path)\n\n  const DocumentComp = userDefined.component.default || userDefined.component // CommonJS\n  if (typeof DocumentComp === 'function') {\n    debug('User defined document component is a function, assuming valid')\n    return DocumentComp\n  }\n\n  debug('User defined document component did not have a default export')\n  const userExports = Object.keys(userDefined.component).join(', ') || 'None'\n  const relativePath = path.relative(process.cwd(), userDefined.path)\n  const typeHint =\n    typeof userDefined.component.default === 'undefined'\n      ? ''\n      : ` (type was ${typeof userDefined.component.default})`\n\n  const warnKey = `${relativePath}/${userDefined.modified}`\n\n  parentPort?.postMessage({\n    type: 'warning',\n    message: [\n      `${relativePath} did not have a default export that is a React component${typeHint}`,\n      `Named exports/properties found: ${userExports}`.trim(),\n      `Using default document component from \"sanity\".`,\n    ],\n    warnKey,\n  })\n\n  return DefaultDocument\n}\n\nfunction tryLoadDocumentComponent(studioRootPath: string) {\n  const locations = getPossibleDocumentComponentLocations(studioRootPath)\n\n  for (const componentPath of locations) {\n    debug('Trying to load document component from %s', componentPath)\n    try {\n      return {\n        // eslint-disable-next-line import/no-dynamic-require\n        component: importFresh<any>(componentPath),\n        path: componentPath,\n        // eslint-disable-next-line no-sync\n        modified: Math.floor(fs.statSync(componentPath)?.mtimeMs),\n      }\n    } catch (err) {\n      // Allow \"not found\" errors\n      if (err.code !== 'MODULE_NOT_FOUND') {\n        debug('Failed to load document component: %s', err.message)\n        throw err\n      }\n\n      debug('Document component not found at %s', componentPath)\n    }\n  }\n\n  return null\n}\n","import {type ChunkMetadata, type Plugin} from 'vite'\n\nimport {decorateIndexWithBridgeScript, renderDocument} from '../renderDocument'\nimport {type SanityMonorepo} from '../sanityMonorepo'\n\ninterface ViteOutputBundle {\n  [fileName: string]: ViteRenderedChunk | ViteRenderedAsset\n}\n\ninterface ViteRenderedAsset {\n  type: 'asset'\n}\n\ninterface ViteRenderedChunk {\n  type: 'chunk'\n  name: string\n  fileName: string\n  facadeModuleId: string | null\n  code: string\n  imports: string[]\n  viteMetadata: ChunkMetadata\n  isEntry: boolean\n}\n\nconst entryChunkId = '.sanity/runtime/app.js'\n\nexport function sanityBuildEntries(options: {\n  cwd: string\n  monorepo: SanityMonorepo | undefined\n  basePath: string\n  importMap?: {imports?: Record<string, string>}\n  isCoreApp?: boolean\n}): Plugin {\n  const {cwd, monorepo, basePath, importMap, isCoreApp} = options\n\n  return {\n    name: 'sanity/server/build-entries',\n    apply: 'build',\n\n    buildStart() {\n      this.emitFile({\n        type: 'chunk',\n        id: entryChunkId,\n        name: 'sanity',\n      })\n    },\n\n    async generateBundle(_options, outputBundle) {\n      const bundle = outputBundle as unknown as ViteOutputBundle\n      const entryFile = Object.values(bundle).find(\n        (file) =>\n          file.type === 'chunk' &&\n          file.name === 'sanity' &&\n          file.facadeModuleId?.endsWith(entryChunkId),\n      )\n\n      if (!entryFile) {\n        throw new Error(`Failed to find entry file in bundle (${entryChunkId})`)\n      }\n\n      if (entryFile.type !== 'chunk') {\n        throw new Error('Entry file is not a chunk')\n      }\n\n      const entryFileName = entryFile.fileName\n      const entryPath = [basePath.replace(/\\/+$/, ''), entryFileName].join('/')\n\n      let css: string[] = []\n      if (entryFile.viteMetadata?.importedCss) {\n        // Check all the top-level imports of the entryPoint to see if they have\n        // static CSS assets that need loading\n        css = [...entryFile.viteMetadata.importedCss]\n        for (const key of entryFile.imports) {\n          // Traverse all CSS assets that isn't loaded by the runtime and\n          // need <link> tags in the HTML template\n          const entry = bundle[key]\n          const importedCss =\n            entry && entry.type === 'chunk' ? entry.viteMetadata.importedCss : undefined\n\n          if (importedCss) {\n            css.push(...importedCss)\n          }\n        }\n      }\n\n      this.emitFile({\n        type: 'asset',\n        fileName: 'index.html',\n        source: decorateIndexWithBridgeScript(\n          await renderDocument({\n            monorepo,\n            studioRootPath: cwd,\n            importMap,\n            props: {\n              basePath,\n              entryPath,\n              css,\n            },\n            isCoreApp,\n          }),\n        ),\n      })\n    },\n  }\n}\n","export interface WebManifest {\n  icons: {\n    src: string\n    type: string\n    sizes: string\n  }[]\n}\n\nexport function generateWebManifest(basePath: string): WebManifest {\n  return {\n    icons: [\n      {src: `${basePath}/favicon-192.png`, type: 'image/png', sizes: '192x192'},\n      {src: `${basePath}/favicon-512.png`, type: 'image/png', sizes: '512x512'},\n    ],\n  }\n}\n","import fs from 'node:fs/promises'\nimport path from 'node:path'\n\nimport {type Plugin} from 'vite'\n\nimport {generateWebManifest} from '../webManifest'\n\nconst mimeTypes: Record<string, string | undefined> = {\n  '.ico': 'image/x-icon',\n  '.svg': 'image/svg+xml',\n  '.png': 'image/png',\n}\n\n/**\n * Fallback favicons plugin for Sanity.\n *\n * If a favicon is not found in the static folder, this plugin will serve the default\n * Sanity favicons from the npm bundle. If a custom `favicon.ico` is found in the static\n * folder, it will also be served for a root `/favicon.ico` request.\n *\n * @param options - Options for the plugin\n * @returns A Vite plugin\n * @internal\n */\nexport function sanityFaviconsPlugin({\n  defaultFaviconsPath,\n  customFaviconsPath,\n  staticUrlPath,\n}: {\n  defaultFaviconsPath: string\n  customFaviconsPath: string\n  staticUrlPath: string\n}): Plugin {\n  const cache: {favicons?: string[]} = {}\n\n  async function getFavicons(): Promise<string[]> {\n    if (cache.favicons) {\n      return cache.favicons\n    }\n\n    cache.favicons = await fs.readdir(defaultFaviconsPath)\n    return cache.favicons\n  }\n\n  async function hasCustomFavicon(fileName: string): Promise<boolean> {\n    try {\n      await fs.access(path.join(customFaviconsPath, fileName))\n      return true\n    } catch (err) {\n      return false\n    }\n  }\n\n  return {\n    name: 'sanity/server/sanity-favicons',\n    apply: 'serve',\n    configureServer(viteDevServer) {\n      const webManifest = JSON.stringify(generateWebManifest(staticUrlPath), null, 2)\n      const webManifestPath = `${staticUrlPath}/manifest.webmanifest`\n\n      viteDevServer.middlewares.use(async (req, res, next) => {\n        if (req.url?.endsWith(webManifestPath)) {\n          res.writeHead(200, 'OK', {'content-type': 'application/manifest+json'})\n          res.write(webManifest)\n          res.end()\n          return\n        }\n\n        const parsedUrl =\n          ((req as any)._parsedUrl as URL) || new URL(req.url || '/', 'http://localhost:3333')\n\n        const pathName = parsedUrl.pathname || ''\n        const fileName = path.basename(pathName || '')\n        const icons = await getFavicons()\n        const isIconRequest =\n          pathName.startsWith('/favicon.ico') ||\n          (icons.includes(fileName) && pathName.includes(staticUrlPath))\n\n        if (!isIconRequest) {\n          next()\n          return\n        }\n\n        const faviconPath = (await hasCustomFavicon(fileName))\n          ? path.join(customFaviconsPath, fileName)\n          : path.join(defaultFaviconsPath, fileName)\n\n        const mimeType = mimeTypes[path.extname(fileName)] || 'application/octet-stream'\n        res.writeHead(200, 'OK', {'content-type': mimeType})\n        res.write(await fs.readFile(faviconPath))\n        res.end()\n      })\n    },\n  }\n}\n","import {type Plugin} from 'vite'\n\nexport function sanityRuntimeRewritePlugin(): Plugin {\n  return {\n    name: 'sanity/server/sanity-runtime-rewrite',\n    apply: 'serve',\n    configureServer(viteDevServer) {\n      return () => {\n        viteDevServer.middlewares.use((req, res, next) => {\n          if (req.url === '/index.html') {\n            req.url = '/.sanity/runtime/index.html'\n          }\n\n          next()\n        })\n      }\n    },\n  }\n}\n","import path from 'node:path'\n\nimport {type ReactCompilerConfig, type UserViteConfig} from '@sanity/cli'\nimport debug from 'debug'\nimport readPkgUp from 'read-pkg-up'\nimport {type ConfigEnv, type InlineConfig, type Rollup} from 'vite'\n\nimport {createExternalFromImportMap} from './createExternalFromImportMap'\nimport {getSanityPkgExportAliases} from './getBrowserAliases'\nimport {getStudioEnvironmentVariables} from './getStudioEnvironmentVariables'\nimport {normalizeBasePath} from './helpers'\nimport {getMonorepoAliases, loadSanityMonorepo} from './sanityMonorepo'\nimport {sanityBuildEntries} from './vite/plugin-sanity-build-entries'\nimport {sanityFaviconsPlugin} from './vite/plugin-sanity-favicons'\nimport {sanityRuntimeRewritePlugin} from './vite/plugin-sanity-runtime-rewrite'\n\nexport interface ViteOptions {\n  /**\n   * Root path of the studio/sanity app\n   */\n  cwd: string\n\n  /**\n   * Base path (eg under where to serve the app - `/studio` or similar)\n   * Will be normalized to ensure it starts and ends with a `/`\n   */\n  basePath?: string\n\n  /**\n   * Output directory (eg where to place the built files, if any)\n   */\n  outputDir?: string\n\n  /**\n   * Whether or not to enable source maps\n   */\n  sourceMap?: boolean\n\n  /**\n   * Whether or not to minify the output (only used in `mode: 'production'`)\n   */\n  minify?: boolean\n\n  /**\n   * HTTP development server configuration\n   */\n  server?: {port?: number; host?: string}\n\n  /**\n   * Mode to run vite in - eg development or production\n   */\n  mode: 'development' | 'production'\n\n  importMap?: {imports?: Record<string, string>}\n  reactCompiler: ReactCompilerConfig | undefined\n  isCoreApp?: boolean\n}\n\n/**\n * Get a configuration object for Vite based on the passed options\n *\n * @internal Only meant for consumption inside of Sanity modules, do not depend on this externally\n */\nexport async function getViteConfig(options: ViteOptions): Promise<InlineConfig> {\n  const {\n    cwd,\n    mode,\n    outputDir,\n    // default to `true` when `mode=development`\n    sourceMap = options.mode === 'development',\n    server,\n    minify,\n    basePath: rawBasePath = '/',\n    importMap,\n    reactCompiler,\n    isCoreApp,\n  } = options\n\n  const monorepo = await loadSanityMonorepo(cwd)\n  const basePath = normalizeBasePath(rawBasePath)\n\n  const sanityPkgPath = (await readPkgUp({cwd: __dirname}))?.path\n  if (!sanityPkgPath) {\n    throw new Error('Unable to resolve `sanity` module root')\n  }\n\n  const customFaviconsPath = path.join(cwd, 'static')\n  const defaultFaviconsPath = path.join(path.dirname(sanityPkgPath), 'static', 'favicons')\n  const staticPath = `${basePath}static`\n\n  const {default: viteReact} = await import('@vitejs/plugin-react')\n  const viteConfig: InlineConfig = {\n    // Define a custom cache directory so that sanity's vite cache\n    // does not conflict with any potential local vite projects\n    cacheDir: 'node_modules/.sanity/vite',\n    root: cwd,\n    base: basePath,\n    build: {\n      outDir: outputDir || path.resolve(cwd, 'dist'),\n      sourcemap: sourceMap,\n    },\n    server: {\n      host: server?.host,\n      port: server?.port || 3333,\n      strictPort: true,\n    },\n    configFile: false,\n    mode,\n    plugins: [\n      viteReact(\n        reactCompiler ? {babel: {plugins: [['babel-plugin-react-compiler', reactCompiler]]}} : {},\n      ),\n      sanityFaviconsPlugin({defaultFaviconsPath, customFaviconsPath, staticUrlPath: staticPath}),\n      sanityRuntimeRewritePlugin(),\n      sanityBuildEntries({basePath, cwd, monorepo, importMap, isCoreApp}),\n    ],\n    envPrefix: isCoreApp ? 'VITE_' : 'SANITY_STUDIO_',\n    logLevel: mode === 'production' ? 'silent' : 'info',\n    resolve: {\n      alias: monorepo?.path\n        ? await getMonorepoAliases(monorepo.path)\n        : getSanityPkgExportAliases(sanityPkgPath),\n      dedupe: ['styled-components'],\n    },\n    define: {\n      // eslint-disable-next-line no-process-env\n      '__SANITY_STAGING__': process.env.SANITY_INTERNAL_ENV === 'staging',\n      'process.env.MODE': JSON.stringify(mode),\n      /**\n       * Yes, double negatives are confusing.\n       * The default value of `SC_DISABLE_SPEEDY` is `process.env.NODE_ENV === 'production'`: https://github.com/styled-components/styled-components/blob/99c02f52d69e8e509c0bf012cadee7f8e819a6dd/packages/styled-components/src/constants.ts#L34\n       * Which means that in production, use the much faster way of inserting CSS rules, based on the CSSStyleSheet API (https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleSheet/insertRule)\n       * while in dev mode, use the slower way of inserting CSS rules, which appends text nodes to the `<style>` tag: https://github.com/styled-components/styled-components/blob/99c02f52d69e8e509c0bf012cadee7f8e819a6dd/packages/styled-components/src/sheet/Tag.ts#L74-L76\n       * There are historical reasons for this, primarily that browsers initially did not support editing CSS rules in the DevTools inspector if `CSSStyleSheet.insetRule` were used.\n       * However, that's no longer the case (since Chrome 81 back in April 2020: https://developer.chrome.com/docs/css-ui/css-in-js), the latest version of FireFox also supports it,\n       * and there is no longer any reason to use the much slower method in dev mode.\n       */\n      'process.env.SC_DISABLE_SPEEDY': JSON.stringify('false'),\n      ...getStudioEnvironmentVariables({prefix: 'process.env.', jsonEncode: true}),\n    },\n  }\n\n  if (mode === 'production') {\n    viteConfig.build = {\n      ...viteConfig.build,\n\n      assetsDir: 'static',\n      minify: minify ? 'esbuild' : false,\n      emptyOutDir: false, // Rely on CLI to do this\n\n      rollupOptions: {\n        onwarn: onRollupWarn,\n        external: createExternalFromImportMap(importMap),\n        input: {\n          sanity: path.join(cwd, '.sanity', 'runtime', 'app.js'),\n        },\n      },\n    }\n  }\n\n  return viteConfig\n}\n\nfunction onRollupWarn(warning: Rollup.RollupLog, warn: Rollup.LoggingFunction) {\n  if (suppressUnusedImport(warning)) {\n    return\n  }\n\n  warn(warning)\n}\n\nfunction suppressUnusedImport(warning: Rollup.RollupLog & {ids?: string[]}): boolean {\n  if (warning.code !== 'UNUSED_EXTERNAL_IMPORT') return false\n\n  // Suppress:\n  // ```\n  // \"useDebugValue\" is imported from external module \"react\"…\n  // ```\n  if (warning.names?.includes('useDebugValue')) {\n    warning.names = warning.names.filter((n) => n !== 'useDebugValue')\n    if (warning.names.length === 0) return true\n  }\n\n  // If some library does something unexpected, we suppress since it isn't actionable\n  if (warning.ids?.every((id) => id.includes('/node_modules/'))) return true\n\n  return false\n}\n\n/**\n * Ensure Sanity entry chunk is always loaded\n *\n * @param config - User-modified configuration\n * @returns Merged configuration\n * @internal\n */\nexport async function finalizeViteConfig(config: InlineConfig): Promise<InlineConfig> {\n  if (typeof config.build?.rollupOptions?.input !== 'object') {\n    throw new Error(\n      'Vite config must contain `build.rollupOptions.input`, and it must be an object',\n    )\n  }\n\n  if (!config.root) {\n    throw new Error(\n      'Vite config must contain `root` property, and must point to the Sanity root directory',\n    )\n  }\n\n  const {mergeConfig} = await import('vite')\n  return mergeConfig(config, {\n    build: {\n      rollupOptions: {\n        input: {\n          sanity: path.join(config.root, '.sanity', 'runtime', 'app.js'),\n        },\n      },\n    },\n  })\n}\n\n/**\n * Merge user-provided Vite configuration object or function\n *\n * @param defaultConfig - Default configuration object\n * @param userConfig - User-provided configuration object or function\n * @returns Merged configuration\n * @internal\n */\nexport async function extendViteConfigWithUserConfig(\n  env: ConfigEnv,\n  defaultConfig: InlineConfig,\n  userConfig: UserViteConfig,\n): Promise<InlineConfig> {\n  let config = defaultConfig\n\n  if (typeof userConfig === 'function') {\n    debug('Extending vite config using user-specified function')\n    config = await userConfig(config, env)\n  } else if (typeof userConfig === 'object') {\n    debug('Merging vite config using user-specified object')\n    const {mergeConfig} = await import('vite')\n    config = mergeConfig(config, userConfig)\n  }\n\n  return config\n}\n","const entryModule = `\n// This file is auto-generated on 'sanity dev'\n// Modifications to this file is automatically discarded\nimport {renderStudio} from \"sanity\"\nimport studioConfig from %STUDIO_CONFIG_LOCATION%\n\nrenderStudio(\n  document.getElementById(\"sanity\"),\n  studioConfig,\n  {reactStrictMode: %STUDIO_REACT_STRICT_MODE%, basePath: %STUDIO_BASE_PATH%}\n)\n`\n\nconst noConfigEntryModule = `\n// This file is auto-generated on 'sanity dev'\n// Modifications to this file is automatically discarded\nimport {renderStudio} from \"sanity\"\n\nconst studioConfig = {missingConfigFile: true}\n\nrenderStudio(\n  document.getElementById(\"sanity\"),\n  studioConfig,\n  {reactStrictMode: %STUDIO_REACT_STRICT_MODE%, basePath: %STUDIO_BASE_PATH%}\n)\n`\n\nconst coreAppEntryModule = `\n// This file is auto-generated on 'sanity dev'\n// Modifications to this file is automatically discarded\nimport {createRoot} from 'react-dom/client'\nimport {createElement} from 'react'\nimport App from %APP_LOCATION%\n\nconst root = createRoot(document.getElementById('root'))\nconst element = createElement(App)\nroot.render(element)\n`\n\nexport function getEntryModule(options: {\n  reactStrictMode: boolean\n  relativeConfigLocation: string | null\n  basePath?: string\n  appLocation?: string\n  isCoreApp?: boolean\n}): string {\n  const {reactStrictMode, relativeConfigLocation, basePath, appLocation, isCoreApp} = options\n\n  if (isCoreApp) {\n    return coreAppEntryModule.replace(/%APP_LOCATION%/, JSON.stringify(appLocation || './src/App'))\n  }\n\n  const sourceModule = relativeConfigLocation ? entryModule : noConfigEntryModule\n\n  return sourceModule\n    .replace(/%STUDIO_REACT_STRICT_MODE%/, JSON.stringify(Boolean(reactStrictMode)))\n    .replace(/%STUDIO_CONFIG_LOCATION%/, JSON.stringify(relativeConfigLocation))\n    .replace(/%STUDIO_BASE_PATH%/, JSON.stringify(basePath || '/'))\n}\n","import fs from 'node:fs/promises'\nimport path from 'node:path'\n\nimport {debug as serverDebug} from './debug'\n\nconst debug = serverDebug.extend('config')\n\n/**\n * Resolves the path to the studio configuration file with the following extensions,\n * in preferred order: '.mjs', '.js', '.ts', '.jsx', '.tsx' (aligns with vite)\n *\n * Falls back to the default studio configuration exported by `sanity` if none is found\n *\n * @internal\n */\nexport async function getSanityStudioConfigPath(studioRootPath: string): Promise<string | null> {\n  const configPaths = [\n    path.join(studioRootPath, 'sanity.config.mjs'),\n    path.join(studioRootPath, 'sanity.config.js'),\n    path.join(studioRootPath, 'sanity.config.ts'),\n    path.join(studioRootPath, 'sanity.config.jsx'),\n    path.join(studioRootPath, 'sanity.config.tsx'),\n  ]\n\n  debug('Looking for configuration file in %d possible locations', configPaths.length)\n  const configs = await Promise.all(\n    configPaths.map(async (configPath) => ({\n      path: configPath,\n      exists: await fileExists(configPath),\n    })),\n  )\n\n  const availableConfigs = configs.filter((config) => config.exists)\n  debug('Found %d available configuration files', availableConfigs.length)\n\n  // No config file exists?\n  if (availableConfigs.length === 0) {\n    console.warn('No `sanity.config.js`/`sanity.config.ts` found - using default studio config')\n    return null\n  }\n\n  if (availableConfigs.length > 1) {\n    console.warn('Found multiple potential studio configs:')\n    availableConfigs.forEach((config) => console.warn(` - ${config.path}`))\n    console.warn(`Using ${availableConfigs[0].path}`)\n  }\n\n  return availableConfigs[0].path\n}\n\n/**\n * Asynchronously checks if a file exists. This is prone to race conditions,\n * as the file can exist/not exist by the time this resolves, but in this\n * case this is an acceptable trade-off. Best effort, and all that.\n */\nfunction fileExists(filePath: string): Promise<boolean> {\n  return fs.stat(filePath).then(\n    () => true,\n    () => false,\n  )\n}\n","import fs from 'node:fs/promises'\nimport path from 'node:path'\n\nimport chokidar from 'chokidar'\n\nimport {debug as serverDebug} from './debug'\nimport {getEntryModule} from './getEntryModule'\nimport {\n  decorateIndexWithAutoGeneratedWarning,\n  decorateIndexWithBridgeScript,\n  getPossibleDocumentComponentLocations,\n  renderDocument,\n} from './renderDocument'\nimport {getSanityStudioConfigPath} from './sanityConfig'\nimport {loadSanityMonorepo} from './sanityMonorepo'\n\nconst debug = serverDebug.extend('runtime')\n\nexport interface RuntimeOptions {\n  cwd: string\n  reactStrictMode: boolean\n  watch: boolean\n  basePath?: string\n  appLocation?: string\n  isCoreApp?: boolean\n}\n\n/**\n * Generates the `.sanity/runtime` directory, and optionally watches for custom\n * document files, rebuilding when they change\n *\n * @param options - Current working directory (Sanity root dir), and whether or not to watch\n * @internal\n */\nexport async function writeSanityRuntime({\n  cwd,\n  reactStrictMode,\n  watch,\n  basePath,\n  appLocation,\n  isCoreApp,\n}: RuntimeOptions): Promise<void> {\n  debug('Resolving Sanity monorepo information')\n  const monorepo = await loadSanityMonorepo(cwd)\n  const runtimeDir = path.join(cwd, '.sanity', 'runtime')\n\n  debug('Making runtime directory')\n  await fs.mkdir(runtimeDir, {recursive: true})\n\n  async function renderAndWriteDocument() {\n    debug('Rendering document template')\n    const indexHtml = decorateIndexWithBridgeScript(\n      decorateIndexWithAutoGeneratedWarning(\n        await renderDocument({\n          studioRootPath: cwd,\n          monorepo,\n          props: {\n            entryPath: `/${path.relative(cwd, path.join(runtimeDir, 'app.js'))}`,\n            basePath: basePath || '/',\n          },\n          isCoreApp,\n        }),\n      ),\n    )\n\n    debug('Writing index.html to runtime directory')\n    await fs.writeFile(path.join(runtimeDir, 'index.html'), indexHtml)\n  }\n\n  if (watch) {\n    chokidar\n      .watch(getPossibleDocumentComponentLocations(cwd))\n      .on('all', () => renderAndWriteDocument())\n  }\n\n  await renderAndWriteDocument()\n\n  debug('Writing app.js to runtime directory')\n  let relativeConfigLocation: string | null = null\n  if (!isCoreApp) {\n    const studioConfigPath = await getSanityStudioConfigPath(cwd)\n    relativeConfigLocation = studioConfigPath ? path.relative(runtimeDir, studioConfigPath) : null\n  }\n\n  const relativeAppLocation = cwd ? path.resolve(cwd, appLocation || './src/App') : appLocation\n  const appJsContent = getEntryModule({\n    reactStrictMode,\n    relativeConfigLocation,\n    basePath,\n    appLocation: relativeAppLocation,\n    isCoreApp,\n  })\n  await fs.writeFile(path.join(runtimeDir, 'app.js'), appJsContent)\n}\n"],"names":["debug","debugIt","createExternalFromImportMap","imports","Object","keys","map","specifier","endsWith","RegExp","escapeRegExp","browserCompatibleSanityPackageSpecifiers","conditions","getSanityPkgExportAliases","sanityPkgPath","pkg","require","dirname","path","reduce","acc","next","dest","resolve","exports","browser","push","find","replacement","normalizeBasePath","pathName","replace","getMonorepoAliases","monorepoPath","default","aliases","fromEntries","entries","pkgName","pkgPath","join","loadSanityMonorepo","cwd","p","readResult","readPkgUp","packageJson","isSanityMonorepo","TIMESTAMPED_IMPORTMAP_INJECTOR_SCRIPT","serverDebug","extend","useThreads","process","env","JEST_WORKER_ID","hasWarnedAbout","Set","defaultProps","entryPath","autoGeneratedWarning","trim","renderDocument","options","Promise","reject","getDocumentHtml","studioRootPath","props","importMap","isCoreApp","__filename","worker","Worker","execArgv","undefined","workerData","dev","shouldWarn","on","msg","type","has","warnKey","Array","isArray","message","forEach","warning","console","warn","chalk","yellow","add","error","Error","html","length","err","code","decorateIndexWithAutoGeneratedWarning","template","decorateIndexWithBridgeScript","getPossibleDocumentComponentLocations","_prefixUrlWithBasePath","url","basePath","normalizedBasePath","startsWith","slice","isMainThread","parentPort","renderDocumentFromWorkerData","monorepo","global","__DEV__","postMessage","addAliases","version","unregister","register","target","supported","jsx","extensions","unregisterJs","loader","Document","getDocumentComponent","css","URL","toString","addTimestampedImportMapScriptToHtml","renderToStaticMarkup","root","parseHtml","htmlEl","querySelector","oldRoot","appendChild","headEl","insertAdjacentHTML","JSON","stringify","outerHTML","BasicDocument","DefaultDocument","userDefined","tryLoadDocumentComponent","DocumentComp","component","userExports","relativePath","relative","typeHint","modified","locations","componentPath","importFresh","Math","floor","fs","statSync","mtimeMs","entryChunkId","sanityBuildEntries","name","apply","buildStart","emitFile","id","generateBundle","_options","outputBundle","bundle","entryFile","values","file","facadeModuleId","entryFileName","fileName","viteMetadata","importedCss","key","entry","source","generateWebManifest","icons","src","sizes","mimeTypes","sanityFaviconsPlugin","defaultFaviconsPath","customFaviconsPath","staticUrlPath","cache","getFavicons","favicons","readdir","hasCustomFavicon","access","configureServer","viteDevServer","webManifest","webManifestPath","middlewares","use","req","res","writeHead","write","end","_parsedUrl","pathname","basename","includes","faviconPath","mimeType","extname","readFile","sanityRuntimeRewritePlugin","getViteConfig","mode","outputDir","sourceMap","server","minify","rawBasePath","reactCompiler","__dirname","staticPath","viteReact","viteConfig","cacheDir","base","build","outDir","sourcemap","host","port","strictPort","configFile","plugins","babel","envPrefix","logLevel","alias","dedupe","define","SANITY_INTERNAL_ENV","getStudioEnvironmentVariables","prefix","jsonEncode","assetsDir","emptyOutDir","rollupOptions","onwarn","onRollupWarn","external","input","sanity","suppressUnusedImport","names","filter","n","ids","every","finalizeViteConfig","config","mergeConfig","extendViteConfigWithUserConfig","defaultConfig","userConfig","entryModule","noConfigEntryModule","coreAppEntryModule","getEntryModule","reactStrictMode","relativeConfigLocation","appLocation","Boolean","getSanityStudioConfigPath","configPaths","availableConfigs","all","configPath","exists","fileExists","filePath","stat","then","writeSanityRuntime","watch","runtimeDir","mkdir","recursive","renderAndWriteDocument","indexHtml","writeFile","chokidar","studioConfigPath","relativeAppLocation","appJsContent"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAEaA,MAAAA,UAAQC,uBAAQ,eAAe;ACQrC,SAASC,4BAA4B;AAAA,EAACC,UAAU,CAAA;AAAa,IAAI,IAAyB;AAC/F,SAAOC,OAAOC,KAAKF,OAAO,EAAEG,IAAKC,CAAAA,cAC/BA,UAAUC,SAAS,GAAG,IAAI,IAAIC,OAAO,IAAIC,sBAAAA,QAAaH,SAAS,CAAC,IAAI,IAAIA,SAC1E;AACF;ACGaI,MAAAA,2CAA2C,CACtD,UACA,yBACA,sBACA,eACA,uBACA,iBACA,oBACA,qBAAqB,GASjBC,aAAa,CAAC,UAAU,WAAW,SAAS;AAG3C,SAASC,0BAA0BC,eAAuB;AAG/D,QAAMC,MAAMC,QAAQF,aAAa,GAC3BG,UAAUC,cAAAA,QAAKD,QAAQH,aAAa;AAoB1C,SAjB6BH,yCAAyCQ,OACpE,CAACC,KAAKC,SAAS;AAEb,UAAMC,OAAOC,iBAAAA,QAAQC,QAAQT,KAAKM,MAAM;AAAA,MAACI,SAAS;AAAA,MAAMb;AAAAA,IAAW,CAAA,IAAI,CAAC;AACnEU,WAAAA,QAGLF,IAAIM,KAAK;AAAA,MACPC,MAAM,IAAIlB,OAAO,IAAIC,sBAAAA,QAAaW,IAAI,CAAC,GAAG;AAAA,MAC1CO,aAAaV,cAAAA,QAAKK,QAAQN,SAASK,IAAI;AAAA,IACxC,CAAA,GACMF;AAAAA,EACT,GACA,EACF;AAIF;AC1BO,SAASS,kBAAkBC,UAA0B;AACnD,SAAA,IAAIA,QAAQ,IAAIC,QAAQ,QAAQ,GAAG,EAAEA,QAAQ,QAAQ,GAAG;AACjE;AC3BA,eAAsBC,mBAAmBC,cAAsB;AACvD,QAAA;AAAA,IAACC,SAASC;AAAAA,EAAAA,IAAW,MAAM,QAAO,QAAA,EAAA,KAAA,WAAA;AAAA,WAAA,QAAA,kBAAmB;AAAA,EAAA,CAAA,EAAA,KAAA,SAAA,GAAA;AAAA,WAAA,EAAA;AAAA,EAAA,CAAA;AACpD/B,SAAAA,OAAOgC,YACZhC,OAAOiC,QAAQF,OAAO,EAAE7B,IAAI,CAAC,CAACgC,SAASC,OAAO,MACrC,CAACD,SAASpB,cAAAA,QAAKK,QAAQU,cAAcf,cAAAA,QAAKsB,KAAK,YAAYD,OAAO,CAAC,CAAC,CAC5E,CACH;AACF;AAOA,eAAsBE,mBAAmBC,KAAkD;AACzF,MAAIC,IAAID;AAER,SAAOC,MAAM,OAAK;AACVC,UAAAA,aAAa,MAAMC,2BAAU;AAAA,MAACH,KAAKC;AAAAA,IAAAA,CAAE;AAE3C,QAAI,CAACC;AACH;AAGF,QAAIA,WAAWE,YAAYC;AAClB,aAAA;AAAA,QAAC7B,MAAMA,cAAAA,QAAKD,QAAQ2B,WAAW1B,IAAI;AAAA,MAAC;AAG7CyB,QAAIzB,sBAAKD,QAAQC,cAAAA,QAAKD,QAAQ2B,WAAW1B,IAAI,CAAC;AAAA,EAAA;AAIlD;AChCO,MAAM8B,wCAAwC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aCU/ChD,UAAQiD,QAAYC,OAAO,gBAAgB,GAI3CC,aAAa,OAAOC,QAAQC,IAAIC,iBAAmB,KACnDC,iBAAqBC,oBAAAA,IAAAA,GAErBC,eAAe;AAAA,EACnBC,WAAW;AACb,GAEMC,uBAAuB;AAAA;AAAA;AAAA,EAG3BC,KAAK;AAkBA,SAASC,eAAeC,SAAiD;AAC9E,SAAO,IAAIC,QAAQ,CAACxC,UAASyC,WAAW;AACtC,QAAI,CAACb,YAAY;AAEbc,MAAAA,SAAAA,gBACEH,QAAQI,gBACRJ,QAAQK,OACRL,QAAQM,WACRN,QAAQO,SACV,CACF;AACA;AAAA,IAAA;AAGFrE,YAAM,iCAAiCsE,UAAU;AAC3CC,UAAAA,SAAS,IAAIC,oBAAAA,OAAOF,YAAY;AAAA,MACpCG,UAAiEC;AAAAA,MACjEC,YAAY;AAAA,QAAC,GAAGb;AAAAA,QAASc,KAAK;AAAA,QAASC,YAAY;AAAA,MAAI;AAAA;AAAA,MAEvDxB,KAAKD,QAAQC;AAAAA,IAAAA,CACd;AAEMyB,WAAAA,GAAG,WAAYC,CAAQ,QAAA;AACxBA,UAAAA,IAAIC,SAAS,WAAW;AACtBzB,YAAAA,eAAe0B,IAAIF,IAAIG,OAAO;AAChC;AAGEC,cAAMC,QAAQL,IAAIM,OAAO,IAC3BN,IAAIM,QAAQC,QAASC,CACnBC,YAAAA,QAAQC,KAAK,GAAGC,eAAAA,QAAMC,OAAO,QAAQ,CAAC,IAAIJ,OAAO,EAAE,CACrD,IAEAC,QAAQC,KAAK,GAAGC,eAAAA,QAAMC,OAAO,QAAQ,CAAC,IAAIZ,IAAIM,OAAO,EAAE,GAGzD9B,eAAeqC,IAAIb,IAAIG,OAAO;AAC9B;AAAA,MAAA;AAGEH,UAAAA,IAAIC,SAAS,SAAS;AAClBhF,gBAAA,yBAAyB+E,IAAIc,SAAS,eAAe,GAC3D7B,OAAO,IAAI8B,MAAMf,IAAIc,SAAS,yDAAyD,CAAC;AACxF;AAAA,MAAA;AAGEd,UAAIC,SAAS,aACfhF,QAAM,oCAAoC+E,IAAIgB,KAAKC,MAAM,GACzDzE,SAAQwD,IAAIgB,IAAI;AAAA,IAEnB,CAAA,GACDxB,OAAOO,GAAG,SAAUmB,CAAQ,QAAA;AAC1BjG,cAAM,sBAAsBiG,IAAIZ,OAAO,GACvCrB,OAAOiC,GAAG;AAAA,IACX,CAAA,GACD1B,OAAOO,GAAG,QAASoB,CAAS,SAAA;AACtBA,eAAS,MACXlG,QAAM,+BAA+BkG,IAAI,GACzClC,OAAO,IAAI8B,MAAM,oDAAoDI,IAAI,EAAE,CAAC;AAAA,IAAA,CAE/E;AAAA,EAAA,CACF;AACH;AAEO,SAASC,sCAAsCC,UAA0B;AACvEA,SAAAA,SAASrE,QAAQ,SAAS;AAAA;AAAA,EAAW4B,oBAAoB;AAAA;AAAA,MAAc;AAChF;AAOO,SAAS0C,8BAA8BD,UAA0B;AAC/DA,SAAAA,SAASrE,QACd,WACA;AAAA,QACF;AACF;AAEO,SAASuE,sCAAsCpC,gBAAkC;AAC/E,SAAA,CAAChD,cAAAA,QAAKsB,KAAK0B,gBAAgB,cAAc,GAAGhD,cAAAA,QAAKsB,KAAK0B,gBAAgB,eAAe,CAAC;AAC/F;AASgBqC,SAAAA,uBAAuBC,KAAaC,UAA0B;AAE5E,QAAMC,qBAAqBD,SAASE,WAAW,GAAG,IAAIF,WAAW,IAAIA,QAAQ;AAG7E,SAAID,IAAIG,WAAW,GAAG,IAChBD,mBAAmBlG,SAAS,GAAG,IAC1B,GAAGkG,mBAAmBE,MAAM,GAAG,EAAE,CAAC,GAAGJ,GAAG,KAE1C,GAAGE,kBAAkB,GAAGF,GAAG,KAIhCE,mBAAmBlG,SAAS,GAAG,IAC1B,GAAGkG,kBAAkB,GAAGF,GAAG,KAE7B,GAAGE,kBAAkB,IAAIF,GAAG;AACrC;AAEI,CAACK,oBAAAA,gBAAgBC,kCACnBC,6BAA6B;AAG/B,SAASA,+BAA+B;AAClC,MAAA,CAACD,kCAAc,CAACnC,oBAAAA;AACZ,UAAA,IAAImB,MAAM,qEAAqE;AAGjF,QAAA;AAAA,IAACkB;AAAAA,IAAU9C;AAAAA,IAAgBC;AAAAA,IAAOC;AAAAA,IAAWC;AAAAA,EAAgC,IACjFM,kCAAc,CAAC;AAQjB,MANIA,gCAAYC,QAGZqC,OAAeC,UAAU,KAGzB,OAAOhD,kBAAmB,UAAU;AACtC4C,wBAAAA,WAAWK,YAAY;AAAA,MAACnC,MAAM;AAAA,MAASK,SAAS;AAAA,IAAA,CAA0C;AAC1F;AAAA,EAAA;AAGElB,MAAAA,SAAS,OAAOA,SAAU,UAAU;AACtC2C,wBAAAA,WAAWK,YAAY;AAAA,MAACnC,MAAM;AAAA,MAASK,SAAS;AAAA,IAAA,CAAwC;AACxF;AAAA,EAAA;AAKFrF,UAAM,+BAA+B,GACjCgH,YACFhG,QAAQ,cAAc,EAAEoG,WAAWpF,mBAAmBgF,SAAS9F,IAAI,CAAC,GAKtElB,QAAM,mCAAmCoD,QAAQiE,OAAO;AAClD,QAAA;AAAA,IAACC;AAAAA,EAAAA,IAEHtG,QAAQ,4BAA4B,EAAEuG,SAAS;AAAA,IAC7CC,QAAQ,OAAOpE,QAAQiE,QAAQT,MAAM,CAAC,CAAC;AAAA,IACvCa,WAAW;AAAA,MAAC,kBAAkB;AAAA,IAAI;AAAA,IAClCC,KAAK;AAAA,IACLC,YAAY,CAAC,QAAQ,OAAO,QAAQ,MAAM;AAAA,EAAA,CAC3C;AAIL3H,UAAM,oDAAoD;AACpD,QAAA;AAAA,IAACsH,YAAYM;AAAAA,EAAAA,IAEf5G,QAAQ,4BAA4B,EAAEuG,SAAS;AAAA,IAC7CC,QAAQ,OAAOpE,QAAQiE,QAAQT,MAAM,CAAC,CAAC;AAAA,IACvCa,WAAW;AAAA,MAAC,kBAAkB;AAAA,IAAI;AAAA,IAClCE,YAAY,CAAC,KAAK;AAAA,IAClBD,KAAK;AAAA,IACLG,QAAQ;AAAA,EAAA,CACT,GAEC9B,OAAO9B,gBAAgBC,gBAAgBC,OAAOC,WAAWC,SAAS;AAExEyC,sBAAAA,WAAWK,YAAY;AAAA,IAACnC,MAAM;AAAA,IAAUe;AAAAA,EAAAA,CAAK,GAG7CuB,WAAW,GACXM,aAAa;AACf;AAEA,SAAS3D,gBACPC,gBACAC,OACAC,WACAC,WACQ;AACFyD,QAAAA,WAAWC,qBAAqB7D,gBAAgBG,SAAS,GAKzD2D,MAAM7D,OAAO6D,KAAK1H,IAAKkG,CAAQ,QAAA;AAC/B,QAAA;AAEF,aAAO,IAAIyB,IAAIzB,GAAG,EAAE0B,SAAS;AAAA,IAAA,QACvB;AACC3B,aAAAA,uBAAuBC,KAAKrC,MAAMsC,QAAQ;AAAA,IAAA;AAAA,EACnD,CACD;AAEDzG,SAAAA,QAAM,0CAA0C,GAMzC,kBALQmI,oCACbC,4BAAsBV,+BAAA,UAAA,EAAajE,GAAAA,iBAAkBU,OAAO,IAAY,CAAA,CAAA,GACxEC,SACF,CAE+B;AACjC;AAKgB+D,SAAAA,oCACdpC,MACA3B,WACQ;AACJ,MAAA,CAACA,UAAkB2B,QAAAA;AAEvB,MAAIsC,OAAOC,eAAAA,MAAUvC,IAAI,GACrBwC,SAASF,KAAKG,cAAc,MAAM;AACtC,MAAI,CAACD,QAAQ;AACX,UAAME,UAAUJ;AACTC,WAAAA,eAAAA,MAAU,eAAe,GAChCC,SAASF,KAAKG,cAAc,MAAM,GAClCD,OAAOG,YAAYD,OAAO;AAAA,EAAA;AAGxBE,MAAAA,SAASJ,OAAOC,cAAc,MAAM;AAEnCG,SAAAA,WACHJ,OAAOK,mBAAmB,cAAc,eAAe,GACvDD,SAASN,KAAKG,cAAc,MAAM,IAGpCG,OAAOC,mBACL,aACA,kDAAkDC,KAAKC,UAAU1E,SAAS,CAAC,YAC7E,GACAuE,OAAOC,mBAAmB,aAAa5F,qCAAqC,GACrEqF,KAAKU;AACd;AAEA,SAAShB,qBAAqB7D,gBAAwBG,WAAqB;AACzErE,UAAM,yDAAyD;AAEzD,QAAA;AAAA,IAACgJ;AAAAA,EAAAA,IAEHhI,QAAQ,QAAQ,GAEd;AAAA,IAACiI;AAAAA,EAAAA,IAEHjI,QAAQ,QAAQ,GAEd8G,WAAWzD,YAAY2E,gBAAgBC;AAE7CjJ,UAAM,8DAA8DkE,cAAc;AAC5EgF,QAAAA,cAAcC,yBAAyBjF,cAAc;AAE3D,MAAI,CAACgF;AACHlJ,WAAAA,QAAM,kCAAkC,GACjC8H;AAGH9H,UAAA,+CAA+CkJ,YAAYhI,IAAI;AAErE,QAAMkI,eAAeF,YAAYG,UAAUnH,WAAWgH,YAAYG;AAClE,MAAI,OAAOD,gBAAiB;AAC1BpJ,WAAAA,QAAM,+DAA+D,GAC9DoJ;AAGTpJ,UAAM,+DAA+D;AACrE,QAAMsJ,cAAclJ,OAAOC,KAAK6I,YAAYG,SAAS,EAAE7G,KAAK,IAAI,KAAK,QAC/D+G,eAAerI,cAAKsI,QAAAA,SAASpG,QAAQV,OAAOwG,YAAYhI,IAAI,GAC5DuI,WACJ,OAAOP,YAAYG,UAAUnH,UAAY,MACrC,KACA,cAAc,OAAOgH,YAAYG,UAAUnH,OAAO,KAElDgD,UAAU,GAAGqE,YAAY,IAAIL,YAAYQ,QAAQ;AAEvD5C,SAAAA,oBAAAA,YAAYK,YAAY;AAAA,IACtBnC,MAAM;AAAA,IACNK,SAAS,CACP,GAAGkE,YAAY,2DAA2DE,QAAQ,IAClF,mCAAmCH,WAAW,GAAG1F,KAAK,GACtD,iDAAiD;AAAA,IAEnDsB;AAAAA,EACD,CAAA,GAEM+D;AACT;AAEA,SAASE,yBAAyBjF,gBAAwB;AAClDyF,QAAAA,YAAYrD,sCAAsCpC,cAAc;AAEtE,aAAW0F,iBAAiBD,WAAW;AACrC3J,YAAM,6CAA6C4J,aAAa;AAC5D,QAAA;AACK,aAAA;AAAA;AAAA,QAELP,WAAWQ,6BAAiBD,aAAa;AAAA,QACzC1I,MAAM0I;AAAAA;AAAAA,QAENF,UAAUI,KAAKC,MAAMC,oBAAGC,SAASL,aAAa,GAAGM,OAAO;AAAA,MAC1D;AAAA,aACOjE,KAAK;AAEZ,UAAIA,IAAIC,SAAS;AACT,cAAAlG,QAAA,yCAAyCiG,IAAIZ,OAAO,GACpDY;AAGRjG,cAAM,sCAAsC4J,aAAa;AAAA,IAAA;AAAA,EAC3D;AAGK,SAAA;AACT;AC3VA,MAAMO,eAAe;AAEd,SAASC,mBAAmBtG,SAMxB;AACH,QAAA;AAAA,IAACpB;AAAAA,IAAKsE;AAAAA,IAAUP;AAAAA,IAAUrC;AAAAA,IAAWC;AAAAA,EAAAA,IAAaP;AAEjD,SAAA;AAAA,IACLuG,MAAM;AAAA,IACNC,OAAO;AAAA,IAEPC,aAAa;AACX,WAAKC,SAAS;AAAA,QACZxF,MAAM;AAAA,QACNyF,IAAIN;AAAAA,QACJE,MAAM;AAAA,MAAA,CACP;AAAA,IACH;AAAA,IAEA,MAAMK,eAAeC,UAAUC,cAAc;AAC3C,YAAMC,SAASD,cACTE,YAAY1K,OAAO2K,OAAOF,MAAM,EAAElJ,KACrCqJ,CAAAA,SACCA,KAAKhG,SAAS,WACdgG,KAAKX,SAAS,YACdW,KAAKC,gBAAgBzK,SAAS2J,YAAY,CAC9C;AAEA,UAAI,CAACW;AACH,cAAM,IAAIhF,MAAM,wCAAwCqE,YAAY,GAAG;AAGzE,UAAIW,UAAU9F,SAAS;AACf,cAAA,IAAIc,MAAM,2BAA2B;AAG7C,YAAMoF,gBAAgBJ,UAAUK,UAC1BzH,YAAY,CAAC+C,SAAS1E,QAAQ,QAAQ,EAAE,GAAGmJ,aAAa,EAAE1I,KAAK,GAAG;AAExE,UAAIwF,MAAgB,CAAE;AAClB8C,UAAAA,UAAUM,cAAcC,aAAa;AAGvCrD,cAAM,CAAC,GAAG8C,UAAUM,aAAaC,WAAW;AACjCC,mBAAAA,OAAOR,UAAU3K,SAAS;AAG7BoL,gBAAAA,QAAQV,OAAOS,GAAG,GAClBD,cACJE,SAASA,MAAMvG,SAAS,UAAUuG,MAAMH,aAAaC,cAAc3G;AAEjE2G,yBACFrD,IAAItG,KAAK,GAAG2J,WAAW;AAAA,QAAA;AAAA,MAE3B;AAGF,WAAKb,SAAS;AAAA,QACZxF,MAAM;AAAA,QACNmG,UAAU;AAAA,QACVK,QAAQnF,8BACN,MAAMxC,eAAe;AAAA,UACnBmD;AAAAA,UACA9C,gBAAgBxB;AAAAA,UAChB0B;AAAAA,UACAD,OAAO;AAAA,YACLsC;AAAAA,YACA/C;AAAAA,YACAsE;AAAAA,UACF;AAAA,UACA3D;AAAAA,QAAAA,CACD,CACH;AAAA,MAAA,CACD;AAAA,IAAA;AAAA,EAEL;AACF;AChGO,SAASoH,oBAAoBhF,UAA+B;AAC1D,SAAA;AAAA,IACLiF,OAAO,CACL;AAAA,MAACC,KAAK,GAAGlF,QAAQ;AAAA,MAAoBzB,MAAM;AAAA,MAAa4G,OAAO;AAAA,IAAA,GAC/D;AAAA,MAACD,KAAK,GAAGlF,QAAQ;AAAA,MAAoBzB,MAAM;AAAA,MAAa4G,OAAO;AAAA,IAAU,CAAA;AAAA,EAE7E;AACF;ACRA,MAAMC,YAAgD;AAAA,EACpD,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AACV;AAaO,SAASC,qBAAqB;AAAA,EACnCC;AAAAA,EACAC;AAAAA,EACAC;AAKF,GAAW;AACT,QAAMC,QAA+B,CAAC;AAEtC,iBAAeC,cAAiC;AAC1CD,WAAAA,MAAME,aAIVF,MAAME,WAAW,MAAMpC,sBAAGqC,QAAQN,mBAAmB,IAC9CG,MAAME;AAAAA,EAAAA;AAGf,iBAAeE,iBAAiBnB,UAAoC;AAC9D,QAAA;AACF,aAAA,MAAMnB,cAAAA,QAAGuC,OAAOrL,cAAAA,QAAKsB,KAAKwJ,oBAAoBb,QAAQ,CAAC,GAChD;AAAA,IAAA,QACK;AACL,aAAA;AAAA,IAAA;AAAA,EACT;AAGK,SAAA;AAAA,IACLd,MAAM;AAAA,IACNC,OAAO;AAAA,IACPkC,gBAAgBC,eAAe;AACvBC,YAAAA,cAAc7D,KAAKC,UAAU2C,oBAAoBQ,aAAa,GAAG,MAAM,CAAC,GACxEU,kBAAkB,GAAGV,aAAa;AAExCQ,oBAAcG,YAAYC,IAAI,OAAOC,KAAKC,KAAK1L,SAAS;AACtD,YAAIyL,IAAItG,KAAKhG,SAASmM,eAAe,GAAG;AAClCK,cAAAA,UAAU,KAAK,MAAM;AAAA,YAAC,gBAAgB;AAAA,UAAA,CAA4B,GACtED,IAAIE,MAAMP,WAAW,GACrBK,IAAIG,IAAI;AACR;AAAA,QAAA;AAMIpL,cAAAA,YAFFgL,IAAYK,cAAsB,IAAIlF,IAAI6E,IAAItG,OAAO,KAAK,uBAAuB,GAE1D4G,YAAY,IACjCjC,WAAWjK,cAAAA,QAAKmM,SAASvL,YAAY,EAAE,GACvC4J,QAAQ,MAAMS,YAAY;AAKhC,YAAI,EAHFrK,SAAS6E,WAAW,cAAc,KACjC+E,MAAM4B,SAASnC,QAAQ,KAAKrJ,SAASwL,SAASrB,aAAa,IAE1C;AACb,eAAA;AACL;AAAA,QAAA;AAGIsB,cAAAA,cAAe,MAAMjB,iBAAiBnB,QAAQ,IAChDjK,cAAAA,QAAKsB,KAAKwJ,oBAAoBb,QAAQ,IACtCjK,cAAAA,QAAKsB,KAAKuJ,qBAAqBZ,QAAQ,GAErCqC,WAAW3B,UAAU3K,cAAAA,QAAKuM,QAAQtC,QAAQ,CAAC,KAAK;AAClD6B,YAAAA,UAAU,KAAK,MAAM;AAAA,UAAC,gBAAgBQ;AAAAA,QAAAA,CAAS,GACnDT,IAAIE,MAAM,MAAMjD,cAAG0D,QAAAA,SAASH,WAAW,CAAC,GACxCR,IAAIG,IAAI;AAAA,MAAA,CACT;AAAA,IAAA;AAAA,EAEL;AACF;AC5FO,SAASS,6BAAqC;AAC5C,SAAA;AAAA,IACLtD,MAAM;AAAA,IACNC,OAAO;AAAA,IACPkC,gBAAgBC,eAAe;AAC7B,aAAO,MAAM;AACXA,sBAAcG,YAAYC,IAAI,CAACC,KAAKC,KAAK1L,SAAS;AAC5CyL,cAAItG,QAAQ,kBACdsG,IAAItG,MAAM,gCAGZnF,KAAK;AAAA,QAAA,CACN;AAAA,MACH;AAAA,IAAA;AAAA,EAEJ;AACF;AC6CA,eAAsBuM,cAAc9J,SAA6C;AACzE,QAAA;AAAA,IACJpB;AAAAA,IACAmL;AAAAA,IACAC;AAAAA;AAAAA,IAEAC,YAAYjK,QAAQ+J,SAAS;AAAA,IAC7BG,QAAAA;AAAAA,IACAC;AAAAA,IACAxH,UAAUyH,cAAc;AAAA,IACxB9J;AAAAA,IACA+J;AAAAA,IACA9J;AAAAA,EACEP,IAAAA,SAEEkD,WAAW,MAAMvE,mBAAmBC,GAAG,GACvC+D,WAAW5E,kBAAkBqM,WAAW,GAExCpN,iBAAiB,MAAM+B,mBAAAA,QAAU;AAAA,IAACH,KAAK0L;AAAAA,EAAU,CAAA,IAAIlN;AAC3D,MAAI,CAACJ;AACG,UAAA,IAAIgF,MAAM,wCAAwC;AAG1D,QAAMkG,qBAAqB9K,cAAKsB,QAAAA,KAAKE,KAAK,QAAQ,GAC5CqJ,sBAAsB7K,cAAKsB,QAAAA,KAAKtB,cAAAA,QAAKD,QAAQH,aAAa,GAAG,UAAU,UAAU,GACjFuN,aAAa,GAAG5H,QAAQ,UAExB;AAAA,IAACvE,SAASoM;AAAAA,EAAAA,IAAa,MAAM,OAAO,sBAAsB,GAC1DC,aAA2B;AAAA;AAAA;AAAA,IAG/BC,UAAU;AAAA,IACVnG,MAAM3F;AAAAA,IACN+L,MAAMhI;AAAAA,IACNiI,OAAO;AAAA,MACLC,QAAQb,aAAa5M,cAAAA,QAAKK,QAAQmB,KAAK,MAAM;AAAA,MAC7CkM,WAAWb;AAAAA,IACb;AAAA,IACAC,QAAQ;AAAA,MACNa,MAAMb,SAAQa;AAAAA,MACdC,MAAMd,SAAQc,QAAQ;AAAA,MACtBC,YAAY;AAAA,IACd;AAAA,IACAC,YAAY;AAAA,IACZnB;AAAAA,IACAoB,SAAS,CACPX,UACEH,gBAAgB;AAAA,MAACe,OAAO;AAAA,QAACD,SAAS,CAAC,CAAC,+BAA+Bd,aAAa,CAAC;AAAA,MAAA;AAAA,IAAC,IAAK,CAAA,CACzF,GACArC,qBAAqB;AAAA,MAACC;AAAAA,MAAqBC;AAAAA,MAAoBC,eAAeoC;AAAAA,IAAAA,CAAW,GACzFV,2BAA2B,GAC3BvD,mBAAmB;AAAA,MAAC3D;AAAAA,MAAU/D;AAAAA,MAAKsE;AAAAA,MAAU5C;AAAAA,MAAWC;AAAAA,IAAAA,CAAU,CAAC;AAAA,IAErE8K,WAAW9K,YAAY,UAAU;AAAA,IACjC+K,UAAUvB,SAAS,eAAe,WAAW;AAAA,IAC7CtM,SAAS;AAAA,MACP8N,OAAOrI,UAAU9F,OACb,MAAMc,mBAAmBgF,SAAS9F,IAAI,IACtCL,0BAA0BC,aAAa;AAAA,MAC3CwO,QAAQ,CAAC,mBAAmB;AAAA,IAC9B;AAAA,IACAC,QAAQ;AAAA;AAAA,MAEN,oBAAsBnM,QAAQC,IAAImM,wBAAwB;AAAA,MAC1D,oBAAoB3G,KAAKC,UAAU+E,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAUvC,iCAAiChF,KAAKC,UAAU,OAAO;AAAA,MACvD,GAAG2G,kCAA8B;AAAA,QAACC,QAAQ;AAAA,QAAgBC,YAAY;AAAA,MAAK,CAAA;AAAA,IAAA;AAAA,EAE/E;AAEI9B,SAAAA,SAAS,iBACXU,WAAWG,QAAQ;AAAA,IACjB,GAAGH,WAAWG;AAAAA,IAEdkB,WAAW;AAAA,IACX3B,QAAQA,SAAS,YAAY;AAAA,IAC7B4B,aAAa;AAAA;AAAA,IAEbC,eAAe;AAAA,MACbC,QAAQC;AAAAA,MACRC,UAAU/P,4BAA4BkE,SAAS;AAAA,MAC/C8L,OAAO;AAAA,QACLC,QAAQjP,cAAKsB,QAAAA,KAAKE,KAAK,WAAW,WAAW,QAAQ;AAAA,MAAA;AAAA,IACvD;AAAA,EAKC6L,IAAAA;AACT;AAEA,SAASyB,aAAazK,SAA2BE,MAA8B;AACzE2K,uBAAqB7K,OAAO,KAIhCE,KAAKF,OAAO;AACd;AAEA,SAAS6K,qBAAqB7K,SAAuD;AACnF,SAAIA,QAAQW,SAAS,2BAAiC,KAMlDX,CAAQ8K,EAAAA,QAAAA,OAAO/C,SAAS,eAAe,MACzC/H,QAAQ8K,QAAQ9K,QAAQ8K,MAAMC,OAAQC,CAAMA,MAAAA,MAAM,eAAe,GAC7DhL,QAAQ8K,MAAMrK,WAAW,MAI3BT,QAAQiL,KAAKC,MAAOhG,CAAAA,OAAOA,GAAG6C,SAAS,gBAAgB,CAAC;AAG9D;AASA,eAAsBoD,mBAAmBC,QAA6C;AACpF,MAAI,OAAOA,OAAOjC,OAAOoB,eAAeI,SAAU;AAC1C,UAAA,IAAIpK,MACR,gFACF;AAGF,MAAI,CAAC6K,OAAOtI;AACJ,UAAA,IAAIvC,MACR,uFACF;AAGI,QAAA;AAAA,IAAC8K;AAAAA,EAAAA,IAAe,MAAM,OAAO,MAAM;AACzC,SAAOA,YAAYD,QAAQ;AAAA,IACzBjC,OAAO;AAAA,MACLoB,eAAe;AAAA,QACbI,OAAO;AAAA,UACLC,QAAQjP,cAAKsB,QAAAA,KAAKmO,OAAOtI,MAAM,WAAW,WAAW,QAAQ;AAAA,QAAA;AAAA,MAC/D;AAAA,IACF;AAAA,EACF,CACD;AACH;AAUsBwI,eAAAA,+BACpBxN,KACAyN,eACAC,YACuB;AACvB,MAAIJ,SAASG;AAEb,MAAI,OAAOC,cAAe;AACxB/Q,mBAAAA,QAAM,qDAAqD,GAC3D2Q,SAAS,MAAMI,WAAWJ,QAAQtN,GAAG;AAAA,WAC5B,OAAO0N,cAAe,UAAU;AACzC/Q,mBAAAA,QAAM,iDAAiD;AACjD,UAAA;AAAA,MAAC4Q;AAAAA,IAAAA,IAAe,MAAM,OAAO,MAAM;AAChCA,aAAAA,YAAYD,QAAQI,UAAU;AAAA,EAAA;AAGlCJ,SAAAA;AACT;ACtPA,MAAMK,cAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAadC,sBAAsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GActBC,qBAAqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYpB,SAASC,eAAerN,SAMpB;AACH,QAAA;AAAA,IAACsN;AAAAA,IAAiBC;AAAAA,IAAwB5K;AAAAA,IAAU6K;AAAAA,IAAajN;AAAAA,EAAAA,IAAaP;AAEpF,SAAIO,YACK6M,mBAAmBnP,QAAQ,kBAAkB8G,KAAKC,UAAUwI,eAAe,WAAW,CAAC,KAG3ED,yBAAyBL,cAAcC,qBAGzDlP,QAAQ,8BAA8B8G,KAAKC,UAAUyI,CAAQH,CAAAA,eAAgB,CAAC,EAC9ErP,QAAQ,4BAA4B8G,KAAKC,UAAUuI,sBAAsB,CAAC,EAC1EtP,QAAQ,sBAAsB8G,KAAKC,UAAUrC,YAAY,GAAG,CAAC;AAClE;ACrDA,MAAMzG,UAAQiD,QAAYC,OAAO,QAAQ;AAUzC,eAAsBsO,0BAA0BtN,gBAAgD;AACxFuN,QAAAA,cAAc,CAClBvQ,sBAAKsB,KAAK0B,gBAAgB,mBAAmB,GAC7ChD,cAAAA,QAAKsB,KAAK0B,gBAAgB,kBAAkB,GAC5ChD,cAAAA,QAAKsB,KAAK0B,gBAAgB,kBAAkB,GAC5ChD,cAAAA,QAAKsB,KAAK0B,gBAAgB,mBAAmB,GAC7ChD,sBAAKsB,KAAK0B,gBAAgB,mBAAmB,CAAC;AAG1ClE,UAAA,2DAA2DyR,YAAYzL,MAAM;AAQnF,QAAM0L,oBAPU,MAAM3N,QAAQ4N,IAC5BF,YAAYnR,IAAI,OAAOsR,gBAAgB;AAAA,IACrC1Q,MAAM0Q;AAAAA,IACNC,QAAQ,MAAMC,WAAWF,UAAU;AAAA,EAAA,EACnC,CACJ,GAEiCtB,OAAQK,CAAAA,WAAWA,OAAOkB,MAAM;AAIjE,SAHA7R,QAAM,0CAA0C0R,iBAAiB1L,MAAM,GAGnE0L,iBAAiB1L,WAAW,KAC9BR,QAAQC,KAAK,8EAA8E,GACpF,SAGLiM,iBAAiB1L,SAAS,MAC5BR,QAAQC,KAAK,0CAA0C,GACvDiM,iBAAiBpM,QAASqL,CAAAA,WAAWnL,QAAQC,KAAK,MAAMkL,OAAOzP,IAAI,EAAE,CAAC,GACtEsE,QAAQC,KAAK,SAASiM,iBAAiB,CAAC,EAAExQ,IAAI,EAAE,IAG3CwQ,iBAAiB,CAAC,EAAExQ;AAC7B;AAOA,SAAS4Q,WAAWC,UAAoC;AAC/C/H,SAAAA,cAAAA,QAAGgI,KAAKD,QAAQ,EAAEE,KACvB,MAAM,IACN,MAAM,EACR;AACF;AC5CA,MAAMjS,QAAQiD,QAAYC,OAAO,SAAS;AAkB1C,eAAsBgP,mBAAmB;AAAA,EACvCxP;AAAAA,EACA0O;AAAAA,EACAe;AAAAA,EACA1L;AAAAA,EACA6K;AAAAA,EACAjN;AACc,GAAkB;AAChCrE,QAAM,uCAAuC;AACvCgH,QAAAA,WAAW,MAAMvE,mBAAmBC,GAAG,GACvC0P,aAAalR,cAAKsB,QAAAA,KAAKE,KAAK,WAAW,SAAS;AAEtD1C,QAAM,0BAA0B,GAChC,MAAMgK,cAAAA,QAAGqI,MAAMD,YAAY;AAAA,IAACE,WAAW;AAAA,EAAA,CAAK;AAE5C,iBAAeC,yBAAyB;AACtCvS,UAAM,6BAA6B;AACnC,UAAMwS,YAAYnM,8BAChBF,sCACE,MAAMtC,eAAe;AAAA,MACnBK,gBAAgBxB;AAAAA,MAChBsE;AAAAA,MACA7C,OAAO;AAAA,QACLT,WAAW,IAAIxC,cAAAA,QAAKsI,SAAS9G,KAAKxB,sBAAKsB,KAAK4P,YAAY,QAAQ,CAAC,CAAC;AAAA,QAClE3L,UAAUA,YAAY;AAAA,MACxB;AAAA,MACApC;AAAAA,IACD,CAAA,CACH,CACF;AAEM,UAAA,yCAAyC,GAC/C,MAAM2F,cAAAA,QAAGyI,UAAUvR,sBAAKsB,KAAK4P,YAAY,YAAY,GAAGI,SAAS;AAAA,EAAA;AAG/DL,WACFO,kBACGP,QAAAA,MAAM7L,sCAAsC5D,GAAG,CAAC,EAChDoC,GAAG,OAAO,MAAMyN,uBAAwB,CAAA,GAG7C,MAAMA,uBAAuB,GAE7BvS,MAAM,qCAAqC;AAC3C,MAAIqR,yBAAwC;AAC5C,MAAI,CAAChN,WAAW;AACRsO,UAAAA,mBAAmB,MAAMnB,0BAA0B9O,GAAG;AAC5D2O,6BAAyBsB,mBAAmBzR,cAAAA,QAAKsI,SAAS4I,YAAYO,gBAAgB,IAAI;AAAA,EAAA;AAGtFC,QAAAA,sBAAsBlQ,MAAMxB,cAAAA,QAAKK,QAAQmB,KAAK4O,eAAe,WAAW,IAAIA,aAC5EuB,eAAe1B,eAAe;AAAA,IAClCC;AAAAA,IACAC;AAAAA,IACA5K;AAAAA,IACA6K,aAAasB;AAAAA,IACbvO;AAAAA,EAAAA,CACD;AACD,QAAM2F,cAAAA,QAAGyI,UAAUvR,cAAAA,QAAKsB,KAAK4P,YAAY,QAAQ,GAAGS,YAAY;AAClE;;;;;;;;"}