"use strict";
var jsxRuntime = require("react/jsx-runtime"), reactCompilerRuntime = require("react-compiler-runtime"), React = require("react"), reactIs = require("react-is"), sanity = require("sanity"), TooltipDelayGroupProvider = require("./TooltipDelayGroupProvider.js");
require("../_singletons.js");
var structure = require("./pane.js"), ui = require("@sanity/ui"), styledComponents = require("styled-components"), icons = require("@sanity/icons");
const Root = styledComponents.styled(ui.Box)`
  position: relative;
`;
function UserComponentPaneContent(props) {
  const $ = reactCompilerRuntime.c(3), {
    children
  } = props, {
    collapsed
  } = structure.usePane();
  let t0;
  return $[0] !== children || $[1] !== collapsed ? (t0 = /* @__PURE__ */ jsxRuntime.jsx(Root, { hidden: collapsed, height: "fill", overflow: "auto", children }), $[0] = children, $[1] = collapsed, $[2] = t0) : t0 = $[2], t0;
}
function UserComponentPaneHeader(props) {
  const $ = reactCompilerRuntime.c(11), {
    actionHandlers,
    index,
    menuItems,
    menuItemGroups,
    title
  } = props, {
    features
  } = structure.useStructureTool();
  if (!menuItems?.length && !title)
    return null;
  let t0;
  $[0] !== actionHandlers || $[1] !== menuItemGroups || $[2] !== menuItems ? (t0 = /* @__PURE__ */ jsxRuntime.jsx(structure.PaneHeaderActions, { menuItems, menuItemGroups, actionHandlers }), $[0] = actionHandlers, $[1] = menuItemGroups, $[2] = menuItems, $[3] = t0) : t0 = $[3];
  let t1;
  $[4] !== features.backButton || $[5] !== index ? (t1 = features.backButton && index > 0 && /* @__PURE__ */ jsxRuntime.jsx(TooltipDelayGroupProvider.Button, { as: structure.BackLink, "data-as": "a", icon: icons.ArrowLeftIcon, mode: "bleed", tooltipProps: {
    content: "Back"
  } }), $[4] = features.backButton, $[5] = index, $[6] = t1) : t1 = $[6];
  let t2;
  return $[7] !== t0 || $[8] !== t1 || $[9] !== title ? (t2 = /* @__PURE__ */ jsxRuntime.jsx(structure.PaneHeader, { actions: t0, backButton: t1, title }), $[7] = t0, $[8] = t1, $[9] = title, $[10] = t2) : t2 = $[10], t2;
}
function UserComponentPane(props) {
  const $ = reactCompilerRuntime.c(33);
  let index, pane, paneKey, restProps;
  $[0] !== props ? ({
    index,
    pane,
    paneKey,
    ...restProps
  } = props, $[0] = props, $[1] = index, $[2] = pane, $[3] = paneKey, $[4] = restProps) : (index = $[1], pane = $[2], paneKey = $[3], restProps = $[4]);
  let UserComponent, child, menuItemGroups, menuItems, restPane;
  if ($[5] !== pane) {
    const {
      child: t02,
      component: t12,
      menuItems: t22,
      menuItemGroups: t32,
      type: _unused,
      ...t42
    } = pane;
    child = t02, UserComponent = t12, menuItems = t22, menuItemGroups = t32, restPane = t42, $[5] = pane, $[6] = UserComponent, $[7] = child, $[8] = menuItemGroups, $[9] = menuItems, $[10] = restPane;
  } else
    UserComponent = $[6], child = $[7], menuItemGroups = $[8], menuItems = $[9], restPane = $[10];
  const [ref, setRef] = React.useState(null), {
    title: t0
  } = sanity.useI18nText(pane), title = t0 === void 0 ? "" : t0, t1 = ref?.actionHandlers;
  let t2;
  $[11] !== index || $[12] !== menuItemGroups || $[13] !== menuItems || $[14] !== t1 || $[15] !== title ? (t2 = /* @__PURE__ */ jsxRuntime.jsx(UserComponentPaneHeader, { actionHandlers: t1, index, menuItems, menuItemGroups, title }), $[11] = index, $[12] = menuItemGroups, $[13] = menuItems, $[14] = t1, $[15] = title, $[16] = t2) : t2 = $[16];
  let t3;
  $[17] !== UserComponent || $[18] !== child || $[19] !== paneKey || $[20] !== restPane || $[21] !== restProps ? (t3 = reactIs.isValidElementType(UserComponent) && /* @__PURE__ */ jsxRuntime.jsx(UserComponent, { ...restProps, ...restPane, ref: setRef, child, paneKey }), $[17] = UserComponent, $[18] = child, $[19] = paneKey, $[20] = restPane, $[21] = restProps, $[22] = t3) : t3 = $[22];
  let t4;
  $[23] !== UserComponent ? (t4 = React.isValidElement(UserComponent) && UserComponent, $[23] = UserComponent, $[24] = t4) : t4 = $[24];
  let t5;
  $[25] !== t3 || $[26] !== t4 ? (t5 = /* @__PURE__ */ jsxRuntime.jsxs(UserComponentPaneContent, { children: [
    t3,
    t4
  ] }), $[25] = t3, $[26] = t4, $[27] = t5) : t5 = $[27];
  let t6;
  return $[28] !== paneKey || $[29] !== restProps.isSelected || $[30] !== t2 || $[31] !== t5 ? (t6 = /* @__PURE__ */ jsxRuntime.jsxs(structure.Pane, { id: paneKey, minWidth: 320, selected: restProps.isSelected, children: [
    t2,
    t5
  ] }), $[28] = paneKey, $[29] = restProps.isSelected, $[30] = t2, $[31] = t5, $[32] = t6) : t6 = $[32], t6;
}
exports.default = UserComponentPane;
//# sourceMappingURL=index.js.map
