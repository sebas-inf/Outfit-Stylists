{"version":3,"file":"pane.esm.js","sources":["../../src/structure/i18n/index.ts","../../src/structure/components/DocTitle.tsx","../../src/structure/components/confirmDeleteDialog/ConfirmDeleteDialogBody.styles.tsx","../../src/structure/components/paneItem/PaneItemPreview.tsx","../../src/structure/components/paneRouter/BackLink.tsx","../../src/structure/components/pane/usePaneLayout.ts","../../src/structure/components/paneRouter/ChildLink.tsx","../../src/structure/components/paneRouter/ParameterizedLink.tsx","../../src/structure/components/paneRouter/ReferenceChildLink.tsx","../../src/structure/components/paneRouter/usePaneRouter.ts","../../src/structure/components/confirmDeleteDialog/ReferencePreviewLink.tsx","../../src/structure/components/confirmDeleteDialog/ConfirmDeleteDialogBody.tsx","../../src/structure/components/confirmDeleteDialog/useReferringDocuments.ts","../../src/structure/components/confirmDeleteDialog/ConfirmDeleteDialog.tsx","../../src/structure/components/confirmDeleteDialog/index.tsx","../../src/structure/components/Delay.tsx","../../src/structure/components/pane/constants.ts","../../src/structure/components/pane/PaneDivider.tsx","../../src/structure/components/pane/Pane.tsx","../../src/structure/components/pane/PaneContent.styles.tsx","../../src/structure/components/pane/usePane.ts","../../src/structure/components/pane/PaneContent.tsx","../../src/structure/util/toLowerCaseNoSpaces.tsx","../../src/structure/components/pane/PaneMenuButtonItem.tsx","../../src/structure/components/pane/PaneContextMenuButton.tsx","../../src/structure/components/pane/PaneFooter.styles.tsx","../../src/structure/components/pane/PaneFooter.tsx","../../src/structure/components/pane/PaneHeader.styles.tsx","../../src/structure/components/pane/PaneHeader.tsx","../../src/structure/components/pane/PaneHeaderActionButton.tsx","../../src/structure/components/pane/PaneLayout.styles.tsx","../../src/structure/components/pane/helpers/_calcPaneResize.ts","../../src/structure/components/pane/helpers/_getDOMPath.ts","../../src/structure/components/pane/helpers/_sortElements.ts","../../src/structure/components/pane/paneLayoutController.ts","../../src/structure/components/pane/PaneLayout.tsx","../../src/structure/menuNodes.ts","../../src/structure/components/IntentButton.tsx","../../src/structure/components/paneHeaderActions/InsufficientPermissionsMessageTooltip.tsx","../../src/structure/components/paneHeaderActions/PaneHeaderCreateButton.tsx","../../src/structure/components/paneHeaderActions/PaneHeaderActions.tsx","../../src/structure/components/MissingSchemaType.tsx","../../src/structure/components/paneItem/PaneItem.tsx","../../src/structure/components/RenderActionCollectionState.tsx","../../src/structure/components/RenderBadgeCollectionState.tsx","../../src/structure/panes/error/ErrorPane.tsx","../../src/structure/panes/loading/getWaitMessages.ts","../../src/structure/panes/loading/LoadingPane.tsx","../../src/structure/panes/document/useDocumentPane.tsx","../../src/structure/panes/document/comments/CommentsWrapper.tsx","../../src/structure/constants.ts","../../src/structure/useStructureTool.ts","../../src/structure/panes/document/constants.ts","../../src/structure/panes/document/DocumentInspectorMenuItemsResolver.tsx","../../src/structure/panes/document/useDocumentTitle.ts","../../src/structure/panes/document/DocumentOperationResults.tsx","../../src/structure/components/paneItem/helpers.tsx","../../src/structure/panes/document/documentInspector/DocumentInspectorHeader.tsx","../../src/structure/panes/document/documentInspector/DocumentInspectorPanel.tsx","../../src/structure/useStructureToolSetting.ts","../../src/structure/panes/document/inspectDialog/constants.ts","../../src/structure/panes/document/inspectDialog/helpers.ts","../../src/structure/panes/document/inspectDialog/InspectDialog.styles.tsx","../../src/structure/panes/document/inspectDialog/Search.tsx","../../src/structure/panes/document/inspectDialog/InspectDialog.tsx","../../src/structure/panes/document/documentPanel/banners/Banner.tsx","../../src/structure/panes/document/documentPanel/banners/DeletedDocumentBanners.tsx","../../src/structure/panes/document/documentPanel/banners/DeprecatedDocumentTypeBanner.tsx","../../src/structure/components/requestPermissionDialog/__telemetry__/RequestPermissionDialog.telemetry.ts","../../src/structure/components/requestPermissionDialog/RequestPermissionDialog.tsx","../../src/structure/components/requestPermissionDialog/useRoleRequestsStatus.tsx","../../src/structure/panes/document/documentPanel/banners/InsufficientPermissionBanner.tsx","../../src/structure/panes/document/documentPanel/banners/ReferenceChangedBanner.tsx","../../src/structure/panes/document/documentPanel/banners/AddToReleaseBanner.tsx","../../src/structure/panes/document/documentPanel/banners/ArchivedReleaseDocumentBanner.tsx","../../src/structure/panes/document/documentPanel/banners/__telemetry__/DraftLiveEditBanner.telemetry.ts","../../src/structure/panes/document/documentPanel/banners/DraftLiveEditBanner.tsx","../../src/structure/panes/document/documentPanel/banners/ScheduledReleaseBanner.tsx","../../src/structure/panes/document/documentPanel/documentViews/FormHeader.tsx","../../src/structure/panes/document/documentPanel/documentViews/useConditionalToast.ts","../../src/structure/panes/document/documentPanel/documentViews/FormView.tsx","../../src/structure/panes/document/documentPanel/DocumentPanel.tsx","../../src/structure/panes/document/statusBar/dialogs/constants.ts","../../src/structure/panes/document/statusBar/dialogs/ConfirmDialog.tsx","../../src/structure/panes/document/statusBar/dialogs/ModalDialog.tsx","../../src/structure/panes/document/statusBar/dialogs/PopoverDialog.tsx","../../src/structure/panes/document/statusBar/ActionStateDialog.tsx","../../src/structure/panes/document/statusBar/ActionMenuButton.tsx","../../src/structure/documentActions/DeleteAction.tsx","../../src/structure/documentActions/DiscardChangesAction.tsx","../../src/structure/documentActions/DuplicateAction.tsx","../../src/structure/documentActions/HistoryRestoreAction.tsx","../../src/structure/documentActions/__telemetry__/documentActions.telemetry.ts","../../src/structure/documentActions/PublishAction.tsx","../../src/structure/documentActions/UnpublishAction.tsx","../../src/structure/panes/document/statusBar/DocumentStatusBarActions.tsx","../../src/structure/panes/document/documentPanel/header/DocumentHeaderTabs.tsx","../../src/structure/panes/document/documentPanel/header/DocumentHeaderTitle.tsx","../../src/structure/panes/document/documentPanel/header/perspective/DocumentPerspectiveList.tsx","../../src/structure/panes/document/documentPanel/header/DocumentPanelHeader.tsx","../../src/structure/components/spacerButton/SpacerButton.tsx","../../src/structure/panes/document/statusBar/DocumentBadges.tsx","../../src/structure/panes/document/timeline/constants.ts","../../src/structure/panes/document/timeline/helpers.ts","../../src/structure/panes/document/timeline/expandableTimelineItemButton.tsx","../../src/structure/panes/document/timeline/timeline.styled.tsx","../../src/structure/panes/document/timeline/timelineI18n.ts","../../src/structure/panes/document/timeline/userAvatarStack.tsx","../../src/structure/panes/document/timeline/timelineItem.tsx","../../src/structure/panes/document/timeline/utils.ts","../../src/structure/panes/document/timeline/timeline.tsx","../../src/structure/panes/document/timeline/TimelineError.tsx","../../src/structure/panes/document/timeline/timelineMenu.tsx","../../src/structure/panes/document/statusBar/DocumentStatusPulse/AnimatedStatusIcon.tsx","../../src/structure/panes/document/statusBar/DocumentStatusPulse/DocumentStatusPulse.tsx","../../src/structure/panes/document/statusBar/DocumentStatusLine.tsx","../../src/structure/panes/document/statusBar/RevisionStatusLine.tsx","../../src/structure/panes/document/statusBar/useResizeObserver.ts","../../src/structure/panes/document/statusBar/DocumentStatusBar.tsx","../../src/structure/panes/document/keyboardShortcuts/DocumentActionShortcuts.tsx","../../src/structure/panes/document/menuItems.ts","../../src/structure/panes/document/usePreviewUrl.ts","../../src/structure/panes/document/document-layout/DocumentLayoutError.tsx","../../src/structure/panes/document/document-layout/DocumentLayout.tsx","../../src/structure/panes/document/document-layout/useDocumentLayoutComponent.ts","../../src/structure/panes/document/__telemetry__/documentPanes.telemetry.ts","../../src/structure/panes/document/getInitialValueTemplateOpts.ts","../../src/structure/panes/document/DocumentPaneProvider.tsx","../../src/structure/panes/document/DocumentEventsPane.tsx","../../src/structure/panes/document/DocumentPaneLegacyTimeline.tsx","../../src/structure/panes/document/DocumentPaneProviderWrapper.tsx","../../src/structure/panes/document/useResetHistoryParams.ts","../../src/structure/panes/document/DocumentPane.tsx","../../src/structure/panes/documentList/constants.ts","../../src/structure/panes/documentList/DocumentListPaneContent.tsx","../../src/structure/panes/documentList/helpers.ts","../../src/structure/structureBuilder/util/getExtendedProjection.ts","../../src/structure/panes/documentList/listenSearchQuery.ts","../../src/structure/panes/documentList/useDocumentList.ts","../../src/structure/panes/documentList/DocumentListPane.tsx","../../src/structure/panes/documentList/PaneHeader.tsx","../../src/structure/panes/documentList/sheetList/DocumentSheetListSelect.tsx","../../src/structure/panes/documentList/sheetList/DocumentSheetListProvider.tsx","../../src/structure/panes/documentList/sheetList/SheetListCell.tsx","../../src/structure/panes/documentList/sheetList/useDocumentSheetColumns.tsx","../../src/structure/panes/documentList/sheetList/ColumnsControl.tsx","../../src/structure/panes/documentList/sheetList/DocumentSheetListFilter.tsx","../../src/structure/panes/documentList/sheetList/DocumentSheetListHeader.tsx","../../src/structure/panes/documentList/sheetList/DocumentSheetListPaginator.tsx","../../src/structure/panes/documentList/sheetList/useDocumentSheetListStore.ts","../../src/structure/panes/documentList/sheetList/useDocumentSheetList.ts","../../src/structure/panes/documentList/sheetList/DocumentSheetListPane.tsx","../../src/structure/panes/documentList/PaneContainer.tsx","../../src/structure/structureBuilder/SerializeError.ts","../../src/structure/structureBuilder/Sort.ts","../../src/structure/structureBuilder/MenuItem.ts","../../src/structure/structureBuilder/MenuItemGroup.ts","../../src/structure/structureBuilder/util/validateId.ts","../../src/structure/structureBuilder/util/getStructureNodeId.ts","../../src/structure/structureBuilder/Component.ts","../../src/structure/structureBuilder/util/resolveTypeForDocument.ts","../../src/structure/structureBuilder/views/View.ts","../../src/structure/structureBuilder/views/ComponentView.ts","../../src/structure/structureBuilder/views/FormView.ts","../../src/structure/structureBuilder/views/index.ts","../../src/structure/structureBuilder/Document.ts","../../src/structure/structureBuilder/InitialValueTemplateItem.ts","../../src/structure/structureBuilder/Intent.ts","../../src/structure/structureBuilder/Layout.ts","../../src/structure/structureBuilder/GenericList.ts","../../src/structure/structureBuilder/DocumentList.ts","../../src/structure/structureBuilder/List.ts","../../src/structure/structureBuilder/ListItem.ts","../../src/structure/structureBuilder/DocumentListItem.ts","../../src/structure/structureBuilder/DocumentTypeList.ts","../../src/structure/structureBuilder/documentTypeListItems.ts","../../src/structure/structureBuilder/createStructureBuilder.ts","../../src/structure/documentBadges/LiveEditBadge.ts","../../src/structure/getIntentState.ts","../../src/structure/panes/document/inspectors/changes/ChangesInspector.tsx","../../src/structure/panes/document/timeline/events/EventTimelineItem.tsx","../../src/structure/panes/document/timeline/events/PublishedEventMenu.tsx","../../src/structure/panes/document/timeline/events/EventsTimeline.tsx","../../src/structure/panes/document/timeline/events/EventsTimelineMenu.tsx","../../src/structure/panes/document/inspectors/changes/EventsInspector.tsx","../../src/structure/panes/document/inspectors/changes/EventsSelector.tsx","../../src/structure/panes/document/inspectors/changes/HistorySelector.tsx","../../src/structure/panes/document/inspectors/changes/ChangesTabs.tsx","../../src/structure/panes/document/inspectors/changes/index.ts","../../src/structure/panes/document/inspectors/validation/getPathTitles.ts","../../src/structure/panes/document/inspectors/validation/ValidationInspector.tsx","../../src/structure/panes/document/inspectors/validation/index.ts","../../src/structure/router.ts","../../src/structure/structureTool.ts","../../src/structure/StructureToolProvider.tsx"],"sourcesContent":["import {defineLocaleResourceBundle} from 'sanity'\n\n/**\n * The locale namespace for the structure tool\n *\n * @public\n */\nexport const structureLocaleNamespace = 'structure' as const\n\n/**\n * The default locale bundle for the structure tool, which is US English.\n *\n * @internal\n */\nexport const structureUsEnglishLocaleBundle = defineLocaleResourceBundle({\n  locale: 'en-US',\n  namespace: structureLocaleNamespace,\n  resources: () => import('./resources'),\n})\n\n/**\n * The locale resource keys for the structure tool.\n *\n * @alpha\n * @hidden\n */\nexport type {StructureLocaleResourceKeys} from './resources'\n","import {type SanityDocumentLike} from '@sanity/types'\nimport {unstable_useValuePreview as useValuePreview, useSchema, useTranslation} from 'sanity'\n\nimport {structureLocaleNamespace} from '../i18n'\n\nexport interface DocTitleProps {\n  document: SanityDocumentLike\n}\n\nexport function DocTitle(props: DocTitleProps) {\n  const {document: documentValue} = props\n  const schema = useSchema()\n  const schemaType = schema.get(documentValue._type)\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const {error, value} = useValuePreview({\n    schemaType: schemaType!,\n    value: documentValue,\n  })\n\n  if (!schemaType) {\n    return <code>{t('doc-title.unknown-schema-type.text', {schemaType: documentValue._type})}</code>\n  }\n\n  if (error) {\n    return <>{t('doc-title.error.text', {errorMessage: error.message})}</>\n  }\n\n  return (\n    <>\n      {value?.title || (\n        <span style={{color: 'var(--card-muted-fg-color)'}}>{t('doc-title.fallback.text')}</span>\n      )}\n    </>\n  )\n}\n","import {InfoOutlineIcon} from '@sanity/icons'\nimport {Box, Flex, Inline, rem, Text} from '@sanity/ui'\nimport {useTranslation} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Tooltip} from '../../../ui-components'\nimport {structureLocaleNamespace} from '../../i18n'\n\nexport const ChevronWrapper = styled(Box)`\n  margin-left: auto;\n`\n\nexport const CrossDatasetReferencesDetails = styled.details`\n  flex: none;\n\n  &[open] ${ChevronWrapper} {\n    transform: rotate(180deg);\n  }\n`\n\nexport const CrossDatasetReferencesSummary = styled.summary`\n  list-style: none;\n\n  &::-webkit-details-marker {\n    display: none;\n  }\n`\n\nexport const Table = styled.table`\n  width: 100%;\n  text-align: left;\n  padding: 0 ${({theme}) => rem(theme.sanity.space[2])};\n  border-collapse: collapse;\n\n  th {\n    padding: ${({theme}) => rem(theme.sanity.space[1])};\n  }\n\n  td {\n    padding: 0 ${({theme}) => rem(theme.sanity.space[1])};\n  }\n\n  tr > *:last-child {\n    text-align: right;\n  }\n`\n\nexport const DocumentIdFlex = styled(Flex)`\n  min-height: 33px;\n`\n\nexport const OtherReferenceCount = (props: {totalCount: number; references: unknown[]}) => {\n  const {t} = useTranslation(structureLocaleNamespace)\n  const difference = props.totalCount - props.references.length\n\n  if (!difference) return null\n\n  return (\n    <Box padding={2}>\n      <Inline space={2}>\n        <Text size={1} muted>\n          {t('confirm-delete-dialog.other-reference-count.title', {count: difference})}\n        </Text>\n\n        <Tooltip\n          portal\n          placement=\"top\"\n          content={t('confirm-delete-dialog.other-reference-count.tooltip')}\n        >\n          <Text size={1} muted>\n            <InfoOutlineIcon />\n          </Text>\n        </Tooltip>\n      </Inline>\n    </Box>\n  )\n}\n","import {type SanityDocument, type SchemaType} from '@sanity/types'\nimport {Flex} from '@sanity/ui'\nimport {isNumber, isString} from 'lodash'\nimport {type ComponentType, isValidElement, useMemo} from 'react'\nimport {useObservable} from 'react-rx'\nimport {\n  type DocumentPresence,\n  DocumentPreviewPresence,\n  type DocumentPreviewStore,\n  DocumentStatus,\n  DocumentStatusIndicator,\n  type GeneralPreviewLayoutKey,\n  getPreviewStateObservable,\n  getPreviewValueWithFallback,\n  isRecord,\n  SanityDefaultPreview,\n  useActiveReleases,\n  usePerspective,\n  useReleasesIds,\n} from 'sanity'\n\nimport {TooltipDelayGroupProvider} from '../../../ui-components'\n\nexport interface PaneItemPreviewProps {\n  documentPreviewStore: DocumentPreviewStore\n  icon: ComponentType | false\n  layout: GeneralPreviewLayoutKey\n  presence?: DocumentPresence[]\n  schemaType: SchemaType\n  value: SanityDocument\n}\n\n/**\n * Preview component for _documents_ rendered in structure panes.\n *\n * Note that non-document previews are not handled by this component,\n * despite being pane items! Non-document previews bypass this entirely\n * and are rendered by `<SanityDefaultPreview>`.\n */\nexport function PaneItemPreview(props: PaneItemPreviewProps) {\n  const {icon, layout, presence, schemaType, value} = props\n  const title =\n    (isRecord(value.title) && isValidElement(value.title)) ||\n    isString(value.title) ||\n    isNumber(value.title)\n      ? value.title\n      : null\n\n  const {data, loading} = useActiveReleases()\n  const {releasesIds} = useReleasesIds(data)\n  const {perspectiveStack, selectedPerspectiveName} = usePerspective()\n\n  const previewStateObservable = useMemo(\n    () =>\n      getPreviewStateObservable(props.documentPreviewStore, schemaType, value._id, title, {\n        ids: releasesIds,\n        stack: perspectiveStack,\n      }),\n    [props.documentPreviewStore, schemaType, value._id, title, releasesIds, perspectiveStack],\n  )\n\n  const {\n    draft,\n    published,\n    version,\n    versions,\n    isLoading: previewIsLoading,\n  } = useObservable(previewStateObservable, {\n    draft: null,\n    isLoading: true,\n    published: null,\n    version: null,\n    versions: {},\n    selectedPerspectiveName,\n  })\n\n  const isLoading = previewIsLoading || loading\n\n  const status = isLoading ? null : (\n    <TooltipDelayGroupProvider>\n      <Flex align=\"center\" gap={3}>\n        {presence && presence.length > 0 && <DocumentPreviewPresence presence={presence} />}\n        <DocumentStatusIndicator draft={draft} published={published} versions={versions} />\n      </Flex>\n    </TooltipDelayGroupProvider>\n  )\n\n  const tooltip = <DocumentStatus draft={draft} published={published} versions={versions} />\n\n  return (\n    <SanityDefaultPreview\n      {...getPreviewValueWithFallback({\n        value,\n        draft,\n        published,\n        version,\n        perspective: selectedPerspectiveName,\n      })}\n      isPlaceholder={isLoading}\n      icon={icon}\n      layout={layout}\n      status={status}\n      tooltip={tooltip}\n    />\n  )\n}\n","import {type ComponentType, type ForwardedRef, forwardRef, useContext, useMemo} from 'react'\nimport {PaneRouterContext} from 'sanity/_singletons'\nimport {StateLink} from 'sanity/router'\n\nimport {type BackLinkProps} from './types'\n\n/**\n * @internal\n */\nexport const BackLink = forwardRef(function BackLink(\n  props: BackLinkProps,\n  ref: ForwardedRef<HTMLAnchorElement>,\n) {\n  const {routerPanesState, groupIndex} = useContext(PaneRouterContext)\n  const panes = useMemo(() => routerPanesState.slice(0, groupIndex), [groupIndex, routerPanesState])\n  const state = useMemo(() => ({panes}), [panes])\n\n  return <StateLink {...props} ref={ref} state={state} />\n}) as ComponentType<BackLinkProps>\n","import {useContext} from 'react'\nimport {PaneLayoutContext} from 'sanity/_singletons'\n\nimport {type PaneLayoutContextValue} from './types'\n\n/**\n *\n * @hidden\n * @beta This API will change. DO NOT USE IN PRODUCTION.\n */\nexport function usePaneLayout(): PaneLayoutContextValue {\n  const pane = useContext(PaneLayoutContext)\n\n  if (!pane) {\n    throw new Error('PaneLayout: missing context value')\n  }\n\n  return pane\n}\n","import {type ForwardedRef, forwardRef, useContext} from 'react'\nimport {PaneRouterContext} from 'sanity/_singletons'\nimport {StateLink} from 'sanity/router'\n\nimport {type ChildLinkProps} from './types'\n\n/**\n * @internal\n */\nexport const ChildLink = forwardRef(function ChildLink(\n  props: ChildLinkProps,\n  ref: ForwardedRef<HTMLAnchorElement>,\n) {\n  const {childId, childPayload, childParameters, ...rest} = props\n  const {routerPanesState, groupIndex} = useContext(PaneRouterContext)\n\n  return (\n    <StateLink\n      {...rest}\n      ref={ref}\n      state={{\n        panes: [\n          ...routerPanesState.slice(0, groupIndex + 1),\n          [{id: childId, params: childParameters, payload: childPayload}],\n        ],\n      }}\n    />\n  )\n})\n","import {type ForwardedRef, forwardRef, type ReactNode, useContext, useMemo} from 'react'\nimport {useUnique} from 'sanity'\nimport {PaneRouterContext} from 'sanity/_singletons'\nimport {StateLink} from 'sanity/router'\n\ninterface ParameterizedLinkProps {\n  params?: Record<string, string>\n  payload?: unknown\n  children?: ReactNode\n}\n\n/**\n * @internal\n */\nexport const ParameterizedLink = forwardRef(function ParameterizedLink(\n  props: ParameterizedLinkProps,\n  ref: ForwardedRef<HTMLAnchorElement>,\n) {\n  const {routerPanesState: currentPanes, groupIndex, siblingIndex} = useContext(PaneRouterContext)\n  const {params, payload, ...rest} = props\n  const nextParams = useUnique(params)\n  const nextPayload = useUnique(payload)\n\n  const nextState = useMemo(() => {\n    const currentGroup = currentPanes[groupIndex]\n    const currentSibling = currentGroup[siblingIndex]\n\n    const nextSibling = {\n      ...currentSibling,\n      params: nextParams ?? currentSibling.params,\n      payload: nextPayload ?? currentSibling.payload,\n    }\n\n    const nextGroup = [\n      ...currentGroup.slice(0, siblingIndex),\n      nextSibling,\n      ...currentGroup.slice(siblingIndex + 1),\n    ]\n\n    const nextPanes = [\n      ...currentPanes.slice(0, groupIndex),\n      nextGroup,\n      ...currentPanes.slice(groupIndex + 1),\n    ]\n\n    return {panes: nextPanes}\n  }, [currentPanes, groupIndex, nextParams, nextPayload, siblingIndex])\n\n  return <StateLink ref={ref} {...rest} state={nextState} />\n})\n","import {toString as pathToString} from '@sanity/util/paths'\nimport {type ForwardedRef, forwardRef} from 'react'\n\nimport {ChildLink} from './ChildLink'\nimport {type ReferenceChildLinkProps} from './types'\n\nexport const ReferenceChildLink = forwardRef(function ReferenceChildLink(\n  {documentId, documentType, parentRefPath, children, template, ...rest}: ReferenceChildLinkProps,\n  ref: ForwardedRef<HTMLAnchorElement>,\n) {\n  return (\n    <ChildLink\n      {...rest}\n      ref={ref}\n      childId={documentId}\n      childPayload={template?.params}\n      childParameters={{\n        type: documentType,\n        parentRefPath: pathToString(parentRefPath),\n        ...(template && {template: template?.id}),\n      }}\n    >\n      {children}\n    </ChildLink>\n  )\n})\n","import {useContext} from 'react'\nimport {PaneRouterContext} from 'sanity/_singletons'\n\nimport {type PaneRouterContextValue} from './types'\n\n/**\n *\n * @hidden\n * @beta\n */\nexport function usePaneRouter(): PaneRouterContextValue {\n  return useContext(PaneRouterContext)\n}\n","import {type SanityDocument, type SchemaType} from '@sanity/types'\nimport {type ReactNode, useCallback} from 'react'\nimport {\n  type FIXME,\n  getPublishedId,\n  PreviewCard,\n  useDocumentPresence,\n  useDocumentPreviewStore,\n} from 'sanity'\n\nimport {PaneItemPreview} from '../paneItem/PaneItemPreview'\nimport {usePaneRouter} from '../paneRouter'\n\nconst EMPTY_ARRAY: [] = []\n\ninterface ReferencePreviewLinkProps {\n  onClick?: () => void\n  type: SchemaType & {icon?: any}\n  value: SanityDocument\n}\n\nexport function ReferencePreviewLink(props: ReferencePreviewLinkProps) {\n  const {onClick, type, value} = props\n  const publishedId = getPublishedId(value?._id)\n  const documentPresence = useDocumentPresence(publishedId)\n  const documentPreviewStore = useDocumentPreviewStore()\n  const {ReferenceChildLink} = usePaneRouter()\n\n  const Link = useCallback(\n    function LinkComponent(linkProps: {children: ReactNode}) {\n      return (\n        <ReferenceChildLink\n          documentId={value?._id}\n          documentType={type?.name}\n          parentRefPath={EMPTY_ARRAY}\n          {...linkProps}\n        />\n      )\n    },\n    [ReferenceChildLink, type?.name, value?._id],\n  )\n\n  return (\n    <PreviewCard __unstable_focusRing as={Link as FIXME} data-as=\"a\" onClick={onClick} radius={2}>\n      <PaneItemPreview\n        documentPreviewStore={documentPreviewStore}\n        icon={type?.icon}\n        layout=\"compact\"\n        presence={documentPresence?.length > 0 ? documentPresence : EMPTY_ARRAY}\n        schemaType={type}\n        value={value}\n      />\n    </PreviewCard>\n  )\n}\n","import {\n  ChevronDownIcon,\n  CopyIcon,\n  DocumentsIcon,\n  UnknownIcon,\n  WarningOutlineIcon,\n} from '@sanity/icons'\nimport {Box, Card, Flex, Stack, Text, useToast} from '@sanity/ui'\nimport {useCallback} from 'react'\nimport {SanityDefaultPreview, Translate, useSchema, useTranslation} from 'sanity'\n\nimport {Button} from '../../../ui-components'\nimport {structureLocaleNamespace} from '../../i18n'\nimport {\n  ChevronWrapper,\n  CrossDatasetReferencesDetails,\n  CrossDatasetReferencesSummary,\n  DocumentIdFlex,\n  OtherReferenceCount,\n  Table,\n} from './ConfirmDeleteDialogBody.styles'\nimport {ReferencePreviewLink} from './ReferencePreviewLink'\nimport {type ReferringDocuments} from './useReferringDocuments'\n\ntype DeletionConfirmationDialogBodyProps = Required<ReferringDocuments> & {\n  documentTitle: React.ReactNode\n  action: 'unpublish' | 'delete'\n  onReferenceLinkClick?: () => void\n}\n\n/**\n * The inner part of the `ConfirmDeleteDialog`. This is ran when both the\n * `crossDatasetReferences` and `internalReferences` are loaded.\n */\nexport function ConfirmDeleteDialogBody({\n  crossDatasetReferences,\n  internalReferences,\n  documentTitle,\n  totalCount,\n  action,\n  datasetNames,\n  hasUnknownDatasetNames,\n  onReferenceLinkClick,\n}: DeletionConfirmationDialogBodyProps) {\n  const schema = useSchema()\n  const toast = useToast()\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const renderPreviewItem = useCallback(\n    (item: any) => {\n      const type = schema.get(item._type)\n      if (type) {\n        return <ReferencePreviewLink type={type} value={item} onClick={onReferenceLinkClick} />\n      }\n\n      return (\n        // Padding added to match the ReferencePreviewLink styling\n        <Box padding={2}>\n          <SanityDefaultPreview\n            icon={UnknownIcon}\n            title={t('confirm-delete-dialog.preview-item.preview-unavailable.title')}\n            subtitle={t('confirm-delete-dialog.preview-item.preview-unavailable.subtitle', {\n              documentId: item._id,\n            })}\n            layout=\"default\"\n          />\n        </Box>\n      )\n    },\n    [schema, t, onReferenceLinkClick],\n  )\n\n  if (internalReferences?.totalCount === 0 && crossDatasetReferences?.totalCount === 0) {\n    return (\n      <Text as=\"p\" size={1}>\n        <Translate\n          t={t}\n          i18nKey=\"confirm-delete-dialog.confirmation.text\"\n          context={action}\n          components={{DocumentTitle: () => <strong>{documentTitle}</strong>}}\n        />\n      </Text>\n    )\n  }\n\n  // We do some extra checks to handle cases where you have unavailable dataset\n  // name(s) due to permissions, both alone and in combination with known datasets\n\n  // This normalizes one or more undefined dataset names to the catch-all `unavailable`\n  const normalizedDatasetNames = [\n    ...datasetNames,\n    ...(hasUnknownDatasetNames ? ['unavailable'] : []),\n  ]\n\n  const datasetSubtitle = t('confirm-delete-dialog.cdr-summary.subtitle', {\n    count: normalizedDatasetNames.length,\n    datasets: normalizedDatasetNames.join(', '),\n    context: hasUnknownDatasetNames && normalizedDatasetNames.length ? 'unavailable' : '',\n  })\n\n  return (\n    <Flex direction=\"column\" gap={4}>\n      <Card padding={3} radius={2} tone=\"caution\" flex=\"none\">\n        <Flex>\n          <Text aria-hidden=\"true\" size={1}>\n            <WarningOutlineIcon />\n          </Text>\n          <Box flex={1} marginLeft={3}>\n            <Text size={1}>\n              <Translate\n                i18nKey=\"confirm-delete-dialog.referring-document-count.text\"\n                components={{DocumentTitle: () => documentTitle}}\n                t={t}\n                values={{count: totalCount}}\n              />\n            </Text>\n          </Box>\n        </Flex>\n      </Card>\n      <Box flex=\"none\">\n        <Text size={1}>\n          <Translate\n            i18nKey=\"confirm-delete-dialog.referring-documents-descriptor.text\"\n            t={t}\n            context={action}\n            components={{DocumentTitle: () => documentTitle}}\n          />\n        </Text>\n      </Box>\n      <Card radius={2} shadow={1} flex=\"auto\" padding={2}>\n        <Flex direction=\"column\">\n          {internalReferences.totalCount > 0 && (\n            <Stack as=\"ul\" marginBottom={2} space={2} data-testid=\"internal-references\">\n              {internalReferences?.references.map((item) => (\n                <Box as=\"li\" key={item._id}>\n                  {renderPreviewItem(item)}\n                </Box>\n              ))}\n\n              {internalReferences.totalCount > internalReferences.references.length && (\n                <Box as=\"li\" padding={3}>\n                  <OtherReferenceCount {...internalReferences} />\n                </Box>\n              )}\n            </Stack>\n          )}\n\n          {crossDatasetReferences.totalCount > 0 && (\n            <CrossDatasetReferencesDetails\n              data-testid=\"cross-dataset-references\"\n              style={{\n                // only add the border if needed\n                borderTop:\n                  internalReferences.totalCount > 0\n                    ? '1px solid var(--card-shadow-outline-color)'\n                    : undefined,\n              }}\n            >\n              <CrossDatasetReferencesSummary>\n                <Card\n                  as=\"a\"\n                  marginTop={internalReferences.totalCount > 0 ? 2 : 0}\n                  radius={2}\n                  shadow={1}\n                  paddingY={1}\n                >\n                  <Flex align=\"center\" gap={3} paddingX={3} paddingY={1}>\n                    <Text size={1}>\n                      <DocumentsIcon />\n                    </Text>\n                    <Stack space={2}>\n                      <Text textOverflow=\"ellipsis\" size={1}>\n                        {t('confirm-delete-dialog.cdr-summary.title', {\n                          count: normalizedDatasetNames.length,\n                          documentCount: t('confirm-delete-dialog.cdr-summary.document-count', {\n                            count: crossDatasetReferences.totalCount,\n                          }),\n                        })}\n                      </Text>\n                      <Text title={datasetSubtitle} textOverflow=\"ellipsis\" size={1} muted>\n                        {datasetSubtitle}\n                      </Text>\n                    </Stack>\n                    <ChevronWrapper>\n                      <Text muted size={1}>\n                        <ChevronDownIcon />\n                      </Text>\n                    </ChevronWrapper>\n                  </Flex>\n                </Card>\n              </CrossDatasetReferencesSummary>\n\n              <Box overflow=\"auto\" paddingTop={2}>\n                <Table>\n                  <thead>\n                    <tr>\n                      <th>\n                        <Text muted size={1} style={{minWidth: '5rem'}} weight=\"medium\">\n                          {t('confirm-delete-dialog.cdr-table.project-id.label')}\n                        </Text>\n                      </th>\n                      <th>\n                        <Text muted size={1} weight=\"medium\">\n                          {t('confirm-delete-dialog.cdr-table.dataset.label')}\n                        </Text>\n                      </th>\n                      <th>\n                        <Text muted size={1} weight=\"medium\">\n                          {t('confirm-delete-dialog.cdr-table.document-id.label')}\n                        </Text>\n                      </th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {crossDatasetReferences.references\n                      .filter((reference): reference is Required<typeof reference> => {\n                        return 'projectId' in reference\n                      })\n                      .map(({projectId, datasetName, documentId}, index) => (\n                        // eslint-disable-next-line react/no-array-index-key\n                        <tr key={`${documentId}-${index}`}>\n                          <td>\n                            <Text size={1}>{projectId}</Text>\n                          </td>\n                          <td>\n                            <Text size={1}>{datasetName || 'unavailable'}</Text>\n                          </td>\n                          <td>\n                            <DocumentIdFlex align=\"center\" gap={2} justify=\"flex-end\">\n                              <Text textOverflow=\"ellipsis\" size={1}>\n                                {documentId || 'unavailable'}\n                              </Text>\n                              {documentId && (\n                                <Button\n                                  mode=\"bleed\"\n                                  icon={CopyIcon}\n                                  tooltipProps={{\n                                    content: t(\n                                      'confirm-delete-dialog.cdr-table.copy-id-button.tooltip',\n                                    ),\n                                  }}\n                                  // eslint-disable-next-line react/jsx-no-bind\n                                  onClick={() => {\n                                    navigator.clipboard\n                                      .writeText(documentId)\n                                      .then(() => {\n                                        toast.push({\n                                          status: 'success',\n                                          title: t(\n                                            'confirm-delete-dialog.cdr-table.id-copied-toast.title',\n                                          ),\n                                        })\n                                      })\n                                      .catch(() => {\n                                        toast.push({\n                                          status: 'error',\n                                          title: t(\n                                            'confirm-delete-dialog.cdr-table.id-copied-toast.title-failed',\n                                          ),\n                                        })\n                                      })\n                                  }}\n                                />\n                              )}\n                            </DocumentIdFlex>\n                          </td>\n                        </tr>\n                      ))}\n                  </tbody>\n                </Table>\n\n                <OtherReferenceCount {...crossDatasetReferences} />\n              </Box>\n            </CrossDatasetReferencesDetails>\n          )}\n        </Flex>\n      </Card>\n      <Box flex=\"none\">\n        <Text size={1}>\n          <Translate\n            i18nKey=\"confirm-delete-dialog.referential-integrity-disclaimer.text\"\n            t={t}\n            context={action}\n            components={{DocumentTitle: () => documentTitle}}\n          />\n        </Text>\n      </Box>\n    </Flex>\n  )\n}\n","import {type ClientError, type SanityClient} from '@sanity/client'\nimport {useMemo} from 'react'\nimport {EMPTY, fromEvent, type Observable, of, timer} from 'rxjs'\nimport {\n  catchError,\n  distinctUntilChanged,\n  map,\n  shareReplay,\n  startWith,\n  switchMap,\n} from 'rxjs/operators'\nimport {\n  type AvailabilityResponse,\n  createHookFromObservableFactory,\n  DEFAULT_STUDIO_CLIENT_OPTIONS,\n  type DocumentStore,\n  getDraftId,\n  getPublishedId,\n  useClient,\n  useDocumentStore,\n} from 'sanity'\n\n// this is used in place of `instanceof` so the matching can be more robust and\n// won't have any issues with dual packages etc\n// https://nodejs.org/api/packages.html#dual-package-hazard\nfunction isClientError(e: unknown): e is ClientError {\n  if (typeof e !== 'object') return false\n  if (!e) return false\n  return 'statusCode' in e && 'response' in e\n}\n\nconst POLL_INTERVAL = 5000\n\n// only fetches when the document is visible\nlet visiblePoll$: Observable<number>\nconst getVisiblePoll$ = () => {\n  if (!visiblePoll$) {\n    visiblePoll$ = fromEvent(document, 'visibilitychange').pipe(\n      // add empty emission to have this fire on creation\n      startWith(null),\n      map(() => document.visibilityState === 'visible'),\n      distinctUntilChanged(),\n      switchMap((visible) =>\n        visible\n          ? // using timer instead of interval since timer will emit on creation\n            timer(0, POLL_INTERVAL)\n          : EMPTY,\n      ),\n      shareReplay({refCount: true, bufferSize: 1}),\n    )\n  }\n  return visiblePoll$\n}\n\nexport type ReferringDocuments = {\n  isLoading: boolean\n  totalCount: number\n  projectIds: string[]\n  datasetNames: string[]\n  hasUnknownDatasetNames: boolean\n  internalReferences?: {\n    totalCount: number\n    references: Array<{_id: string; _type: string}>\n  }\n  crossDatasetReferences?: {\n    totalCount: number\n    references: Array<{\n      /**\n       * The project ID of the document that is currently referencing the subject\n       * document. Unlike `documentId` and `datasetName`, this should always be\n       * defined.\n       */\n      projectId: string\n      /**\n       * The ID of the document that is currently referencing the subject\n       * document. This will be omitted if there is no access to the current\n       * project and dataset pair (e.g. if no `sanity-project-token` were\n       * configured)\n       */\n      documentId?: string\n      /**\n       * The dataset name that is currently referencing the subject document.\n       * This will be omitted if there is no access to the current project and\n       * dataset pair (e.g. if no `sanity-project-token` were configured)\n       */\n      datasetName?: string\n    }>\n  }\n}\n\nfunction getDocumentExistence(\n  documentId: string,\n  {versionedClient}: {versionedClient: SanityClient},\n): Observable<string | undefined> {\n  const draftId = getDraftId(documentId)\n  const publishedId = getPublishedId(documentId)\n  const requestOptions = {\n    uri: versionedClient.getDataUrl('doc', `${draftId},${publishedId}`),\n    json: true,\n    query: {excludeContent: 'true'},\n    tag: 'use-referring-documents.document-existence',\n  }\n  return versionedClient.observable.request<AvailabilityResponse>(requestOptions).pipe(\n    map(({omitted}) => {\n      const nonExistant = omitted.filter((doc) => doc.reason === 'existence')\n      if (nonExistant.length === 2) {\n        // None of the documents exist\n        return undefined\n      }\n\n      if (nonExistant.length === 0) {\n        // Both exist, so use the published one\n        return publishedId\n      }\n\n      // If the draft does not exist, use the published ID, and vice versa\n      return nonExistant.some((doc) => doc.id === draftId) ? publishedId : draftId\n    }),\n  )\n}\n\n/**\n * fetches the cross-dataset references using the client observable.request\n * method (for that requests can be automatically cancelled)\n */\nfunction fetchCrossDatasetReferences(\n  documentId: string,\n  context: {versionedClient: SanityClient},\n): Observable<ReferringDocuments['crossDatasetReferences']> {\n  const {versionedClient} = context\n\n  return getVisiblePoll$().pipe(\n    switchMap(() => getDocumentExistence(documentId, context)),\n    switchMap((checkDocumentId) => {\n      if (!checkDocumentId) {\n        return of({totalCount: 0, references: []})\n      }\n\n      const currentDataset = versionedClient.config().dataset\n\n      return versionedClient.observable\n        .request({\n          url: `/data/references/${currentDataset}/documents/${checkDocumentId}/to?excludeInternalReferences=true&excludePaths=true`,\n          tag: 'use-referring-documents.external',\n        })\n        .pipe(\n          catchError((e) => {\n            // it's possible that referencing document doesn't exist yet so the\n            // API will return a 404. In those cases, we want to catch and return\n            // a response with no references\n            if (isClientError(e) && e.statusCode === 404) {\n              return of({totalCount: 0, references: []})\n            }\n\n            throw e\n          }),\n        )\n    }),\n  )\n}\n\nconst useInternalReferences = createHookFromObservableFactory(\n  ([documentId, documentStore]: [string, DocumentStore]) => {\n    const referencesClause = '*[references($documentId)][0...100]{_id,_type}'\n    const totalClause = 'count(*[references($documentId)])'\n    const fetchQuery = `{\"references\":${referencesClause},\"totalCount\":${totalClause}}`\n    const listenQuery = '*[references($documentId)]'\n\n    return documentStore.listenQuery(\n      {fetch: fetchQuery, listen: listenQuery},\n      {documentId},\n      {tag: 'use-referring-documents', transitions: ['appear', 'disappear'], throttleTime: 5000},\n    ) as Observable<ReferringDocuments['internalReferences']>\n  },\n)\n\nconst useCrossDatasetReferences = createHookFromObservableFactory(\n  ([documentId, versionedClient]: [string, SanityClient]) => {\n    // (documentId: string, versionedClient: SanityClient) => {\n    return getVisiblePoll$().pipe(\n      switchMap(() =>\n        fetchCrossDatasetReferences(documentId, {\n          versionedClient,\n        }),\n      ),\n    )\n  },\n)\n\nexport function useReferringDocuments(documentId: string): ReferringDocuments {\n  const versionedClient = useClient(DEFAULT_STUDIO_CLIENT_OPTIONS)\n\n  const documentStore = useDocumentStore()\n  const publishedId = getPublishedId(documentId)\n\n  const [internalReferences, isInternalReferencesLoading] = useInternalReferences(\n    useMemo(() => [publishedId, documentStore], [documentStore, publishedId]),\n  )\n\n  const [crossDatasetReferences, isCrossDatasetReferencesLoading] = useCrossDatasetReferences(\n    useMemo(() => [publishedId, versionedClient], [publishedId, versionedClient]),\n  )\n\n  const projectIds = useMemo(() => {\n    return Array.from(\n      new Set(\n        crossDatasetReferences?.references\n          .map((crossDatasetReference) => crossDatasetReference.projectId)\n          .filter(Boolean),\n      ),\n    ).sort()\n  }, [crossDatasetReferences?.references])\n\n  const datasetNames = useMemo(() => {\n    return Array.from(\n      new Set<string>(\n        crossDatasetReferences?.references\n          // .filter((name) => typeof name === 'string')\n          .map((crossDatasetReference) => crossDatasetReference?.datasetName || '')\n          .filter((datasetName) => Boolean(datasetName) && datasetName !== ''),\n      ),\n    ).sort()\n  }, [crossDatasetReferences?.references])\n\n  const hasUnknownDatasetNames = useMemo(() => {\n    return Boolean(\n      crossDatasetReferences?.references.some(\n        (crossDatasetReference) => typeof crossDatasetReference.datasetName !== 'string',\n      ),\n    )\n  }, [crossDatasetReferences?.references])\n\n  return {\n    totalCount: (internalReferences?.totalCount || 0) + (crossDatasetReferences?.totalCount || 0),\n    projectIds,\n    datasetNames,\n    hasUnknownDatasetNames,\n    internalReferences,\n    crossDatasetReferences,\n    isLoading: isInternalReferencesLoading || isCrossDatasetReferencesLoading,\n  }\n}\n","import {Box, Flex} from '@sanity/ui'\nimport {useId, useMemo} from 'react'\nimport {LoadingBlock, useTranslation} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Dialog} from '../../../ui-components'\nimport {structureLocaleNamespace} from '../../i18n'\nimport {DocTitle} from '../DocTitle'\nimport {ConfirmDeleteDialogBody} from './ConfirmDeleteDialogBody'\nimport {useReferringDocuments} from './useReferringDocuments'\n\n/** @internal */\nexport const DialogBody = styled(Box)`\n  box-sizing: border-box;\n`\n\n/** @internal */\nexport const LoadingContainer = styled(Flex).attrs({\n  align: 'center',\n  direction: 'column',\n  justify: 'center',\n})`\n  height: 110px;\n`\n\n/** @internal */\nexport interface ConfirmDeleteDialogProps {\n  /**\n   * Incoming document ID used to find other referencing documents. This\n   * field respects draft IDs (e.g. if you pass in a published ID when one\n   * doesn't exist the document title may not show up).\n   */\n  id: string\n  /**\n   * The schema typename of the incoming document\n   */\n  type: string\n  /**\n   * The name of the action being done. (e.g. the `'unpublish'` action requires\n   * the same document deletion confirmation).\n   */\n  action?: 'delete' | 'unpublish'\n  onCancel: () => void\n  onConfirm: () => void\n}\n\n/**\n * A confirmation dialog used to prevent unwanted document deletes. Loads all\n * the referencing internal and cross-data references prior to showing the\n * delete button.\n *\n * @internal\n */\nexport function ConfirmDeleteDialog({\n  id,\n  type,\n  action = 'delete',\n  onCancel,\n  onConfirm,\n}: ConfirmDeleteDialogProps) {\n  const {t} = useTranslation(structureLocaleNamespace)\n  const dialogId = `deletion-confirmation-${useId()}`\n  const {\n    internalReferences,\n    crossDatasetReferences,\n    isLoading,\n    totalCount,\n    projectIds,\n    datasetNames,\n    hasUnknownDatasetNames,\n  } = useReferringDocuments(id)\n  const documentTitle = <DocTitle document={useMemo(() => ({_id: id, _type: type}), [id, type])} />\n  const showConfirmButton = !isLoading\n\n  return (\n    <Dialog\n      width={1}\n      id={dialogId}\n      header={t('confirm-delete-dialog.header.text', {context: action})}\n      footer={{\n        cancelButton: {\n          onClick: onCancel,\n          text: t('confirm-delete-dialog.cancel-button.text'),\n        },\n        confirmButton: showConfirmButton\n          ? {\n              text:\n                totalCount > 0\n                  ? t('confirm-delete-dialog.confirm-anyway-button.text', {context: action})\n                  : t('confirm-delete-dialog.confirm-button.text', {context: action}),\n              onClick: onConfirm,\n            }\n          : undefined,\n      }}\n      onClose={onCancel}\n      onClickOutside={onCancel}\n    >\n      <DialogBody>\n        {crossDatasetReferences && internalReferences && !isLoading ? (\n          <ConfirmDeleteDialogBody\n            crossDatasetReferences={crossDatasetReferences}\n            internalReferences={internalReferences}\n            documentTitle={documentTitle}\n            isLoading={isLoading}\n            totalCount={totalCount}\n            action={action}\n            projectIds={projectIds}\n            datasetNames={datasetNames}\n            hasUnknownDatasetNames={hasUnknownDatasetNames}\n            onReferenceLinkClick={onCancel}\n          />\n        ) : (\n          <LoadingContainer data-testid=\"loading-container\">\n            <LoadingBlock showText title={t('confirm-delete-dialog.loading.text')} />\n          </LoadingContainer>\n        )}\n      </DialogBody>\n    </Dialog>\n  )\n}\n","import {Box, Text} from '@sanity/ui'\nimport {type ComponentProps, useCallback, useId, useState} from 'react'\nimport {useTranslation} from 'sanity'\n\nimport {Dialog, ErrorBoundary} from '../../../ui-components'\nimport {structureLocaleNamespace} from '../../i18n'\nimport {ConfirmDeleteDialog, type ConfirmDeleteDialogProps} from './ConfirmDeleteDialog'\n\nexport type {ConfirmDeleteDialogProps}\n\ntype ArgType<T> = T extends (arg: infer U) => unknown ? U : never\ntype ErrorInfo = ArgType<ComponentProps<typeof ErrorBoundary>['onCatch']>\n\n/** @internal */\nfunction ConfirmDeleteDialogContainer(props: ConfirmDeleteDialogProps) {\n  const {t} = useTranslation(structureLocaleNamespace)\n  const id = useId()\n  const [error, setError] = useState<ErrorInfo | null>(null)\n  const handleRetry = useCallback(() => setError(null), [])\n\n  return error ? (\n    <Dialog\n      id={`dialog-error-${id}`}\n      data-testid=\"confirm-delete-error-dialog\"\n      header={t('confirm-delete-dialog.error.title.text')}\n      footer={{\n        confirmButton: {\n          text: t('confirm-delete-dialog.error.retry-button.text'),\n          onClick: handleRetry,\n          tone: 'default',\n        },\n      }}\n      onClose={props.onCancel}\n    >\n      <Box padding={4}>\n        <Text size={1}>{t('confirm-delete-dialog.error.message.text')}</Text>\n      </Box>\n    </Dialog>\n  ) : (\n    <ErrorBoundary onCatch={setError}>\n      <ConfirmDeleteDialog {...props} />\n    </ErrorBoundary>\n  )\n}\n\nexport {ConfirmDeleteDialogContainer as ConfirmDeleteDialog}\n","import {useEffect, useState} from 'react'\n\nexport function Delay({\n  children,\n  ms = 0,\n}: {\n  children?: React.JSX.Element | (() => React.JSX.Element)\n  ms?: number\n}): React.JSX.Element {\n  const [ready, setReady] = useState(ms <= 0)\n\n  useEffect(() => {\n    if (ms <= 0) {\n      return undefined\n    }\n\n    const timeoutId = setTimeout(() => setReady(true), ms)\n\n    return () => {\n      clearTimeout(timeoutId)\n    }\n  }, [ms])\n\n  if (!ready || !children) {\n    return <></>\n  }\n\n  return typeof children === 'function' ? children() : children\n}\n","/**\n * @internal\n */\nexport const PANE_DEBUG = false\n\n/**\n * @internal\n */\nexport const PANE_COLLAPSED_WIDTH = 51\n\n/**\n * @internal\n */\nexport const PANE_DEFAULT_MIN_WIDTH = PANE_COLLAPSED_WIDTH * 4\n","import {Layer} from '@sanity/ui'\nimport {useCallback, useState} from 'react'\nimport {styled} from 'styled-components'\n\nimport {usePaneLayout} from './usePaneLayout'\n\nconst Root = styled(Layer)`\n  position: relative;\n  width: 1px;\n  min-width: 1px;\n\n  &:before {\n    content: '';\n    display: block;\n    position: absolute;\n    top: 0;\n    left: 0;\n    bottom: 0;\n    width: 1px;\n    background-color: var(--card-border-color);\n  }\n\n  &:not([data-disabled]) {\n    cursor: ew-resize;\n    width: 9px;\n    min-width: 9px;\n    margin: 0 -4px;\n\n    &:before {\n      left: 4px;\n    }\n\n    &:after {\n      content: '';\n      display: block;\n      position: absolute;\n      top: 0;\n      left: 0;\n      width: 9px;\n      bottom: 0;\n      background-color: var(--card-border-color);\n      opacity: 0;\n      transition: opacity 150ms;\n    }\n\n    &[data-dragging]:after,\n    &:hover:after {\n      opacity: 0.2;\n    }\n  }\n`\n\n/**\n *\n * @hidden\n * @beta This API will change. DO NOT USE IN PRODUCTION.\n */\nexport function PaneDivider({\n  disabled,\n  element,\n}: {\n  disabled?: boolean\n  element: HTMLElement | null\n}) {\n  const {resize} = usePaneLayout()\n  const [dragging, setDragging] = useState(false)\n\n  const handleMouseDown = useCallback(\n    (event: any) => {\n      if (!element) return\n\n      setDragging(true)\n\n      event.preventDefault()\n\n      const startX = event.pageX\n\n      resize('start', element, 0)\n\n      const handleMouseMove = (e: MouseEvent) => {\n        e.preventDefault()\n\n        const deltaX = e.pageX - startX\n\n        resize('move', element, deltaX)\n      }\n\n      const handleMouseUp = (e: MouseEvent) => {\n        e.preventDefault()\n\n        setDragging(false)\n\n        window.removeEventListener('mousemove', handleMouseMove)\n        window.removeEventListener('mouseup', handleMouseUp)\n\n        resize('end', element, 0)\n      }\n\n      window.addEventListener('mousemove', handleMouseMove)\n      window.addEventListener('mouseup', handleMouseUp)\n    },\n    [element, resize],\n  )\n\n  return (\n    <Root\n      data-disabled={disabled ? '' : undefined}\n      data-dragging={dragging ? '' : undefined}\n      onMouseDown={handleMouseDown}\n    />\n  )\n}\n","import {BoundaryElementProvider, Card, type CardProps, Code, Flex} from '@sanity/ui'\nimport {\n  type ForwardedRef,\n  forwardRef,\n  type HTMLProps,\n  type ReactNode,\n  useCallback,\n  useImperativeHandle,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react'\nimport {IsLastPaneProvider, LegacyLayerProvider} from 'sanity'\nimport {PaneContext} from 'sanity/_singletons'\nimport {styled} from 'styled-components'\n\nimport {PANE_COLLAPSED_WIDTH, PANE_DEBUG, PANE_DEFAULT_MIN_WIDTH} from './constants'\nimport {PaneDivider} from './PaneDivider'\nimport {usePaneLayout} from './usePaneLayout'\n\ninterface PaneProps {\n  children?: ReactNode\n  currentMinWidth?: number\n  currentMaxWidth?: number\n  flex?: number\n  id: string\n  minWidth?: number\n  maxWidth?: number\n  selected?: boolean\n}\n\nconst Root = styled(Card)`\n  outline: none;\n\n  // NOTE: This will render a border to the right side of each pane\n  // without taking up physical space.\n  box-shadow: 1px 0 0 var(--card-border-color);\n`\n\n/**\n * @hidden\n * @internal\n */\n// eslint-disable-next-line complexity\nexport const Pane = forwardRef(function Pane(\n  props: PaneProps &\n    Omit<CardProps, 'as' | 'overflow'> &\n    Omit<HTMLProps<HTMLDivElement>, 'as' | 'height' | 'hidden' | 'id' | 'style'>,\n  forwardedRef: ForwardedRef<HTMLDivElement>,\n) {\n  const {\n    children,\n    currentMinWidth: currentMinWidthProp,\n    currentMaxWidth: currentMaxWidthProp,\n    flex: flexProp = 1,\n    id,\n    minWidth: minWidthProp,\n    maxWidth: maxWidthProp,\n    selected = false,\n    ...restProps\n  } = props\n  const [rootElement, setRootElement] = useState<HTMLDivElement | null>(null)\n  const {\n    collapse,\n    collapsed: layoutCollapsed,\n    expand,\n    expandedElement,\n    mount,\n    panes,\n  } = usePaneLayout()\n  const pane = panes.find((p) => p.element === rootElement)\n  const paneIndex = pane && panes.indexOf(pane)\n  const nextPane = typeof paneIndex === 'number' ? panes[paneIndex + 1] : undefined\n  const isLast = paneIndex === panes.length - 1\n  const expanded = expandedElement === rootElement\n  const collapsed = layoutCollapsed ? false : pane?.collapsed || false\n  const nextCollapsed = nextPane?.collapsed || false\n  const ref = useRef<HTMLDivElement | null>(null)\n  const flex = pane?.flex ?? flexProp\n  const currentMinWidth = pane?.currentMinWidth ?? currentMinWidthProp\n  const currentMaxWidth = pane?.currentMaxWidth ?? currentMaxWidthProp\n\n  // Forward ref to parent\n  useImperativeHandle<HTMLDivElement | null, HTMLDivElement | null>(forwardedRef, () => ref.current)\n\n  const setRef = useCallback((refValue: HTMLDivElement | null) => {\n    setRootElement(refValue)\n    ref.current = refValue\n  }, [])\n\n  useLayoutEffect(() => {\n    if (!rootElement) return undefined\n    return mount(rootElement, {\n      currentMinWidth: currentMinWidthProp,\n      currentMaxWidth: currentMaxWidthProp,\n      flex: flexProp,\n      id,\n      minWidth: minWidthProp,\n      maxWidth: maxWidthProp,\n    })\n  }, [\n    currentMinWidthProp,\n    currentMaxWidthProp,\n    flexProp,\n    id,\n    minWidthProp,\n    maxWidthProp,\n    mount,\n    rootElement,\n  ])\n\n  const handleCollapse = useCallback(() => {\n    if (!rootElement) return\n    collapse(rootElement)\n  }, [collapse, rootElement])\n\n  const handleExpand = useCallback(() => {\n    if (!rootElement) return\n    expand(rootElement)\n  }, [expand, rootElement])\n\n  const contextValue = useMemo(\n    () => ({\n      collapse: handleCollapse,\n      collapsed: layoutCollapsed ? false : collapsed,\n      expand: handleExpand,\n      index: paneIndex,\n      isLast,\n      rootElement,\n    }),\n    [collapsed, handleCollapse, handleExpand, isLast, layoutCollapsed, paneIndex, rootElement],\n  )\n\n  const minWidth = useMemo(() => {\n    if (layoutCollapsed) {\n      return undefined\n    }\n\n    if (collapsed) return PANE_COLLAPSED_WIDTH\n\n    if (currentMinWidth === 0) {\n      return minWidthProp || PANE_DEFAULT_MIN_WIDTH\n    }\n\n    if (isLast) {\n      return minWidthProp || PANE_DEFAULT_MIN_WIDTH\n    }\n\n    return currentMinWidth || minWidthProp || PANE_DEFAULT_MIN_WIDTH\n  }, [collapsed, currentMinWidth, isLast, layoutCollapsed, minWidthProp])\n\n  const maxWidth = useMemo(() => {\n    if (collapsed) return PANE_COLLAPSED_WIDTH\n\n    if (layoutCollapsed && isLast) {\n      return undefined\n    }\n\n    if (isLast) {\n      if (maxWidthProp) {\n        return currentMaxWidth ?? maxWidthProp\n      }\n\n      return undefined\n    }\n\n    return currentMaxWidth ?? maxWidthProp\n  }, [collapsed, currentMaxWidth, isLast, layoutCollapsed, maxWidthProp])\n\n  const hidden = layoutCollapsed && !isLast\n\n  const divider = useMemo(\n    () =>\n      !isLast &&\n      !layoutCollapsed && (\n        <LegacyLayerProvider zOffset=\"paneResizer\">\n          <PaneDivider disabled={collapsed || nextCollapsed} element={rootElement} />\n        </LegacyLayerProvider>\n      ),\n    [collapsed, isLast, layoutCollapsed, nextCollapsed, rootElement],\n  )\n\n  const style = useMemo(\n    () => ({\n      flex,\n      minWidth,\n      maxWidth: maxWidth === Infinity ? undefined : maxWidth,\n    }),\n    [flex, minWidth, maxWidth],\n  )\n\n  return (\n    <>\n      <LegacyLayerProvider zOffset=\"pane\">\n        <PaneContext.Provider value={contextValue}>\n          <IsLastPaneProvider isLastPane={isLast}>\n            <Root\n              data-testid=\"pane\"\n              data-ui=\"Pane\"\n              tone=\"inherit\"\n              hidden={hidden}\n              id={id}\n              overflow={layoutCollapsed ? undefined : 'hidden'}\n              {...restProps}\n              data-pane-collapsed={collapsed ? '' : undefined}\n              data-pane-index={paneIndex}\n              data-pane-selected={selected ? '' : undefined}\n              ref={setRef}\n              style={style}\n            >\n              {PANE_DEBUG && (\n                <Card padding={4} tone={expanded ? 'primary' : 'caution'}>\n                  <Code size={1}>\n                    {[\n                      `#${paneIndex}`,\n                      `collapsed=${collapsed}`,\n                      `currentMinWidth=${currentMinWidth}`,\n                      `currentMaxWidth=${currentMaxWidth}`,\n                      `flex=${flex}`,\n                      `minWidth=${minWidth}`,\n                      `maxWidth=${maxWidth}`,\n                    ].join('\\n')}\n                  </Code>\n                </Card>\n              )}\n\n              <BoundaryElementProvider element={rootElement}>\n                {!hidden && (\n                  <Flex direction=\"column\" height=\"fill\">\n                    {children}\n                  </Flex>\n                )}\n              </BoundaryElementProvider>\n            </Root>\n          </IsLastPaneProvider>\n        </PaneContext.Provider>\n      </LegacyLayerProvider>\n\n      {divider}\n    </>\n  )\n})\n","import {Card} from '@sanity/ui'\nimport {styled} from 'styled-components'\n\nexport const Root = styled(Card)`\n  position: relative;\n  outline: none;\n`\n\nRoot.displayName = 'PaneContent__root'\n","import {useContext} from 'react'\nimport {PaneContext} from 'sanity/_singletons'\n\nimport {type PaneContextValue} from './types'\n\n/**\n *\n * @hidden\n * @beta This API will change. DO NOT USE IN PRODUCTION.\n */\nexport function usePane(): PaneContextValue {\n  const pane = useContext(PaneContext)\n\n  if (!pane) {\n    throw new Error('Pane: missing context value')\n  }\n\n  return pane\n}\n","import {type BoxOverflow} from '@sanity/ui'\nimport {type ElementType, type ForwardedRef, forwardRef, type HTMLProps} from 'react'\n\nimport {Root} from './PaneContent.styles'\nimport {usePane} from './usePane'\nimport {usePaneLayout} from './usePaneLayout'\n\ninterface PaneContentProps {\n  as?: ElementType | keyof React.JSX.IntrinsicElements\n  overflow?: BoxOverflow\n  padding?: number | number[]\n}\n\n/**\n * @hidden\n * @internal\n */\nexport const PaneContent = forwardRef(function PaneContent(\n  props: PaneContentProps & Omit<HTMLProps<HTMLDivElement>, 'as' | 'height' | 'ref'>,\n  ref: ForwardedRef<HTMLDivElement>,\n) {\n  const {as, children, overflow, padding, ...restProps} = props\n  const {collapsed} = usePane()\n  const {collapsed: layoutCollapsed} = usePaneLayout()\n\n  return (\n    <Root\n      data-testid=\"pane-content\"\n      forwardedAs={as}\n      {...restProps}\n      flex={1}\n      hidden={collapsed}\n      overflow={layoutCollapsed ? undefined : overflow}\n      padding={padding}\n      ref={ref}\n      tone=\"inherit\"\n    >\n      {children}\n    </Root>\n  )\n})\n","/**\n * Remove the spaces and lower case the string\n *\n * @param str - string to remove the spaces and lower case\n * @returns str with no spaces and lower case\n */\nexport function toLowerCaseNoSpaces(str: string | undefined): string {\n  if (!str) return ''\n  return str.toLocaleLowerCase().replaceAll(' ', '')\n}\n","import {CheckmarkIcon} from '@sanity/icons'\nimport {MenuDivider, Text} from '@sanity/ui'\nimport {type MouseEvent, useCallback} from 'react'\nimport {TooltipOfDisabled, useGetI18nText, useI18nText} from 'sanity'\nimport {useIntentLink} from 'sanity/router'\n\nimport {MenuGroup, MenuItem, type PopoverProps} from '../../../ui-components'\nimport {type Intent} from '../../structureBuilder'\nimport {toLowerCaseNoSpaces} from '../../util/toLowerCaseNoSpaces'\nimport {type _PaneMenuItem, type _PaneMenuNode} from './types'\n\nconst MENU_GROUP_POPOVER_PROPS: PopoverProps = {\n  constrainSize: true,\n  placement: 'left-start',\n  portal: true,\n}\n\nexport function PaneMenuButtonItem(props: {\n  disabled?: boolean\n  isAfterGroup: boolean\n  node: _PaneMenuNode\n}) {\n  const {disabled, isAfterGroup, node} = props\n  const getI18nText = useGetI18nText('i18n' in node ? node : undefined)\n\n  if (node.type === 'divider') {\n    return <MenuDivider />\n  }\n\n  const {title} = getI18nText(node)\n\n  if (node.type === 'group') {\n    if (node.children.length === 0) {\n      return null\n    }\n\n    if (node.expanded) {\n      return (\n        <>\n          {isAfterGroup && <MenuDivider />}\n          {node.children.map((child, childIndex) => (\n            <PaneMenuButtonItem\n              disabled={disabled || Boolean(node.disabled)}\n              isAfterGroup={node.children[childIndex - 1]?.type === 'group'}\n              key={child.key}\n              node={child}\n            />\n          ))}\n        </>\n      )\n    }\n\n    return (\n      <>\n        {isAfterGroup && <MenuDivider />}\n        <MenuGroup\n          disabled={disabled}\n          icon={node.icon}\n          popover={MENU_GROUP_POPOVER_PROPS}\n          text={title}\n        >\n          {node.children.map((child, childIndex) => (\n            <PaneMenuButtonItem\n              disabled={disabled || Boolean(node.disabled)}\n              isAfterGroup={node.children[childIndex - 1]?.type === 'group'}\n              key={child.key}\n              node={child}\n            />\n          ))}\n        </MenuGroup>\n      </>\n    )\n  }\n\n  return (\n    <>\n      {isAfterGroup && <MenuDivider />}\n      <PaneContextMenuItemResolver disabled={disabled} node={node} />\n    </>\n  )\n}\n\nfunction PaneContextMenuItemResolver(props: {disabled?: boolean; node: _PaneMenuItem}) {\n  const {node} = props\n\n  if (node.intent) {\n    return <PaneContextIntentMenuItem {...props} intent={node.intent} />\n  }\n\n  return <PaneContextMenuItem {...props} />\n}\n\nfunction PaneContextMenuItem(props: {disabled?: boolean; node: _PaneMenuItem}) {\n  const {disabled, node} = props\n  const tooltipContent = typeof node.disabled === 'object' && (\n    <Text size={1}>{node.disabled.reason}</Text>\n  )\n  const {title} = useI18nText(node)\n\n  return (\n    <TooltipOfDisabled content={tooltipContent} placement=\"left\">\n      <MenuItem\n        disabled={disabled || Boolean(node.disabled)}\n        hotkeys={node.hotkey?.split('+')}\n        icon={node.icon}\n        iconRight={node.iconRight || (node.selected && CheckmarkIcon)}\n        // eslint-disable-next-line react/jsx-handler-names\n        onClick={node.onAction}\n        pressed={node.selected}\n        text={title}\n        tone={node.tone}\n        data-testid={`action-${toLowerCaseNoSpaces(node.title)}`}\n      />\n    </TooltipOfDisabled>\n  )\n}\n\nfunction PaneContextIntentMenuItem(props: {\n  disabled?: boolean\n  intent: Intent\n  node: _PaneMenuItem\n}) {\n  const {disabled, intent, node} = props\n  const tooltipContent = typeof node.disabled === 'object' && (\n    <Text size={1}>{node.disabled.reason}</Text>\n  )\n  const intentLink = useIntentLink({intent: intent.type, params: intent.params})\n\n  const handleClick = useCallback(\n    (event: MouseEvent<HTMLDivElement>) => {\n      intentLink.onClick(event)\n      node.onAction()\n    },\n    [intentLink, node],\n  )\n\n  const {title} = useI18nText(node)\n\n  return (\n    <TooltipOfDisabled content={tooltipContent} placement=\"left\">\n      <MenuItem\n        as=\"a\"\n        disabled={disabled || Boolean(node.disabled)}\n        hotkeys={node.hotkey?.split('+')}\n        href={intentLink.href}\n        icon={node.icon}\n        iconRight={node.selected ? CheckmarkIcon : undefined}\n        onClick={handleClick}\n        pressed={node.selected}\n        text={title}\n        tone={node.tone}\n      />\n    </TooltipOfDisabled>\n  )\n}\n","import {Menu, MenuDivider} from '@sanity/ui'\nimport {type ReactNode, useId} from 'react'\nimport {ContextMenuButton} from 'sanity'\n\nimport {MenuButton, type PopoverProps} from '../../../ui-components'\nimport {PaneMenuButtonItem} from './PaneMenuButtonItem'\nimport {type _PaneMenuItem, type _PaneMenuNode} from './types'\n\ninterface PaneContextMenuButtonProps {\n  nodes: _PaneMenuNode[]\n  actionsNodes?: ReactNode\n}\n\nconst CONTEXT_MENU_POPOVER_PROPS: PopoverProps = {\n  constrainSize: true,\n  placement: 'bottom',\n  portal: true,\n}\n\nfunction nodesHasTone(nodes: _PaneMenuNode[], tone: NonNullable<_PaneMenuItem['tone']>): boolean {\n  return nodes.some((node) => {\n    return (\n      (node.type === 'item' && node.tone === tone) ||\n      (node.type === 'group' && nodesHasTone(node.children, tone))\n    )\n  })\n}\n\n/**\n *\n * @hidden\n * @beta This API will change. DO NOT USE IN PRODUCTION.\n */\nexport function PaneContextMenuButton(props: PaneContextMenuButtonProps) {\n  const {nodes, actionsNodes} = props\n  const id = useId()\n\n  const hasCritical = nodesHasTone(nodes, 'critical')\n  const hasCaution = nodesHasTone(nodes, 'caution')\n\n  return (\n    <MenuButton\n      button={\n        <ContextMenuButton\n          // eslint-disable-next-line no-nested-ternary\n          tone={hasCritical ? 'critical' : hasCaution ? 'caution' : undefined}\n          data-testid=\"pane-context-menu-button\"\n        />\n      }\n      id={id}\n      menu={\n        <Menu>\n          {actionsNodes && (\n            <>\n              {actionsNodes}\n              <MenuDivider />\n            </>\n          )}\n          {nodes.map((node, nodeIndex) => {\n            const isAfterGroup = nodes[nodeIndex - 1]?.type === 'group'\n            return <PaneMenuButtonItem isAfterGroup={isAfterGroup} key={node.key} node={node} />\n          })}\n        </Menu>\n      }\n      popover={CONTEXT_MENU_POPOVER_PROPS}\n    />\n  )\n}\n","import {Card, Layer} from '@sanity/ui'\nimport {styled} from 'styled-components'\n\nexport const Root = styled(Layer)`\n  position: sticky;\n  bottom: 0;\n\n  &:before {\n    content: '';\n    display: block;\n    position: absolute;\n    left: 0;\n    right: 0;\n    top: -1px;\n    border-bottom: 1px solid var(--card-border-color);\n  }\n`\n\nexport const RootCard = styled(Card)`\n  padding-bottom: env(safe-area-inset-bottom);\n`\n","import {Box} from '@sanity/ui'\nimport {type ForwardedRef, forwardRef, type ReactNode} from 'react'\nimport {LegacyLayerProvider} from 'sanity'\n\nimport {Root, RootCard} from './PaneFooter.styles'\nimport {usePane} from './usePane'\n\ninterface PaneFooterProps {\n  children?: ReactNode\n  padding?: number | number[]\n}\n\n/**\n *\n * @hidden\n * @beta This API will change. DO NOT USE IN PRODUCTION.\n */\nexport const PaneFooter = forwardRef(function PaneFooter(\n  props: PaneFooterProps,\n  ref: ForwardedRef<HTMLDivElement>,\n) {\n  const {children, padding} = props\n  const {collapsed} = usePane()\n\n  return (\n    <LegacyLayerProvider zOffset=\"paneFooter\">\n      <Root data-testid=\"pane-footer\" hidden={collapsed} ref={ref}>\n        <RootCard tone=\"inherit\">\n          <Box padding={padding}>{children}</Box>\n        </RootCard>\n      </Root>\n    </LegacyLayerProvider>\n  )\n})\n","import {Box, Card, Flex, Layer, rgba, Text, TextSkeleton, type Theme} from '@sanity/ui'\nimport {css, styled} from 'styled-components'\n\ninterface RootProps {\n  $border?: boolean\n}\n\nexport const Root = styled(Layer)<RootProps>(({$border}) => {\n  return css`\n    line-height: 0;\n    position: sticky;\n    top: 0;\n\n    &:not([data-collapsed]):after {\n      content: '';\n      display: block;\n      position: absolute;\n      left: 0;\n      right: 0;\n      bottom: -1px;\n      border-bottom: 1px solid ${$border ? 'var(--card-border-color)' : 'transparent'};\n      opacity: 1;\n    }\n  `\n})\n\nexport const Layout = styled(Flex)`\n  transform-origin: calc(51px / 2);\n\n  [data-collapsed] > div > & {\n    transform: rotate(90deg);\n  }\n`\n\nexport const TitleCard = styled(Card)(({theme}: {theme: Theme}) => {\n  const {fg, bg} = theme.sanity.color.card.enabled\n\n  // Disable color updates on hover\n  return css`\n    background-color: ${bg};\n\n    [data-ui='Text'] {\n      color: ${fg};\n    }\n  `\n})\n\nexport const TitleTextSkeleton = styled(TextSkeleton)`\n  width: 66%;\n  max-width: 175px;\n`\n\nexport const TitleText = styled(Text)`\n  cursor: default;\n  outline: none;\n`\n\nexport const TabsBox = styled(Box)(({theme}: {theme: Theme}) => {\n  const {color, space} = theme.sanity\n\n  return css`\n    overflow: hidden;\n    overflow: clip;\n    position: relative;\n\n    & > div {\n      white-space: nowrap;\n      overflow: auto;\n      /* Hide scrollbars */\n      scrollbar-width: none;\n      &::-webkit-scrollbar {\n        width: 0;\n        height: 0;\n      }\n    }\n\n    /* right padding */\n    & > div:after {\n      content: '';\n      display: inline-block;\n      top: 0;\n      right: 0;\n      bottom: 0;\n      width: ${space[3]}px;\n      height: 1px;\n    }\n\n    /* Gradient that makes it look like tabs disappear into nothing (looks nicer) */\n    &:after {\n      content: '';\n      display: block;\n      position: absolute;\n      top: 0;\n      right: 0;\n      bottom: 0;\n      background: linear-gradient(to right, ${rgba(color.base.bg, 0)}, var(--card-bg-color));\n      width: ${space[3]}px;\n      pointer-events: none;\n    }\n  `\n})\n","import {Box, Card, Flex, LayerProvider, useElementRect} from '@sanity/ui'\nimport {type ForwardedRef, forwardRef, type ReactNode, useCallback, useMemo} from 'react'\nimport {LegacyLayerProvider} from 'sanity'\n\nimport {Layout, Root, TabsBox, TitleCard, TitleText, TitleTextSkeleton} from './PaneHeader.styles'\nimport {usePane} from './usePane'\n\n/**\n * @beta This API will change. DO NOT USE IN PRODUCTION.\n */\nexport interface PaneHeaderProps {\n  actions?: ReactNode\n  backButton?: ReactNode\n  border?: boolean\n  contentAfter?: ReactNode\n  loading?: boolean\n  subActions?: ReactNode\n  tabIndex?: number\n  tabs?: ReactNode\n  title: ReactNode\n}\n\n/**\n *\n * @hidden\n * @beta This API will change. DO NOT USE IN PRODUCTION.\n */\nexport const PaneHeader = forwardRef(function PaneHeader(\n  props: PaneHeaderProps,\n  ref: ForwardedRef<HTMLDivElement>,\n) {\n  const {actions, backButton, border, contentAfter, loading, subActions, tabs, tabIndex, title} =\n    props\n  const {collapse, collapsed, expand, rootElement: paneElement} = usePane()\n  const paneRect = useElementRect(paneElement || null)\n\n  const layoutStyle = useMemo(\n    () => ({\n      width: collapsed ? paneRect?.height || window.innerHeight : undefined,\n    }),\n    [collapsed, paneRect],\n  )\n\n  const handleTitleClick = useCallback(() => {\n    if (collapsed) return\n    collapse()\n  }, [collapse, collapsed])\n\n  const handleLayoutClick = useCallback(() => {\n    if (!collapsed) return\n    expand()\n  }, [collapsed, expand])\n\n  const showTabsOrSubActions = Boolean(!collapsed && (tabs || subActions))\n\n  return (\n    <LayerProvider zOffset={100}>\n      <Root\n        $border={border}\n        data-collapsed={collapsed ? '' : undefined}\n        data-testid=\"pane-header\"\n        ref={ref}\n      >\n        <LegacyLayerProvider zOffset=\"paneHeader\">\n          <Card data-collapsed={collapsed ? '' : undefined} tone=\"inherit\">\n            <Layout\n              gap={1}\n              onClick={handleLayoutClick}\n              padding={3}\n              paddingBottom={collapsed || !showTabsOrSubActions ? 3 : 2}\n              sizing=\"border\"\n              style={layoutStyle}\n            >\n              {backButton && <Box flex=\"none\">{backButton}</Box>}\n\n              <TitleCard\n                __unstable_focusRing\n                flex={1}\n                onClick={handleTitleClick}\n                paddingLeft={backButton ? 1 : 2}\n                padding={2}\n                tabIndex={tabIndex}\n              >\n                {loading && (\n                  <Box padding={2}>\n                    <TitleTextSkeleton animated radius={1} size={1} />\n                  </Box>\n                )}\n                {!loading && (\n                  <TitleText size={1} textOverflow=\"ellipsis\" weight=\"semibold\">\n                    {title}\n                  </TitleText>\n                )}\n              </TitleCard>\n\n              {actions && (\n                <Box hidden={collapsed}>\n                  <LegacyLayerProvider zOffset=\"paneHeader\">{actions}</LegacyLayerProvider>\n                </Box>\n              )}\n            </Layout>\n\n            {showTabsOrSubActions && (\n              <Flex\n                align=\"center\"\n                hidden={collapsed}\n                overflow=\"auto\"\n                paddingBottom={3}\n                paddingX={3}\n              >\n                <TabsBox flex={1} marginRight={subActions ? 3 : 0}>\n                  {tabs}\n                </TabsBox>\n\n                {subActions && subActions}\n              </Flex>\n            )}\n\n            {!collapsed && contentAfter && contentAfter}\n          </Card>\n        </LegacyLayerProvider>\n      </Root>\n    </LayerProvider>\n  )\n})\n","import {UnknownIcon} from '@sanity/icons'\nimport {Menu} from '@sanity/ui'\nimport {type MouseEvent, useCallback, useId} from 'react'\nimport {StatusButton, useI18nText, useTranslation} from 'sanity'\nimport {useIntentLink} from 'sanity/router'\n\nimport {Button, MenuButton} from '../../../ui-components'\nimport {type Intent} from '../../structureBuilder'\nimport {PaneMenuButtonItem} from './PaneMenuButtonItem'\nimport {type _PaneMenuGroup, type _PaneMenuItem} from './types'\n\nfunction getDisabledReason(node: _PaneMenuItem) {\n  if (!node.disabled) {\n    return {disabledReason: undefined, ariaLabel: undefined, isDisabled: false}\n  }\n\n  /**\n   * This component supports receiving a `reason: string | react.ReactNode`.\n   * We are casting it as string, to avoid the ts error, as content will be rendered into the tooltip which only accepts string, but it won't crash if it's a ReactNode.\n   * For the aria label, we want to check if it's actually a string, to avoid generating an aria-label with the value `[object Object]`.\n   */\n  const disabledReason =\n    typeof node.disabled === 'object' ? (node.disabled.reason as string) : undefined\n  const ariaLabel =\n    typeof node.disabled === 'object' && typeof node.disabled?.reason === 'string'\n      ? node.disabled.reason\n      : 'This is disabled'\n\n  return {disabledReason, ariaLabel, isDisabled: Boolean(node.disabled)}\n}\nexport interface PaneHeaderActionButtonProps {\n  node: _PaneMenuItem | _PaneMenuGroup\n}\n\nexport function PaneHeaderActionButton(props: PaneHeaderActionButtonProps) {\n  const {node} = props\n\n  if (node.type === 'item') {\n    return <PaneHeaderMenuItemActionButton node={node} />\n  }\n\n  if (node.type === 'group') {\n    return <PaneHeaderMenuGroupActionButton node={node} />\n  }\n\n  console.warn('unknown menu node (expected `type: \"item\" | \"group\"`):', node)\n\n  return null\n}\n\nexport interface PaneHeaderMenuItemActionButtonProps {\n  node: _PaneMenuItem\n}\n\nexport function PaneHeaderMenuItemActionButton(props: PaneHeaderMenuItemActionButtonProps) {\n  const {node} = props\n  const {title} = useI18nText(node)\n  const {t} = useTranslation()\n\n  if (node.intent) {\n    return <PaneHeaderActionIntentButton {...props} intent={node.intent} />\n  }\n\n  const {disabledReason, ariaLabel, isDisabled} = getDisabledReason(node)\n\n  return (\n    <StatusButton\n      disabled={isDisabled}\n      icon={node.icon}\n      // eslint-disable-next-line react/jsx-handler-names\n      onClick={node.onAction}\n      selected={node.selected}\n      tone={node.tone}\n      aria-label={ariaLabel || title || t('status-button.aria-label')}\n      tooltipProps={{\n        hotkeys: !isDisabled && node.hotkey ? node.hotkey.split('+') : undefined,\n        content: isDisabled ? disabledReason : title,\n      }}\n    />\n  )\n}\n\nfunction PaneHeaderActionIntentButton(props: {intent: Intent; node: _PaneMenuItem}) {\n  const {intent, node} = props\n  const intentLink = useIntentLink({intent: intent.type, params: intent.params})\n  const {t} = useTranslation()\n\n  const handleClick = useCallback(\n    (event: MouseEvent<HTMLButtonElement>) => {\n      intentLink.onClick(event)\n      node.onAction()\n    },\n    [intentLink, node],\n  )\n\n  const {disabledReason, ariaLabel, isDisabled} = getDisabledReason(node)\n\n  return (\n    <StatusButton\n      forwardedAs=\"a\"\n      disabled={isDisabled}\n      href={intentLink.href}\n      icon={node.icon}\n      onClick={handleClick}\n      selected={node.selected}\n      tone={node.tone}\n      aria-label={ariaLabel || node.title || t('status-button.aria-label')}\n      tooltipProps={{\n        hotkeys: !isDisabled && node.hotkey ? node.hotkey.split('+') : undefined,\n        content: isDisabled ? disabledReason : node.title,\n        placement: 'bottom',\n        portal: true,\n      }}\n    />\n  )\n}\n\nexport interface PaneHeaderMenuGroupActionButtonProps {\n  node: _PaneMenuGroup\n}\n\nfunction PaneHeaderMenuGroupActionButton(props: PaneHeaderMenuGroupActionButtonProps) {\n  const {node} = props\n  const {title} = useI18nText(node)\n\n  return (\n    <MenuButton\n      button={\n        <Button\n          disabled={!!node.disabled}\n          icon={node.icon ?? UnknownIcon}\n          label={title}\n          mode=\"bleed\"\n          tooltipProps={{content: node.title, portal: true}}\n        />\n      }\n      id={useId()}\n      menu={\n        <Menu>\n          {node.children.map((child, idx) => {\n            return (\n              <PaneMenuButtonItem\n                disabled={Boolean(node.disabled)}\n                isAfterGroup={node.children[idx - 1]?.type === 'group'}\n                key={child.key}\n                node={child}\n              />\n            )\n          })}\n        </Menu>\n      }\n    />\n  )\n}\n","import {Card} from '@sanity/ui'\nimport {styled} from 'styled-components'\n\nexport const Root = styled(Card)`\n  transition: opacity 200ms;\n  position: relative;\n  z-index: 1;\n  padding-left: env(safe-area-inset-left);\n  padding-right: env(safe-area-inset-right);\n  opacity: 0;\n\n  &:not([hidden]) {\n    display: flex;\n  }\n\n  &:not([data-collapsed]) {\n    overflow: auto;\n  }\n\n  &[data-mounted] {\n    opacity: 1;\n  }\n\n  &[data-resizing] {\n    pointer-events: none;\n  }\n`\n","import {PANE_DEFAULT_MIN_WIDTH} from '../constants'\nimport {type PaneConfigOpts, type PaneResizeCache} from '../types'\n\nexport function _calcPaneResize(\n  cache: PaneResizeCache,\n  left: PaneConfigOpts,\n  right: PaneConfigOpts,\n  deltaX: number,\n): {leftFlex: number; leftW: number; rightFlex: number; rightW: number} {\n  const sum = {\n    flex: cache.left.flex + cache.right.flex,\n    width: cache.left.width + cache.right.width,\n  }\n\n  const leftMinWidth = left.minWidth ?? PANE_DEFAULT_MIN_WIDTH\n  const rightMinWidth = right.minWidth ?? PANE_DEFAULT_MIN_WIDTH\n\n  const leftMaxWidth = Math.min(left.maxWidth || Infinity, sum.width - rightMinWidth)\n  const rightMaxWidth = Math.min(right.maxWidth || Infinity, sum.width - leftMinWidth)\n\n  // Get min. delta X\n  let minDeltaX = leftMinWidth - cache.left.width\n  const rightMinDeltaX = cache.right.width - rightMaxWidth\n  if (minDeltaX < rightMinDeltaX) {\n    minDeltaX = rightMinDeltaX\n  }\n\n  // Get max. delta X\n  let maxDeltaX = cache.right.width - rightMinWidth\n  const leftMaxDeltaX = leftMaxWidth - cache.left.width\n  if (maxDeltaX > leftMaxDeltaX) {\n    maxDeltaX = leftMaxDeltaX\n  }\n\n  const _deltaX = Math.min(Math.max(deltaX, minDeltaX), maxDeltaX)\n\n  const leftW = cache.left.width + _deltaX\n  const rightW = cache.right.width - _deltaX\n\n  const leftFlex = (leftW / sum.width) * sum.flex\n  const rightFlex = (rightW / sum.width) * sum.flex\n\n  return {leftFlex, leftW, rightFlex, rightW}\n}\n","/**\n * @internal\n */\nexport function _getDOMPath(rootElement: HTMLElement, el: HTMLElement): number[] {\n  const path: number[] = []\n\n  let e = el\n\n  while (e !== rootElement) {\n    const parentElement = e.parentElement\n\n    if (!parentElement) return path\n\n    const children = Array.from(parentElement.childNodes)\n    const index = children.indexOf(e)\n\n    path.unshift(index)\n\n    if (parentElement === rootElement) {\n      return path\n    }\n\n    e = parentElement\n  }\n\n  return path\n}\n","import {_getDOMPath} from './_getDOMPath'\n\nconst EMPTY_PATH: number[] = []\n\n/**\n * @internal\n */\nexport function _sortElements(rootElement: HTMLElement, elements: HTMLElement[]): void {\n  // Create a map containing the DOM path of each pane element.\n  // The DOM path is relative to the `rootElement`, and is used in the next step for sorting.\n  const map = new WeakMap<HTMLElement, number[]>()\n\n  for (const element of elements) {\n    map.set(element, _getDOMPath(rootElement, element))\n  }\n\n  const _sortByElementPath = (a: HTMLElement, b: HTMLElement) => {\n    const _a = map.get(a) || EMPTY_PATH\n    const _b = map.get(b) || EMPTY_PATH\n\n    const len = Math.max(_a.length, _b.length)\n\n    // Loop until there are different indexes\n    for (let i = 0; i < len; i += 1) {\n      const aIndex = _a[i] || -1\n      const bIndex = _b[i] || -1\n\n      if (aIndex !== bIndex) {\n        return aIndex - bIndex\n      }\n    }\n\n    return 0\n  }\n\n  elements.sort(_sortByElementPath)\n}\n","import {PANE_COLLAPSED_WIDTH, PANE_DEFAULT_MIN_WIDTH} from './constants'\nimport {_calcPaneResize, _sortElements} from './helpers'\nimport {\n  type PaneConfigOpts,\n  type PaneData,\n  type PaneResizeCache,\n  type PaneResizeData,\n} from './types'\n\nexport interface PaneLayoutState {\n  expandedElement: HTMLElement | null\n  panes: PaneData[]\n  resizing: boolean\n}\n\nexport type PaneLayoutStateObserver = (state: PaneLayoutState) => void\n\nexport interface PaneLayoutController {\n  collapse: (element: HTMLElement) => void\n  expand: (element: HTMLElement) => void\n  mount: (element: HTMLElement, options: PaneConfigOpts) => () => void\n  resize: (type: 'start' | 'move' | 'end', leftElement: HTMLElement, deltaX: number) => void\n  setRootElement: (nextRootElement: HTMLElement | null) => void\n  setRootWidth: (nextRootWidth: number) => void\n  subscribe: (observer: PaneLayoutStateObserver) => () => void\n}\n\nexport function createPaneLayoutController(): PaneLayoutController {\n  const observers: PaneLayoutStateObserver[] = []\n  const elements: HTMLElement[] = []\n  const optionsMap = new WeakMap<HTMLElement, PaneConfigOpts & {original: PaneConfigOpts}>()\n  const userCollapsedElementSet = new Set<HTMLElement>()\n  const cache: Partial<PaneResizeCache> = {}\n\n  // Mutable internal state\n  let rootElement: HTMLElement | null = null\n  let rootWidth = 0\n  let expandedElement: HTMLElement | null = null\n  let resizeDataMap = new Map<HTMLElement, PaneResizeData>()\n  let resizing = false\n\n  function collapse(element: HTMLElement) {\n    userCollapsedElementSet.add(element)\n\n    if (expandedElement === element) {\n      expandedElement = null\n    }\n\n    _notifyObservers()\n  }\n\n  function expand(element: HTMLElement) {\n    userCollapsedElementSet.delete(element)\n\n    expandedElement = element\n\n    _notifyObservers()\n  }\n\n  function mount(element: HTMLElement, options: PaneConfigOpts) {\n    optionsMap.set(element, {...options, original: options})\n\n    elements.push(element)\n\n    if (rootElement) {\n      _sortElements(rootElement, elements)\n    }\n\n    expand(element)\n\n    return () => {\n      const idx = elements.indexOf(element)\n\n      if (idx > -1) {\n        elements.splice(idx, 1)\n      }\n\n      optionsMap.delete(element)\n\n      _notifyObservers()\n    }\n  }\n\n  // eslint-disable-next-line complexity\n  function resize(type: 'start' | 'move' | 'end', leftElement: HTMLElement, deltaX: number) {\n    const leftIndex = elements.indexOf(leftElement)\n    const leftOptions = optionsMap.get(leftElement)\n\n    if (!leftOptions) return\n\n    const rightElement = elements[leftIndex + 1]\n    const rightOptions = optionsMap.get(rightElement)\n\n    if (!rightOptions) return\n\n    if (type === 'start') {\n      resizing = true\n\n      cache.left = {\n        element: leftElement,\n        flex: leftOptions.flex || 1,\n        width: leftElement.offsetWidth,\n      }\n\n      cache.right = {\n        element: rightElement,\n        flex: rightOptions.flex || 1,\n        width: rightElement.offsetWidth,\n      }\n\n      _notifyObservers()\n    }\n\n    if (type === 'move' && cache.left && cache.right) {\n      resizeDataMap = new Map<HTMLElement, PaneResizeData>()\n\n      const {leftW, rightW, leftFlex, rightFlex} = _calcPaneResize(\n        cache as PaneResizeCache,\n        leftOptions,\n        rightOptions,\n        deltaX,\n      )\n\n      // update resize cache\n      resizeDataMap.set(leftElement, {flex: leftFlex, width: leftW})\n      resizeDataMap.set(rightElement, {flex: rightFlex, width: rightW})\n\n      _notifyObservers()\n    }\n\n    if (type === 'end') {\n      resizing = false\n\n      const leftResizeData = resizeDataMap.get(leftElement)\n      const rightResizeData = resizeDataMap.get(rightElement)\n\n      // Update left options\n      optionsMap.set(leftElement, {\n        ...leftOptions,\n        currentMinWidth: 0,\n        currentMaxWidth: leftOptions.maxWidth ?? Infinity,\n        flex: leftResizeData?.flex ?? leftOptions.flex,\n      })\n\n      // Update right options\n      optionsMap.set(rightElement, {\n        ...rightOptions,\n        currentMinWidth: 0,\n        currentMaxWidth: leftOptions.maxWidth ?? Infinity,\n        flex: rightResizeData?.flex ?? rightOptions.flex,\n      })\n\n      // Reset resize data map\n      resizeDataMap = new Map()\n\n      // Reset cache\n      delete cache.left\n      delete cache.right\n\n      _notifyObservers()\n    }\n  }\n\n  function setRootElement(nextRootElement: HTMLElement | null) {\n    rootElement = nextRootElement\n  }\n\n  function setRootWidth(nextRootWidth: number) {\n    rootWidth = nextRootWidth\n    _notifyObservers()\n  }\n\n  function subscribe(observer: PaneLayoutStateObserver) {\n    observers.push(observer)\n\n    return () => {\n      const idx = observers.push(observer)\n\n      if (idx > -1) {\n        observers.splice(idx, 1)\n      }\n    }\n  }\n\n  return {collapse, expand, mount, resize, setRootElement, setRootWidth, subscribe}\n\n  // eslint-disable-next-line complexity\n  function _notifyObservers() {\n    if (!rootWidth) return\n\n    // Create a reversed array of pane elements, so we can loop over them backwards.\n    // Place the expanded element first (so it has the least chance of being collapsed).\n    const _elements: HTMLElement[] = []\n    for (const element of elements) {\n      if (element !== expandedElement) {\n        _elements.unshift(element)\n      }\n    }\n    if (expandedElement) {\n      _elements.unshift(expandedElement)\n    }\n\n    const dataMap = new WeakMap<HTMLElement, PaneData>()\n    const len = _elements.length\n    const lastElement = _elements[0]\n    const collapsedWidth = (len - 1) * PANE_COLLAPSED_WIDTH\n\n    let remaingWidth = rootWidth - collapsedWidth\n\n    for (const element of _elements) {\n      const options = optionsMap.get(element)\n\n      if (!options) {\n        continue\n      }\n\n      const minWidth = options.currentMinWidth || options.minWidth || PANE_DEFAULT_MIN_WIDTH\n      const isLast = element === lastElement\n\n      // A pane is collapsed if:\n      // - it’s explictly collapsed by the user\n      const userCollapsed = userCollapsedElementSet.has(element)\n      // - it’s minimum width is larger than the remaining width\n      const sizeCollapsed = minWidth > remaingWidth\n      // - if the element is not the last (expanded pane)\n      const collapsed = isLast ? false : userCollapsed || sizeCollapsed\n\n      const resizeData = resizeDataMap.get(element)\n\n      // Collect pane data\n      dataMap.set(element, {\n        element: element,\n        collapsed: collapsed,\n        currentMinWidth: resizeData?.width ?? options.currentMinWidth,\n        currentMaxWidth: resizeData?.width ?? options.currentMaxWidth,\n        flex: resizeData?.flex ?? options.flex ?? 1,\n      })\n\n      // Update remaining width\n      if (collapsed) {\n        remaingWidth -= PANE_COLLAPSED_WIDTH\n      } else {\n        remaingWidth -= minWidth - PANE_COLLAPSED_WIDTH\n      }\n    }\n\n    const panes: PaneData[] = []\n\n    for (const element of elements) {\n      const data = dataMap.get(element)\n\n      if (data) panes.push(data)\n    }\n\n    for (const observer of observers) {\n      observer({\n        expandedElement: expandedElement || elements[elements.length - 1] || null,\n        panes,\n        resizing,\n      })\n    }\n  }\n}\n","import {type CardProps, useElementRect} from '@sanity/ui'\nimport {type HTMLProps, useEffect, useMemo, useState} from 'react'\nimport {PaneLayoutContext} from 'sanity/_singletons'\n\nimport {Root} from './PaneLayout.styles'\nimport {createPaneLayoutController, type PaneLayoutState} from './paneLayoutController'\nimport {type PaneLayoutContextValue} from './types'\n\n/**\n *\n * @hidden\n * @beta This API will change. DO NOT USE IN PRODUCTION.\n */\nexport interface PaneLayoutProps {\n  minWidth?: number\n  onCollapse?: () => void\n  onExpand?: () => void\n}\n\n/**\n *\n * @hidden\n * @beta This API will change. DO NOT USE IN PRODUCTION.\n */\nexport function PaneLayout(\n  props: PaneLayoutProps &\n    CardProps &\n    Omit<HTMLProps<HTMLDivElement>, 'as' | 'height' | 'ref' | 'wrap'>,\n) {\n  const {children, minWidth, onCollapse, onExpand, ...restProps} = props\n  const [controller] = useState(() => createPaneLayoutController())\n  const [rootElement, setRootElement] = useState<HTMLDivElement | null>(null)\n  const rootRect = useElementRect(rootElement)\n  const width = rootRect?.width || 0\n  const collapsed = width === undefined || !minWidth ? undefined : width < minWidth\n  const [state, setState] = useState<PaneLayoutState>({\n    expandedElement: null,\n    panes: [],\n    resizing: false,\n  })\n\n  // Set root element\n  useEffect(() => controller.setRootElement(rootElement), [controller, rootElement])\n\n  // Set root size\n  useEffect(() => controller.setRootWidth(width), [controller, width])\n\n  // Subscribe to state changes\n  useEffect(() => controller.subscribe(setState), [controller])\n\n  // Call the `onCollapse` and `onExpand` callbacks as the `collapsed` boolean changes\n  useEffect(() => {\n    if (collapsed === undefined) return\n    if (collapsed && onCollapse) onCollapse()\n    if (!collapsed && onExpand) onExpand()\n  }, [collapsed, onCollapse, onExpand])\n\n  // This is the context value that gives each pane the information they need\n  const paneLayout: PaneLayoutContextValue = useMemo(\n    () => ({\n      collapse: controller.collapse,\n      collapsed,\n      expand: controller.expand,\n      expandedElement: state.expandedElement,\n      mount: controller.mount,\n      panes: state.panes,\n      resize: controller.resize,\n      resizing: state.resizing,\n    }),\n    [collapsed, controller, state.expandedElement, state.panes, state.resizing],\n  )\n\n  return (\n    <PaneLayoutContext.Provider value={paneLayout}>\n      <Root\n        data-ui=\"PaneLayout\"\n        {...restProps}\n        data-collapsed={collapsed ? '' : undefined}\n        // The `data-resizing` attribute is used to improve cursor behavior\n        data-resizing={state.resizing ? '' : undefined}\n        // The `data-mounted` attribute is used to fade in the layout and prevent flash of\n        // non-collapsed panes\n        data-mounted={width ? '' : undefined}\n        ref={setRootElement}\n      >\n        {children}\n      </Root>\n    </PaneLayoutContext.Provider>\n  )\n}\n","/* eslint-disable camelcase */\n\nimport {negate} from 'lodash'\n\nimport {type _PaneMenuGroup, type _PaneMenuItem, type _PaneMenuNode} from './components/pane/types'\nimport {type DocumentFieldMenuActionNode, type PaneMenuItem, type PaneMenuItemGroup} from './types'\n\nexport function isMenuNodeButton(node: _PaneMenuNode): node is _PaneMenuItem | _PaneMenuGroup {\n  return (node.type === 'item' || node.type === 'group') && node.renderAsButton\n}\n\nexport const isNotMenuNodeButton = negate(isMenuNodeButton)\n\nexport function resolveMenuNodes(params: {\n  actionHandler: (item: PaneMenuItem) => void\n  fieldActions?: DocumentFieldMenuActionNode[]\n  menuItems: PaneMenuItem[]\n  menuItemGroups: PaneMenuItemGroup[]\n}): _PaneMenuNode[] {\n  const {fieldActions = [], menuItems, menuItemGroups} = params\n\n  const nodes: _PaneMenuNode[] = []\n\n  let keyOffset = 0\n\n  for (let i = 0; i < fieldActions.length; i += 1) {\n    const a = fieldActions[i]\n\n    nodes.push(mapFieldActionToPaneMenuNode(a, `${i}-${a.type}`))\n  }\n\n  keyOffset += nodes.length\n\n  const groups: _PaneMenuGroup[] = []\n\n  for (const itemGroup of menuItemGroups) {\n    const group = groups.find((g) => g.key === itemGroup.id)\n\n    if (!group) {\n      groups.push({\n        type: 'group',\n        key: itemGroup.id,\n\n        children: [],\n        expanded: true,\n        renderAsButton: false,\n        title: itemGroup.title,\n        i18n: itemGroup.i18n,\n      })\n    }\n  }\n\n  const ungroupedItems: _PaneMenuItem[] = []\n\n  for (let i = 0; i < menuItems.length; i += 1) {\n    const item = menuItems[i]\n\n    let group = item.group && groups.find((g) => g.key === item.group)\n\n    if (item.group && !group) {\n      group = {\n        type: 'group',\n        key: item.group,\n\n        expanded: true,\n        icon: item.icon,\n        title: item.group,\n        children: [],\n        renderAsButton: false,\n      }\n      groups.push(group)\n    }\n\n    if (group) {\n      group.children.push({\n        type: 'item',\n        key: `${keyOffset + i}-item`,\n\n        hotkey: item.shortcut,\n        icon: item.icon,\n        intent: item.intent,\n        onAction: () => params.actionHandler(item),\n        renderAsButton: item.showAsAction ?? false,\n        selected: item.selected,\n        title: item.title,\n        i18n: item.i18n,\n        tone: item.tone,\n      })\n    } else {\n      ungroupedItems.push({\n        type: 'item',\n        key: `${keyOffset + i}-item`,\n\n        hotkey: item.shortcut,\n        icon: item.icon,\n        intent: item.intent,\n        onAction: () => params.actionHandler(item),\n        renderAsButton: item.showAsAction ?? false,\n        selected: item.selected,\n        title: item.title,\n        i18n: item.i18n,\n        tone: item.tone,\n      })\n    }\n  }\n\n  return [...ungroupedItems, ...groups, ...nodes]\n}\n\nfunction mapFieldActionToPaneMenuNode(a: DocumentFieldMenuActionNode, key: string): _PaneMenuNode {\n  if (a.type === 'divider') {\n    return {\n      type: 'divider',\n      key,\n    }\n  }\n\n  if (a.type === 'group') {\n    return {\n      type: 'group',\n      key,\n\n      children: a.children.map((child, childIdx) =>\n        mapFieldActionToPaneMenuNode(child, `${key}-${childIdx}-${child.type}`),\n      ),\n      disabled: a.disabled,\n      expanded: a.expanded ?? true,\n      icon: a.icon,\n      title: a.title,\n      i18n: a.i18n,\n      renderAsButton: a.renderAsButton ?? false,\n    }\n  }\n\n  return {\n    type: 'item',\n    key,\n    intent: a.intent,\n    disabled: a.disabled,\n    icon: a.icon,\n    iconRight: a.iconRight,\n    onAction: a.onAction,\n    renderAsButton: a.renderAsButton ?? false,\n    selected: a.selected,\n    title: a.title,\n    i18n: a.i18n,\n    tone: a.tone,\n  }\n}\n","import {type ComponentProps, type ForwardedRef, forwardRef, type ReactNode, useMemo} from 'react'\nimport {IntentLink} from 'sanity/router'\n\nimport {Button, type ButtonProps} from '../../ui-components'\nimport {type PaneMenuItem} from '../types'\n\ntype RouterIntent = NonNullable<PaneMenuItem['intent']>\n\nexport const IntentButton = forwardRef(function IntentButton(\n  props: {\n    intent: RouterIntent\n  } & ButtonProps &\n    Omit<ComponentProps<typeof Button>, 'as' | 'href' | 'type'>,\n  ref: ForwardedRef<HTMLAnchorElement>,\n) {\n  const {intent, ...restProps} = props\n\n  const Link = useMemo(\n    () =>\n      // eslint-disable-next-line @typescript-eslint/no-shadow\n      forwardRef(function Link(\n        linkProps: {children: ReactNode},\n        linkRef: ForwardedRef<HTMLAnchorElement>,\n      ) {\n        return (\n          <IntentLink\n            {...linkProps}\n            intent={intent.type}\n            params={intent.params}\n            ref={linkRef}\n            searchParams={intent.searchParams}\n          />\n        )\n      }),\n    [intent],\n  )\n\n  return props.disabled ? (\n    <Button {...restProps} as=\"a\" role=\"link\" aria-disabled=\"true\" />\n  ) : (\n    <Button {...restProps} as={Link} data-as=\"a\" ref={ref as ForwardedRef<HTMLButtonElement>} />\n  )\n})\n","import {type ComponentProps, type ReactNode} from 'react'\nimport {InsufficientPermissionsMessage, useCurrentUser, useTranslation} from 'sanity'\n\nimport {Tooltip} from '../../../ui-components'\nimport {structureLocaleNamespace} from '../../i18n'\n\ninterface InsufficientPermissionsMessageTooltipProps {\n  reveal: boolean\n  /**\n   * delegates to `InsufficientPermissionsMessage`'s `context` prop\n   * @see InsufficientPermissionsMessage\n   */\n  context: ComponentProps<typeof InsufficientPermissionsMessage>['context']\n  loading: boolean\n  children: ReactNode\n}\n\nexport function InsufficientPermissionsMessageTooltip({\n  reveal,\n  context,\n  loading,\n  children,\n}: InsufficientPermissionsMessageTooltipProps) {\n  const currentUser = useCurrentUser()\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  if (!reveal) {\n    return <>{children}</>\n  }\n\n  return (\n    <Tooltip\n      content={\n        loading ? (\n          t('insufficient-permissions-message-tooltip.loading-text')\n        ) : (\n          <InsufficientPermissionsMessage context={context} currentUser={currentUser} />\n        )\n      }\n      portal\n    >\n      {/* this wrapping div is to allow mouse events */}\n      {/* while the child element is disabled */}\n      <div>{children}</div>\n    </Tooltip>\n  )\n}\n","import {type ReleaseId} from '@sanity/client'\nimport {AddIcon} from '@sanity/icons'\nimport {Menu} from '@sanity/ui'\nimport {type ComponentProps, type ForwardedRef, forwardRef, useMemo} from 'react'\nimport {\n  type InitialValueTemplateItem,\n  type Template,\n  type TemplatePermissionsResult,\n  useGetI18nText,\n  useIsReleaseActive,\n  usePerspective,\n  useTemplatePermissions,\n  useTemplates,\n  useTranslation,\n} from 'sanity'\nimport {IntentLink} from 'sanity/router'\n\nimport {Button, MenuButton, MenuItem, type PopoverProps} from '../../../ui-components'\nimport {structureLocaleNamespace} from '../../i18n'\nimport {IntentButton} from '../IntentButton'\nimport {InsufficientPermissionsMessageTooltip} from './InsufficientPermissionsMessageTooltip'\n\nexport type PaneHeaderIntentProps = ComponentProps<typeof IntentButton>['intent']\n\nconst POPOVER_PROPS: PopoverProps = {\n  constrainSize: true,\n  placement: 'bottom',\n  portal: true,\n}\n\nconst getIntent = (\n  templates: Template[],\n  item: InitialValueTemplateItem,\n  version?: ReleaseId,\n): PaneHeaderIntentProps | null => {\n  const typeName = templates.find((t) => t.id === item.templateId)?.schemaType\n  if (!typeName) return null\n\n  const baseParams = {\n    template: item.templateId,\n    type: typeName,\n    version,\n    id: item.initialDocumentId,\n  }\n\n  return {\n    type: 'create',\n    params: item.parameters ? [baseParams, item.parameters] : baseParams,\n    searchParams: version ? [['perspective', version]] : undefined,\n  }\n}\n\ninterface PaneHeaderCreateButtonProps {\n  templateItems: InitialValueTemplateItem[]\n}\n\nexport function PaneHeaderCreateButton({templateItems}: PaneHeaderCreateButtonProps) {\n  const templates = useTemplates()\n  const {selectedReleaseId} = usePerspective()\n  const isReleaseActive = useIsReleaseActive()\n\n  const {t} = useTranslation(structureLocaleNamespace)\n  const {t: tCore} = useTranslation()\n  const getI18nText = useGetI18nText([...templateItems, ...templates])\n\n  const [templatePermissions, isTemplatePermissionsLoading] = useTemplatePermissions({\n    templateItems,\n  })\n\n  const nothingGranted = useMemo(() => {\n    return (\n      !isTemplatePermissionsLoading &&\n      templatePermissions?.every((permission) => !permission.granted)\n    )\n  }, [isTemplatePermissionsLoading, templatePermissions])\n\n  const permissionsById = useMemo(() => {\n    if (!templatePermissions) return {}\n    return templatePermissions.reduce<Record<string, TemplatePermissionsResult | undefined>>(\n      (acc, permission) => {\n        acc[permission.id] = permission\n        return acc\n      },\n      {},\n    )\n  }, [templatePermissions])\n\n  if (nothingGranted) {\n    return (\n      <InsufficientPermissionsMessageTooltip\n        context=\"create-document-type\"\n        reveal\n        loading={isTemplatePermissionsLoading}\n      >\n        <Button\n          aria-label={t('pane-header.disabled-created-button.aria-label')}\n          icon={AddIcon}\n          data-testid=\"action-intent-button\"\n          disabled\n          mode=\"bleed\"\n          // This button handles the tooltip in a special way, won't reuse the forced tooltip.\n          tooltipProps={null}\n        />\n      </InsufficientPermissionsMessageTooltip>\n    )\n  }\n\n  if (templateItems.length === 1) {\n    const firstItem = templateItems[0]\n    const permissions = permissionsById[firstItem.id]\n    const disabled = !permissions?.granted || !isReleaseActive\n    const intent = getIntent(templates, firstItem, selectedReleaseId)\n    if (!intent) return null\n\n    return (\n      <InsufficientPermissionsMessageTooltip\n        reveal={disabled}\n        loading={isTemplatePermissionsLoading}\n        context=\"create-document-type\"\n      >\n        <IntentButton\n          aria-label={getI18nText(firstItem).title}\n          icon={firstItem.icon || AddIcon}\n          intent={intent}\n          mode=\"bleed\"\n          disabled={disabled}\n          data-testid=\"action-intent-button\"\n          tooltipProps={\n            disabled\n              ? {content: tCore('new-document.disabled-release.tooltip')}\n              : {content: t('pane-header.create-new-button.tooltip')}\n          }\n        />\n      </InsufficientPermissionsMessageTooltip>\n    )\n  }\n\n  return (\n    <MenuButton\n      button={\n        <Button\n          icon={AddIcon}\n          mode=\"bleed\"\n          disabled={!isReleaseActive}\n          data-testid=\"multi-action-intent-button\"\n          tooltipProps={\n            isReleaseActive\n              ? {content: t('pane-header.create-new-button.tooltip')}\n              : {content: tCore('new-document.disabled-release.tooltip')}\n          }\n        />\n      }\n      id=\"create-menu\"\n      menu={\n        <Menu>\n          {templateItems.map((item, itemIndex) => {\n            const permissions = permissionsById[item.id]\n            const disabled = !permissions?.granted\n            const intent = getIntent(templates, item, selectedReleaseId)\n            const template = templates.find((i) => i.id === item.templateId)\n            if (!template || !intent) return null\n\n            const Link = forwardRef((linkProps, linkRef: ForwardedRef<never>) =>\n              disabled ? (\n                <button type=\"button\" disabled {...linkProps} ref={linkRef} />\n              ) : (\n                <IntentLink\n                  {...linkProps}\n                  intent={intent.type}\n                  params={intent.params}\n                  searchParams={intent.searchParams}\n                  ref={linkRef}\n                />\n              ),\n            )\n\n            Link.displayName = 'Link'\n\n            const {title} = getI18nText({\n              ...item,\n              // replace the title with the template title\n              title: item.title || getI18nText(template).title,\n            })\n\n            return (\n              <InsufficientPermissionsMessageTooltip\n                context=\"create-document-type\"\n                key={item.id}\n                reveal={disabled}\n                loading={isTemplatePermissionsLoading}\n              >\n                <MenuItem\n                  as={Link}\n                  data-as={disabled ? 'button' : 'a'}\n                  text={title}\n                  aria-label={\n                    disabled ? t('pane-header.disabled-created-button.aria-label') : title\n                  }\n                  disabled={disabled}\n                  data-testid={`action-intent-button-${itemIndex}`}\n                />\n              </InsufficientPermissionsMessageTooltip>\n            )\n          })}\n        </Menu>\n      }\n      popover={POPOVER_PROPS}\n    />\n  )\n}\n","import {Flex} from '@sanity/ui'\nimport {uniqBy} from 'lodash'\nimport {memo, useCallback, useMemo} from 'react'\nimport {EMPTY_ARRAY, EMPTY_OBJECT, type InitialValueTemplateItem, useTemplates} from 'sanity'\n\nimport {isMenuNodeButton, isNotMenuNodeButton, resolveMenuNodes} from '../../menuNodes'\nimport {\n  type PaneMenuItem,\n  type PaneMenuItemGroup,\n  type StructureToolPaneActionHandler,\n} from '../../types'\nimport {PaneContextMenuButton} from '../pane/PaneContextMenuButton'\nimport {PaneHeaderActionButton} from '../pane/PaneHeaderActionButton'\nimport {PaneHeaderCreateButton} from './PaneHeaderCreateButton'\n\nfunction isNonNullable<T>(value: T): value is NonNullable<T> {\n  return value !== null && value !== undefined\n}\n\n/**\n * hashes an object to a string where the order of the keys don't matter\n */\nconst hashObject = (value: unknown) => {\n  const sortObject = (v: unknown): unknown => {\n    if (typeof v !== 'object' || !v) return v\n    if (Array.isArray(v)) return v.map(sortObject)\n    return Object.entries(v).sort(([keyA], [keyB]) => keyA.localeCompare(keyB, 'en'))\n  }\n\n  const normalize = (v: unknown) => JSON.parse(JSON.stringify(v))\n\n  return JSON.stringify(sortObject(normalize(value)))\n}\n\ninterface PaneHeaderActionsProps {\n  initialValueTemplateItems?: InitialValueTemplateItem[]\n  menuItems?: PaneMenuItem[]\n  menuItemGroups?: PaneMenuItemGroup[]\n  actionHandlers?: Record<string, StructureToolPaneActionHandler>\n}\n\nexport const PaneHeaderActions = memo(function PaneHeaderActions(props: PaneHeaderActionsProps) {\n  const {\n    initialValueTemplateItems: initialValueTemplateItemsFromStructure = EMPTY_ARRAY,\n    menuItems = EMPTY_ARRAY,\n    menuItemGroups = EMPTY_ARRAY,\n    actionHandlers = EMPTY_OBJECT as Record<string, StructureToolPaneActionHandler>,\n  } = props\n\n  const templates = useTemplates()\n\n  const handleAction = useCallback(\n    (item: PaneMenuItem) => {\n      if (typeof item.action === 'string' && !(item.action in actionHandlers)) {\n        console.warn('No handler for action:', item.action)\n        return false\n      }\n\n      const handler =\n        // eslint-disable-next-line no-nested-ternary\n        typeof item.action === 'function'\n          ? item.action\n          : typeof item.action === 'string'\n            ? actionHandlers[item.action]\n            : null\n\n      if (handler) {\n        handler(item.params as Record<string, string>)\n        return true\n      }\n\n      return false\n    },\n    [actionHandlers],\n  )\n\n  const menuNodes = useMemo(\n    () =>\n      resolveMenuNodes({\n        actionHandler: handleAction,\n        menuItemGroups,\n        menuItems: menuItems\n          // remove items with `create` intents because those will get combined\n          // into one action button (see `initialValueTemplateItemFromMenuItems`)\n          .filter((item) => item.intent?.type !== 'create'),\n      }),\n    [handleAction, menuItemGroups, menuItems],\n  )\n\n  const actionNodes = useMemo(() => menuNodes.filter(isMenuNodeButton), [menuNodes])\n  const contextMenuNodes = useMemo(() => menuNodes.filter(isNotMenuNodeButton), [menuNodes])\n\n  const initialValueTemplateItemFromMenuItems = useMemo(() => {\n    return menuItems\n      .map((item, menuItemIndex) => {\n        if (item.intent?.type !== 'create') return null\n\n        const {params} = item.intent\n        if (!params) return null\n\n        const intentParams = Array.isArray(params) ? params[0] : params\n        const templateParams = Array.isArray(params) ? params[1] : undefined\n\n        // fallback to the schema type name as the template ID.\n        // by default, the initial template values are populated from every\n        // document type in the schema\n        const templateId = intentParams.template || intentParams.type\n        if (!templateId) return null\n\n        // eslint-disable-next-line max-nested-callbacks\n        const template = templates.find((t) => t.id === templateId)\n        // the template doesn't exist then the action might be disabled\n        if (!template) return null\n\n        const initialDocumentId = intentParams.id\n\n        return {\n          item,\n          template,\n          templateParams,\n          menuItemIndex,\n          initialDocumentId,\n        }\n      })\n      .filter(isNonNullable)\n      .map(({initialDocumentId, item, template, menuItemIndex, templateParams}) => {\n        const initialValueTemplateItem: InitialValueTemplateItem = {\n          id: `menuItem${menuItemIndex}`,\n          initialDocumentId,\n          templateId: template.id,\n          type: 'initialValueTemplateItem',\n          title: item.title || template.title,\n          i18n: item.i18n || template.i18n,\n          icon: item.icon as InitialValueTemplateItem['icon'],\n          description: template.description,\n          parameters: templateParams,\n          schemaType: template.schemaType,\n        }\n\n        return initialValueTemplateItem\n      })\n  }, [menuItems, templates])\n\n  const combinedInitialValueTemplates = useMemo(() => {\n    // this de-dupes create actions\n    return uniqBy(\n      [...initialValueTemplateItemFromMenuItems, ...initialValueTemplateItemsFromStructure],\n      (item) => hashObject([item.initialDocumentId, item.templateId, item.parameters]),\n    )\n  }, [initialValueTemplateItemFromMenuItems, initialValueTemplateItemsFromStructure])\n\n  return (\n    <Flex gap={1}>\n      {combinedInitialValueTemplates.length > 0 && (\n        <PaneHeaderCreateButton templateItems={combinedInitialValueTemplates} />\n      )}\n\n      {actionNodes.map((node) => (\n        <PaneHeaderActionButton key={node.key} node={node} />\n      ))}\n\n      {contextMenuNodes.length > 0 && <PaneContextMenuButton nodes={contextMenuNodes} />}\n    </Flex>\n  )\n})\n","import {WarningOutlineIcon} from '@sanity/icons'\nimport {type SanityDocument} from '@sanity/types'\nimport {type GeneralPreviewLayoutKey, SanityDefaultPreview, Translate, useTranslation} from 'sanity'\n\nimport {structureLocaleNamespace} from '../i18n'\n\nexport interface MissingSchemaTypeProps {\n  layout?: GeneralPreviewLayoutKey\n  value: SanityDocument\n}\n\nexport function MissingSchemaType(props: MissingSchemaTypeProps) {\n  const {t} = useTranslation(structureLocaleNamespace)\n  const {layout, value} = props\n\n  return (\n    <SanityDefaultPreview\n      title={\n        <em>\n          <Translate\n            t={t}\n            i18nKey=\"pane-item.missing-schema-type.title\"\n            components={{Code: 'code'}}\n            values={{documentType: value._type}}\n          />\n        </em>\n      }\n      subtitle={\n        <Translate\n          t={t}\n          i18nKey=\"pane-item.missing-schema-type.subtitle\"\n          components={{Code: 'code'}}\n          values={{documentId: value._id}}\n        />\n      }\n      // eslint-disable-next-line react/jsx-no-bind\n      media={() => <WarningOutlineIcon />}\n      layout={layout}\n    />\n  )\n}\n","import {ChevronRightIcon, DocumentIcon, FolderIcon} from '@sanity/icons'\nimport {\n  isSanityDocument,\n  type PreviewValue,\n  type SanityDocument,\n  type SchemaType,\n} from '@sanity/types'\nimport {Box, type CardProps, Text} from '@sanity/ui'\nimport {\n  type ComponentType,\n  type MouseEvent,\n  startTransition,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react'\nimport {\n  type FIXME,\n  type GeneralPreviewLayoutKey,\n  PreviewCard,\n  SanityDefaultPreview,\n  useDocumentPresence,\n  useDocumentPreviewStore,\n  useEditState,\n  useSchema,\n} from 'sanity'\n\nimport {MissingSchemaType} from '../MissingSchemaType'\nimport {usePaneRouter} from '../paneRouter'\nimport {PaneItemPreview} from './PaneItemPreview'\n\ninterface PaneItemProps {\n  id: string\n  layout?: GeneralPreviewLayoutKey\n  icon?: ComponentType<any> | false\n  pressed?: boolean\n  selected?: boolean\n  title?: string\n  value?: PreviewValue | SanityDocument\n  schemaType?: SchemaType\n  margin?: CardProps['margin']\n  marginBottom?: CardProps['marginBottom']\n  marginTop?: CardProps['marginTop']\n}\n\n/**\n * Return `false` if we explicitly disable the icon.\n * Otherwise return the passed icon or the schema type icon as a backup.\n */\nexport function getIconWithFallback(\n  icon: ComponentType<any> | false | undefined,\n  schemaType: SchemaType | undefined,\n  defaultIcon: ComponentType<any>,\n): ComponentType<any> | false {\n  if (icon === false) {\n    return false\n  }\n\n  return icon || (schemaType && schemaType.icon) || defaultIcon || false\n}\n\nexport function PaneItem(props: PaneItemProps) {\n  const {\n    icon,\n    id,\n    layout = 'default',\n    pressed,\n    schemaType,\n    selected,\n    title,\n    value,\n    margin,\n    marginBottom,\n    marginTop,\n  } = props\n  const schema = useSchema()\n  const documentPreviewStore = useDocumentPreviewStore()\n  const {ChildLink} = usePaneRouter()\n  const documentPresence = useDocumentPresence(id)\n  const hasSchemaType = Boolean(schemaType && schemaType.name && schema.get(schemaType.name))\n  const [clicked, setClicked] = useState<boolean>(false)\n\n  const preview = useMemo(() => {\n    if (value && isSanityDocument(value)) {\n      if (!schemaType || !hasSchemaType) {\n        return <MissingSchemaType value={value} />\n      }\n\n      return (\n        <PaneItemPreview\n          documentPreviewStore={documentPreviewStore}\n          icon={getIconWithFallback(icon, schemaType, DocumentIcon)}\n          layout={layout}\n          schemaType={schemaType}\n          value={value}\n          presence={documentPresence}\n        />\n      )\n    }\n\n    // Always render non-document values as compact previews\n    return (\n      <SanityDefaultPreview\n        status={\n          <Box style={{opacity: 0.5}}>\n            <Text muted size={1}>\n              <ChevronRightIcon />\n            </Text>\n          </Box>\n        }\n        icon={getIconWithFallback(icon, schemaType, FolderIcon)}\n        layout=\"compact\"\n        title={title}\n      />\n    )\n  }, [\n    documentPreviewStore,\n    hasSchemaType,\n    icon,\n    layout,\n    schemaType,\n    title,\n    value,\n    documentPresence,\n  ])\n\n  const handleClick = useCallback((e: MouseEvent<HTMLElement>) => {\n    if (e.metaKey) {\n      setClicked(false)\n      return\n    }\n\n    setClicked(true)\n  }, [])\n\n  // Reset `clicked` state when `selected` prop changes\n  useEffect(() => setClicked(false), [selected])\n\n  // Preloads the edit state on hover, using concurrent rendering with `startTransition` so preloads can be interrupted and not block rendering\n  const [preloading, setPreload] = useState(false)\n  const timeoutRef = useRef<ReturnType<typeof setTimeout> | null>(null)\n  const handleMouseEnter = useCallback(() => {\n    timeoutRef.current = setTimeout(() => startTransition(() => setPreload(true)), 400)\n  }, [])\n  const handleMouseLeave = useCallback(() => {\n    if (timeoutRef.current) clearTimeout(timeoutRef.current)\n    startTransition(() => setPreload(false))\n  }, [])\n\n  return (\n    <PreviewCard\n      data-testid={`pane-item-${title}`}\n      __unstable_focusRing\n      as={ChildLink as FIXME}\n      // @ts-expect-error - `childId` is a valid prop on `ChildLink`\n      childId={id}\n      data-as=\"a\"\n      margin={margin}\n      marginBottom={marginBottom}\n      marginTop={marginTop}\n      onClick={handleClick}\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n      pressed={pressed}\n      radius={2}\n      selected={selected || clicked}\n      sizing=\"border\"\n      tabIndex={-1}\n      tone=\"inherit\"\n    >\n      {preview}\n      {preloading && schemaType?.name && value && isSanityDocument(value) && (\n        <PreloadDocumentPane documentId={id} documentType={schemaType.name} />\n      )}\n    </PreviewCard>\n  )\n}\n\nfunction PreloadDocumentPane(props: {documentId: string; documentType: string}) {\n  const {documentId, documentType} = props\n  // Preload the edit state for the document, and keep it alive until mouse leave\n  useEditState(documentId, documentType)\n\n  return null\n}\nPreloadDocumentPane.displayName = 'PreloadDocumentPane'\n","import {memo, type ReactNode} from 'react'\nimport {\n  type DocumentActionDescription,\n  type DocumentActionGroup,\n  type DocumentActionProps,\n  GetHookCollectionState,\n} from 'sanity'\n\n/** @internal */\nexport interface Action<Args, Description> {\n  (args: Args): Description | null\n}\n\n/** @internal */\nexport interface RenderActionCollectionProps {\n  actions: Action<DocumentActionProps, DocumentActionDescription>[]\n  actionProps: Omit<DocumentActionProps, 'onComplete'>\n  children: (props: {states: DocumentActionDescription[]}) => ReactNode\n  onActionComplete?: () => void\n  group?: DocumentActionGroup\n}\n\n/** @internal */\nexport const RenderActionCollectionState = memo((props: RenderActionCollectionProps) => {\n  const {actions, children, actionProps, onActionComplete, group} = props\n\n  return (\n    <GetHookCollectionState<Omit<DocumentActionProps, 'onComplete'>, DocumentActionDescription>\n      onReset={onActionComplete}\n      hooks={actions}\n      args={actionProps}\n      group={group}\n    >\n      {children}\n    </GetHookCollectionState>\n  )\n})\nRenderActionCollectionState.displayName = 'Memo(RenderActionCollectionState)'\n","import {memo, type ReactNode} from 'react'\nimport {\n  type DocumentBadgeDescription,\n  type DocumentBadgeProps,\n  type EditStateFor,\n  GetHookCollectionState,\n} from 'sanity'\n\n/** @internal */\nexport interface Badge<Args, Description> {\n  (args: Args): Description | null\n}\n\n/** @internal */\nexport interface RenderBadgeCollectionProps {\n  badges: Badge<DocumentBadgeProps, DocumentBadgeDescription>[]\n  badgeProps: EditStateFor\n  children: (props: {states: DocumentBadgeDescription[]}) => ReactNode\n}\n\n/** @internal */\nexport const RenderBadgeCollectionState = memo((props: RenderBadgeCollectionProps) => {\n  const {badges, children, badgeProps} = props\n\n  return (\n    <GetHookCollectionState<EditStateFor, DocumentBadgeDescription>\n      hooks={badges}\n      args={badgeProps}\n    >\n      {children}\n    </GetHookCollectionState>\n  )\n})\nRenderBadgeCollectionState.displayName = 'Memo(RenderBadgeCollectionState)'\n","import {Box, type CardTone} from '@sanity/ui'\n\nimport {Pane, PaneContent, PaneHeader} from '../../components/pane'\n\n/**\n * @internal\n */\nexport function ErrorPane(props: {\n  children?: React.ReactNode\n  currentMinWidth?: number\n  flex?: number\n  minWidth?: number\n  paneKey: string\n  title?: React.ReactNode\n  tone?: CardTone\n}) {\n  const {\n    children,\n    currentMinWidth,\n    flex,\n    minWidth,\n    paneKey,\n    title = 'Error',\n    tone = 'critical',\n  } = props\n\n  return (\n    <Pane\n      currentMinWidth={currentMinWidth}\n      flex={flex}\n      id={paneKey}\n      minWidth={minWidth}\n      tone={tone}\n    >\n      <PaneHeader title={title} />\n      <PaneContent overflow=\"auto\">\n        <Box paddingX={4} paddingY={5}>\n          {children}\n        </Box>\n      </PaneContent>\n    </Pane>\n  )\n}\n","import {merge, type Observable, of} from 'rxjs'\nimport {delay, mapTo} from 'rxjs/operators'\nimport {isDev} from 'sanity'\n\n/**\n * @internal\n */\nexport type WaitMessage = {messageKey: string} | {message: string}\n\n/**\n * @internal\n */\nexport function getWaitMessages(path: string[]): Observable<WaitMessage> {\n  const thresholds: (WaitMessage & {ms: number})[] = [\n    {ms: 300, messageKey: 'panes.resolving.default-message'},\n    {ms: 5000, messageKey: 'panes.resolving.slow-resolve-message'},\n  ]\n\n  if (isDev) {\n    const message = [\n      'Check console for errors?',\n      'Is your observable/promise resolving?',\n      path.length > 0 ? `Structure path: ${path.join(' ➝ ')}` : '',\n    ]\n\n    thresholds.push({\n      ms: 10000,\n      message: message.join('\\n'),\n    })\n  }\n\n  const src = of(null)\n\n  return merge(\n    ...thresholds.map((threshold) =>\n      src.pipe(\n        mapTo(\n          'messageKey' in threshold\n            ? {messageKey: threshold.messageKey}\n            : {message: threshold.message},\n        ),\n        delay(threshold.ms),\n      ),\n    ),\n  )\n}\n","import {_raf2, type CardTone, Flex} from '@sanity/ui'\nimport {memo, useEffect, useMemo, useState} from 'react'\nimport {type Observable} from 'rxjs'\nimport {LoadingBlock, useTranslation} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Delay} from '../../components/Delay'\nimport {Pane, PaneContent} from '../../components/pane'\nimport {structureLocaleNamespace} from '../../i18n'\nimport {getWaitMessages, type WaitMessage} from './getWaitMessages'\n\ninterface LoadingPaneProps {\n  delay?: number\n  flex?: number\n  message?: string | ((p: string[]) => string | Observable<WaitMessage>)\n  minWidth?: number\n  paneKey: string\n  path?: string\n  selected?: boolean\n  title?: string\n  tone?: CardTone\n}\n\nconst DELAY = false\nconst DEFAULT_MESSAGE_KEY = 'panes.resolving.default-message'\n\nconst Content = styled(Flex)`\n  opacity: 0;\n  transition: opacity 200ms;\n\n  &[data-mounted] {\n    opacity: 1;\n  }\n`\n\n/**\n * @internal\n */\nexport const LoadingPane = memo((props: LoadingPaneProps) => {\n  const {\n    delay = 300,\n    flex,\n    message: messageProp = getWaitMessages,\n    minWidth,\n    paneKey,\n    path,\n    selected,\n    title,\n    tone,\n  } = props\n\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const resolvedMessage = useMemo(() => {\n    if (typeof messageProp === 'function') {\n      return messageProp(path ? path.split(';') : [])\n    }\n\n    return messageProp\n  }, [messageProp, path])\n\n  const [currentMessage, setCurrentMessage] = useState<string | null>(() => {\n    if (typeof resolvedMessage === 'string') return resolvedMessage\n    return t(DEFAULT_MESSAGE_KEY)\n  })\n\n  useEffect(() => {\n    if (typeof resolvedMessage !== 'object') return undefined\n    if (typeof resolvedMessage.subscribe !== 'function') return undefined\n\n    const sub = resolvedMessage.subscribe((message) => {\n      setCurrentMessage('messageKey' in message ? t(message.messageKey) : message.message)\n    })\n\n    return () => sub.unsubscribe()\n  }, [resolvedMessage, t])\n\n  const [contentElement, setContentElement] = useState<HTMLDivElement | null>(null)\n  const [mounted, setMounted] = useState(false)\n\n  useEffect(() => {\n    if (!contentElement) return undefined\n    return _raf2(() => setMounted(true))\n  }, [contentElement])\n\n  const content = (\n    <Content\n      align=\"center\"\n      data-mounted={mounted ? '' : undefined}\n      direction=\"column\"\n      height=\"fill\"\n      justify=\"center\"\n      ref={setContentElement}\n    >\n      <LoadingBlock showText title={title || currentMessage} />\n    </Content>\n  )\n\n  return (\n    <Pane flex={flex} id={paneKey} minWidth={minWidth} selected={selected} tone={tone}>\n      <PaneContent>{DELAY ? <Delay ms={delay}>{content}</Delay> : content}</PaneContent>\n    </Pane>\n  )\n})\n\nLoadingPane.displayName = 'Memo(LoadingPane)'\n","import {useContext} from 'react'\nimport {DocumentPaneContext} from 'sanity/_singletons'\n\nimport {type DocumentPaneContextValue} from './DocumentPaneContext'\n\n/** @internal */\nexport function useDocumentPane(): DocumentPaneContextValue {\n  const documentPane = useContext(DocumentPaneContext)\n\n  if (!documentPane) {\n    throw new Error('DocumentPane: missing context value')\n  }\n\n  return documentPane\n}\n","import {useCallback, useLayoutEffect, useRef} from 'react'\nimport {\n  COMMENTS_INSPECTOR_NAME,\n  CommentsEnabledProvider,\n  CommentsProvider,\n  useCommentsEnabled,\n  usePerspective,\n} from 'sanity'\n\nimport {usePaneRouter} from '../../../components'\nimport {useDocumentPane} from '../useDocumentPane'\n\ninterface CommentsWrapperProps {\n  children: React.ReactNode\n  documentId: string\n  documentType: string\n}\n\n/**\n * @internal\n * A wrapper that conditionally wraps the document layout in a comments provider\n * if the feature is enabled for the project and the current document.\n */\nexport function CommentsWrapper(props: CommentsWrapperProps) {\n  const {children, documentId, documentType} = props\n\n  return (\n    <CommentsEnabledProvider documentId={documentId} documentType={documentType}>\n      <CommentsProviderWrapper documentId={documentId} documentType={documentType}>\n        {children}\n      </CommentsProviderWrapper>\n    </CommentsEnabledProvider>\n  )\n}\n\nfunction CommentsProviderWrapper(props: CommentsWrapperProps) {\n  const {children, documentId, documentType} = props\n\n  const {enabled} = useCommentsEnabled()\n  const {connectionState, onPathOpen, inspector, openInspector} = useDocumentPane()\n  const {selectedReleaseId} = usePerspective()\n  const {params, setParams, createPathWithParams} = usePaneRouter()\n\n  const selectedCommentId = params?.comment\n  const paramsRef = useRef(params)\n\n  useLayoutEffect(() => {\n    paramsRef.current = params\n  }, [params])\n\n  const getCommentLink = useCallback(\n    (commentId: string) => {\n      // Generate a path based on the current pane params.\n      // We force a value for `inspect` to ensure that this is included in URLs when comments\n      // are created outside of the inspector context (i.e. directly on the field)\n      // @todo: consider filtering pane router params and culling all non-active RHS panes prior to generating this link\n      const path = createPathWithParams({\n        ...paramsRef.current,\n        comment: commentId,\n        inspect: COMMENTS_INSPECTOR_NAME,\n      })\n      return `${window.location.origin}${path}`\n    },\n    [createPathWithParams],\n  )\n\n  const handleClearSelectedComment = useCallback(() => {\n    setParams({...paramsRef.current, comment: undefined})\n  }, [setParams])\n\n  const handleOpenCommentsInspector = useCallback(() => {\n    if (inspector?.name === COMMENTS_INSPECTOR_NAME) return\n\n    openInspector(COMMENTS_INSPECTOR_NAME)\n  }, [inspector?.name, openInspector])\n\n  // If comments are not enabled, render the default document layout\n  if (!enabled) {\n    return <>{children}</>\n  }\n\n  return (\n    <CommentsProvider\n      documentId={documentId}\n      documentType={documentType}\n      getCommentLink={getCommentLink}\n      isCommentsOpen={inspector?.name === COMMENTS_INSPECTOR_NAME}\n      isConnecting={connectionState === 'connecting'}\n      onClearSelectedComment={handleClearSelectedComment}\n      onCommentsOpen={handleOpenCommentsInspector}\n      onPathOpen={onPathOpen}\n      selectedCommentId={selectedCommentId}\n      sortOrder=\"desc\"\n      type=\"field\"\n      releaseId={selectedReleaseId}\n    >\n      {children}\n    </CommentsProvider>\n  )\n}\n","/**\n * @internal\n */\nexport const _DEBUG = false\n\nexport const EMPTY_PARAMS = {}\nexport const LOADING_PANE = Symbol('LOADING_PANE')\n\nexport const DOCUMENT_PANEL_PORTAL_ELEMENT = 'documentPanelPortalElement'\n","import {useContext} from 'react'\nimport {StructureToolContext} from 'sanity/_singletons'\n\nimport {type StructureToolContextValue} from './types'\n\n/** @internal */\nexport function useStructureTool(): StructureToolContextValue {\n  const structureTool = useContext(StructureToolContext)\n  if (!structureTool) throw new Error(`StructureTool: missing context value`)\n\n  return structureTool\n}\n","import {type PaneRouterContextValue} from '../../components'\nimport {type PaneMenuItemGroup} from '../../types'\n\nexport const DOCUMENT_PANEL_MIN_WIDTH = 320\nexport const DOCUMENT_PANEL_INITIAL_MIN_WIDTH = 600\n\nexport const DOCUMENT_INSPECTOR_MIN_WIDTH = 320\nexport const DOCUMENT_INSPECTOR_MAX_WIDTH = 540\n\nexport const EMPTY_PARAMS: NonNullable<PaneRouterContextValue['params']> = {}\n\nexport const INSPECT_ACTION_PREFIX = 'inspect:'\n\nexport const DEFAULT_MENU_ITEM_GROUPS: PaneMenuItemGroup[] = [{id: 'inspectors'}, {id: 'links'}]\n\n// inspectors\nexport const HISTORY_INSPECTOR_NAME = 'sanity/structure/history'\nexport const VALIDATION_INSPECTOR_NAME = 'sanity/structure/validation'\n","import {memo, useCallback, useEffect, useMemo, useState} from 'react'\nimport {type DocumentInspector, type DocumentInspectorMenuItem, useUnique} from 'sanity'\n\ninterface DocumentInspectorMenuItemsResolverProps {\n  documentId: string\n  documentType: string\n  inspectors: DocumentInspector[]\n  onMenuItems: (items: DocumentInspectorMenuItem[]) => void\n}\n\n// The menu item in a document inspector are resolved in a React hook (`useMenuItem`).\n// This means that the menu item needs to be resolved in a React component (in accordance with the rules of hooks).\n// In this component, we map over the configured inspectors and render a `InspectorMenuItem` for each.\n// The `InspectorMenuItem` will resolve the menu item in a React hook and call the `setMenuItem` callback\n// with the resolved menu item and the index of the inspector.\n// Finally, we call the `onMenuItems` callback with the resolved menu items.\nexport function DocumentInspectorMenuItemsResolver(props: DocumentInspectorMenuItemsResolverProps) {\n  const {documentId, documentType, inspectors, onMenuItems} = props\n\n  const len = inspectors.length\n  const [menuItems, setMenuItems] = useState<DocumentInspectorMenuItem[]>(() =>\n    Array.from(new Array(len)),\n  )\n\n  useEffect(() => {\n    if (menuItems.length !== len) {\n      const newFieldActions = Array.from(new Array(len))\n\n      for (let i = 0; i < len; i++) {\n        newFieldActions[i] = menuItems[i]\n      }\n\n      setMenuItems(newFieldActions)\n    }\n  }, [len, menuItems])\n\n  const setMenuItem = useCallback((index: number, node: DocumentInspectorMenuItem) => {\n    setMenuItems((prev) => {\n      const next = [...prev]\n      next[index] = node\n      return next\n    })\n  }, [])\n\n  useEffect(() => {\n    onMenuItems(menuItems.filter(Boolean))\n  }, [menuItems, onMenuItems])\n\n  const InspectorMenuItems = useMemo(() => {\n    return inspectors.map((inspector, index) => {\n      return inspector.useMenuItem\n        ? ([\n            defineInspectorMenuItemComponent({\n              documentId,\n              documentType,\n              index,\n              setMenuItem,\n              useMenuItem: inspector.useMenuItem,\n            }),\n            inspector.name,\n          ] as const)\n        : ([() => null, ''] as const)\n    })\n  }, [documentId, documentType, inspectors, setMenuItem])\n\n  return (\n    <>\n      {InspectorMenuItems.map(([InspectorMenuItem, key]) => key && <InspectorMenuItem key={key} />)}\n    </>\n  )\n}\nDocumentInspectorMenuItemsResolver.displayName = 'DocumentInspectorMenuItemsResolver'\n\nfunction defineInspectorMenuItemComponent({\n  documentId,\n  documentType,\n  index,\n  setMenuItem,\n  useMenuItem,\n}: {\n  documentId: string\n  documentType: string\n  index: number\n  setMenuItem: (index: number, node: DocumentInspectorMenuItem) => void\n  useMenuItem: NonNullable<DocumentInspector['useMenuItem']>\n}) {\n  return memo(function InspectorMenuItem() {\n    const menuItem = useMenuItem({\n      documentId,\n      documentType,\n    })\n    const node = useUnique(menuItem)\n\n    useEffect(() => {\n      setMenuItem(index, node)\n    }, [node])\n\n    return null\n  })\n}\n","import {unstable_useValuePreview as useValuePreview, useTranslation} from 'sanity'\n\nimport {structureLocaleNamespace} from '../../i18n'\nimport {useDocumentPane} from './useDocumentPane'\n\n/**\n * useDocumentTitle hook return type.\n *\n * @beta\n * @hidden\n */\ninterface UseDocumentTitle {\n  error?: string\n  title?: string\n}\n\n/**\n * React hook that returns the document title for the current document in the document pane.\n *\n * @beta\n * @hidden\n *\n * @returns The document title or error. See {@link UseDocumentTitle}\n */\nexport function useDocumentTitle(): UseDocumentTitle {\n  const {connectionState, schemaType, title, displayed} = useDocumentPane()\n  const {t} = useTranslation(structureLocaleNamespace)\n  const subscribed = Boolean(displayed)\n\n  const {error, value} = useValuePreview({\n    enabled: subscribed,\n    schemaType,\n    value: displayed,\n  })\n\n  if (connectionState === 'connecting' && !subscribed) {\n    return {error: undefined, title: undefined}\n  }\n\n  if (title) {\n    return {error: undefined, title}\n  }\n\n  if (!displayed) {\n    return {\n      error: undefined,\n      title: t('panes.document-header-title.new.text', {\n        schemaType: schemaType?.title || schemaType?.name,\n      }),\n    }\n  }\n\n  if (error) {\n    return {\n      error: t('panes.document-list-pane.error.text', {error: error.message}),\n      title: undefined,\n    }\n  }\n\n  return {error: undefined, title: value?.title}\n}\n","import {useToast} from '@sanity/ui'\nimport {memo, useEffect, useMemo, useRef} from 'react'\nimport {Translate, useDocumentOperationEvent, useTranslation} from 'sanity'\n\nimport {usePaneRouter} from '../../components'\nimport {structureLocaleNamespace} from '../../i18n'\nimport {useDocumentPane} from './useDocumentPane'\nimport {useDocumentTitle} from './useDocumentTitle'\n\nconst IGNORE_OPS = ['patch', 'commit']\n\nexport const DocumentOperationResults = memo(function DocumentOperationResults() {\n  const {push: pushToast} = useToast()\n  const {documentId, documentType, value: documentPaneValue} = useDocumentPane()\n  const documentTitleInfo = useDocumentTitle()\n  const titleError = documentTitleInfo.error\n  const event: any = useDocumentOperationEvent(documentId, documentType)\n  const prevEvent = useRef(event)\n  const paneRouter = usePaneRouter()\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const title = useMemo(() => {\n    // If title isn't set from document preview, use the title from the document pane value\n    if (\n      !documentTitleInfo.title &&\n      !titleError &&\n      !IGNORE_OPS.includes(event?.op) &&\n      typeof documentPaneValue.title === 'string' &&\n      event?.type === 'success'\n    ) {\n      return documentPaneValue.title\n    }\n    return documentTitleInfo.title\n  }, [documentTitleInfo.title, titleError, event, documentPaneValue.title])\n  //Truncate the document title and add \"...\" if it is over 25 characters\n  const documentTitleBase = title || t('panes.document-operation-results.operation-undefined-title')\n  const documentTitle =\n    documentTitleBase.length > 25 ? `${documentTitleBase.slice(0, 25)}...` : documentTitleBase\n\n  useEffect(() => {\n    if (!event || event === prevEvent.current) return\n\n    let cleanupId: number | undefined\n\n    if (event.type === 'error') {\n      pushToast({\n        closable: true,\n        duration: 30000, // 30s\n        status: 'error',\n        title: t('panes.document-operation-results.operation-error', {context: event.op}),\n        description: (\n          <details>\n            <summary>{t('panes.document-operation-results.error.summary.title')}</summary>\n            {event.error.message}\n          </details>\n        ),\n      })\n    }\n\n    if (event.type === 'success' && !IGNORE_OPS.includes(event.op)) {\n      pushToast({\n        closable: true,\n        status: 'success',\n        title: (\n          <Translate\n            context={event.op}\n            i18nKey=\"panes.document-operation-results.operation-success\"\n            t={t}\n            values={{\n              op: event.op,\n              title: documentTitle,\n            }}\n            components={{\n              Strong: 'strong',\n            }}\n          />\n        ),\n      })\n    }\n\n    /**\n     * If the document was deleted successfully, close the pane.\n     */\n    if (event.type === 'success' && event.op === 'delete') {\n      // Wait until next tick to allow deletion toasts to appear first\n      cleanupId = setTimeout(() => paneRouter.closeCurrentAndAfter(), 0) as any as number\n    }\n\n    prevEvent.current = event\n\n    // eslint-disable-next-line consistent-return\n    return () => clearTimeout(cleanupId)\n  }, [event, paneRouter, pushToast, t, documentTitle])\n\n  return null\n})\n","import {WarningOutlineIcon} from '@sanity/icons'\nimport {type PreviewValue, type SanityDocument, type SchemaType} from '@sanity/types'\nimport {assignWith} from 'lodash'\nimport {type ReactNode} from 'react'\nimport {combineLatest, type Observable, of} from 'rxjs'\nimport {map, startWith} from 'rxjs/operators'\nimport {type DocumentPreviewStore, getDraftId, getPublishedId} from 'sanity'\n\nimport {type PaneItemPreviewState} from './types'\n\nexport const isLiveEditEnabled = (schemaType: SchemaType) => schemaType.liveEdit === true\n\nexport const getMissingDocumentFallback = (item: SanityDocument) => ({\n  title: <em>{item.title ? String(item.title) : 'Missing document'}</em>,\n  subtitle: <em>{item.title ? `Missing document ID: ${item._id}` : `Document ID: ${item._id}`}</em>,\n  media: () => <WarningOutlineIcon />,\n})\n\nexport const getValueWithFallback = ({\n  value,\n  draft,\n  published,\n}: {\n  value: SanityDocument\n  draft?: Partial<SanityDocument> | PreviewValue | null\n  published?: Partial<SanityDocument> | PreviewValue | null\n}) => {\n  const snapshot = draft || published\n\n  if (!snapshot) {\n    return getMissingDocumentFallback(value)\n  }\n\n  return assignWith({}, snapshot, value, (objValue, srcValue) => {\n    return typeof srcValue === 'undefined' ? objValue : srcValue\n  })\n}\n\nexport function getPreviewStateObservable(\n  documentPreviewStore: DocumentPreviewStore,\n  schemaType: SchemaType,\n  documentId: string,\n  title: ReactNode,\n): Observable<PaneItemPreviewState> {\n  const draft$ = isLiveEditEnabled(schemaType)\n    ? of({snapshot: null})\n    : documentPreviewStore.observeForPreview(\n        {_type: 'reference', _ref: getDraftId(documentId)},\n        schemaType,\n      )\n\n  const published$ = documentPreviewStore.observeForPreview(\n    {_type: 'reference', _ref: getPublishedId(documentId)},\n    schemaType,\n  )\n\n  return combineLatest([draft$, published$]).pipe(\n    map(([draft, published]) => ({\n      draft: draft.snapshot ? {title, ...(draft.snapshot || {})} : null,\n      isLoading: false,\n      published: published.snapshot ? {title, ...(published.snapshot || {})} : null,\n    })),\n    startWith({draft: null, isLoading: true, published: null}),\n  )\n}\n","import {CloseIcon} from '@sanity/icons'\nimport {Box, Card, type CardProps, Flex, Text} from '@sanity/ui'\nimport {type HTMLProps, type ReactNode} from 'react'\nimport {useTranslation} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Button} from '../../../../ui-components'\nimport {structureLocaleNamespace} from '../../../i18n'\n\nexport interface DocumentInspectorHeaderProps {\n  as?: CardProps['as']\n  closeButtonLabel: string\n  flex?: CardProps['flex']\n  onClose: () => void\n  title: ReactNode\n}\n\nconst Root = styled(Card)({\n  position: 'relative',\n  zIndex: 1,\n  lineHeight: 0,\n})\n\n/** @internal */\nexport function DocumentInspectorHeader(\n  props: DocumentInspectorHeaderProps & Omit<HTMLProps<HTMLDivElement>, 'as' | 'height' | 'ref'>,\n) {\n  const {as: forwardedAs, children, closeButtonLabel, onClose, title, ...restProps} = props\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  return (\n    <Root {...restProps} as={forwardedAs}>\n      <Flex padding={2}>\n        <Box flex={1} padding={3}>\n          <Text as=\"h1\" size={1} weight=\"medium\">\n            {title}\n          </Text>\n        </Box>\n        <Box flex=\"none\" padding={1}>\n          <Button\n            aria-label={closeButtonLabel}\n            icon={CloseIcon}\n            mode=\"bleed\"\n            onClick={onClose}\n            tooltipProps={{content: t('document-inspector.close-button.tooltip')}}\n          />\n        </Box>\n      </Flex>\n      {children}\n    </Root>\n  )\n}\n","import {Box} from '@sanity/ui'\nimport {useCallback} from 'react'\nimport {Resizable} from 'sanity'\n\nimport {usePane} from '../../../components'\nimport {useStructureTool} from '../../../useStructureTool'\nimport {DOCUMENT_INSPECTOR_MAX_WIDTH, DOCUMENT_INSPECTOR_MIN_WIDTH} from '../constants'\nimport {useDocumentPane} from '../useDocumentPane'\n\ninterface DocumentInspectorPanelProps {\n  documentId: string\n  documentType: string\n  flex?: number | number[]\n}\n\nexport function DocumentInspectorPanel(\n  props: DocumentInspectorPanelProps,\n): React.JSX.Element | null {\n  const {documentId, documentType, flex} = props\n  const {collapsed} = usePane()\n  const {closeInspector, inspector} = useDocumentPane()\n  const {features} = useStructureTool()\n\n  const handleClose = useCallback(() => {\n    if (inspector) closeInspector(inspector.name)\n  }, [closeInspector, inspector])\n\n  if (collapsed || !inspector) return null\n\n  const Component = inspector.component\n  const element = (\n    <Component onClose={handleClose} documentId={documentId} documentType={documentType} />\n  )\n\n  if (features.resizablePanes) {\n    return (\n      <Resizable\n        as=\"aside\"\n        data-ui=\"DocumentInspectorPanel\"\n        flex={flex}\n        resizerPosition=\"left\"\n        maxWidth={DOCUMENT_INSPECTOR_MAX_WIDTH}\n        minWidth={DOCUMENT_INSPECTOR_MIN_WIDTH}\n      >\n        {element}\n      </Resizable>\n    )\n  }\n\n  return (\n    <Box as=\"aside\" data-ui=\"DocumentInspectorPanel\" flex={flex}>\n      {element}\n    </Box>\n  )\n}\n","import {useCallback, useMemo} from 'react'\nimport {useObservable} from 'react-rx'\nimport {map} from 'rxjs/operators'\nimport {useKeyValueStore} from 'sanity'\n\nconst STRUCTURE_TOOL_NAMESPACE = 'studio.structure-tool'\n\n/**\n * @internal\n */\nexport function useStructureToolSetting<ValueType>(\n  namespace: string,\n  key: string | null,\n  defaultValue?: ValueType,\n): [ValueType | undefined, (_value: ValueType) => void] {\n  const keyValueStore = useKeyValueStore()\n\n  const keyValueStoreKey = [STRUCTURE_TOOL_NAMESPACE, namespace, key].filter(Boolean).join('.')\n\n  const value$ = useMemo(() => {\n    return keyValueStore\n      .getKey(keyValueStoreKey)\n      .pipe(map((value) => (value === null ? defaultValue : value)))\n  }, [defaultValue, keyValueStore, keyValueStoreKey])\n\n  const value = useObservable(value$, defaultValue) as ValueType\n  const set = useCallback(\n    (newValue: ValueType) => {\n      if (newValue !== value) {\n        keyValueStore.setKey(keyValueStoreKey, newValue as string)\n      }\n    },\n    [keyValueStore, keyValueStoreKey, value],\n  )\n\n  return useMemo(() => [value, set], [set, value])\n}\n","export const VIEW_MODE_PARSED = {id: 'parsed', title: 'document-inspector.view-mode.parsed'}\nexport const VIEW_MODE_RAW = {id: 'raw', title: 'document-inspector.view-mode.raw-json'}\nexport const VIEW_MODES = [VIEW_MODE_PARSED, VIEW_MODE_RAW]\n","import {type SanityDocumentLike} from '@sanity/types'\nimport LRU from 'quick-lru'\nimport {isRecord, isString} from 'sanity'\n\nconst lru = new LRU({maxSize: 1000})\n\nexport function isExpanded(keyPath: any, value: any): any {\n  const cached = lru.get(keyPath)\n\n  if (cached === undefined) {\n    lru.set(keyPath, Array.isArray(value) || isRecord(value))\n    return isExpanded(keyPath, value)\n  }\n\n  return cached\n}\n\nexport function toggleExpanded(event: any): void {\n  const {path} = event\n  const current = lru.get(path)\n\n  if (current === undefined) {\n    // something is wrong\n    return\n  }\n\n  lru.set(path, !current)\n}\n\nexport function selectElement(element: HTMLElement): void {\n  const sel = window.getSelection()\n\n  if (sel) {\n    const range = document.createRange()\n\n    sel.removeAllRanges()\n    range.selectNodeContents(element)\n    sel.addRange(range)\n  }\n}\n\nexport function select(event: any): void {\n  selectElement(event.currentTarget)\n}\n\nexport function maybeSelectAll(event: any): void {\n  const selectAll = event.keyCode === 65 && (event.metaKey || event.ctrlKey)\n\n  if (!selectAll) {\n    return\n  }\n\n  event.preventDefault()\n\n  selectElement(event.currentTarget)\n}\n\nexport function isDocumentLike(value: unknown): value is SanityDocumentLike {\n  return isRecord(value) && isString(value._id) && isString(value._type)\n}\n","import {rem, type Theme} from '@sanity/ui'\nimport {css, styled} from 'styled-components'\n\nexport const JSONInspectorWrapper = styled.div(({theme}: {theme: Theme}) => {\n  const {color, fonts, space} = theme.sanity\n\n  return css`\n    & .json-inspector,\n    & .json-inspector .json-inspector__selection {\n      font-family: ${fonts.code.family};\n      font-size: ${fonts.code.sizes[1].fontSize}px;\n      line-height: ${fonts.code.sizes[1].lineHeight}px;\n      color: var(--card-code-fg-color);\n    }\n\n    & .json-inspector .json-inspector__leaf {\n      padding-left: ${rem(space[4])};\n    }\n\n    & .json-inspector .json-inspector__leaf.json-inspector__leaf_root {\n      padding-top: ${rem(space[3])};\n      padding-left: 0;\n    }\n\n    & .json-inspector > .json-inspector__leaf_root > .json-inspector__line > .json-inspector__key {\n      display: none;\n    }\n\n    & .json-inspector .json-inspector__line {\n      display: block;\n      position: relative;\n      cursor: default;\n    }\n\n    & .json-inspector .json-inspector__line::after {\n      content: '';\n      position: absolute;\n      top: 0;\n      left: -200px;\n      right: -50px;\n      bottom: 0;\n      z-index: -1;\n      pointer-events: none;\n    }\n\n    & .json-inspector .json-inspector__line:hover::after {\n      background: var(--card-code-bg-color);\n    }\n\n    & .json-inspector .json-inspector__leaf_composite > .json-inspector__line {\n      cursor: pointer;\n    }\n\n    & .json-inspector .json-inspector__leaf_composite > .json-inspector__line::before {\n      content: '▸ ';\n      margin-left: calc(0 - ${rem(space[4])} + 3px);\n      font-size: ${fonts.code.sizes[1].fontSize}px;\n      line-height: ${fonts.code.sizes[1].lineHeight}px;\n    }\n\n    &\n      .json-inspector\n      .json-inspector__leaf_expanded.json-inspector__leaf_composite\n      > .json-inspector__line::before {\n      content: '▾ ';\n      font-size: ${fonts.code.sizes[1].fontSize}px;\n      line-height: ${fonts.code.sizes[1].lineHeight}px;\n    }\n\n    & .json-inspector .json-inspector__radio,\n    & .json-inspector .json-inspector__flatpath {\n      display: none;\n    }\n\n    & .json-inspector .json-inspector__value {\n      margin-left: ${rem(space[4] / 2)};\n    }\n\n    &\n      .json-inspector\n      > .json-inspector__leaf_root\n      > .json-inspector__line\n      > .json-inspector__key\n      + .json-inspector__value {\n      margin: 0;\n    }\n\n    & .json-inspector .json-inspector__key {\n      color: ${color.syntax.property};\n    }\n\n    & .json-inspector .json-inspector__value_helper,\n    & .json-inspector .json-inspector__value_null {\n      color: ${color.syntax.constant};\n    }\n\n    & .json-inspector .json-inspector__not-found {\n      padding-top: ${rem(space[3])};\n    }\n\n    & .json-inspector .json-inspector__value_string {\n      color: ${color.syntax.string};\n    }\n\n    & .json-inspector .json-inspector__value_boolean {\n      color: ${color.syntax.boolean};\n    }\n\n    & .json-inspector .json-inspector__value_number {\n      color: ${color.syntax.number};\n    }\n\n    & .json-inspector .json-inspector__show-original {\n      display: inline-block;\n      padding: 0 6px;\n      cursor: pointer;\n    }\n\n    & .json-inspector .json-inspector__show-original:hover {\n      color: inherit;\n    }\n\n    & .json-inspector .json-inspector__show-original::before {\n      content: '↔';\n    }\n\n    & .json-inspector .json-inspector__show-original:hover::after {\n      content: ' expand';\n    }\n  `\n})\n","import {SearchIcon} from '@sanity/icons'\nimport {TextInput} from '@sanity/ui'\nimport {type ChangeEvent, useCallback} from 'react'\nimport {useTranslation} from 'sanity'\n\nimport {structureLocaleNamespace} from '../../../i18n'\n\nexport function Search(props: {onChange: (q: string) => void; query: string}) {\n  const {onChange, query} = props\n\n  const handleChange = useCallback(\n    (event: ChangeEvent<HTMLInputElement>) => onChange(event.target.value),\n    [onChange],\n  )\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  return (\n    <TextInput\n      icon={SearchIcon}\n      onChange={handleChange}\n      placeholder={t('document-inspector.search.placeholder')}\n      radius={2}\n      value={query || ''}\n    />\n  )\n}\n","import {JsonInspector} from '@rexxars/react-json-inspector'\nimport {type SanityDocument} from '@sanity/types'\nimport {Card, Code, Flex, TabList, TabPanel} from '@sanity/ui'\nimport {useCallback} from 'react'\nimport {Translate, useTranslation} from 'sanity'\n\nimport {Dialog, Tab} from '../../../../ui-components'\nimport {DocTitle} from '../../../components'\nimport {structureLocaleNamespace} from '../../../i18n'\nimport {useStructureToolSetting} from '../../../useStructureToolSetting'\nimport {useDocumentPane} from '../useDocumentPane'\nimport {VIEW_MODE_PARSED, VIEW_MODE_RAW, VIEW_MODES} from './constants'\nimport {isDocumentLike, isExpanded, maybeSelectAll, select, toggleExpanded} from './helpers'\nimport {JSONInspectorWrapper} from './InspectDialog.styles'\nimport {Search} from './Search'\n\ninterface InspectDialogProps {\n  value: Partial<SanityDocument> | null\n}\n\nexport function InspectDialog(props: InspectDialogProps) {\n  const {value} = props\n  const {onInspectClose, paneKey} = useDocumentPane()\n  const dialogIdPrefix = `${paneKey}_inspect_`\n\n  /* this creates a view mode (the default that it opens with is the parsed tab) that is saved based on the paneKey\n  where the inspect dialog lives.\n  This also means that when a page is loaded, the state of the tabs remains and doesn't revert to the pane tab */\n  const [viewModeId, onViewModeChange] = useStructureToolSetting(\n    'inspect-view-mode',\n    null,\n    'parsed',\n  )\n\n  /* based on the view mode it shows the right tab content */\n  const viewMode = VIEW_MODES.find((mode) => mode.id === viewModeId)\n\n  const setParsedViewMode = useCallback(() => {\n    onViewModeChange(VIEW_MODE_PARSED.id)\n  }, [onViewModeChange])\n\n  const setRawViewMode = useCallback(() => {\n    onViewModeChange(VIEW_MODE_RAW.id)\n  }, [onViewModeChange])\n\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  return (\n    <Dialog\n      bodyHeight=\"fill\"\n      id={`${dialogIdPrefix}dialog`}\n      header={\n        isDocumentLike(value) ? (\n          <Translate\n            t={t}\n            i18nKey=\"document-inspector.dialog.title\"\n            components={{\n              DocumentTitle: () => (\n                <em>\n                  <DocTitle document={value} />\n                </em>\n              ),\n            }}\n          />\n        ) : (\n          <em>{t('document-inspector.dialog.title-no-value')}</em>\n        )\n      }\n      onClose={onInspectClose}\n      onClickOutside={onInspectClose}\n      padding={false}\n      width={2}\n    >\n      <Flex direction=\"column\" height=\"fill\">\n        <Card\n          padding={3}\n          paddingTop={0}\n          shadow={1}\n          style={{position: 'sticky', bottom: 0, zIndex: 3}}\n        >\n          <TabList space={1}>\n            <Tab\n              aria-controls={`${dialogIdPrefix}tabpanel`}\n              id={`${dialogIdPrefix}tab-${VIEW_MODE_PARSED.id}`}\n              label={t(VIEW_MODE_PARSED.title)}\n              onClick={setParsedViewMode}\n              selected={viewMode === VIEW_MODE_PARSED}\n            />\n            <Tab\n              aria-controls={`${dialogIdPrefix}tabpanel`}\n              id={`${dialogIdPrefix}tab-${VIEW_MODE_RAW.id}`}\n              label={t(VIEW_MODE_RAW.title)}\n              onClick={setRawViewMode}\n              selected={viewMode === VIEW_MODE_RAW}\n            />\n          </TabList>\n        </Card>\n\n        <TabPanel\n          aria-labelledby={`${dialogIdPrefix}tab-${viewModeId}`}\n          flex={1}\n          id={`${dialogIdPrefix}tabpanel`}\n          overflow=\"auto\"\n          padding={4}\n          style={{outline: 'none'}}\n        >\n          {viewMode === VIEW_MODE_PARSED && (\n            <JSONInspectorWrapper>\n              <JsonInspector\n                data={value}\n                isExpanded={isExpanded}\n                onClick={toggleExpanded}\n                search={Search}\n                filterOptions={{ignoreCase: true}}\n              />\n            </JSONInspectorWrapper>\n          )}\n\n          {viewMode === VIEW_MODE_RAW && (\n            <Code\n              language=\"json\"\n              tabIndex={0}\n              onKeyDown={maybeSelectAll}\n              onDoubleClick={select}\n              onFocus={select}\n              size={1}\n            >\n              {JSON.stringify(value, null, 2)}\n            </Code>\n          )}\n        </TabPanel>\n      </Flex>\n    </Dialog>\n  )\n}\n","import {type ButtonMode, type ButtonTone, Card, type CardTone, Flex, Text} from '@sanity/ui'\nimport {type ComponentType, type ElementType, type ReactNode} from 'react'\n\nimport {Button} from '../../../../../ui-components'\n\ninterface BannerProps {\n  action?: {\n    as?: ElementType | keyof React.JSX.IntrinsicElements\n    icon?: ComponentType\n    onClick?: () => void\n    text: string\n    tone?: ButtonTone\n    disabled?: boolean\n    mode?: ButtonMode\n  }\n  content: ReactNode\n  icon?: ComponentType\n  tone?: CardTone\n  paddingY?: number\n}\n\nexport function Banner(props: BannerProps) {\n  const {action, content, icon: Icon, tone = 'transparent', paddingY = 2, ...rest} = props\n\n  return (\n    <Card borderBottom paddingX={4} paddingY={paddingY} tone={tone} {...rest}>\n      <Flex align=\"center\" gap={3}>\n        {Icon && (\n          <Text size={0}>\n            <Icon />\n          </Text>\n        )}\n\n        <Flex align=\"center\" flex={1} gap={2} paddingY={3}>\n          {content}\n        </Flex>\n\n        {action && (\n          <Button {...action} mode={action.mode || 'ghost'} tone={action.tone || 'default'} />\n        )}\n      </Flex>\n    </Card>\n  )\n}\n","import {DocumentRemoveIcon, ReadOnlyIcon} from '@sanity/icons'\nimport {Text} from '@sanity/ui'\nimport {useCallback} from 'react'\nimport {\n  isDraftPerspective,\n  isPublishedPerspective,\n  type ReleaseDocument,\n  Translate,\n  useDocumentOperation,\n  usePerspective,\n  useTranslation,\n} from 'sanity'\nimport {useRouter} from 'sanity/router'\n\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {useDocumentPane} from '../../useDocumentPane'\nimport {Banner} from './Banner'\n\nexport function DeletedDocumentBanners() {\n  const {isDeleted, isDeleting} = useDocumentPane()\n  const {selectedPerspective} = usePerspective()\n\n  if (\n    !isPublishedPerspective(selectedPerspective) &&\n    !isDraftPerspective(selectedPerspective) &&\n    selectedPerspective.state === 'archived'\n  ) {\n    return <ArchivedReleaseBanner release={selectedPerspective as ReleaseDocument} />\n  }\n  if (isDeleted && !isDeleting) return <DeletedDocumentBanner />\n}\n\nfunction DeletedDocumentBanner() {\n  const {documentId, documentType, lastNonDeletedRevId} = useDocumentPane()\n  const {restore} = useDocumentOperation(documentId, documentType)\n  const {navigateIntent} = useRouter()\n\n  const handleRestore = useCallback(() => {\n    if (lastNonDeletedRevId) {\n      restore.execute(lastNonDeletedRevId)\n      navigateIntent('edit', {id: documentId, type: documentType})\n    }\n  }, [documentId, documentType, navigateIntent, restore, lastNonDeletedRevId])\n\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  return (\n    <Banner\n      action={\n        lastNonDeletedRevId\n          ? {\n              onClick: handleRestore,\n              text: t('banners.deleted-document-banner.restore-button.text'),\n            }\n          : undefined\n      }\n      content={\n        <Text size={1} weight=\"medium\">\n          {t('banners.deleted-document-banner.text')}\n        </Text>\n      }\n      data-testid=\"deleted-document-banner\"\n      icon={ReadOnlyIcon}\n    />\n  )\n}\n\nconst ArchivedReleaseBanner = ({release}: {release: ReleaseDocument}) => {\n  const {t} = useTranslation()\n\n  return (\n    <Banner\n      tone=\"caution\"\n      content={\n        <Text size={1} weight=\"medium\">\n          <Translate\n            t={t}\n            i18nKey=\"banners.deleted-release-banner.text\"\n            values={{title: release.metadata?.title}}\n          />\n        </Text>\n      }\n      data-testid=\"deleted-release-banner\"\n      icon={DocumentRemoveIcon}\n    />\n  )\n}\n","import {ErrorOutlineIcon} from '@sanity/icons'\nimport {Text} from '@sanity/ui'\nimport {isDeprecatedSchemaType, Translate, useTranslation} from 'sanity'\n\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {useDocumentPane} from '../../useDocumentPane'\nimport {Banner} from './Banner'\n\nexport function DeprecatedDocumentTypeBanner() {\n  const {schemaType} = useDocumentPane()\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  if (!isDeprecatedSchemaType(schemaType)) {\n    return null\n  }\n\n  return (\n    <Banner\n      content={\n        <Text size={1} weight=\"medium\">\n          <Translate t={t} i18nKey=\"banners.deprecated-document-type-banner.text\" />{' '}\n          {schemaType.deprecated.reason}\n        </Text>\n      }\n      data-testid=\"deprecated-document-type-banner\"\n      icon={ErrorOutlineIcon}\n    />\n  )\n}\n","import {defineEvent} from '@sanity/telemetry'\n\n/** @internal */\nexport const AskToEditDialogOpened = defineEvent({\n  name: 'Ask To Edit Dialog Opened',\n  version: 1,\n  description: 'User clicked the \"Ask to edit\" button in the document permissions banner',\n})\n\n/** @internal */\nexport const AskToEditRequestSent = defineEvent({\n  name: 'Ask To Edit Request Sent',\n  version: 1,\n  description: 'User sent a role change request from the dialog',\n})\n","import {useTelemetry} from '@sanity/telemetry/react'\nimport {Box, Card, DialogProvider, Flex, Stack, Text, TextInput, useToast} from '@sanity/ui'\nimport {useId, useMemo, useState} from 'react'\nimport {useObservable} from 'react-rx'\nimport {catchError, map, type Observable, of, startWith} from 'rxjs'\nimport {type Role, useClient, useProjectId, useTranslation, useZIndex} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Dialog} from '../../../ui-components'\nimport {structureLocaleNamespace} from '../../i18n'\nimport {AskToEditRequestSent} from './__telemetry__/RequestPermissionDialog.telemetry'\nimport {type AccessRequest} from './useRoleRequestsStatus'\n\nconst MAX_NOTE_LENGTH = 150\n\n/** @internal */\nexport const DialogBody = styled(Box)`\n  box-sizing: border-box;\n`\n\n/** @internal */\nexport const LoadingContainer = styled(Flex).attrs({\n  align: 'center',\n  direction: 'column',\n  justify: 'center',\n})`\n  height: 110px;\n`\n\n/** @internal */\nexport interface RequestPermissionDialogProps {\n  onClose?: () => void\n  onRequestSubmitted?: () => void\n}\n\n/**\n * A dialog that enables the user to request permission to change their\n * member role from \"Viewer\" to \"Editor\" or \"Admin\" depending on the\n * project's available roles.\n *\n * @internal\n */\nexport function RequestPermissionDialog({\n  onClose,\n  onRequestSubmitted,\n}: RequestPermissionDialogProps) {\n  const {t} = useTranslation(structureLocaleNamespace)\n  const telemtry = useTelemetry()\n  const dialogId = `request-permissions-${useId()}`\n  const projectId = useProjectId()\n  const client = useClient({apiVersion: '2024-09-26'})\n  const toast = useToast()\n  const zOffset = useZIndex()\n\n  const [isSubmitting, setIsSubmitting] = useState(false)\n\n  const [note, setNote] = useState('')\n\n  const [msgError, setMsgError] = useState<string | undefined>()\n  const [hasTooManyRequests, setHasTooManyRequests] = useState<boolean>(false)\n  const [hasBeenDenied, setHasBeenDenied] = useState<boolean>(false)\n\n  const requestedRole$: Observable<'administrator' | 'editor'> = useMemo(() => {\n    const adminRole = 'administrator' as const\n    if (!projectId || !client) return of(adminRole)\n    return client.observable\n      .request<(Role & {appliesToUsers?: boolean})[]>({url: `/projects/${projectId}/roles`})\n      .pipe(\n        map((roles) => {\n          const hasEditor = roles\n            .filter((role) => role?.appliesToUsers)\n            .find((role) => role.name === 'editor')\n          return hasEditor ? 'editor' : adminRole\n        }),\n        startWith(adminRole),\n        catchError(() => of(adminRole)),\n      )\n  }, [projectId, client])\n\n  const requestedRole = useObservable(requestedRole$)\n\n  const onSubmit = () => {\n    setIsSubmitting(true)\n    client\n      .request<AccessRequest | null>({\n        url: `/access/project/${projectId}/requests`,\n        method: 'post',\n        body: {note, requestUrl: window?.location.href, requestedRole, type: 'role'},\n      })\n      .then((request) => {\n        if (request) {\n          if (onRequestSubmitted) onRequestSubmitted()\n          telemtry.log(AskToEditRequestSent)\n          toast.push({title: 'Edit access requested'})\n        }\n      })\n      .catch((err) => {\n        const statusCode = err?.response?.statusCode\n        const errMessage = err?.response?.body?.message\n        if (statusCode === 429) {\n          // User is over their cross-project request limit\n          setHasTooManyRequests(true)\n          setMsgError(errMessage)\n        }\n        if (statusCode === 409) {\n          // If we get a 409, user has been denied on this project or has a valid pending request\n          // valid pending request should be handled by GET request above\n          setHasBeenDenied(true)\n          setMsgError(errMessage)\n        } else {\n          toast.push({\n            title: 'There was a problem submitting your request.',\n            status: 'error',\n          })\n        }\n      })\n      .finally(() => {\n        setIsSubmitting(false)\n      })\n  }\n\n  return (\n    <DialogProvider position={'fixed'} zOffset={zOffset.fullscreen}>\n      <Dialog\n        width={1}\n        id={dialogId}\n        header={t('request-permission-dialog.header.text')}\n        footer={{\n          cancelButton: {\n            onClick: onClose,\n            text: t('confirm-dialog.cancel-button.fallback-text'),\n          },\n          confirmButton: {\n            onClick: onSubmit,\n            loading: isSubmitting,\n            disabled: hasTooManyRequests || hasBeenDenied,\n            text: t('request-permission-dialog.confirm-button.text'),\n            tone: 'primary',\n            type: 'submit',\n          },\n        }}\n        onClose={onClose}\n        onClickOutside={onClose}\n      >\n        <DialogBody>\n          <Stack space={4}>\n            <Text>{t('request-permission-dialog.description.text')}</Text>\n            {hasTooManyRequests || hasBeenDenied ? (\n              <Card tone={'caution'} padding={3} radius={2} shadow={1}>\n                <Text size={1}>\n                  {hasTooManyRequests && (\n                    <>{msgError ?? t('request-permission-dialog.warning.limit-reached.text')}</>\n                  )}\n                  {hasBeenDenied && (\n                    <>{msgError ?? t('request-permission-dialog.warning.denied.text')}</>\n                  )}\n                </Text>\n              </Card>\n            ) : (\n              <Stack space={3} paddingBottom={0}>\n                <TextInput\n                  placeholder={t('request-permission-dialog.note-input.placeholder.text')}\n                  disabled={isSubmitting}\n                  onKeyDown={(e) => {\n                    if (e.key === 'Enter') onSubmit()\n                  }}\n                  maxLength={MAX_NOTE_LENGTH}\n                  value={note}\n                  onChange={(e) => {\n                    setNote(e.currentTarget.value)\n                  }}\n                />\n\n                <Text align=\"right\" muted size={1}>{`${note.length}/${MAX_NOTE_LENGTH}`}</Text>\n              </Stack>\n            )}\n          </Stack>\n        </DialogBody>\n      </Dialog>\n    </DialogProvider>\n  )\n}\n","import {addWeeks, isAfter, isBefore} from 'date-fns'\nimport {useMemo} from 'react'\nimport {useObservable} from 'react-rx'\nimport {of} from 'rxjs'\nimport {catchError, map, startWith} from 'rxjs/operators'\nimport {type SanityClient, useClient, useProjectId} from 'sanity'\n\n/** @internal */\nexport interface AccessRequest {\n  id: string\n  status: 'pending' | 'accepted' | 'declined'\n  resourceId: string\n  resourceType: 'project'\n  createdAt: string\n  updatedAt: string\n  updatedByUserId: string\n  requestedByUserId: string\n  requestedRole: string\n  type: 'access' | 'role'\n  note: string\n}\n\nconst LOADING_STATE = {loading: true, error: false, status: undefined}\nconst EMPTY_STATE = {loading: false, error: false, status: 'none'}\nconst DECLINED_STATE = {loading: false, error: false, status: 'declined'}\nconst PENDING_STATE = {loading: false, error: false, status: 'pending'}\nconst EXPIRED_STATE = {loading: false, error: false, status: 'expired'}\n\n/** @internal */\nexport const useRoleRequestsStatus = () => {\n  const client = useClient({apiVersion: '2024-07-01'})\n  const projectId = useProjectId()\n\n  const checkRoleRequests$ = useMemo(() => {\n    if (!client || !projectId) {\n      return of(EMPTY_STATE)\n    }\n\n    return checkRoleRequests(client, projectId)\n  }, [client, projectId])\n\n  const {loading, error, status} = useObservable(checkRoleRequests$, LOADING_STATE)\n  return {data: status, loading, error}\n}\n\nfunction checkRoleRequests(client: SanityClient, projectId: string) {\n  return client.observable\n    .request<AccessRequest[] | null>({\n      url: '/access/requests/me',\n      tag: 'use-role-requests-status',\n    })\n    .pipe(\n      map((requests) => {\n        if (!requests || requests.length === 0) {\n          return EMPTY_STATE\n        }\n\n        // Filter requests for the specific project and where type is 'role'\n        const projectRequests = requests.filter(\n          (request) => request.resourceId === projectId && request.type === 'role',\n        )\n\n        const declinedRequest = projectRequests.find((request) => request.status === 'declined')\n        if (\n          declinedRequest &&\n          isAfter(addWeeks(new Date(declinedRequest.createdAt), 2), new Date())\n        ) {\n          return DECLINED_STATE\n        }\n\n        const pendingRequest = projectRequests.find(\n          (request) =>\n            request.status === 'pending' &&\n            isAfter(addWeeks(new Date(request.createdAt), 2), new Date()),\n        )\n        if (pendingRequest) {\n          return PENDING_STATE\n        }\n\n        const oldPendingRequest = projectRequests.find(\n          (request) =>\n            request.status === 'pending' &&\n            isBefore(addWeeks(new Date(request.createdAt), 2), new Date()),\n        )\n\n        return oldPendingRequest ? EXPIRED_STATE : EMPTY_STATE\n      }),\n      catchError((err) => {\n        console.error('Failed to fetch access requests', err)\n        return of({loading: false, error: true, status: undefined})\n      }),\n      startWith(LOADING_STATE), // Start with loading state\n    )\n}\n","import {ReadOnlyIcon} from '@sanity/icons'\nimport {useTelemetry} from '@sanity/telemetry/react'\nimport {Text} from '@sanity/ui'\nimport {useMemo, useState} from 'react'\nimport {Translate, useCurrentUser, useListFormat, useTranslation} from 'sanity'\n\nimport {\n  RequestPermissionDialog,\n  useRoleRequestsStatus,\n} from '../../../../components/requestPermissionDialog'\nimport {AskToEditDialogOpened} from '../../../../components/requestPermissionDialog/__telemetry__/RequestPermissionDialog.telemetry'\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {Banner} from './Banner'\n\ninterface InsufficientPermissionBannerProps {\n  requiredPermission: 'update' | 'create'\n}\n\nexport function InsufficientPermissionBanner({\n  requiredPermission,\n}: InsufficientPermissionBannerProps) {\n  const currentUser = useCurrentUser()\n\n  const {\n    data: roleRequestStatus,\n    loading: requestStatusLoading,\n    error: requestStatusError,\n  } = useRoleRequestsStatus()\n  const [requestSent, setRequestSent] = useState(false)\n  const requestPending = useMemo(\n    () => roleRequestStatus === 'pending' || roleRequestStatus === 'declined' || requestSent,\n    [roleRequestStatus, requestSent],\n  )\n  const currentUserRoles = currentUser?.roles || []\n  const isOnlyViewer = currentUserRoles.length === 1 && currentUserRoles[0].name === 'viewer'\n  const [showRequestPermissionDialog, setShowRequestPermissionDialog] = useState(false)\n\n  const listFormat = useListFormat({style: 'short'})\n  const {t} = useTranslation(structureLocaleNamespace)\n  const telemetry = useTelemetry()\n\n  const roleTitles = currentUserRoles.map((role) => role.title)\n  const roles = listFormat\n    .formatToParts(roleTitles)\n    .map((part) =>\n      part.type === 'element' ? <code key={part.value}>{part.value}</code> : part.value,\n    )\n\n  return (\n    <>\n      <Banner\n        content={\n          <Text size={1} weight=\"medium\">\n            <Translate\n              t={t}\n              i18nKey=\"banners.permission-check-banner.missing-permission\"\n              components={{Roles: () => <>{roles}</>}}\n              values={{count: roles.length, roles: roleTitles}}\n              context={requiredPermission}\n            />\n          </Text>\n        }\n        action={\n          isOnlyViewer && roleRequestStatus && !requestStatusError && !requestStatusLoading\n            ? {\n                onClick: requestPending\n                  ? undefined\n                  : () => {\n                      setShowRequestPermissionDialog(true)\n                      telemetry.log(AskToEditDialogOpened)\n                    },\n                text: requestPending\n                  ? t('banners.permission-check-banner.request-permission-button.sent')\n                  : t('banners.permission-check-banner.request-permission-button.text'),\n                tone: requestPending ? 'default' : 'primary',\n                disabled: requestPending,\n                mode: requestPending ? 'bleed' : undefined,\n              }\n            : undefined\n        }\n        data-testid=\"permission-check-banner\"\n        icon={ReadOnlyIcon}\n      />\n      {showRequestPermissionDialog && (\n        <RequestPermissionDialog\n          onClose={() => setShowRequestPermissionDialog(false)}\n          onRequestSubmitted={() => {\n            setRequestSent(true)\n            setShowRequestPermissionDialog(false)\n          }}\n        />\n      )}\n    </>\n  )\n}\n","import {CloseIcon, SyncIcon, WarningOutlineIcon} from '@sanity/icons'\nimport {type KeyedSegment, type Reference} from '@sanity/types'\nimport {Text} from '@sanity/ui'\nimport {fromString as pathFromString, get as pathGet} from '@sanity/util/paths'\nimport {memo, useCallback, useMemo} from 'react'\nimport {useObservable} from 'react-rx'\nimport {concat, type Observable, of} from 'rxjs'\nimport {debounceTime, map} from 'rxjs/operators'\nimport {\n  type DocumentAvailability,\n  getPublishedId,\n  useDocumentPreviewStore,\n  usePerspective,\n  useTranslation,\n} from 'sanity'\n\nimport {usePaneRouter} from '../../../../components'\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {type RouterPaneGroup} from '../../../../types'\nimport {Banner} from './Banner'\n\ninterface ParentReferenceInfo {\n  loading: boolean\n  result?: {\n    availability: {\n      draft: DocumentAvailability\n      published: DocumentAvailability\n      version?: DocumentAvailability\n    }\n    refValue: string | undefined\n  }\n}\n\nexport const ReferenceChangedBanner = memo(() => {\n  const documentPreviewStore = useDocumentPreviewStore()\n  const {selectedReleaseId} = usePerspective()\n  const {params, groupIndex, routerPanesState, replaceCurrent, BackLink} = usePaneRouter()\n  const routerReferenceId = routerPanesState[groupIndex]?.[0].id\n  const parentGroup = routerPanesState[groupIndex - 1] as RouterPaneGroup | undefined\n  const parentSibling = parentGroup?.[0]\n  const parentId = parentSibling?.id\n  const hasHistoryOpen = Boolean(parentSibling?.params?.rev)\n  const parentRefPath = useMemo(() => {\n    return (params?.parentRefPath && pathFromString(params.parentRefPath)) || null\n  }, [params?.parentRefPath])\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  /**\n   * Loads information regarding the reference field of the parent pane. This\n   * is only applicable to child references (aka references-in-place).\n   *\n   * It utilizes the pane ID of the parent pane (which is a document ID) along\n   * with the `parentRefPath` router param on the current pane to find the\n   * current value of the reference field on the parent document.\n   *\n   * This is used to compare with the current pane's document ID. If the IDs\n   * don't match then this banner should reveal itself\n   */\n  const referenceInfoObservable = useMemo((): Observable<ParentReferenceInfo> => {\n    const parentRefPathSegment = parentRefPath?.[0] as string | undefined\n\n    // short-circuit: this document pane is not a child reference pane\n    if (!parentId || !parentRefPathSegment || !parentRefPath) {\n      return of({loading: false})\n    }\n\n    const publishedId = getPublishedId(parentId)\n    const path = pathFromString(parentRefPathSegment)\n\n    // note: observePaths doesn't support keyed path segments, so we need to select the nearest parent\n    const keyedSegmentIndex = path.findIndex(\n      (p): p is KeyedSegment => typeof p == 'object' && '_key' in p,\n    )\n\n    return concat(\n      // emit a loading state instantly\n      of({loading: true}),\n      // then emit the values from watching the published ID's path\n      documentPreviewStore\n        .unstable_observePathsDocumentPair(\n          publishedId,\n          (keyedSegmentIndex === -1 ? path : path.slice(0, keyedSegmentIndex)) as string[][],\n          {\n            version: selectedReleaseId,\n          },\n        )\n        .pipe(\n          // this debounce time is needed to prevent flashing banners due to\n          // the router state updating faster than the content-lake state. we\n          // debounce to wait for more emissions because the value pulled\n          // initially could be stale.\n          debounceTime(750),\n          map(\n            ({draft, published, version}): ParentReferenceInfo => ({\n              loading: false,\n              result: {\n                availability: {\n                  draft: draft.availability,\n                  published: published.availability,\n                  ...(version?.availability\n                    ? {\n                        version: version.availability,\n                      }\n                    : {}),\n                },\n                refValue: pathGet<Reference>(\n                  version?.snapshot || draft.snapshot || published.snapshot,\n                  parentRefPath,\n                )?._ref,\n              },\n            }),\n          ),\n        ),\n    )\n  }, [selectedReleaseId, documentPreviewStore, parentId, parentRefPath])\n  const referenceInfo = useObservable(referenceInfoObservable, {loading: true})\n\n  const handleReloadReference = useCallback(() => {\n    if (referenceInfo.loading) return\n\n    if (referenceInfo.result?.refValue) {\n      replaceCurrent({\n        id: referenceInfo.result.refValue,\n        params: params as Record<string, string>,\n      })\n    }\n  }, [referenceInfo.loading, referenceInfo.result, replaceCurrent, params])\n\n  const shouldHide =\n    // if `parentId` or `parentRefPath` is not present then this banner is n/a\n    !parentId ||\n    !parentRefPath ||\n    // if viewing this pane via history, then hide\n    hasHistoryOpen ||\n    // if loading, hide\n    referenceInfo.loading ||\n    // if the parent document is not available (e.g. due to permission denied or\n    // not found) we don't want to display a warning here, but instead rely on the\n    // parent view to display the appropriate message\n    (!referenceInfo.result?.availability.draft.available &&\n      !referenceInfo.result?.availability.published.available) ||\n    // if the references are the same, then hide the reference changed banner\n    referenceInfo.result?.refValue === routerReferenceId\n\n  if (shouldHide) return null\n\n  return (\n    <Banner\n      action={\n        referenceInfo.result?.refValue\n          ? {\n              onClick: handleReloadReference,\n              icon: SyncIcon,\n              text: t('banners.reference-changed-banner.reason-changed.reload-button.text'),\n            }\n          : {\n              as: BackLink,\n              icon: CloseIcon,\n              text: t('banners.reference-changed-banner.reason-removed.close-button.text'),\n            }\n      }\n      data-testid=\"reference-changed-banner\"\n      content={\n        <Text size={1} weight=\"medium\">\n          {referenceInfo.result?.refValue\n            ? t('banners.reference-changed-banner.reason-changed.text')\n            : t('banners.reference-changed-banner.reason-removed.text')}\n        </Text>\n      }\n      icon={WarningOutlineIcon}\n      tone=\"caution\"\n    />\n  )\n})\n\nReferenceChangedBanner.displayName = 'Memo(ReferenceChangedBanner)'\n","import {Flex, Text} from '@sanity/ui'\nimport {type CSSProperties, useCallback} from 'react'\nimport {\n  getReleaseIdFromReleaseDocumentId,\n  getReleaseTone,\n  LATEST,\n  type ReleaseDocument,\n  Translate,\n  useTranslation,\n  useVersionOperations,\n} from 'sanity'\nimport {structureLocaleNamespace} from 'sanity/structure'\n\nimport {Button} from '../../../../../ui-components'\nimport {Banner} from './Banner'\n\nexport function AddToReleaseBanner({\n  documentId,\n  currentRelease,\n  value,\n}: {\n  documentId: string\n  currentRelease: ReleaseDocument\n  value?: Record<string, unknown>\n}): React.JSX.Element {\n  const tone = getReleaseTone(currentRelease ?? LATEST)\n  const {t} = useTranslation(structureLocaleNamespace)\n  const {t: tCore} = useTranslation()\n\n  const {createVersion} = useVersionOperations()\n\n  const handleAddToRelease = useCallback(async () => {\n    if (currentRelease._id) {\n      await createVersion(getReleaseIdFromReleaseDocumentId(currentRelease._id), documentId, value)\n    }\n  }, [createVersion, currentRelease._id, documentId, value])\n\n  return (\n    <Banner\n      tone={tone}\n      paddingY={0}\n      content={\n        <Flex align=\"center\" justify=\"space-between\" gap={1} flex={1}>\n          <Text size={1}>\n            <Translate\n              i18nKey=\"banners.release.not-in-release\"\n              t={t}\n              values={{\n                title:\n                  currentRelease?.metadata?.title || tCore('release.placeholder-untitled-release'),\n              }}\n              components={{\n                Label: ({children}) => {\n                  return (\n                    <span\n                      style={\n                        {\n                          color: `var(--card-badge-${tone ?? 'default'}-fg-color)`,\n                          backgroundColor: `var(--card-badge-${tone ?? 'default'}-bg-color)`,\n                          borderRadius: 3,\n                          textDecoration: 'none',\n                          padding: '0px 2px',\n                          fontWeight: 500,\n                        } as CSSProperties\n                      }\n                    >\n                      {children}\n                    </span>\n                  )\n                },\n              }}\n            />\n          </Text>\n\n          <Button\n            text={t('banners.release.action.add-to-release')}\n            tone={tone}\n            onClick={handleAddToRelease}\n          />\n        </Flex>\n      }\n    />\n  )\n}\n","import {Flex, Text} from '@sanity/ui'\nimport {useMemo} from 'react'\nimport {\n  getReleaseIdFromReleaseDocumentId,\n  getReleaseTone,\n  Translate,\n  useArchivedReleases,\n  useTranslation,\n  VersionInlineBadge,\n} from 'sanity'\nimport {structureLocaleNamespace, usePaneRouter} from 'sanity/structure'\n\nimport {Banner} from './Banner'\n\nexport function ArchivedReleaseDocumentBanner(): React.JSX.Element {\n  const {t} = useTranslation(structureLocaleNamespace)\n  const {data: archivedReleases} = useArchivedReleases()\n\n  const {params, setParams} = usePaneRouter()\n  const handleGoBack = () => {\n    setParams({\n      ...params,\n      rev: params?.historyEvent || undefined,\n      since: undefined,\n      historyVersion: undefined,\n    })\n  }\n\n  const release = useMemo(() => {\n    return archivedReleases.find(\n      (r) => getReleaseIdFromReleaseDocumentId(r._id) === params?.historyVersion,\n    )\n  }, [archivedReleases, params?.historyVersion])\n\n  const description =\n    release?.state === 'published'\n      ? 'banners.published-release.description'\n      : 'banners.archived-release.description'\n\n  return (\n    <Banner\n      tone=\"caution\"\n      paddingY={2}\n      content={\n        <Flex align=\"center\" justify=\"space-between\" gap={1} flex={1}>\n          <Text size={1}>\n            <Translate\n              t={t}\n              i18nKey={description}\n              components={{\n                VersionBadge: ({children}) => {\n                  if (!release) return children\n                  return (\n                    <VersionInlineBadge $tone={getReleaseTone(release)}>\n                      {release?.metadata.title}\n                    </VersionInlineBadge>\n                  )\n                },\n              }}\n            />\n          </Text>\n        </Flex>\n      }\n      action={{\n        text: 'Go back to published version',\n        onClick: handleGoBack,\n      }}\n    />\n  )\n}\n","import {defineEvent} from '@sanity/telemetry'\n\ninterface TypeInfo {\n  liveEditResolveType: 'publish' | 'discard'\n}\n\n/**\n * When a draft in a live edit document is published\n * @internal\n */\nexport const ResolvedLiveEdit = defineEvent<TypeInfo>({\n  name: 'Resolved LiveEdit Draft',\n  version: 1,\n  description: 'User resolved a draft of a live edit document to continue editing',\n})\n","import {type SanityDocument} from '@sanity/client'\nimport {ErrorOutlineIcon} from '@sanity/icons'\nimport {useTelemetry} from '@sanity/telemetry/react'\nimport {Flex, Text} from '@sanity/ui'\nimport {useCallback, useEffect, useState} from 'react'\nimport {type ObjectSchemaType, Translate, useDocumentOperation, useTranslation} from 'sanity'\n\nimport {Button} from '../../../../../ui-components'\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {ResolvedLiveEdit} from './__telemetry__/DraftLiveEditBanner.telemetry'\nimport {Banner} from './Banner'\n\ninterface DraftLiveEditBannerProps {\n  displayed: Partial<SanityDocument> | null\n  documentId: string\n  schemaType: ObjectSchemaType\n}\n\nexport function DraftLiveEditBanner({\n  displayed,\n  documentId,\n  schemaType,\n}: DraftLiveEditBannerProps): React.JSX.Element | null {\n  const {t} = useTranslation(structureLocaleNamespace)\n  const [isPublishing, setPublishing] = useState(false)\n  const [isDiscarding, setDiscarding] = useState(false)\n  const telemetry = useTelemetry()\n\n  const {publish, discardChanges} = useDocumentOperation(documentId, displayed?._type || '')\n\n  const handlePublish = useCallback(() => {\n    publish.execute()\n    setPublishing(true)\n    telemetry.log(ResolvedLiveEdit, {liveEditResolveType: 'publish'})\n  }, [publish, telemetry])\n\n  const handleDiscard = useCallback(() => {\n    discardChanges.execute()\n    setDiscarding(true)\n    telemetry.log(ResolvedLiveEdit, {liveEditResolveType: 'discard'})\n  }, [discardChanges, telemetry])\n\n  useEffect(() => {\n    return () => {\n      setPublishing(false)\n      setDiscarding(false)\n    }\n  })\n\n  return (\n    <Banner\n      paddingY={0}\n      content={\n        <Flex align=\"center\" justify=\"space-between\" gap={2} paddingTop={1}>\n          <Text size={1} weight=\"medium\">\n            <Translate\n              t={t}\n              i18nKey={'banners.live-edit-draft-banner.text'}\n              values={{schemaType: schemaType.title}}\n            />\n          </Text>\n\n          <Button\n            onClick={handlePublish}\n            text={t('action.publish.live-edit.label')}\n            tooltipProps={{content: t('banners.live-edit-draft-banner.publish.tooltip')}}\n            loading={isPublishing}\n          />\n\n          <Button\n            onClick={handleDiscard}\n            text={t('banners.live-edit-draft-banner.discard.tooltip')}\n            tooltipProps={{content: t('banners.live-edit-draft-banner.discard.tooltip')}}\n            loading={isDiscarding}\n          />\n        </Flex>\n      }\n      data-testid=\"live-edit-type-banner\"\n      icon={ErrorOutlineIcon}\n    />\n  )\n}\n","import {LockIcon} from '@sanity/icons'\nimport {Flex, Text} from '@sanity/ui'\nimport {\n  formatRelativeLocalePublishDate,\n  getReleaseTone,\n  LATEST,\n  type ReleaseDocument,\n  Translate,\n  useTranslation,\n} from 'sanity'\n\nimport {Banner} from './Banner'\n\nexport function ScheduledReleaseBanner({\n  currentRelease,\n}: {\n  currentRelease: ReleaseDocument\n}): React.JSX.Element {\n  const tone = getReleaseTone(currentRelease ?? LATEST)\n\n  const {t: tCore} = useTranslation()\n\n  return (\n    <Banner\n      tone={tone}\n      paddingY={0}\n      content={\n        <Flex align=\"center\" justify=\"space-between\" gap={1} flex={1}>\n          <Text size={1}>\n            <Flex align=\"center\" justify=\"center\" gap={2}>\n              <LockIcon />{' '}\n              <Translate\n                t={tCore}\n                i18nKey=\"release.banner.scheduled-for-publishing-on\"\n                values={{\n                  date: formatRelativeLocalePublishDate(currentRelease),\n                }}\n              />\n            </Flex>\n          </Text>\n        </Flex>\n      }\n    />\n  )\n}\n","import {type ObjectSchemaType} from '@sanity/types'\nimport {Heading, Stack, Text} from '@sanity/ui'\nimport {useTranslation} from 'react-i18next'\nimport {css, styled} from 'styled-components'\n\nimport {structureLocaleNamespace} from '../../../../i18n'\n\ninterface DocumentHeaderProps {\n  documentId: string\n  schemaType: ObjectSchemaType\n  title?: string\n}\n\n/**\n * Use CSS container queries to conditionally render headings at different sizes.\n * We hide this entire container (including the document type) if container queries\n * not supported in the current browser.\n *\n * Note that usage of container queries in `styled-components` is only supported in `6.x`.\n * As such, studios that include `\"styled-components\": \"<6\"` as a dependency will only see\n * the largest heading size here, even if their browser supports it!\n */\n\nexport const TitleContainer = styled(Stack)`\n  ${({theme}) => {\n    return css`\n      @supports not (container-type: inline-size) {\n        display: none !important;\n      }\n\n      container-type: inline-size;\n\n      [data-heading] {\n        font-size: ${theme.sanity.fonts.heading.sizes[4].fontSize}px;\n        line-height: ${theme.sanity.fonts.heading.sizes[4].lineHeight}px;\n        overflow-wrap: break-word;\n        text-wrap: pretty;\n      }\n\n      @container (max-width: 560px) {\n        [data-heading] {\n          font-size: ${theme.sanity.fonts.heading.sizes[3].fontSize}px;\n          line-height: ${theme.sanity.fonts.heading.sizes[3].lineHeight}px;\n        }\n      }\n\n      @container (max-width: 420px) {\n        [data-heading] {\n          font-size: ${theme.sanity.fonts.heading.sizes[2].fontSize}px;\n          line-height: ${theme.sanity.fonts.heading.sizes[2].lineHeight}px;\n        }\n      }\n    `\n  }}\n`\n\n/**\n * Header containing current document title and type.\n * Document type is hidden if the document `_id` matches the current document `_type`.\n * The entire header is hidden if container queries are not supported.\n */\nexport const FormHeader = ({documentId, schemaType, title}: DocumentHeaderProps) => {\n  const isSingleton = documentId === schemaType.name\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  if (schemaType.__experimental_formPreviewTitle === false) {\n    return null\n  }\n\n  return (\n    <TitleContainer marginBottom={6} space={4}>\n      {!isSingleton && (\n        <Text muted size={1}>\n          {schemaType.title ?? schemaType.name}\n        </Text>\n      )}\n\n      <Heading as=\"h2\" data-heading muted={!title} data-testid=\"document-panel-document-title\">\n        {title ?? t('document-view.form-view.form-title-fallback')}\n      </Heading>\n    </TitleContainer>\n  )\n}\n","import {type ToastParams, useToast} from '@sanity/ui'\nimport {useEffect} from 'react'\n\n// https://developer.mozilla.org/en-US/docs/Web/API/setTimeout#maximum_delay_value\nconst LONG_ENOUGH_BUT_NOT_TOO_LONG = 1000 * 60 * 60 * 24 * 24\n\n/**\n * Workaround to support conditional toast (e.g. a toast that is visible as long as a condition holds true)\n */\nexport function useConditionalToast(params: ToastParams & {id: string; enabled?: boolean}) {\n  const toast = useToast()\n\n  // note1: there's a `duration || 0` in Sanity UI's pushToast(), so make it non-falsey\n  // note2: cannot use `Infinity` as duration, since it exceeds setTimeout's maximum delay value\n  useEffect(() => {\n    if (params.enabled) {\n      toast.push({...params, duration: LONG_ENOUGH_BUT_NOT_TOO_LONG})\n    }\n    return () => {\n      if (params.enabled) {\n        toast.push({\n          ...params,\n          // Note: @sanity/ui fallbacks to the default duration of 4s in case of falsey values\n          duration: 0.01,\n        })\n      }\n    }\n  }, [params, toast])\n}\n","/* eslint-disable no-nested-ternary */\nimport {Box, Container, Flex, focusFirstDescendant, Spinner, Text} from '@sanity/ui'\nimport {type FormEvent, forwardRef, useCallback, useEffect, useMemo, useState} from 'react'\nimport {tap} from 'rxjs/operators'\nimport {\n  createPatchChannel,\n  type DocumentMutationEvent,\n  type DocumentRebaseEvent,\n  FormBuilder,\n  type FormDocumentValue,\n  fromMutationPatches,\n  type PatchMsg,\n  PresenceOverlay,\n  useDocumentPresence,\n  useDocumentStore,\n  usePerspective,\n  useTranslation,\n} from 'sanity'\nimport {useEffectEvent} from 'use-effect-event'\n\nimport {Delay} from '../../../../components'\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {useDocumentPane} from '../../useDocumentPane'\nimport {useDocumentTitle} from '../../useDocumentTitle'\nimport {FormHeader} from './FormHeader'\nimport {useConditionalToast} from './useConditionalToast'\n\ninterface FormViewProps {\n  hidden: boolean\n  margins: [number, number, number, number]\n}\n\nconst preventDefault = (ev: FormEvent) => ev.preventDefault()\n\nexport const FormView = forwardRef<HTMLDivElement, FormViewProps>(function FormView(props, ref) {\n  const {hidden, margins} = props\n\n  const {\n    collapsedFieldSets,\n    collapsedPaths,\n    displayed: value,\n    editState,\n    documentId,\n    documentType,\n    fieldActions,\n    onChange,\n    validation,\n    ready,\n    formState,\n    onFocus,\n    connectionState,\n    onBlur,\n    onSetCollapsedPath,\n    onPathOpen,\n    onSetCollapsedFieldSet,\n    onSetActiveFieldGroup,\n    openPath,\n  } = useDocumentPane()\n  const {selectedReleaseId} = usePerspective()\n  const documentStore = useDocumentStore()\n  const presence = useDocumentPresence(documentId)\n  const {title} = useDocumentTitle()\n  // The `patchChannel` is an INTERNAL publish/subscribe channel that we use to notify form-builder\n  // nodes about both remote and local patches.\n  // - Used by the Portable Text input to modify selections.\n  // - Used by `withDocument` to reset value.\n  const [patchChannel] = useState(() => createPatchChannel())\n\n  const isLocked = editState?.transactionSyncLock?.enabled\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const conditionalToastParams = useMemo(\n    () => ({\n      id: `sync-lock`,\n      status: 'warning' as const,\n      enabled: isLocked,\n      title: t('document-view.form-view.sync-lock-toast.title'),\n      description: t('document-view.form-view.sync-lock-toast.description'),\n      closable: true,\n    }),\n    [isLocked, t],\n  )\n\n  useConditionalToast(conditionalToastParams)\n\n  useEffect(() => {\n    const sub = documentStore.pair\n      .documentEvents(documentId, documentType, selectedReleaseId)\n      .pipe(\n        tap((event) => {\n          if (event.type === 'mutation') {\n            patchChannel.publish(prepareMutationEvent(event))\n          }\n\n          if (event.type === 'rebase') {\n            patchChannel.publish(prepareRebaseEvent(event))\n          }\n        }),\n      )\n      .subscribe()\n\n    return () => {\n      sub.unsubscribe()\n    }\n  }, [documentId, documentStore, documentType, patchChannel, selectedReleaseId])\n\n  const hasRev = Boolean(value?._rev)\n  const handleInitialValue = useEffectEvent(() => {\n    // this is a workaround for an issue that caused the document pushed to withDocument to get\n    // stuck at the first initial value.\n    // This effect is triggered only when the document goes from not having a revision, to getting one\n    // so it will kick in as soon as the document is received from the backend\n    patchChannel.publish({\n      type: 'mutation',\n      patches: [],\n      snapshot: value,\n    })\n  })\n  useEffect(() => {\n    if (hasRev) {\n      handleInitialValue()\n    }\n    // React to changes in hasRev only\n  }, [handleInitialValue, hasRev])\n\n  const [formRef, setFormRef] = useState<null | HTMLDivElement>(null)\n\n  // We only want to run it on first mount\n  const [focusedFirstDescendant, setFocusedFirstDescendant] = useState(false)\n  useEffect(() => {\n    // Only focus on the first descendant if there is not already a focus path\n    // This is to avoid stealing focus from intent links\n    if (!focusedFirstDescendant && ready && !formState?.focusPath.length && formRef) {\n      setFocusedFirstDescendant(true)\n      focusFirstDescendant(formRef)\n    }\n  }, [focusedFirstDescendant, formRef, formState?.focusPath.length, ready])\n\n  const setRef = useCallback(\n    (node: HTMLDivElement | null) => {\n      setFormRef(node)\n      if (typeof ref === 'function') {\n        ref(node)\n      } else if (ref) {\n        ref.current = node\n      }\n    },\n    [ref],\n  )\n\n  // const after = useMemo(\n  //   () =>\n  //     Array.isArray(afterEditorComponents) &&\n  //     afterEditorComponents.map(\n  //       (AfterEditorComponent: ComponentType<{documentId: string}>, idx: number) => (\n  //         <AfterEditorComponent key={String(idx)} documentId={documentId} />\n  //       )\n  //     ),\n  //   [documentId]\n  // )\n\n  return (\n    <Container\n      hidden={hidden}\n      paddingX={4}\n      paddingTop={5}\n      paddingBottom={9}\n      sizing=\"border\"\n      width={1}\n    >\n      <PresenceOverlay margins={margins}>\n        <Box as=\"form\" onSubmit={preventDefault} ref={setRef}>\n          {connectionState === 'connecting' && !editState?.draft && !editState?.published ? (\n            <Delay ms={300}>\n              {/* TODO: replace with loading block */}\n              <Flex align=\"center\" direction=\"column\" height=\"fill\" justify=\"center\">\n                <Spinner muted />\n                <Box marginTop={3}>\n                  <Text align=\"center\" muted size={1}>\n                    {t('document-view.form-view.loading')}\n                  </Text>\n                </Box>\n              </Flex>\n            </Delay>\n          ) : formState === null || hidden ? (\n            <Box padding={2}>\n              <Text>{t('document-view.form-view.form-hidden')}</Text>\n            </Box>\n          ) : (\n            <>\n              <FormHeader documentId={documentId} schemaType={formState.schemaType} title={title} />\n              <FormBuilder\n                __internal_fieldActions={fieldActions}\n                __internal_patchChannel={patchChannel}\n                changed={formState.changed}\n                collapsedFieldSets={collapsedFieldSets}\n                collapsedPaths={collapsedPaths}\n                focused={formState.focused}\n                focusPath={formState.focusPath}\n                groups={formState.groups}\n                id=\"root\"\n                members={formState.members}\n                onChange={onChange}\n                onFieldGroupSelect={onSetActiveFieldGroup}\n                onPathBlur={onBlur}\n                onPathFocus={onFocus}\n                onPathOpen={onPathOpen}\n                onSetFieldSetCollapsed={onSetCollapsedFieldSet}\n                onSetPathCollapsed={onSetCollapsedPath}\n                openPath={openPath}\n                presence={presence}\n                readOnly={\n                  connectionState === 'reconnecting' || formState.readOnly || !editState?.ready\n                }\n                schemaType={formState.schemaType}\n                validation={validation}\n                value={\n                  // note: the form state doesn't have a typed concept of a \"document\" value\n                  // but these should be compatible\n                  formState.value as FormDocumentValue\n                }\n              />\n            </>\n          )}\n        </Box>\n      </PresenceOverlay>\n    </Container>\n  )\n})\n\nfunction prepareMutationEvent(event: DocumentMutationEvent): PatchMsg {\n  const patches = event.mutations.map((mut) => mut.patch).filter(Boolean)\n\n  return {\n    type: 'mutation',\n    snapshot: event.document,\n    patches: fromMutationPatches(event.origin, patches),\n  }\n}\n\nfunction prepareRebaseEvent(event: DocumentRebaseEvent): PatchMsg {\n  const remotePatches = event.remoteMutations.map((mut) => mut.patch).filter(Boolean)\n  const localPatches = event.localMutations.map((mut) => mut.patch).filter(Boolean)\n\n  return {\n    type: 'rebase',\n    snapshot: event.document,\n    patches: fromMutationPatches('remote', remotePatches).concat(\n      fromMutationPatches('local', localPatches),\n    ),\n  }\n}\n","import {BoundaryElementProvider, Box, Flex, PortalProvider, usePortal} from '@sanity/ui'\nimport {useEffect, useMemo, useRef, useState} from 'react'\nimport {\n  getVersionFromId,\n  isReleaseDocument,\n  isReleaseScheduledOrScheduling,\n  type ReleaseDocument,\n  ScrollContainer,\n  usePerspective,\n  VirtualizerScrollInstanceProvider,\n} from 'sanity'\nimport {css, styled} from 'styled-components'\n\nimport {PaneContent, usePane, usePaneLayout, usePaneRouter} from '../../../components'\nimport {isLiveEditEnabled} from '../../../components/paneItem/helpers'\nimport {useStructureTool} from '../../../useStructureTool'\nimport {DocumentInspectorPanel} from '../documentInspector'\nimport {InspectDialog} from '../inspectDialog'\nimport {useDocumentPane} from '../useDocumentPane'\nimport {\n  DeletedDocumentBanners,\n  DeprecatedDocumentTypeBanner,\n  InsufficientPermissionBanner,\n  ReferenceChangedBanner,\n} from './banners'\nimport {AddToReleaseBanner} from './banners/AddToReleaseBanner'\nimport {ArchivedReleaseDocumentBanner} from './banners/ArchivedReleaseDocumentBanner'\nimport {DraftLiveEditBanner} from './banners/DraftLiveEditBanner'\nimport {ScheduledReleaseBanner} from './banners/ScheduledReleaseBanner'\nimport {FormView} from './documentViews'\n\ninterface DocumentPanelProps {\n  footerHeight: number | null\n  headerHeight: number | null\n  isInspectOpen: boolean\n  rootElement: HTMLDivElement | null\n  setDocumentPanelPortalElement: (el: HTMLElement | null) => void\n}\n\nconst DocumentBox = styled(Box)({\n  position: 'relative',\n})\n\nconst Scroller = styled(ScrollContainer)<{$disabled: boolean}>(({$disabled}) => {\n  if ($disabled) {\n    return {height: '100%'}\n  }\n\n  return css`\n    height: 100%;\n    overflow: auto;\n    position: relative;\n    scroll-behavior: smooth;\n    outline: none;\n  `\n})\n\nexport const DocumentPanel = function DocumentPanel(props: DocumentPanelProps) {\n  const {footerHeight, headerHeight, isInspectOpen, rootElement, setDocumentPanelPortalElement} =\n    props\n  const {\n    activeViewId,\n    displayed,\n    documentId,\n    editState,\n    inspector,\n    value,\n    views,\n    ready,\n    schemaType,\n    permissions,\n    isPermissionsLoading,\n  } = useDocumentPane()\n  const {params} = usePaneRouter()\n  const {collapsed: layoutCollapsed} = usePaneLayout()\n  const {collapsed} = usePane()\n  const parentPortal = usePortal()\n  const {features} = useStructureTool()\n  const [_portalElement, setPortalElement] = useState<HTMLDivElement | null>(null)\n  const [documentScrollElement, setDocumentScrollElement] = useState<HTMLDivElement | null>(null)\n  const formContainerElement = useRef<HTMLDivElement | null>(null)\n\n  const requiredPermission = value._createdAt ? 'update' : 'create'\n\n  const activeView = useMemo(\n    () => views.find((view) => view.id === activeViewId) || views[0] || {type: 'form'},\n    [activeViewId, views],\n  )\n\n  // Use a local portal container when split panes is supported\n  const portalElement: HTMLElement | null = features.splitPanes\n    ? _portalElement || parentPortal.element\n    : parentPortal.element\n\n  // Calculate the height of the header\n  const margins: [number, number, number, number] = useMemo(() => {\n    if (layoutCollapsed) {\n      return [headerHeight || 0, 0, footerHeight ? footerHeight + 2 : 2, 0]\n    }\n\n    return [0, 0, 2, 0]\n  }, [layoutCollapsed, footerHeight, headerHeight])\n\n  const formViewHidden = activeView.type !== 'form'\n\n  const activeViewNode = useMemo(() => {\n    if (activeView.type === 'component' && activeView.component) {\n      const ActiveViewComponent = activeView.component\n      return (\n        <ActiveViewComponent\n          document={{\n            draft: editState?.draft || null,\n            displayed: displayed || value,\n            historical: displayed,\n            published: editState?.published || null,\n          }}\n          documentId={documentId}\n          options={activeView.options}\n          schemaType={schemaType}\n        />\n      )\n    }\n    return false\n  }, [activeView, displayed, documentId, editState?.draft, editState?.published, schemaType, value])\n\n  const isLiveEdit = isLiveEditEnabled(schemaType)\n\n  // Scroll to top as `documentId` changes\n  useEffect(() => {\n    if (!documentScrollElement?.scrollTo) return\n    documentScrollElement.scrollTo(0, 0)\n  }, [documentId, documentScrollElement])\n\n  // Pass portal element to `DocumentPane`\n  useEffect(() => {\n    if (portalElement) {\n      setDocumentPanelPortalElement(portalElement)\n    }\n  }, [portalElement, setDocumentPanelPortalElement])\n\n  const inspectDialog = useMemo(() => {\n    return isInspectOpen ? <InspectDialog value={displayed || value} /> : null\n  }, [isInspectOpen, displayed, value])\n\n  const showInspector = Boolean(!collapsed && inspector)\n  const {selectedPerspective, selectedReleaseId} = usePerspective()\n\n  const banners = useMemo(() => {\n    if (params?.historyVersion) {\n      return <ArchivedReleaseDocumentBanner />\n    }\n    const isCreatingDocument = displayed && !displayed._createdAt\n    const isScheduledRelease =\n      isReleaseDocument(selectedPerspective) && isReleaseScheduledOrScheduling(selectedPerspective)\n\n    if (isScheduledRelease) {\n      return <ScheduledReleaseBanner currentRelease={selectedPerspective as ReleaseDocument} />\n    }\n    if (\n      displayed?._id &&\n      getVersionFromId(displayed._id) !== selectedReleaseId &&\n      ready &&\n      !isCreatingDocument\n    ) {\n      return (\n        <AddToReleaseBanner\n          documentId={value._id}\n          currentRelease={selectedPerspective as ReleaseDocument}\n          value={displayed || undefined}\n        />\n      )\n    }\n\n    if (\n      activeView.type === 'form' &&\n      isLiveEdit &&\n      ready &&\n      editState?.draft?._id &&\n      !selectedReleaseId\n    ) {\n      return (\n        <DraftLiveEditBanner\n          displayed={displayed}\n          documentId={documentId}\n          schemaType={schemaType}\n        />\n      )\n    }\n\n    if (activeView.type !== 'form' || isPermissionsLoading || !ready) return null\n\n    return (\n      <>\n        {!permissions?.granted && (\n          <InsufficientPermissionBanner requiredPermission={requiredPermission} />\n        )}\n        <ReferenceChangedBanner />\n        <DeprecatedDocumentTypeBanner />\n        <DeletedDocumentBanners />\n      </>\n    )\n  }, [\n    params?.historyVersion,\n    displayed,\n    selectedPerspective,\n    selectedReleaseId,\n    ready,\n    activeView.type,\n    isLiveEdit,\n    editState?.draft?._id,\n    isPermissionsLoading,\n    permissions?.granted,\n    requiredPermission,\n    value._id,\n    documentId,\n    schemaType,\n  ])\n\n  return (\n    <PaneContent>\n      <Flex height=\"fill\">\n        {(features.resizablePanes || !showInspector) && (\n          <DocumentBox flex={2} overflow=\"hidden\">\n            <PortalProvider\n              element={portalElement}\n              __unstable_elements={{documentScrollElement: documentScrollElement}}\n            >\n              <BoundaryElementProvider element={documentScrollElement}>\n                <VirtualizerScrollInstanceProvider\n                  scrollElement={documentScrollElement}\n                  containerElement={formContainerElement}\n                >\n                  {banners}\n                  <Scroller\n                    $disabled={layoutCollapsed || false}\n                    data-testid=\"document-panel-scroller\"\n                    ref={setDocumentScrollElement}\n                  >\n                    <FormView\n                      hidden={formViewHidden}\n                      margins={margins}\n                      ref={formContainerElement}\n                    />\n                    {activeViewNode}\n                  </Scroller>\n\n                  {inspectDialog}\n\n                  <div data-testid=\"document-panel-portal\" ref={setPortalElement} />\n                </VirtualizerScrollInstanceProvider>\n              </BoundaryElementProvider>\n            </PortalProvider>\n          </DocumentBox>\n        )}\n\n        {showInspector && (\n          <BoundaryElementProvider element={rootElement}>\n            <DocumentInspectorPanel\n              documentId={documentId}\n              documentType={schemaType.name}\n              flex={1}\n            />\n          </BoundaryElementProvider>\n        )}\n      </Flex>\n    </PaneContent>\n  )\n}\nDocumentPanel.displayName = 'DocumentPanel'\n","import {type Placement} from '@sanity/ui'\n\nimport {type DialogProps} from '../../../../../ui-components'\n\nexport const POPOVER_FALLBACK_PLACEMENTS: Placement[] = ['left', 'bottom']\n\nexport const DIALOG_WIDTH_TO_UI_WIDTH: {[key: string]: DialogProps['width']} = {\n  small: 0,\n  medium: 1,\n  large: 2,\n  full: 'auto',\n}\n","import {\n  Box,\n  Button, // eslint-disable-line no-restricted-imports\n  Flex,\n  Grid,\n  Popover, // eslint-disable-line no-restricted-imports\n  Text,\n  useClickOutsideEvent,\n  useGlobalKeyDown,\n  useLayer,\n} from '@sanity/ui'\nimport {useCallback, useRef} from 'react'\nimport {type DocumentActionConfirmDialogProps, useTranslation} from 'sanity'\n\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {POPOVER_FALLBACK_PLACEMENTS} from './constants'\n\nexport function ConfirmDialog(props: {\n  dialog: DocumentActionConfirmDialogProps\n  referenceElement: HTMLElement | null\n}) {\n  const {dialog, referenceElement} = props\n\n  return (\n    <Popover\n      content={<ConfirmDialogContent dialog={dialog} />}\n      fallbackPlacements={POPOVER_FALLBACK_PLACEMENTS}\n      open\n      placement=\"top\"\n      portal\n      preventOverflow\n      referenceElement={referenceElement}\n    />\n  )\n}\n\n/**\n * Dialog rendered by custom document actions of dialog type `confirm`.\n * As these are user configurable with public facing APIs, internal studio ui-components are not used.\n */\nfunction ConfirmDialogContent(props: {dialog: DocumentActionConfirmDialogProps}) {\n  const {dialog} = props\n  const {\n    cancelButtonIcon,\n    cancelButtonText,\n    confirmButtonIcon,\n    confirmButtonText,\n    // color,\n    message,\n    onCancel,\n    onConfirm,\n    tone,\n  } = dialog\n  const {t} = useTranslation(structureLocaleNamespace)\n  const {isTopLayer} = useLayer()\n  const ref = useRef<HTMLDivElement | null>(null)\n\n  const handleGlobalKeyDown = useCallback(\n    (event: any) => {\n      if (event.key === 'Escape' && isTopLayer) onCancel()\n    },\n    [isTopLayer, onCancel],\n  )\n\n  useGlobalKeyDown(handleGlobalKeyDown)\n  useClickOutsideEvent(isTopLayer && onCancel, () => [ref.current])\n\n  return (\n    <Flex direction=\"column\" ref={ref} style={{minWidth: 320 - 16, maxWidth: 400}}>\n      <Box flex={1} overflow=\"auto\" padding={4}>\n        <Text>{message}</Text>\n      </Box>\n      <Box paddingX={4} paddingY={3} style={{borderTop: '1px solid var(--card-border-color)'}}>\n        <Grid columns={2} gap={2}>\n          <Button\n            data-testid=\"confirm-dialog-cancel-button\"\n            icon={cancelButtonIcon}\n            onClick={onCancel}\n            mode=\"ghost\"\n            text={cancelButtonText || t('confirm-dialog.cancel-button.fallback-text')}\n          />\n          <Button\n            data-testid=\"confirm-dialog-confirm-button\"\n            icon={confirmButtonIcon}\n            onClick={onConfirm}\n            text={confirmButtonText || t('confirm-dialog.confirm-button.fallback-text')}\n            tone={tone}\n          />\n        </Grid>\n      </Box>\n    </Flex>\n  )\n}\n","import {\n  Box,\n  Dialog, // eslint-disable-line no-restricted-imports\n} from '@sanity/ui'\nimport {useId} from 'react'\nimport {type DocumentActionModalDialogProps, LegacyLayerProvider} from 'sanity'\n\nimport {DIALOG_WIDTH_TO_UI_WIDTH} from './constants'\n\n/**\n * Dialog rendered by custom document actions of dialog type `dialog`.\n * As these are user configurable with public facing APIs, internal studio ui-components are not used.\n */\nexport function ModalDialog(props: {dialog: DocumentActionModalDialogProps}) {\n  const {dialog} = props\n  const dialogId = useId()\n\n  const footer = dialog.footer && (\n    <Box paddingX={4} paddingY={3}>\n      {dialog.footer}\n    </Box>\n  )\n\n  return (\n    <LegacyLayerProvider zOffset=\"fullscreen\">\n      <Dialog\n        animate\n        __unstable_hideCloseButton={dialog.showCloseButton === false}\n        footer={footer}\n        header={dialog.header}\n        id={dialogId}\n        // eslint-disable-next-line react/jsx-handler-names\n        onClose={dialog.onClose}\n        // eslint-disable-next-line react/jsx-handler-names\n        onClickOutside={dialog.onClose}\n        width={dialog.width === undefined ? 1 : DIALOG_WIDTH_TO_UI_WIDTH[dialog.width]}\n      >\n        <Box padding={4}>{dialog.content}</Box>\n      </Dialog>\n    </LegacyLayerProvider>\n  )\n}\n","import {\n  Popover, // eslint-disable-line no-restricted-imports\n  useClickOutsideEvent,\n  useGlobalKeyDown,\n  useLayer,\n} from '@sanity/ui'\nimport {useCallback, useRef} from 'react'\nimport {type DocumentActionPopoverDialogProps} from 'sanity'\n\nimport {POPOVER_FALLBACK_PLACEMENTS} from './constants'\n\nexport function PopoverDialog(props: {\n  dialog: DocumentActionPopoverDialogProps\n  referenceElement: HTMLElement | null\n}) {\n  const {dialog, referenceElement} = props\n\n  return (\n    <Popover\n      content={<PopoverDialogContent dialog={dialog} />}\n      fallbackPlacements={POPOVER_FALLBACK_PLACEMENTS}\n      open\n      placement=\"top\"\n      portal\n      preventOverflow\n      referenceElement={referenceElement}\n    />\n  )\n}\n\n/**\n * Popover rendered by custom document actions of dialog type `popover`.\n * As these are user configurable with public facing APIs, internal studio ui-components are not used.\n */\nfunction PopoverDialogContent(props: {dialog: DocumentActionPopoverDialogProps}) {\n  const {dialog} = props\n  const {content, onClose} = dialog\n  const {isTopLayer} = useLayer()\n  const ref = useRef<HTMLDivElement | null>(null)\n\n  const handleGlobalKeyDown = useCallback(\n    (event: any) => {\n      if (event.key === 'Escape' && isTopLayer) onClose()\n    },\n    [isTopLayer, onClose],\n  )\n\n  useGlobalKeyDown(handleGlobalKeyDown)\n  useClickOutsideEvent(isTopLayer && onClose, () => [ref.current])\n\n  return <div ref={ref}>{content}</div>\n}\n","import {PortalProvider, Text, usePortal} from '@sanity/ui'\nimport {type ReactNode, useId} from 'react'\nimport {type DocumentActionDialogProps} from 'sanity'\n\nimport {Dialog} from '../../../../ui-components'\nimport {DOCUMENT_PANEL_PORTAL_ELEMENT} from '../../../constants'\nimport {ConfirmDialog} from './dialogs/ConfirmDialog'\nimport {ModalDialog} from './dialogs/ModalDialog'\nimport {PopoverDialog} from './dialogs/PopoverDialog'\n\nexport interface ActionStateDialogProps {\n  dialog: DocumentActionDialogProps\n  referenceElement?: HTMLElement | null\n}\n\n// A portal provider that uses the document panel portal element if it exists\n// as the portal element so that dialogs are scoped to the document panel\nfunction DocumentActionPortalProvider(props: {children: ReactNode}) {\n  const {children} = props\n  const {element, elements} = usePortal()\n  const portalElement = elements?.[DOCUMENT_PANEL_PORTAL_ELEMENT] || element\n\n  return <PortalProvider element={portalElement}>{children}</PortalProvider>\n}\n\nexport function ActionStateDialog(props: ActionStateDialogProps) {\n  const {dialog, referenceElement = null} = props\n  const modalId = useId()\n\n  if (dialog.type === 'confirm') {\n    return <ConfirmDialog dialog={dialog} referenceElement={referenceElement} />\n  }\n\n  if (dialog.type === 'popover') {\n    return <PopoverDialog dialog={dialog} referenceElement={referenceElement} />\n  }\n\n  if (dialog.type === 'dialog' || !dialog.type) {\n    return (\n      <DocumentActionPortalProvider>\n        <ModalDialog dialog={dialog} />\n      </DocumentActionPortalProvider>\n    )\n  }\n\n  if (dialog.type === 'custom') {\n    return <DocumentActionPortalProvider>{dialog?.component}</DocumentActionPortalProvider>\n  }\n\n  // @todo: add validation?\n  const unknownModal: any = dialog\n\n  // eslint-disable-next-line no-console\n  console.warn(`Unsupported modal type ${unknownModal.type}`)\n\n  return (\n    <Dialog\n      id={modalId}\n      // eslint-disable-next-line react/jsx-handler-names\n      onClose={unknownModal.onClose}\n      // eslint-disable-next-line react/jsx-handler-names\n      onClickOutside={unknownModal.onClose}\n      width={1}\n    >\n      {unknownModal.content || (\n        // eslint-disable-next-line i18next/no-literal-string\n        <Text size={1}>\n          Unexpected modal type (<code>{unknownModal.type}</code>)\n        </Text>\n      )}\n    </Dialog>\n  )\n}\n","import {Menu} from '@sanity/ui'\nimport {memo, type ReactNode, useCallback, useId, useMemo, useState} from 'react'\nimport {\n  ContextMenuButton,\n  type DocumentActionDescription,\n  LegacyLayerProvider,\n  useTranslation,\n} from 'sanity'\n\nimport {MenuButton, MenuItem, type PopoverProps} from '../../../../ui-components'\nimport {structureLocaleNamespace} from '../../../i18n'\nimport {ActionStateDialog} from './ActionStateDialog'\n\nexport interface ActionMenuButtonProps {\n  actionStates: DocumentActionDescription[]\n  disabled: boolean\n}\n\n/**\n * @internal\n */\nexport const ActionDialogWrapper = memo(function ActionDialogWrapper({\n  actionStates,\n  children,\n  referenceElement,\n}: {\n  actionStates: DocumentActionDescription[]\n  children: ({handleAction}: {handleAction: (idx: number) => void}) => ReactNode\n  referenceElement?: HTMLElement | null\n}) {\n  const [actionIndex, setActionIndex] = useState(-1)\n  const currentAction = useMemo(() => actionStates[actionIndex], [actionIndex, actionStates])\n\n  const handleAction = useCallback((idx: number) => {\n    setActionIndex(idx)\n  }, [])\n\n  const result = useMemo(() => children({handleAction}), [children, handleAction])\n\n  return (\n    <>\n      {currentAction && currentAction.dialog && (\n        <LegacyLayerProvider zOffset=\"paneFooter\">\n          <ActionStateDialog dialog={currentAction.dialog} referenceElement={referenceElement} />\n        </LegacyLayerProvider>\n      )}\n      {result}\n    </>\n  )\n})\n\n/**\n * @internal\n */\nexport function ActionMenuButton(props: ActionMenuButtonProps) {\n  const {actionStates, disabled} = props\n  const idPrefix = useId()\n\n  const [referenceElement, setReferenceElement] = useState<HTMLButtonElement | null>(null)\n\n  const popoverProps: PopoverProps = useMemo(\n    () => ({\n      placement: 'top-end',\n      portal: true,\n      preventOverflow: true,\n    }),\n    [],\n  )\n\n  const {t} = useTranslation(structureLocaleNamespace)\n  const renderActionDialog = useCallback<\n    ({handleAction}: {handleAction: (idx: number) => void}) => ReactNode\n  >(\n    ({handleAction}) => (\n      <MenuButton\n        id={`${idPrefix}-action-menu`}\n        button={\n          <ContextMenuButton\n            aria-label={t('buttons.action-menu-button.aria-label')}\n            disabled={disabled}\n            data-testid=\"action-menu-button\"\n            size=\"large\"\n            tooltipProps={{content: t('buttons.action-menu-button.tooltip')}}\n          />\n        }\n        menu={\n          <Menu padding={1}>\n            {actionStates.map((actionState, idx) => (\n              <ActionMenuListItem\n                actionState={actionState}\n                disabled={disabled}\n                index={idx}\n                // eslint-disable-next-line react/no-array-index-key\n                key={idx}\n                onAction={handleAction}\n              />\n            ))}\n          </Menu>\n        }\n        popover={popoverProps}\n        ref={setReferenceElement}\n      />\n    ),\n    [actionStates, disabled, idPrefix, popoverProps, t],\n  )\n\n  return (\n    <ActionDialogWrapper actionStates={actionStates} referenceElement={referenceElement}>\n      {renderActionDialog}\n    </ActionDialogWrapper>\n  )\n}\n\ninterface ActionMenuListItemProps {\n  actionState: DocumentActionDescription\n  disabled: boolean\n  index: number\n  onAction: (idx: number) => void\n}\n\nexport function ActionMenuListItem(props: ActionMenuListItemProps) {\n  const {actionState, disabled, index, onAction} = props\n  const {onHandle} = actionState\n\n  const handleClick = useCallback(() => {\n    onAction(index)\n    if (onHandle) onHandle()\n  }, [index, onAction, onHandle])\n\n  const hotkeys = useMemo(() => {\n    return actionState.shortcut\n      ? String(actionState.shortcut)\n          .split('+')\n          .map((s) => s.slice(0, 1).toUpperCase() + s.slice(1))\n      : undefined\n  }, [actionState.shortcut])\n\n  return (\n    <MenuItem\n      data-testid={`action-${actionState.label.replace(' ', '')}`}\n      disabled={disabled || Boolean(actionState.disabled)}\n      hotkeys={hotkeys}\n      icon={actionState.icon}\n      onClick={handleClick}\n      text={actionState.label}\n      tone={actionState.tone}\n      {...(actionState.disabled && {tooltipProps: {content: actionState.title}})}\n    />\n  )\n}\n","/* eslint-disable import/no-extraneous-dependencies */\n\nimport {TrashIcon} from '@sanity/icons'\nimport {useCallback, useMemo, useState} from 'react'\nimport {\n  type DocumentActionComponent,\n  InsufficientPermissionsMessage,\n  useCurrentUser,\n  useDocumentOperation,\n  useDocumentPairPermissions,\n  useTranslation,\n} from 'sanity'\n\nimport {ConfirmDeleteDialog} from '../components'\nimport {structureLocaleNamespace} from '../i18n'\nimport {useDocumentPane} from '../panes/document/useDocumentPane'\n\nconst DISABLED_REASON_TITLE_KEY = {\n  NOTHING_TO_DELETE: 'action.delete.disabled.nothing-to-delete',\n  NOT_READY: 'action.delete.disabled.not-ready',\n}\n\n/** @internal */\nexport const DeleteAction: DocumentActionComponent = ({id, type, draft, onComplete, release}) => {\n  const {setIsDeleting: paneSetIsDeleting} = useDocumentPane()\n  const {delete: deleteOp} = useDocumentOperation(id, type, release)\n  const [isDeleting, setIsDeleting] = useState(false)\n  const [isConfirmDialogOpen, setConfirmDialogOpen] = useState(false)\n\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const handleCancel = useCallback(() => {\n    setConfirmDialogOpen(false)\n    onComplete()\n  }, [onComplete])\n\n  const handleConfirm = useCallback(() => {\n    setIsDeleting(true)\n    setConfirmDialogOpen(false)\n    paneSetIsDeleting(true)\n    deleteOp.execute()\n    onComplete()\n  }, [deleteOp, onComplete, paneSetIsDeleting])\n\n  const handle = useCallback(() => {\n    setConfirmDialogOpen(true)\n  }, [])\n\n  const [permissions, isPermissionsLoading] = useDocumentPairPermissions({\n    id,\n    type,\n    version: release,\n    permission: 'delete',\n  })\n\n  const currentUser = useCurrentUser()\n\n  return useMemo(() => {\n    if (!isPermissionsLoading && !permissions?.granted) {\n      return {\n        tone: 'critical',\n        icon: TrashIcon,\n        disabled: true,\n        label: t('action.delete.label'),\n        title: (\n          <InsufficientPermissionsMessage context=\"delete-document\" currentUser={currentUser} />\n        ),\n      }\n    }\n\n    return {\n      tone: 'critical',\n      icon: TrashIcon,\n      disabled: isDeleting || Boolean(deleteOp.disabled) || isPermissionsLoading,\n      title: (deleteOp.disabled && t(DISABLED_REASON_TITLE_KEY[deleteOp.disabled])) || '',\n      label: isDeleting ? t('action.delete.running.label') : t('action.delete.label'),\n      shortcut: 'Ctrl+Alt+D',\n      onHandle: handle,\n      dialog: isConfirmDialogOpen && {\n        type: 'custom',\n        component: (\n          <ConfirmDeleteDialog\n            // eslint-disable-next-line @sanity/i18n/no-attribute-string-literals\n            action=\"delete\"\n            id={draft?._id || id}\n            type={type}\n            onCancel={handleCancel}\n            onConfirm={handleConfirm}\n          />\n        ),\n      },\n    }\n  }, [\n    currentUser,\n    deleteOp.disabled,\n    draft?._id,\n    handle,\n    handleCancel,\n    handleConfirm,\n    id,\n    isConfirmDialogOpen,\n    isDeleting,\n    isPermissionsLoading,\n    permissions?.granted,\n    t,\n    type,\n  ])\n}\n\nDeleteAction.action = 'delete'\nDeleteAction.displayName = 'DeleteAction'\n","/* eslint-disable import/no-extraneous-dependencies */\n\nimport {ResetIcon} from '@sanity/icons'\nimport {useCallback, useMemo, useState} from 'react'\nimport {\n  type DocumentActionComponent,\n  type DocumentActionDialogProps,\n  InsufficientPermissionsMessage,\n  useCurrentUser,\n  useDocumentOperation,\n  useDocumentPairPermissions,\n  useTranslation,\n} from 'sanity'\n\nimport {structureLocaleNamespace} from '../i18n'\n\nconst DISABLED_REASON_KEY = {\n  NO_CHANGES: 'action.discard-changes.disabled.no-change',\n  NOT_PUBLISHED: 'action.discard-changes.disabled.not-published',\n  NOT_READY: 'action.discard-changes.disabled.not-ready',\n} as const\n\n/** @internal */\nexport const DiscardChangesAction: DocumentActionComponent = ({\n  id,\n  type,\n  published,\n  liveEdit,\n  onComplete,\n  release,\n}) => {\n  const {discardChanges} = useDocumentOperation(id, type, release)\n  const [isConfirmDialogOpen, setConfirmDialogOpen] = useState(false)\n  const [permissions, isPermissionsLoading] = useDocumentPairPermissions({\n    id,\n    type,\n    version: release,\n    permission: 'discardDraft',\n  })\n  const currentUser = useCurrentUser()\n\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const handleConfirm = useCallback(() => {\n    discardChanges.execute()\n    onComplete()\n  }, [discardChanges, onComplete])\n\n  const handle = useCallback(() => {\n    setConfirmDialogOpen(true)\n  }, [])\n\n  const dialog: DocumentActionDialogProps | false = useMemo(\n    () =>\n      isConfirmDialogOpen && {\n        type: 'confirm',\n        tone: 'critical',\n        onCancel: onComplete,\n        onConfirm: handleConfirm,\n        message: t('action.discard-changes.confirm-dialog.confirm-discard-changes'),\n      },\n    [handleConfirm, isConfirmDialogOpen, onComplete, t],\n  )\n\n  return useMemo(() => {\n    if (!published || liveEdit) {\n      return null\n    }\n\n    if (!isPermissionsLoading && !permissions?.granted) {\n      return {\n        tone: 'critical',\n        icon: ResetIcon,\n        disabled: true,\n        label: t('action.discard-changes.label'),\n        title: (\n          <InsufficientPermissionsMessage context=\"discard-changes\" currentUser={currentUser} />\n        ),\n      }\n    }\n\n    return {\n      tone: 'critical',\n      icon: ResetIcon,\n      disabled: Boolean(discardChanges.disabled) || isPermissionsLoading,\n      title: (discardChanges.disabled && DISABLED_REASON_KEY[discardChanges.disabled]) || '',\n      label: t('action.discard-changes.label'),\n      onHandle: handle,\n      dialog,\n    }\n  }, [\n    currentUser,\n    dialog,\n    discardChanges.disabled,\n    handle,\n    isPermissionsLoading,\n    liveEdit,\n    permissions?.granted,\n    published,\n    t,\n  ])\n}\n\nDiscardChangesAction.action = 'discardChanges'\nDiscardChangesAction.displayName = 'DiscardChangesAction'\n","import {CopyIcon} from '@sanity/icons'\nimport {uuid} from '@sanity/uuid'\nimport {useCallback, useMemo, useState} from 'react'\nimport {filter, firstValueFrom} from 'rxjs'\nimport {\n  type DocumentActionComponent,\n  InsufficientPermissionsMessage,\n  useCurrentUser,\n  useDocumentOperation,\n  useDocumentPairPermissions,\n  useDocumentStore,\n  useTranslation,\n} from 'sanity'\nimport {useRouter} from 'sanity/router'\n\nimport {structureLocaleNamespace} from '../i18n'\n\nconst DISABLED_REASON_KEY = {\n  NOTHING_TO_DUPLICATE: 'action.duplicate.disabled.nothing-to-duplicate',\n  NOT_READY: 'action.duplicate.disabled.not-ready',\n}\n\n/** @internal */\nexport const DuplicateAction: DocumentActionComponent = ({id, type, onComplete, release}) => {\n  const documentStore = useDocumentStore()\n  const {duplicate} = useDocumentOperation(id, type, release)\n  const {navigateIntent} = useRouter()\n  const [isDuplicating, setDuplicating] = useState(false)\n\n  const [permissions, isPermissionsLoading] = useDocumentPairPermissions({\n    id,\n    type,\n    version: release,\n    permission: 'duplicate',\n  })\n\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const currentUser = useCurrentUser()\n\n  const handle = useCallback(async () => {\n    const dupeId = uuid()\n\n    setDuplicating(true)\n\n    // set up the listener before executing\n    const duplicateSuccess = firstValueFrom(\n      documentStore.pair\n        .operationEvents(id, type)\n        .pipe(filter((e) => e.op === 'duplicate' && e.type === 'success')),\n    )\n    duplicate.execute(dupeId)\n\n    // only navigate to the duplicated document when the operation is successful\n    await duplicateSuccess\n    navigateIntent('edit', {id: dupeId, type})\n\n    onComplete()\n  }, [documentStore.pair, duplicate, id, navigateIntent, onComplete, type])\n\n  return useMemo(() => {\n    if (!isPermissionsLoading && !permissions?.granted) {\n      return {\n        icon: CopyIcon,\n        disabled: true,\n        label: t('action.duplicate.label'),\n        title: (\n          <InsufficientPermissionsMessage context=\"duplicate-document\" currentUser={currentUser} />\n        ),\n      }\n    }\n\n    return {\n      icon: CopyIcon,\n      disabled: isDuplicating || Boolean(duplicate.disabled) || isPermissionsLoading,\n      label: isDuplicating ? t('action.duplicate.running.label') : t('action.duplicate.label'),\n      title: duplicate.disabled ? t(DISABLED_REASON_KEY[duplicate.disabled]) : '',\n      onHandle: handle,\n    }\n  }, [\n    currentUser,\n    duplicate.disabled,\n    handle,\n    isDuplicating,\n    isPermissionsLoading,\n    permissions?.granted,\n    t,\n  ])\n}\n\nDuplicateAction.action = 'duplicate'\nDuplicateAction.displayName = 'DuplicateAction'\n","import {RevertIcon} from '@sanity/icons'\nimport {useCallback, useEffect, useMemo, useRef, useState} from 'react'\nimport {\n  type DocumentActionComponent,\n  type DocumentActionDialogProps,\n  useDocumentOperation,\n  useDocumentOperationEvent,\n  useTranslation,\n} from 'sanity'\nimport {useRouter} from 'sanity/router'\n\nimport {structureLocaleNamespace} from '../i18n'\n\n/** @internal */\nexport const HistoryRestoreAction: DocumentActionComponent = ({\n  id,\n  type,\n  revision,\n  onComplete,\n  release,\n}) => {\n  const {restore} = useDocumentOperation(id, type, release)\n  const event = useDocumentOperationEvent(id, type)\n  const {navigateIntent} = useRouter()\n  const prevEvent = useRef(event)\n  const [isConfirmDialogOpen, setConfirmDialogOpen] = useState(false)\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const handleConfirm = useCallback(() => {\n    restore.execute(revision!)\n    onComplete()\n  }, [restore, revision, onComplete])\n\n  /**\n   * If the restore operation is successful, navigate to the document edit view\n   */\n  useEffect(() => {\n    if (!event || event === prevEvent.current) return\n\n    if (event.type === 'success' && event.op === 'restore') {\n      navigateIntent('edit', {id, type})\n    }\n\n    prevEvent.current = event\n  }, [event, id, navigateIntent, type])\n\n  const handle = useCallback(() => {\n    setConfirmDialogOpen(true)\n  }, [])\n\n  const dialog: DocumentActionDialogProps | null = useMemo(() => {\n    if (isConfirmDialogOpen) {\n      return {\n        type: 'confirm',\n        tone: 'critical',\n        onCancel: onComplete,\n        onConfirm: handleConfirm,\n        message: t('action.restore.confirm.message'),\n      }\n    }\n\n    return null\n  }, [handleConfirm, isConfirmDialogOpen, onComplete, t])\n\n  const isRevisionInitial = revision === '@initial'\n  const isRevisionLatest = revision === undefined // undefined means latest revision\n\n  return useMemo(() => {\n    if (isRevisionLatest) {\n      return null\n    }\n\n    return {\n      label: t('action.restore.label'),\n      tone: 'caution',\n      onHandle: handle,\n      title: t(\n        isRevisionInitial\n          ? 'action.restore.disabled.cannot-restore-initial'\n          : 'action.restore.tooltip',\n      ),\n      icon: RevertIcon,\n      dialog,\n      disabled: isRevisionInitial,\n    }\n  }, [dialog, handle, isRevisionInitial, isRevisionLatest, t])\n}\n\nHistoryRestoreAction.action = 'restore'\nHistoryRestoreAction.displayName = 'HistoryRestoreAction'\n","import {defineEvent} from '@sanity/telemetry'\n\ninterface DocumentPublishedInfo {\n  /**\n   * The document was created and published straight away\n   */\n  publishedImmediately: boolean\n\n  /**\n   * The document had a previously published version when it was published\n   */\n  previouslyPublished: boolean\n}\nexport const DocumentPublished = defineEvent<DocumentPublishedInfo>({\n  name: 'Document Published',\n  version: 1,\n  description: 'User clicked the \"Publish\" button in the document pane',\n})\n","import {PublishIcon} from '@sanity/icons'\nimport {useTelemetry} from '@sanity/telemetry/react'\nimport {isValidationErrorMarker} from '@sanity/types'\nimport {useCallback, useEffect, useMemo, useState} from 'react'\nimport {\n  type DocumentActionComponent,\n  InsufficientPermissionsMessage,\n  type TFunction,\n  useCurrentUser,\n  useDocumentOperation,\n  useDocumentPairPermissions,\n  useEditState,\n  useRelativeTime,\n  useSyncState,\n  useTranslation,\n  useValidationStatus,\n} from 'sanity'\n\nimport {structureLocaleNamespace, type StructureLocaleResourceKeys} from '../i18n'\nimport {useDocumentPane} from '../panes/document/useDocumentPane'\nimport {DocumentPublished} from './__telemetry__/documentActions.telemetry'\n\nconst DISABLED_REASON_TITLE_KEY: Record<string, StructureLocaleResourceKeys> = {\n  LIVE_EDIT_ENABLED: 'action.publish.live-edit.publish-disabled',\n  ALREADY_PUBLISHED: 'action.publish.already-published.no-time-ago.tooltip',\n  NO_CHANGES: 'action.publish.no-changes.tooltip',\n  NOT_READY: 'action.publish.disabled.not-ready',\n} as const\n\nfunction getDisabledReason(\n  reason: keyof typeof DISABLED_REASON_TITLE_KEY,\n  publishedAt: string | undefined,\n  t: TFunction,\n) {\n  if (reason === 'ALREADY_PUBLISHED' && publishedAt) {\n    return <AlreadyPublished publishedAt={publishedAt} />\n  }\n  return t(DISABLED_REASON_TITLE_KEY[reason])\n}\n\nfunction AlreadyPublished({publishedAt}: {publishedAt: string}) {\n  const {t} = useTranslation(structureLocaleNamespace)\n  const timeSincePublished = useRelativeTime(publishedAt, {useTemporalPhrase: true})\n  return <span>{t('action.publish.already-published.tooltip', {timeSincePublished})}</span>\n}\n\n/** @internal */\n// eslint-disable-next-line complexity\nexport const PublishAction: DocumentActionComponent = (props) => {\n  const {id, type, liveEdit, draft, published, release} = props\n  const [publishState, setPublishState] = useState<'publishing' | 'published' | null>(null)\n  const {publish} = useDocumentOperation(id, type)\n  const validationStatus = useValidationStatus(id, type)\n  const syncState = useSyncState(id, type)\n  const {changesOpen, documentId, documentType} = useDocumentPane()\n  const editState = useEditState(documentId, documentType)\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const revision = (editState?.draft || editState?.published || {})._rev\n\n  const hasValidationErrors = validationStatus.validation.some(isValidationErrorMarker)\n  // we use this to \"schedule\" publish after pending tasks (e.g. validation and sync) has completed\n  const [publishScheduled, setPublishScheduled] = useState<boolean>(false)\n  const isSyncing = syncState.isSyncing\n  const isValidating = validationStatus.isValidating\n  const [permissions, isPermissionsLoading] = useDocumentPairPermissions({\n    id,\n    type,\n    permission: 'publish',\n  })\n\n  const currentUser = useCurrentUser()\n\n  // eslint-disable-next-line no-nested-ternary\n  const title = publish.disabled\n    ? getDisabledReason(publish.disabled, (published || {})._updatedAt, t) || ''\n    : hasValidationErrors\n      ? t('action.publish.validation-issues.tooltip')\n      : ''\n\n  const hasDraft = Boolean(draft)\n\n  const doPublish = useCallback(() => {\n    publish.execute()\n    setPublishState('publishing')\n  }, [publish])\n\n  useEffect(() => {\n    // make sure the validation status is about the current revision and not an earlier one\n    const validationComplete =\n      validationStatus.isValidating === false && validationStatus.revision !== revision\n\n    if (!publishScheduled || isSyncing || !validationComplete) {\n      return\n    }\n\n    if (!hasValidationErrors) {\n      doPublish()\n    }\n    setPublishScheduled(false)\n  }, [\n    isSyncing,\n    doPublish,\n    hasValidationErrors,\n    publishScheduled,\n    validationStatus.revision,\n    revision,\n    isValidating,\n    validationStatus.isValidating,\n  ])\n\n  useEffect(() => {\n    const didPublish = publishState === 'publishing' && !hasDraft\n\n    const nextState = didPublish ? 'published' : null\n    const delay = didPublish ? 200 : 4000\n    const timer = setTimeout(() => {\n      setPublishState(nextState)\n    }, delay)\n    return () => clearTimeout(timer)\n  }, [changesOpen, publishState, hasDraft])\n\n  const telemetry = useTelemetry()\n\n  const handle = useCallback(() => {\n    telemetry.log(DocumentPublished, {\n      publishedImmediately: !draft?._createdAt,\n      previouslyPublished: Boolean(published),\n    })\n    if (\n      syncState.isSyncing ||\n      validationStatus.isValidating ||\n      validationStatus.revision !== revision\n    ) {\n      setPublishScheduled(true)\n    } else {\n      doPublish()\n    }\n  }, [\n    telemetry,\n    draft?._createdAt,\n    published,\n    syncState.isSyncing,\n    validationStatus.isValidating,\n    validationStatus.revision,\n    revision,\n    doPublish,\n  ])\n\n  return useMemo(() => {\n    if (release) {\n      // Version documents are not publishable by this action, they should be published as part of a release\n      return null\n    }\n    if (liveEdit) {\n      return {\n        tone: 'default',\n        icon: PublishIcon,\n        label: t('action.publish.live-edit.label'),\n        title: t('action.publish.live-edit.tooltip'),\n        disabled: true,\n      }\n    }\n\n    if (!isPermissionsLoading && !permissions?.granted) {\n      return {\n        tone: 'default',\n        icon: PublishIcon,\n        label: 'Publish',\n        title: (\n          <InsufficientPermissionsMessage context=\"publish-document\" currentUser={currentUser} />\n        ),\n        disabled: true,\n      }\n    }\n\n    const disabled = Boolean(\n      publishScheduled ||\n        editState?.transactionSyncLock?.enabled ||\n        publishState === 'publishing' ||\n        publishState === 'published' ||\n        hasValidationErrors ||\n        publish.disabled,\n    )\n\n    return {\n      disabled: disabled || isPermissionsLoading,\n      tone: 'default',\n      label:\n        // eslint-disable-next-line no-nested-ternary\n        publishState === 'published'\n          ? t('action.publish.published.label')\n          : publishScheduled || publishState === 'publishing'\n            ? t('action.publish.running.label')\n            : t('action.publish.draft.label'),\n      // @todo: Implement loading state, to show a `<Button loading />` state\n      // loading: publishScheduled || publishState === 'publishing',\n      icon: PublishIcon,\n      // eslint-disable-next-line no-nested-ternary\n      title: publishScheduled\n        ? t('action.publish.waiting')\n        : publishState === 'published' || publishState === 'publishing'\n          ? null\n          : title,\n      shortcut: disabled || publishScheduled ? null : 'Ctrl+Alt+P',\n      onHandle: handle,\n    }\n  }, [\n    release,\n    currentUser,\n    editState?.transactionSyncLock?.enabled,\n    handle,\n    hasValidationErrors,\n    isPermissionsLoading,\n    liveEdit,\n    permissions?.granted,\n    publish.disabled,\n    publishScheduled,\n    publishState,\n    t,\n    title,\n  ])\n}\n\nPublishAction.action = 'publish'\nPublishAction.displayName = 'PublishAction'\n","import {UnpublishIcon} from '@sanity/icons'\nimport {useCallback, useMemo, useState} from 'react'\nimport {\n  type DocumentActionComponent,\n  type DocumentActionModalDialogProps,\n  InsufficientPermissionsMessage,\n  useCurrentUser,\n  useDocumentOperation,\n  useDocumentPairPermissions,\n  useTranslation,\n} from 'sanity'\n\nimport {ConfirmDeleteDialog} from '../components'\nimport {structureLocaleNamespace} from '../i18n'\n\nconst DISABLED_REASON_KEY = {\n  NOT_PUBLISHED: 'action.unpublish.disabled.not-published',\n  NOT_READY: 'action.unpublish.disabled.not-ready',\n  LIVE_EDIT_ENABLED: 'action.unpublish.disabled.live-edit-enabled',\n}\n\n/** @internal */\nexport const UnpublishAction: DocumentActionComponent = ({\n  id,\n  type,\n  draft,\n  onComplete,\n  liveEdit,\n  release,\n}) => {\n  const {unpublish} = useDocumentOperation(id, type)\n  const [isConfirmDialogOpen, setConfirmDialogOpen] = useState(false)\n  const [permissions, isPermissionsLoading] = useDocumentPairPermissions({\n    id,\n    type,\n    permission: 'unpublish',\n  })\n  const currentUser = useCurrentUser()\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const handleCancel = useCallback(() => {\n    setConfirmDialogOpen(false)\n    onComplete()\n  }, [onComplete])\n\n  const handleConfirm = useCallback(() => {\n    setConfirmDialogOpen(false)\n    unpublish.execute()\n    onComplete()\n  }, [onComplete, unpublish])\n\n  const dialog: DocumentActionModalDialogProps | null = useMemo(() => {\n    if (isConfirmDialogOpen) {\n      return {\n        type: 'dialog',\n        onClose: onComplete,\n        content: (\n          <ConfirmDeleteDialog\n            id={draft?._id || id}\n            type={type}\n            // eslint-disable-next-line @sanity/i18n/no-attribute-string-literals\n            action=\"unpublish\"\n            onCancel={handleCancel}\n            onConfirm={handleConfirm}\n          />\n        ),\n      }\n    }\n\n    return null\n  }, [draft, id, handleCancel, handleConfirm, isConfirmDialogOpen, onComplete, type])\n\n  return useMemo(() => {\n    if (release) {\n      // Version documents cannot be unpublished by this action, they should be unpublished as part of a release\n      return null\n    }\n    if (liveEdit) {\n      return null\n    }\n\n    if (!isPermissionsLoading && !permissions?.granted) {\n      return {\n        tone: 'critical',\n        icon: UnpublishIcon,\n        label: 'Unpublish',\n        title: (\n          <InsufficientPermissionsMessage context=\"unpublish-document\" currentUser={currentUser} />\n        ),\n        disabled: true,\n      }\n    }\n\n    return {\n      tone: 'critical',\n      icon: UnpublishIcon,\n      disabled: Boolean(unpublish.disabled) || isPermissionsLoading,\n      label: t('action.unpublish.label'),\n      title: unpublish.disabled ? t(DISABLED_REASON_KEY[unpublish.disabled]) : '',\n      onHandle: () => setConfirmDialogOpen(true),\n      dialog,\n    }\n  }, [\n    release,\n    currentUser,\n    dialog,\n    isPermissionsLoading,\n    liveEdit,\n    permissions?.granted,\n    t,\n    unpublish.disabled,\n  ])\n}\n\nUnpublishAction.action = 'unpublish'\nUnpublishAction.displayName = 'UnpublishAction'\n","/* eslint-disable no-warning-comments */\n/* eslint-disable camelcase */\nimport {Flex, LayerProvider, Stack, Text} from '@sanity/ui'\nimport {memo, useCallback, useMemo, useState} from 'react'\nimport {\n  type DocumentActionComponent,\n  type DocumentActionDescription,\n  Hotkeys,\n  usePerspective,\n} from 'sanity'\n\nimport {Button, Tooltip} from '../../../../ui-components'\nimport {RenderActionCollectionState} from '../../../components'\nimport {HistoryRestoreAction} from '../../../documentActions'\nimport {toLowerCaseNoSpaces} from '../../../util/toLowerCaseNoSpaces'\nimport {useDocumentPane} from '../useDocumentPane'\nimport {ActionMenuButton} from './ActionMenuButton'\nimport {ActionStateDialog} from './ActionStateDialog'\n\ninterface DocumentStatusBarActionsInnerProps {\n  disabled: boolean\n  showMenu: boolean\n  states: DocumentActionDescription[]\n}\n\nconst DocumentStatusBarActionsInner = memo(function DocumentStatusBarActionsInner(\n  props: DocumentStatusBarActionsInnerProps,\n) {\n  const {disabled, showMenu, states} = props\n  const {__internal_tasks} = useDocumentPane()\n  const {selectedReleaseId} = usePerspective()\n  const [firstActionState, ...menuActionStates] = states\n  const [buttonElement, setButtonElement] = useState<HTMLButtonElement | null>(null)\n\n  // TODO: This could be refactored to use the tooltip from the button if the firstAction.title was updated to a string.\n  const tooltipContent = useMemo(() => {\n    if (!firstActionState || (!firstActionState.title && !firstActionState.shortcut)) return null\n\n    return (\n      <Flex style={{maxWidth: 300}} align=\"center\" gap={3}>\n        {firstActionState.title && <Text size={1}>{firstActionState.title}</Text>}\n        {firstActionState.shortcut && (\n          <Hotkeys\n            data-testid=\"document-status-bar-hotkeys\"\n            fontSize={1}\n            style={{marginTop: -4, marginBottom: -4}}\n            keys={String(firstActionState.shortcut)\n              .split('+')\n              .map((s) => s.slice(0, 1).toUpperCase() + s.slice(1).toLowerCase())}\n          />\n        )}\n      </Flex>\n    )\n  }, [firstActionState])\n\n  const sideMenuItems = useMemo(() => {\n    return selectedReleaseId ? [firstActionState, ...menuActionStates] : menuActionStates\n  }, [selectedReleaseId, firstActionState, menuActionStates])\n\n  /* Version / Bundling handling */\n  return (\n    <Flex align=\"center\" gap={1}>\n      {__internal_tasks && __internal_tasks.footerAction}\n      {firstActionState && !selectedReleaseId && (\n        <LayerProvider zOffset={200}>\n          <Tooltip disabled={!tooltipContent} content={tooltipContent} placement=\"top\">\n            <Stack>\n              <Button\n                data-testid={`action-${toLowerCaseNoSpaces(firstActionState.label)}`}\n                disabled={disabled || Boolean(firstActionState.disabled)}\n                icon={firstActionState.icon}\n                // eslint-disable-next-line react/jsx-handler-names\n                onClick={firstActionState.onHandle}\n                ref={setButtonElement}\n                size=\"large\"\n                text={firstActionState.label}\n                tone={firstActionState.tone || 'primary'}\n              />\n            </Stack>\n          </Tooltip>\n        </LayerProvider>\n      )}\n      {/* if it's in version we always only want to show the items on the side menu and not on the main action */}\n      {((showMenu && menuActionStates.length > 0) || selectedReleaseId) && (\n        <ActionMenuButton actionStates={sideMenuItems} disabled={disabled} />\n      )}\n      {firstActionState && firstActionState.dialog && (\n        <ActionStateDialog dialog={firstActionState.dialog} referenceElement={buttonElement} />\n      )}\n    </Flex>\n  )\n})\n\nexport const DocumentStatusBarActions = memo(function DocumentStatusBarActions() {\n  const {actions: allActions, connectionState, documentId, editState} = useDocumentPane()\n  // const [isMenuOpen, setMenuOpen] = useState(false)\n  // const handleMenuOpen = useCallback(() => setMenuOpen(true), [])\n  // const handleMenuClose = useCallback(() => setMenuOpen(false), [])\n  // const handleActionComplete = useCallback(() => setMenuOpen(false), [])\n\n  // The restore action has a dedicated place in the UI; it's only visible when the user is viewing\n  // a different document revision. It must be omitted from this collection.\n  const actions = useMemo(\n    () => (allActions ?? []).filter((action) => !isRestoreAction(action)),\n    [allActions],\n  )\n\n  const renderDocumentStatusBarActions = useCallback<\n    (props: {states: DocumentActionDescription[]}) => React.ReactNode\n  >(\n    ({states}) => (\n      <DocumentStatusBarActionsInner\n        disabled={connectionState !== 'connected'}\n        // isMenuOpen={isMenuOpen}\n        // onMenuOpen={handleMenuOpen}\n        // onMenuClose={handleMenuClose}\n        showMenu={actions.length > 1}\n        states={states}\n        // Use document ID as key to make sure that the actions state is reset when the document changes\n        key={documentId}\n      />\n    ),\n    [actions.length, connectionState, documentId],\n  )\n\n  if (actions.length === 0 || !editState) {\n    return null\n  }\n\n  return (\n    <RenderActionCollectionState\n      // component={}\n      // onActionComplete={handleActionComplete}\n      actions={actions}\n      actionProps={editState}\n      group=\"default\"\n    >\n      {renderDocumentStatusBarActions}\n    </RenderActionCollectionState>\n  )\n})\n\nexport const HistoryStatusBarActions = memo(function HistoryStatusBarActions() {\n  const {actions, connectionState, editState, revisionId: revision} = useDocumentPane()\n\n  const disabled = (editState?.draft || editState?.published || {})._rev === revision\n  const actionProps = useMemo(() => ({...(editState || {}), revision}), [editState, revision])\n\n  // If multiple `restore` actions are defined, ensure only the final one is used.\n  const historyActions = useMemo(() => (actions ?? []).filter(isRestoreAction).slice(-1), [actions])\n\n  const renderDocumentStatusBarActions = useCallback<\n    (props: {states: DocumentActionDescription[]}) => React.ReactNode\n  >(\n    ({states}) => (\n      <DocumentStatusBarActionsInner\n        disabled={connectionState !== 'connected' || Boolean(disabled)}\n        showMenu={false}\n        states={states}\n      />\n    ),\n    [connectionState, disabled],\n  )\n\n  return (\n    <RenderActionCollectionState\n      actions={historyActions}\n      actionProps={actionProps as any}\n      group=\"default\"\n    >\n      {renderDocumentStatusBarActions}\n    </RenderActionCollectionState>\n  )\n})\n\nexport function isRestoreAction(\n  action: DocumentActionComponent,\n): action is DocumentActionComponent & {action: 'restore'} {\n  return action.action === HistoryRestoreAction.action\n}\n","import {TabList} from '@sanity/ui'\nimport {type ComponentType, type ReactNode, useCallback} from 'react'\n\nimport {Tab} from '../../../../../ui-components'\nimport {usePaneRouter} from '../../../../components'\nimport {useDocumentPane} from '../../useDocumentPane'\n\nexport function DocumentHeaderTabs() {\n  const {activeViewId, paneKey, views} = useDocumentPane()\n  const tabPanelId = `${paneKey}tabpanel`\n\n  return (\n    <TabList space={1}>\n      {views.map((view, index) => (\n        <DocumentHeaderTab\n          icon={view.icon}\n          id={`${paneKey}tab-${view.id}`}\n          isActive={activeViewId === view.id}\n          key={view.id}\n          label={view.title}\n          tabPanelId={tabPanelId}\n          viewId={index === 0 ? null : (view.id ?? null)}\n        />\n      ))}\n    </TabList>\n  )\n}\n\nfunction DocumentHeaderTab(props: {\n  icon?: ComponentType | ReactNode\n  id: string\n  isActive: boolean\n  label: string\n  tabPanelId: string\n  viewId: string | null\n}) {\n  const {icon, id, isActive, label, tabPanelId, viewId, ...rest} = props\n  const {ready, editState} = useDocumentPane()\n  const {setView} = usePaneRouter()\n  const handleClick = useCallback(() => setView(viewId), [setView, viewId])\n\n  return (\n    <Tab\n      {...rest} // required to enable <TabList> keyboard navigation\n      aria-controls={tabPanelId}\n      disabled={!ready && !editState?.draft && !editState?.published}\n      icon={icon}\n      id={id}\n      label={label}\n      onClick={handleClick}\n      selected={isActive}\n    />\n  )\n}\n","import {unstable_useValuePreview as useValuePreview, useTranslation} from 'sanity'\n\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {useDocumentPane} from '../../useDocumentPane'\n\nexport function DocumentHeaderTitle(): React.JSX.Element {\n  const {connectionState, schemaType, title, value: documentValue} = useDocumentPane()\n  const subscribed = Boolean(documentValue)\n\n  const {error, value} = useValuePreview({\n    enabled: subscribed,\n    schemaType,\n    value: documentValue,\n  })\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  if (connectionState === 'connecting' && !subscribed) {\n    return <></>\n  }\n\n  if (title) {\n    return <>{title}</>\n  }\n\n  if (!documentValue) {\n    return (\n      <>\n        {t('panes.document-header-title.new.text', {\n          schemaType: schemaType?.title || schemaType?.name,\n        })}\n      </>\n    )\n  }\n\n  if (error) {\n    return <>{t('panes.document-header-title.error.text', {error: error.message})}</>\n  }\n\n  return (\n    <>\n      {value?.title || (\n        <span style={{color: 'var(--card-muted-fg-color)'}}>\n          {t('panes.document-header-title.untitled.text')}\n        </span>\n      )}\n    </>\n  )\n}\n","import {Text} from '@sanity/ui'\nimport {memo, useCallback, useMemo} from 'react'\nimport {\n  formatRelativeLocalePublishDate,\n  getReleaseIdFromReleaseDocumentId,\n  getReleaseTone,\n  getVersionFromId,\n  isDraftId,\n  isPublishedId,\n  isPublishedPerspective,\n  isReleaseScheduledOrScheduling,\n  isVersionId,\n  type ReleaseDocument,\n  Translate,\n  useActiveReleases,\n  useArchivedReleases,\n  useDateTimeFormat,\n  type UseDateTimeFormatOptions,\n  useDocumentVersions,\n  usePerspective,\n  useSchema,\n  useSetPerspective,\n  useTranslation,\n  VersionChip,\n} from 'sanity'\nimport {usePaneRouter} from 'sanity/structure'\n\nimport {isLiveEditEnabled} from '../../../../../components/paneItem/helpers'\nimport {useDocumentPane} from '../../../useDocumentPane'\n\ntype FilterReleases = {\n  notCurrentReleases: ReleaseDocument[]\n  currentReleases: ReleaseDocument[]\n  inCreation: ReleaseDocument | null\n}\n\nconst TooltipContent = ({release}: {release: ReleaseDocument}) => {\n  const {t} = useTranslation()\n\n  if (release.metadata.releaseType === 'asap') {\n    return <Text size={1}>{t('release.type.asap')}</Text>\n  }\n  if (release.metadata.releaseType === 'scheduled') {\n    const isActive = release.state === 'active'\n\n    return (\n      release.metadata.intendedPublishAt && (\n        <Text size={1}>\n          {isActive ? (\n            <Translate\n              t={t}\n              i18nKey=\"release.chip.tooltip.intended-for-date\"\n              values={{\n                date: formatRelativeLocalePublishDate(release),\n              }}\n            />\n          ) : (\n            <Translate\n              t={t}\n              i18nKey=\"release.chip.tooltip.scheduled-for-date\"\n              values={{\n                date: formatRelativeLocalePublishDate(release),\n              }}\n            />\n          )}\n        </Text>\n      )\n    )\n  }\n\n  if (release.metadata.releaseType === 'undecided') {\n    return <Text size={1}>{t('release.type.undecided')}</Text>\n  }\n  return null\n}\n\nconst DATE_TIME_FORMAT: UseDateTimeFormatOptions = {\n  dateStyle: 'medium',\n  timeStyle: 'short',\n}\n\nexport const DocumentPerspectiveList = memo(function DocumentPerspectiveList() {\n  const {selectedReleaseId, selectedPerspectiveName} = usePerspective()\n  const {t} = useTranslation()\n  const setPerspective = useSetPerspective()\n  const {params} = usePaneRouter()\n  const dateTimeFormat = useDateTimeFormat(DATE_TIME_FORMAT)\n  const {data: releases, loading} = useActiveReleases()\n  const {data: archivedReleases} = useArchivedReleases()\n  const schema = useSchema()\n  const {editState, displayed, documentType, documentId} = useDocumentPane()\n  const {data: documentVersions} = useDocumentVersions({documentId})\n  const isCreatingDocument = displayed && !displayed._createdAt\n\n  const filteredReleases: FilterReleases = useMemo(() => {\n    if (!documentVersions) return {notCurrentReleases: [], currentReleases: [], inCreation: null}\n    // Gets the releases ids from the document versions, it means, the releases that the document belongs to\n    const releasesIds = documentVersions.map((id) => getVersionFromId(id))\n    const activeReleases = releases.reduce(\n      (acc: FilterReleases, release) => {\n        const versionDocExists = releasesIds.includes(\n          getReleaseIdFromReleaseDocumentId(release._id),\n        )\n        const releaseId = getReleaseIdFromReleaseDocumentId(release._id)\n        const isCreatingThisVersion =\n          isCreatingDocument &&\n          releaseId === getVersionFromId(displayed._id || '') &&\n          releaseId === selectedReleaseId\n\n        if (isCreatingThisVersion) {\n          acc.inCreation = release\n        } else if (versionDocExists) {\n          acc.currentReleases.push(release)\n        } else {\n          acc.notCurrentReleases.push(release)\n        }\n        return acc\n      },\n      {notCurrentReleases: [], currentReleases: [], inCreation: null},\n    )\n\n    // without historyVersion, version is not in an archived release\n    if (!params?.historyVersion) return activeReleases\n\n    const archivedRelease = archivedReleases.find(\n      (r) => getReleaseIdFromReleaseDocumentId(r._id) === params?.historyVersion,\n    )\n\n    // only for explicitly archived releases; published releases use published perspective\n    if (archivedRelease?.state === 'archived') {\n      activeReleases.currentReleases.push(archivedRelease)\n    }\n\n    return activeReleases\n  }, [\n    archivedReleases,\n    isCreatingDocument,\n    displayed?._id,\n    documentVersions,\n    params?.historyVersion,\n    releases,\n    selectedReleaseId,\n  ])\n\n  const handlePerspectiveChange = useCallback(\n    (perspective: Parameters<typeof setPerspective>[0]) => () => {\n      setPerspective(perspective)\n    },\n    [setPerspective],\n  )\n\n  const schemaType = schema.get(documentType)\n  const isLiveEdit = schemaType ? isLiveEditEnabled(schemaType) : false\n\n  const isPublishedChipDisabled = useMemo(() => {\n    // If it's a live edit document the only option to edit it is through\n    // the published perspective, users should be able to select it.\n    if (isLiveEdit && !selectedReleaseId) return false\n\n    // If it's not live edit, we want to check for the existence of the published doc.\n    return !editState?.published\n  }, [isLiveEdit, selectedReleaseId, editState?.published])\n\n  const getReleaseChipState = useCallback(\n    (release: ReleaseDocument): {selected: boolean; disabled?: boolean} => {\n      if (!params?.historyVersion)\n        return {\n          selected:\n            getReleaseIdFromReleaseDocumentId(release._id) ===\n            getVersionFromId(displayed?._id || ''),\n        }\n\n      const isReleaseHistoryMatch =\n        getReleaseIdFromReleaseDocumentId(release._id) === params.historyVersion\n\n      return {selected: isReleaseHistoryMatch, disabled: isReleaseHistoryMatch}\n    },\n    [displayed?._id, params?.historyVersion],\n  )\n\n  const isPublishSelected: boolean = useMemo(() => {\n    /**\n     * The publish perspective is selected when:\n     *  - the document is live edit and there is no draft\n     *  - the document is published and the selected perspective is published\n     */\n    if (isLiveEdit && !editState?.draft?._id && !selectedReleaseId) return true\n    if (\n      isPublishedId(displayed?._id || '') &&\n      isPublishedPerspective(selectedPerspectiveName || '')\n    ) {\n      return true\n    }\n    return false\n  }, [\n    displayed?._id,\n    editState?.draft?._id,\n    isLiveEdit,\n    selectedPerspectiveName,\n    selectedReleaseId,\n  ])\n\n  const isDraftSelected: boolean = useMemo(() => {\n    const displayedId = displayed?._id || ''\n    /** the draft is selected when:\n     * not viewing a historical version,\n     * when the document displayed is a draft,\n     * when the perspective is null,\n     * when the document is not published and the displayed version is draft,\n     * when there is no draft (new document),\n     */\n    if (isPublishSelected) return false\n    if (params?.historyVersion) return false\n    if (selectedPerspectiveName) return false\n    if (isVersionId(displayedId)) return false\n    if (isDraftId(displayedId)) return true\n    if (\n      isPublishedId(displayedId) &&\n      editState?.published &&\n      isPublishedPerspective(selectedPerspectiveName || '')\n    )\n      return false\n    return true\n  }, [\n    displayed?._id,\n    editState?.published,\n    isPublishSelected,\n    params?.historyVersion,\n    selectedPerspectiveName,\n  ])\n\n  const isDraftDisabled: boolean = useMemo(() => {\n    // Draft is disabled when we are creating a new document inside a release\n    // or when the document is live edit and there is no draft\n    if (editState?.draft) return false\n\n    if (isCreatingDocument && selectedReleaseId) return true\n    if (isLiveEdit) return true\n    return false\n  }, [editState?.draft, isCreatingDocument, isLiveEdit, selectedReleaseId])\n\n  return (\n    <>\n      <VersionChip\n        tooltipContent={\n          <Text size={1}>\n            {editState?.published && editState?.published?._updatedAt ? (\n              <Translate\n                t={t}\n                i18nKey=\"release.chip.tooltip.published-date\"\n                values={{date: dateTimeFormat.format(new Date(editState?.published._updatedAt))}}\n              />\n            ) : (\n              <>{t('release.chip.tooltip.not-published')}</>\n            )}\n          </Text>\n        }\n        disabled={isPublishedChipDisabled}\n        onClick={handlePerspectiveChange('published')}\n        selected={isPublishSelected}\n        text={t('release.chip.published')}\n        tone=\"positive\"\n        contextValues={{\n          documentId: editState?.published?._id || editState?.id || '',\n          menuReleaseId: editState?.published?._id || editState?.id || '',\n          releases: filteredReleases.notCurrentReleases,\n          releasesLoading: loading,\n          documentType,\n          fromRelease: 'published',\n          isVersion: false,\n          disabled: !editState?.published,\n        }}\n      />\n      <VersionChip\n        tooltipContent={\n          <Text size={1}>\n            {editState?.draft ? (\n              <>\n                {editState?.draft._updatedAt ? (\n                  <Translate\n                    t={t}\n                    i18nKey=\"release.chip.tooltip.edited-date\"\n                    values={{date: dateTimeFormat.format(new Date(editState?.draft._updatedAt))}}\n                  />\n                ) : (\n                  <Translate\n                    t={t}\n                    i18nKey=\"release.chip.tooltip.created-date\"\n                    values={{date: dateTimeFormat.format(new Date(editState?.draft._createdAt))}}\n                  />\n                )}\n              </>\n            ) : (\n              <>\n                {isLiveEdit\n                  ? t('release.chip.tooltip.draft-disabled.live-edit')\n                  : t('release.chip.tooltip.no-edits')}\n              </>\n            )}\n          </Text>\n        }\n        selected={isDraftSelected}\n        disabled={isDraftDisabled}\n        text={t('release.chip.draft')}\n        tone={editState?.draft ? 'caution' : 'neutral'}\n        onClick={handlePerspectiveChange('drafts')}\n        contextValues={{\n          documentId: editState?.draft?._id || editState?.published?._id || editState?.id || '',\n          menuReleaseId: editState?.draft?._id || editState?.published?._id || editState?.id || '',\n          releases: filteredReleases.notCurrentReleases,\n          releasesLoading: loading,\n          documentType: documentType,\n          fromRelease: 'draft',\n          isVersion: false,\n          disabled: !editState?.draft,\n        }}\n      />\n      {filteredReleases.inCreation && (\n        <VersionChip\n          tooltipContent={<TooltipContent release={filteredReleases.inCreation} />}\n          selected\n          onClick={() => {}}\n          locked={false}\n          tone={getReleaseTone(filteredReleases.inCreation)}\n          text={\n            filteredReleases.inCreation.metadata.title || t('release.placeholder-untitled-release')\n          }\n          contextValues={{\n            disabled: true, // disable the chip context menu, this one is in creation\n            documentId: displayed?._id || '',\n            menuReleaseId: filteredReleases.inCreation._id,\n            releases: filteredReleases.notCurrentReleases,\n            releasesLoading: loading,\n            documentType,\n            fromRelease: getReleaseIdFromReleaseDocumentId(filteredReleases.inCreation._id),\n            releaseState: filteredReleases.inCreation.state,\n            isVersion: true,\n          }}\n        />\n      )}\n\n      {displayed &&\n        filteredReleases.currentReleases?.map((release) => (\n          <VersionChip\n            key={release._id}\n            tooltipContent={<TooltipContent release={release} />}\n            {...getReleaseChipState(release)}\n            onClick={handlePerspectiveChange(getReleaseIdFromReleaseDocumentId(release._id))}\n            text={release.metadata.title || t('release.placeholder-untitled-release')}\n            tone={getReleaseTone(release)}\n            locked={isReleaseScheduledOrScheduling(release)}\n            contextValues={{\n              documentId: displayed?._id || '',\n              menuReleaseId: release._id,\n              releases: filteredReleases.notCurrentReleases,\n              releasesLoading: loading,\n              documentType: documentType,\n              fromRelease: getReleaseIdFromReleaseDocumentId(release._id),\n              releaseState: release.state,\n              isVersion: true,\n            }}\n          />\n        ))}\n    </>\n  )\n})\n","import {ArrowLeftIcon, CloseIcon, SplitVerticalIcon} from '@sanity/icons'\nimport {Box, Card, Flex} from '@sanity/ui'\nimport {\n  type ForwardedRef,\n  forwardRef,\n  memo,\n  useCallback,\n  useDeferredValue,\n  useMemo,\n  useState,\n} from 'react'\nimport {type DocumentActionDescription, useFieldActions, useTranslation} from 'sanity'\n\nimport {Button, TooltipDelayGroupProvider} from '../../../../../ui-components'\nimport {\n  PaneContextMenuButton,\n  PaneHeader,\n  PaneHeaderActionButton,\n  RenderActionCollectionState,\n  usePane,\n  usePaneRouter,\n} from '../../../../components'\nimport {type _PaneMenuNode} from '../../../../components/pane/types'\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {isMenuNodeButton, isNotMenuNodeButton, resolveMenuNodes} from '../../../../menuNodes'\nimport {type PaneMenuItem} from '../../../../types'\nimport {useStructureTool} from '../../../../useStructureTool'\nimport {ActionDialogWrapper, ActionMenuListItem} from '../../statusBar/ActionMenuButton'\nimport {isRestoreAction} from '../../statusBar/DocumentStatusBarActions'\nimport {useDocumentPane} from '../../useDocumentPane'\nimport {DocumentHeaderTabs} from './DocumentHeaderTabs'\nimport {DocumentHeaderTitle} from './DocumentHeaderTitle'\nimport {DocumentPerspectiveList} from './perspective/DocumentPerspectiveList'\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface DocumentPanelHeaderProps {\n  menuItems: PaneMenuItem[]\n}\n\nexport const DocumentPanelHeader = memo(\n  forwardRef(function DocumentPanelHeader(\n    _props: DocumentPanelHeaderProps,\n    ref: ForwardedRef<HTMLDivElement>,\n  ) {\n    const {menuItems} = _props\n    const {\n      actions: allActions,\n      editState,\n      onMenuAction,\n      onPaneClose,\n      onPaneSplit,\n      menuItemGroups,\n      schemaType,\n      connectionState,\n      views,\n      unstable_languageFilter,\n    } = useDocumentPane()\n    const {features} = useStructureTool()\n    const {index, BackLink, hasGroupSiblings} = usePaneRouter()\n    const {actions: fieldActions} = useFieldActions()\n    const [referenceElement, setReferenceElement] = useState<HTMLElement | null>(null)\n\n    // The restore action has a dedicated place in the UI; it's only visible when the user is\n    // viewing a different document revision. It must be omitted from this collection.\n    const actions = useMemo(\n      () => (allActions ?? []).filter((action) => !isRestoreAction(action)),\n      [allActions],\n    )\n\n    const menuNodes = useMemo(\n      () =>\n        resolveMenuNodes({actionHandler: onMenuAction, fieldActions, menuItems, menuItemGroups}),\n      [onMenuAction, fieldActions, menuItemGroups, menuItems],\n    )\n\n    const menuButtonNodes = useMemo(() => menuNodes.filter(isMenuNodeButton), [menuNodes])\n    const contextMenuNodes = useMemo(() => menuNodes.filter(isNotMenuNodeButton), [menuNodes])\n    const showTabs = views.length > 1\n\n    const {collapsed, isLast} = usePane()\n    // Prevent focus if this is the last (non-collapsed) pane.\n    const tabIndex = isLast && !collapsed ? -1 : 0\n\n    // there are three kinds of buttons possible:\n    //\n    // 1. split pane - creates a new split pane\n    // 2. close split pane — closes the current split pane\n    // 3. close pane group — closes the current pane group\n\n    // show the split pane button if they're enabled and there is more than one\n    // view available to use to create a split view\n    const showSplitPaneButton = features.splitViews && onPaneSplit && views.length > 1\n\n    // show the split pane button close button if the split button is showing\n    // and there is more than one split pane open (aka has-siblings)\n    const showSplitPaneCloseButton = showSplitPaneButton && hasGroupSiblings\n\n    // show the back button if both the feature is enabled and the current pane\n    // is not the first\n    const showBackButton = features.backButton && index > 0\n\n    // show the pane group close button if the `showSplitPaneCloseButton` is\n    // _not_ showing (the split pane button replaces the group close button)\n    // and if the back button is not showing (the back button and the close\n    // button do the same thing and shouldn't be shown at the same time)\n    // and if a BackLink component was provided\n    const showPaneGroupCloseButton = !showSplitPaneCloseButton && !showBackButton && !!BackLink\n\n    const {t} = useTranslation(structureLocaleNamespace)\n\n    const renderPaneActions = useCallback<\n      (props: {states: DocumentActionDescription[]}) => React.ReactNode\n    >(\n      ({states}) => (\n        <DocumentPanelHeaderActionDialogDeferred\n          contextMenuNodes={contextMenuNodes}\n          setReferenceElement={setReferenceElement}\n          referenceElement={referenceElement}\n          states={states}\n        />\n      ),\n      [contextMenuNodes, referenceElement],\n    )\n\n    const title = useMemo(() => <DocumentHeaderTitle />, [])\n    const tabs = useMemo(() => showTabs && <DocumentHeaderTabs />, [showTabs])\n    const backButton = useMemo(\n      () =>\n        showBackButton && (\n          <Button\n            as={BackLink}\n            data-as=\"a\"\n            icon={ArrowLeftIcon}\n            mode=\"bleed\"\n            tooltipProps={{content: t('pane-header.back-button.text')}}\n          />\n        ),\n      [BackLink, showBackButton, t],\n    )\n    const renderedActions = useMemo(\n      () => (\n        <Flex align=\"center\" gap={1}>\n          {unstable_languageFilter.length > 0 && (\n            <>\n              {unstable_languageFilter.map((LanguageFilterComponent, idx) => {\n                return (\n                  <LanguageFilterComponent\n                    // eslint-disable-next-line react/no-array-index-key\n                    key={`language-filter-${idx}`}\n                    schemaType={schemaType}\n                  />\n                )\n              })}\n            </>\n          )}\n\n          {menuButtonNodes.map((item) => (\n            <PaneHeaderActionButton key={item.key} node={item} />\n          ))}\n          {editState && (\n            <RenderActionCollectionState\n              actions={actions}\n              actionProps={editState}\n              group=\"paneActions\"\n            >\n              {renderPaneActions}\n            </RenderActionCollectionState>\n          )}\n\n          {showSplitPaneButton && (\n            <Button\n              aria-label={t('buttons.split-pane-button.aria-label')}\n              icon={SplitVerticalIcon}\n              key=\"split-pane-button\"\n              mode=\"bleed\"\n              onClick={onPaneSplit}\n              tooltipProps={{content: t('buttons.split-pane-button.tooltip')}}\n            />\n          )}\n\n          {showSplitPaneCloseButton && (\n            <Button\n              icon={CloseIcon}\n              key=\"close-view-button\"\n              mode=\"bleed\"\n              onClick={onPaneClose}\n              tooltipProps={{content: t('buttons.split-pane-close-button.title')}}\n            />\n          )}\n\n          {showPaneGroupCloseButton && (\n            <Button\n              icon={CloseIcon}\n              key=\"close-view-button\"\n              mode=\"bleed\"\n              tooltipProps={{content: t('buttons.split-pane-close-group-button.title')}}\n              as={BackLink}\n            />\n          )}\n        </Flex>\n      ),\n      [\n        BackLink,\n        actions,\n        editState,\n        menuButtonNodes,\n        onPaneClose,\n        onPaneSplit,\n        renderPaneActions,\n        schemaType,\n        showPaneGroupCloseButton,\n        showSplitPaneButton,\n        showSplitPaneCloseButton,\n        t,\n        unstable_languageFilter,\n      ],\n    )\n\n    return (\n      <TooltipDelayGroupProvider>\n        <Card hidden={collapsed} style={{lineHeight: 0}}>\n          <Flex>\n            <Flex flex={1} wrap=\"wrap\" gap={1} padding={3} paddingBottom={0}>\n              <DocumentPerspectiveList />\n            </Flex>\n\n            <Box flex=\"none\" padding={3} paddingBottom={0}>\n              {renderedActions}\n            </Box>\n          </Flex>\n        </Card>\n\n        <PaneHeader\n          border\n          ref={ref}\n          loading={connectionState === 'connecting' && !editState?.draft && !editState?.published}\n          title={title}\n          tabs={tabs}\n          tabIndex={tabIndex}\n          backButton={backButton}\n        />\n      </TooltipDelayGroupProvider>\n    )\n  }),\n)\n\nconst DocumentPanelHeaderActionDialogDeferred = memo(\n  function DocumentPanelHeaderActionDialogDeferred(props: {\n    states: DocumentActionDescription[]\n    setReferenceElement: React.Dispatch<React.SetStateAction<HTMLElement | null>>\n    referenceElement: HTMLElement | null\n    contextMenuNodes: _PaneMenuNode[]\n  }) {\n    const {setReferenceElement, referenceElement, contextMenuNodes} = props\n    /**\n     * The purpose of this component is to allow deferring the rendering of document action hook states if the main thread becomes very busy.\n     * The `useDeferredValue` doesn't have an effect unless it's used to delay rendering a component that has `React.memo` to prevent unnecessary re-renders.\n     */\n    const states = useDeferredValue(props.states)\n\n    return (\n      <DocumentPanelHeaderActionDialog\n        setReferenceElement={setReferenceElement}\n        referenceElement={referenceElement}\n        contextMenuNodes={contextMenuNodes}\n        states={states}\n      />\n    )\n  },\n)\n\nconst DocumentPanelHeaderActionDialog = memo(function DocumentPanelHeaderActionDialog(props: {\n  states: DocumentActionDescription[]\n  setReferenceElement: React.Dispatch<React.SetStateAction<HTMLElement | null>>\n  referenceElement: HTMLElement | null\n  contextMenuNodes: _PaneMenuNode[]\n}) {\n  const {states, setReferenceElement, contextMenuNodes, referenceElement} = props\n\n  const renderActionDialog = useCallback<\n    ({handleAction}: {handleAction: (idx: number) => void}) => React.ReactNode\n  >(\n    ({handleAction}) => (\n      <div ref={setReferenceElement}>\n        <PaneContextMenuButton\n          nodes={contextMenuNodes}\n          key=\"context-menu\"\n          actionsNodes={\n            states.length > 0\n              ? states.map((actionState, actionIndex) => (\n                  <ActionMenuListItem\n                    key={actionState.label}\n                    actionState={actionState}\n                    disabled={Boolean(actionState.disabled)}\n                    index={actionIndex}\n                    onAction={handleAction}\n                  />\n                ))\n              : undefined\n          }\n        />\n      </div>\n    ),\n    [contextMenuNodes, setReferenceElement, states],\n  )\n\n  return (\n    <ActionDialogWrapper actionStates={states} referenceElement={referenceElement}>\n      {renderActionDialog}\n    </ActionDialogWrapper>\n  )\n})\n","import {Button, type ButtonProps} from '../../../ui-components'\n\ninterface SpacerButtonProps {\n  size?: ButtonProps['size']\n}\n\n/**\n * This renders a visually hidden <Button> component that is still contributes\n * to document layout.\n *\n * It's used to simplify padding in Sanity UI components that contain buttons which\n * may not always be rendered.\n *\n * TODO: let's find a more elegant solve to this layout shift problem\n *\n * @internal\n */\nexport function SpacerButton({size}: SpacerButtonProps) {\n  return (\n    <Button\n      aria-hidden\n      disabled\n      size={size}\n      style={{\n        pointerEvents: 'none',\n        visibility: 'hidden',\n        width: 0,\n      }}\n      text=\"-\"\n    />\n  )\n}\n","import {Badge, type BadgeTone, Inline} from '@sanity/ui'\nimport {memo, useCallback, useDeferredValue} from 'react'\nimport {type DocumentBadgeDescription} from 'sanity'\n\nimport {Tooltip} from '../../../../ui-components'\nimport {RenderBadgeCollectionState} from '../../../components'\nimport {useDocumentPane} from '../useDocumentPane'\n\ninterface DocumentBadgesInnerProps {\n  states: DocumentBadgeDescription[]\n}\n\nconst BADGE_TONES: Record<string, BadgeTone | undefined> = {\n  primary: 'primary',\n  success: 'positive',\n  warning: 'caution',\n  danger: 'critical',\n}\n\nconst DocumentBadgesInner = memo(function DocumentBadgesInner({states}: DocumentBadgesInnerProps) {\n  if (states.length === 0) {\n    return null\n  }\n  return (\n    <Inline space={1}>\n      {states.map((badge, index) => (\n        <Tooltip\n          content={badge.title}\n          disabled={!badge.title}\n          key={`${badge.label}-${index}`}\n          placement=\"top\"\n          portal\n        >\n          <Badge\n            fontSize={1}\n            mode=\"outline\"\n            paddingX={2}\n            paddingY={1}\n            radius={4}\n            tone={badge.color ? BADGE_TONES[badge.color] : undefined}\n            style={{whiteSpace: 'nowrap'}}\n          >\n            {badge.label}\n          </Badge>\n        </Tooltip>\n      ))}\n    </Inline>\n  )\n})\n\nconst DocumentBadgesDeferred = memo(function DocumentBadgesDeferred(\n  props: DocumentBadgesInnerProps,\n) {\n  /**\n   * The purpose of this component is to allow deferring the rendering of document action hook states if the main thread becomes very busy.\n   * The `useDeferredValue` doesn't have an effect unless it's used to delay rendering a component that has `React.memo` to prevent unnecessary re-renders.\n   */\n  const states = useDeferredValue(props.states)\n  return <DocumentBadgesInner states={states} />\n})\n\nexport function DocumentBadges() {\n  const {badges, editState} = useDocumentPane()\n\n  const renderDocumentBadges = useCallback<\n    (props: {states: DocumentBadgeDescription[]}) => React.ReactNode\n  >(({states}) => <DocumentBadgesDeferred states={states} />, [])\n\n  if (!editState || !badges) return null\n\n  return (\n    <RenderBadgeCollectionState badges={badges} badgeProps={editState}>\n      {renderDocumentBadges}\n    </RenderBadgeCollectionState>\n  )\n}\n","import {\n  AddIcon,\n  CloseIcon,\n  EditIcon,\n  type IconComponent,\n  PublishIcon,\n  TrashIcon,\n  UnpublishIcon,\n} from '@sanity/icons'\n\nexport const TIMELINE_ICON_COMPONENTS: {[key: string]: IconComponent | undefined} = {\n  create: AddIcon,\n  delete: TrashIcon,\n  discardDraft: CloseIcon,\n  initial: AddIcon,\n  editDraft: EditIcon,\n  editLive: EditIcon,\n  publish: PublishIcon,\n  unpublish: UnpublishIcon,\n}\n","import {type IconComponent} from '@sanity/icons'\nimport {type ChunkType} from 'sanity'\n\nimport {TIMELINE_ICON_COMPONENTS} from './constants'\n\nexport function getTimelineEventIconComponent(type: ChunkType): IconComponent | undefined {\n  return TIMELINE_ICON_COMPONENTS[type]\n}\n","import {ChevronLeftIcon} from '@sanity/icons'\nimport {type MouseEvent, useCallback} from 'react'\nimport {useTranslation} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Button} from '../../../../ui-components'\nimport {structureLocaleNamespace} from '../../../i18n'\nimport {TIMELINE_LIST_WRAPPER_ID} from './timeline'\n\n/**\n * This is a hack to force the scrollbar to not appear when the list is expanding,\n * if we don't do this the scrollbar will appear for a brief moment when the list is expanding and then disappear\n * when the list is fully expanded.\n */\nfunction hideScrollbarOnExpand(isExpanded: boolean) {\n  // Do nothing if the list is already expanded\n  if (isExpanded) return\n\n  const listWrapper = document.getElementById(TIMELINE_LIST_WRAPPER_ID)\n\n  if (listWrapper) {\n    const firstChildren = listWrapper.children[0] as HTMLElement\n    const hasScrollbar = firstChildren.scrollHeight > firstChildren.clientHeight\n    if (!hasScrollbar) {\n      //\n      const currentStyle = getComputedStyle(firstChildren).overflowY\n      // Add overflow hidden to the listWrapper to avoid the scrollbar to appear when expanding\n      firstChildren.style.overflowY = 'hidden'\n      setTimeout(() => {\n        // Reset the overflow style after the list is expanded\n        firstChildren.style.overflowY = currentStyle\n      }, 0)\n    }\n  }\n}\n\nconst FlipIcon = styled(ChevronLeftIcon)`\n  transition: transform 200ms;\n  &[data-expanded='true'] {\n    transform: rotate(-90deg);\n  }\n`\n\nexport function ExpandableTimelineItemButton({\n  isExpanded,\n  onExpand,\n}: {\n  isExpanded: boolean\n  onExpand: () => void\n}) {\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const handleExpandClick = useCallback(\n    (e: MouseEvent<HTMLButtonElement>) => {\n      e.stopPropagation()\n      hideScrollbarOnExpand(isExpanded)\n      onExpand()\n    },\n    [onExpand, isExpanded],\n  )\n\n  return (\n    <Button\n      mode=\"bleed\"\n      icon={<FlipIcon data-expanded={isExpanded} />}\n      tooltipProps={{\n        content: isExpanded\n          ? t('timeline-item.menu.action-collapse')\n          : t('timeline-item.menu.action-expand'),\n      }}\n      onClick={handleExpandClick}\n    />\n  )\n}\n","import {Box, Flex, Stack} from '@sanity/ui'\nimport {css, styled} from 'styled-components'\n\nexport const StackWrapper = styled(Stack)`\n  max-width: 200px;\n`\n\nexport const ListWrapper = styled(Flex)<{$maxHeight: string}>`\n  max-height: ${(props) => props.$maxHeight};\n  min-width: 244px;\n`\n\nexport const Root = styled(Box)<{$visible?: boolean}>(({$visible}) => {\n  return css`\n    opacity: 0;\n    pointer-events: none;\n    transition: opacity 0.2s;\n\n    ${$visible &&\n    css`\n      opacity: 1;\n      pointer-events: auto;\n    `}\n  `\n})\n","import {type ChunkType, type StudioLocaleResourceKeys} from 'sanity'\n\n/**\n * Maps from a chunk type to an i18n key for the operation\n *\n * @internal\n */\nexport const TIMELINE_ITEM_I18N_KEY_MAPPING: Record<ChunkType, StudioLocaleResourceKeys> = {\n  initial: 'timeline.operation.created-initial',\n  create: 'timeline.operation.created',\n  publish: 'timeline.operation.published',\n  editLive: 'timeline.operation.edited-live',\n  editDraft: 'timeline.operation.edited-draft',\n  unpublish: 'timeline.operation.unpublished',\n  discardDraft: 'timeline.operation.draft-discarded',\n  delete: 'timeline.operation.deleted',\n}\n","import {type AvatarSize, AvatarStack} from '@sanity/ui'\nimport {UserAvatar} from 'sanity'\n\ninterface UserAvatarStackProps {\n  maxLength?: number\n  userIds: string[]\n  size?: AvatarSize\n  withTooltip?: boolean\n}\n\nexport function UserAvatarStack({\n  maxLength,\n  userIds,\n  size,\n  withTooltip = true,\n}: UserAvatarStackProps) {\n  return (\n    <AvatarStack maxLength={maxLength} size={size}>\n      {userIds.map((userId) => (\n        <UserAvatar key={userId} user={userId} withTooltip={withTooltip} />\n      ))}\n    </AvatarStack>\n  )\n}\n","import {Box, Card, Flex, Skeleton, Stack, Text} from '@sanity/ui'\n// eslint-disable-next-line camelcase\nimport {getTheme_v2, type ThemeColorAvatarColorKey} from '@sanity/ui/theme'\nimport {type MouseEvent, useCallback, useMemo} from 'react'\nimport {\n  AvatarSkeleton,\n  type ChunkType,\n  type RelativeTimeOptions,\n  useDateTimeFormat,\n  UserAvatar,\n  useRelativeTime,\n  useTranslation,\n  useUser,\n} from 'sanity'\nimport {css, styled} from 'styled-components'\n\nimport {Tooltip} from '../../../../ui-components'\nimport {getTimelineEventIconComponent} from './helpers'\nimport {TIMELINE_ITEM_I18N_KEY_MAPPING} from './timelineI18n'\nimport {UserAvatarStack} from './userAvatarStack'\nimport {type ChunksWithCollapsedDrafts} from './utils'\n\nexport const IconBox = styled(Flex)<{$color: ThemeColorAvatarColorKey}>((props) => {\n  const theme = getTheme_v2(props.theme)\n  const color = props.$color\n\n  return css`\n    --card-icon-color: ${theme.color.avatar[color].fg};\n    background-color: ${theme.color.avatar[color].bg};\n    box-shadow: 0 0 0 1px var(--card-bg-color);\n\n    position: absolute;\n    width: ${theme.avatar.sizes[0].size}px;\n    height: ${theme.avatar.sizes[0].size}px;\n    right: -3px;\n    bottom: -3px;\n    border-radius: 50%;\n  `\n})\n\nconst TIMELINE_ITEM_EVENT_TONE: Record<ChunkType | 'withinSelection', ThemeColorAvatarColorKey> = {\n  initial: 'blue',\n  create: 'blue',\n  publish: 'green',\n  editLive: 'green',\n  editDraft: 'yellow',\n  unpublish: 'orange',\n  discardDraft: 'orange',\n  delete: 'red',\n  withinSelection: 'magenta',\n}\n\nexport interface TimelineItemProps {\n  chunk: ChunksWithCollapsedDrafts\n  isSelected: boolean\n  onSelect: (chunk: ChunksWithCollapsedDrafts) => void\n  collaborators?: Set<string>\n  optionsMenu?: React.ReactNode\n}\n\nconst RELATIVE_TIME_OPTIONS: RelativeTimeOptions = {\n  minimal: true,\n  useTemporalPhrase: true,\n}\n\nconst NameSkeleton = styled(Skeleton)((props) => {\n  const theme = getTheme_v2(props.theme)\n  return css`\n    width: 6ch;\n    height: ${theme.font.text.sizes[0].lineHeight}px;\n  `\n})\n\nconst UserLine = ({userId}: {userId: string}) => {\n  const [user, loading] = useUser(userId)\n\n  return (\n    <Flex align=\"center\" gap={2} key={userId} padding={1}>\n      <Box>{loading || !user ? <AvatarSkeleton animated /> : <UserAvatar user={user} />}</Box>\n      <Box>\n        {loading || !user?.displayName ? (\n          <Text size={1}>\n            <NameSkeleton animated />\n          </Text>\n        ) : (\n          <Text muted size={1}>\n            {user.displayName}\n          </Text>\n        )}\n      </Box>\n    </Flex>\n  )\n}\nconst TooltipContent = ({collaborators}: {collaborators: string[]}) => {\n  const {t} = useTranslation('studio')\n  return (\n    <Stack paddingBottom={1}>\n      <Box padding={1} paddingBottom={2}>\n        <Text size={1} weight=\"medium\">\n          {t('timeline.changes.title')}\n        </Text>\n      </Box>\n      {collaborators.map((userId) => (\n        <UserLine key={userId} userId={userId} />\n      ))}\n    </Stack>\n  )\n}\nexport function TimelineItem({\n  chunk,\n  isSelected,\n  onSelect,\n  collaborators,\n  optionsMenu,\n}: TimelineItemProps) {\n  const {t} = useTranslation('studio')\n  const {type, endTimestamp: timestamp} = chunk\n  const IconComponent = getTimelineEventIconComponent(type)\n  const authorUserIds = Array.from(chunk.authors)\n  const collaboratorsUsersIds = collaborators ? Array.from(collaborators) : []\n  const isSelectable = type !== 'delete'\n  const dateFormat = useDateTimeFormat({dateStyle: 'medium', timeStyle: 'short'})\n  const date = new Date(timestamp)\n\n  const updatedTimeAgo = useRelativeTime(date || '', RELATIVE_TIME_OPTIONS)\n\n  const formattedTimestamp = useMemo(() => {\n    const parsedDate = new Date(timestamp)\n    const formattedDate = dateFormat.format(parsedDate)\n\n    return formattedDate\n  }, [timestamp, dateFormat])\n\n  const handleClick = useCallback(\n    (evt: MouseEvent<HTMLDivElement>) => {\n      evt.preventDefault()\n      evt.stopPropagation()\n\n      if (isSelectable) {\n        onSelect(chunk)\n      }\n    },\n    [onSelect, chunk, isSelectable],\n  )\n\n  return (\n    <Flex align=\"center\" gap={1}>\n      <Card\n        as=\"button\"\n        onClick={handleClick}\n        padding={2}\n        pressed={isSelected}\n        radius={2}\n        data-ui=\"timelineItem\"\n        data-testid=\"timeline-item-button\"\n        data-chunk-id={chunk.id}\n      >\n        <Flex align=\"center\" gap={3}>\n          <div style={{position: 'relative'}}>\n            <UserAvatarStack maxLength={3} userIds={authorUserIds} size={2} />\n            <IconBox align=\"center\" justify=\"center\" $color={TIMELINE_ITEM_EVENT_TONE[type]}>\n              <Text size={0}>{IconComponent && <IconComponent />}</Text>\n            </IconBox>\n          </div>\n          <Stack space={2}>\n            <Text size={1} weight=\"medium\">\n              {t(TIMELINE_ITEM_I18N_KEY_MAPPING[type]) || <code>{type}</code>}\n            </Text>\n\n            <Text as=\"time\" size={1} muted dateTime={timestamp} title={formattedTimestamp}>\n              {updatedTimeAgo}\n            </Text>\n          </Stack>\n\n          {collaboratorsUsersIds.length > 0 && (\n            <Flex flex={1} justify=\"flex-end\" align=\"center\">\n              <Tooltip\n                placement=\"top\"\n                content={<TooltipContent collaborators={collaboratorsUsersIds} />}\n                portal\n              >\n                <Box paddingLeft={2} paddingY={2}>\n                  <UserAvatarStack\n                    maxLength={3}\n                    userIds={collaboratorsUsersIds}\n                    size={0}\n                    withTooltip={false}\n                  />\n                </Box>\n              </Tooltip>\n            </Flex>\n          )}\n        </Flex>\n      </Card>\n      {optionsMenu}\n    </Flex>\n  )\n}\n","import {type Chunk, type ChunkType} from 'sanity'\n\nexport type NonPublishChunk = Omit<Chunk, 'type'> & {\n  type: Exclude<ChunkType, 'publish'>\n  parentId?: string\n}\n\nexport type PublishChunk = Omit<Chunk, 'type'> & {\n  type: 'publish'\n  children: string[]\n  collaborators: Set<string>\n}\n\nexport const isNonPublishChunk = (chunk: Chunk): chunk is NonPublishChunk =>\n  chunk.type !== 'publish'\n\nexport const isPublishChunk = (chunk: Chunk): chunk is PublishChunk => chunk.type === 'publish'\n\n/**\n * searches for the previous publish action in the list of chunks\n * e.g. chunks = [publish, edit, publish, edit, edit] it needs to return the second publish action\n * e.g. chunks = [publish, edit, delete, edit, edit] it returns undefined\n */\n\nfunction getPreviousPublishAction(chunks: Chunk[]) {\n  let previousPublish: PublishChunk | null = null\n  // We need to iterate from the end to the start of the list\n  for (let index = chunks.length - 1; index >= 0; index--) {\n    const chunk = chunks[index]\n    if (isPublishChunk(chunk)) {\n      previousPublish = chunk\n      break\n    }\n    if (chunk.type === 'editDraft') {\n      continue\n    } else break\n  }\n\n  return previousPublish\n}\nexport type ChunksWithCollapsedDrafts = NonPublishChunk | PublishChunk\n\n/**\n * Takes an array of chunks and adds them metadata necessary for the timeline view.\n * for draft chunks, it will add the parentId of the published chunk if this draft action is now published\n * for published, it will add the children array and the collaborators array\n */\nexport function addChunksMetadata(chunks: Chunk[]): ChunksWithCollapsedDrafts[] {\n  const result: ChunksWithCollapsedDrafts[] = []\n\n  for (const chunk of chunks) {\n    if (isPublishChunk(chunk)) {\n      result.push({\n        ...chunk,\n        type: 'publish',\n        children: [],\n        collaborators: new Set(), // Initialize the collaborators array\n      })\n      continue\n    }\n    if (isNonPublishChunk(chunk)) {\n      const previousPublish = getPreviousPublishAction(result)\n      if (chunk.type === 'editDraft' && previousPublish?.type === 'publish') {\n        Array.from(chunk.authors).forEach((id) => {\n          previousPublish.collaborators.add(id)\n        })\n        previousPublish.children.push(chunk.id)\n        result.push({\n          ...chunk,\n          parentId: previousPublish.id,\n        })\n        continue\n      }\n    }\n    if (isNonPublishChunk(chunk)) {\n      result.push(chunk)\n    }\n  }\n\n  return result\n}\n","import {Box, Text} from '@sanity/ui'\nimport {useCallback, useEffect, useMemo, useState} from 'react'\nimport {\n  type Chunk,\n  CommandList,\n  type CommandListRenderItemCallback,\n  LoadingBlock,\n  useTranslation,\n} from 'sanity'\n\nimport {ExpandableTimelineItemButton} from './expandableTimelineItemButton'\nimport {ListWrapper, Root, StackWrapper} from './timeline.styled'\nimport {TimelineItem} from './timelineItem'\nimport {\n  addChunksMetadata,\n  type ChunksWithCollapsedDrafts,\n  isNonPublishChunk,\n  isPublishChunk,\n} from './utils'\n\ninterface TimelineProps {\n  chunks: Chunk[]\n  hasMoreChunks: boolean | null\n  lastChunk?: Chunk | null\n  onLoadMore: () => void\n  onSelect: (chunk: Chunk) => void\n  /**\n   * The list needs a predefined max height for the scroller to work.\n   */\n  listMaxHeight?: string\n}\n\nexport const TIMELINE_LIST_WRAPPER_ID = 'timeline-list-wrapper'\n\nexport const Timeline = ({\n  chunks,\n  hasMoreChunks,\n  lastChunk: selectedChunk,\n  onLoadMore,\n  onSelect,\n  listMaxHeight = 'calc(100vh - 280px)',\n}: TimelineProps) => {\n  const [mounted, setMounted] = useState(false)\n  const {t} = useTranslation('studio')\n  const selectedChunkId = selectedChunk?.id\n  const chunksWithMetadata = useMemo(() => addChunksMetadata(chunks), [chunks])\n\n  const [expandedParents, setExpandedParents] = useState<Set<string>>(() => {\n    if (selectedChunkId) {\n      // If the selected chunk is a draft, we need to expand its parent\n      const selected = chunksWithMetadata.find((chunk) => chunk.id === selectedChunkId)\n      if (selected && isNonPublishChunk(selected) && selected.parentId) {\n        return new Set([selected.parentId])\n      }\n    }\n    return new Set()\n  })\n\n  useEffect(() => {\n    // This effect ensures that when we reload the timeline with a selected draft, we expand its parent.\n    if (selectedChunkId) {\n      const selected = chunksWithMetadata.find((chunk) => chunk.id === selectedChunkId)\n      if (selected && isNonPublishChunk(selected) && selected.parentId) {\n        const parentId = selected.parentId\n        setExpandedParents((prev) => {\n          if (prev.has(parentId)) return prev\n          const next = new Set(prev)\n          next.add(parentId)\n          return next\n        })\n      }\n    }\n  }, [chunksWithMetadata, selectedChunkId])\n\n  const filteredChunks = useMemo(() => {\n    return chunksWithMetadata.filter((chunk) => {\n      if (isPublishChunk(chunk) || !chunk.parentId) return true\n      // If the chunk has a parent id keep it hidden until the parent is expanded.\n      return expandedParents.has(chunk.parentId)\n    })\n  }, [chunksWithMetadata, expandedParents])\n\n  useEffect(() => {\n    // This effect ensures that we load more chunks if the list is not long enough.\n    // This could happen if a parent chunk has multiple drafts, so you could end with a list of 50 transactions but only\n    // 1 parent chunk, the publish, which squashed all the changes.\n    // In that case, users will see the loading block at the bottom, but nothing will really be happening. Because they haven't reach the end of the list.\n    if (filteredChunks.length < 16 && hasMoreChunks) {\n      onLoadMore()\n    }\n  }, [filteredChunks, hasMoreChunks, onLoadMore])\n\n  const handleExpandParent = useCallback(\n    (parentId: string) => () =>\n      setExpandedParents((prev) => {\n        const next = new Set(prev)\n\n        if (prev.has(parentId)) next.delete(parentId)\n        else next.add(parentId)\n\n        return next\n      }),\n    [],\n  )\n\n  const selectedIndex = useMemo(\n    () =>\n      selectedChunkId ? filteredChunks.findIndex((chunk) => chunk.id === selectedChunkId) : -1,\n    [selectedChunkId, filteredChunks],\n  )\n  const handleSelectChunk = useCallback(\n    (chunk: ChunksWithCollapsedDrafts) => {\n      const timelineChunk = chunks.find((c) => c.id === chunk.id)\n      if (timelineChunk) onSelect(timelineChunk)\n      else {\n        console.error('TimelineItem: chunk not found')\n        onSelect(chunk)\n      }\n    },\n    [chunks, onSelect],\n  )\n\n  const renderItem = useCallback<CommandListRenderItemCallback<(typeof filteredChunks)[number]>>(\n    (chunk, {activeIndex}) => {\n      const isFirst = activeIndex === 0\n\n      return (\n        <Box\n          paddingBottom={1}\n          paddingTop={isFirst ? 1 : 0}\n          paddingRight={1}\n          paddingLeft={isNonPublishChunk(chunk) && chunk.parentId ? 4 : 1}\n        >\n          <TimelineItem\n            chunk={chunk}\n            isSelected={selectedChunkId === chunk.id}\n            onSelect={handleSelectChunk}\n            collaborators={isPublishChunk(chunk) ? chunk.collaborators : undefined}\n            optionsMenu={\n              isPublishChunk(chunk) && chunk.children.length > 0 ? (\n                <ExpandableTimelineItemButton\n                  isExpanded={expandedParents.has(chunk.id)}\n                  onExpand={handleExpandParent(chunk.id)}\n                />\n              ) : null\n            }\n          />\n          {activeIndex === filteredChunks.length - 1 && hasMoreChunks && <LoadingBlock />}\n        </Box>\n      )\n    },\n    [\n      expandedParents,\n      filteredChunks.length,\n      handleExpandParent,\n      handleSelectChunk,\n      hasMoreChunks,\n      selectedChunkId,\n    ],\n  )\n\n  useEffect(() => setMounted(true), [])\n\n  return (\n    <Root\n      /**\n       * We delay initial rendering if `selectedIndex` is present.\n       * This is a _temporary_ workaround to allow the virtual <CommandList>\n       * to scroll to a specific index prior to being displayed.\n       *\n       * Without this, there'll be a noticeable 'flash' where the virtual list\n       * will render with its child items at the top and then scroll into position.\n       */\n      $visible={!selectedIndex || mounted}\n      data-ui=\"timeline\"\n    >\n      {filteredChunks.length === 0 && (\n        <StackWrapper padding={3} space={3}>\n          <Text size={1} weight=\"medium\">\n            {t('timeline.error.no-document-history-title')}\n          </Text>\n          <Text muted size={1}>\n            {t('timeline.error.no-document-history-description')}\n          </Text>\n        </StackWrapper>\n      )}\n\n      {filteredChunks.length > 0 && (\n        <ListWrapper direction=\"column\" $maxHeight={listMaxHeight} id={TIMELINE_LIST_WRAPPER_ID}>\n          <CommandList\n            activeItemDataAttr=\"data-hovered\"\n            ariaLabel={t('timeline.list.aria-label')}\n            autoFocus=\"list\"\n            initialIndex={selectedIndex}\n            initialScrollAlign=\"center\"\n            itemHeight={57}\n            items={filteredChunks}\n            onEndReached={onLoadMore}\n            onEndReachedIndexOffset={20}\n            overscan={5}\n            renderItem={renderItem}\n            wrapAround={false}\n          />\n        </ListWrapper>\n      )}\n    </Root>\n  )\n}\n\nTimeline.displayName = 'Timeline'\n","import {ErrorOutlineIcon} from '@sanity/icons'\nimport {Flex, Stack} from '@sanity/ui'\nimport {TextWithTone, useTranslation} from 'sanity'\n\nexport function TimelineError({versionError}: {versionError?: boolean}) {\n  const {t} = useTranslation('studio')\n\n  return (\n    <Flex align=\"flex-start\" gap={3} padding={4}>\n      <TextWithTone tone=\"critical\">\n        <ErrorOutlineIcon />\n      </TextWithTone>\n      <Stack space={4}>\n        <TextWithTone size={1} tone=\"critical\" weight=\"medium\">\n          {versionError\n            ? t('timeline.error.load-document-changes-version-title')\n            : t('timeline.error.load-document-changes-title')}\n        </TextWithTone>\n        <TextWithTone size={1} tone=\"critical\">\n          {versionError\n            ? t('timeline.error.load-document-changes-version-description')\n            : t('timeline.error.load-document-changes-description')}\n        </TextWithTone>\n      </Stack>\n    </Flex>\n  )\n}\n","import {ChevronDownIcon} from '@sanity/icons'\nimport {\n  Flex,\n  type Placement,\n  PortalProvider,\n  useClickOutsideEvent,\n  useGlobalKeyDown,\n  useToast,\n} from '@sanity/ui'\nimport {useCallback, useMemo, useState} from 'react'\nimport {type Chunk, useTimelineSelector, useTranslation} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Button, Popover} from '../../../../ui-components'\nimport {useDocumentPane} from '../useDocumentPane'\nimport {Timeline} from './timeline'\nimport {TimelineError} from './TimelineError'\nimport {TIMELINE_ITEM_I18N_KEY_MAPPING} from './timelineI18n'\n\ninterface TimelineMenuProps {\n  chunk: Chunk | null\n  mode: 'rev' | 'since'\n  placement?: Placement\n}\n\nconst Root = styled(Popover)`\n  overflow: hidden;\n  overflow: clip;\n`\n\nexport const TIMELINE_MENU_PORTAL = 'timeline-menu'\n\nexport function TimelineMenu({chunk, mode, placement}: TimelineMenuProps) {\n  const {setTimelineRange, timelineError, ready, timelineStore} = useDocumentPane()\n  const [open, setOpen] = useState(false)\n  const [button, setButton] = useState<HTMLButtonElement | null>(null)\n  const [popoverRef, setPopoverRef] = useState<HTMLElement | null>(null)\n\n  const toast = useToast()\n\n  const chunks = useTimelineSelector(timelineStore, (state) => state.chunks)\n  const loading = useTimelineSelector(timelineStore, (state) => state.isLoading)\n  const hasMoreChunks = useTimelineSelector(timelineStore, (state) => state.hasMoreChunks)\n  const realRevChunk = useTimelineSelector(timelineStore, (state) => state.realRevChunk)\n  const sinceTime = useTimelineSelector(timelineStore, (state) => state.sinceTime)\n\n  const {t} = useTranslation('studio')\n\n  const handleOpen = useCallback(() => {\n    setOpen(true)\n  }, [])\n\n  const handleClose = useCallback(() => {\n    setOpen(false)\n  }, [])\n\n  const handleGlobalKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      if (open && (event.key === 'Escape' || event.key === 'Tab')) {\n        handleClose()\n        button?.focus()\n      }\n    },\n    [button, handleClose, open],\n  )\n\n  useGlobalKeyDown(handleGlobalKeyDown)\n  useClickOutsideEvent(open && handleClose, () => [button, popoverRef])\n\n  const selectRev = useCallback(\n    (revChunk: Chunk) => {\n      try {\n        const [sinceId, revId] = timelineStore?.findRangeForRev(revChunk) || [null, null]\n        setTimelineRange(sinceId, revId)\n      } catch (err) {\n        toast.push({\n          closable: true,\n          description: err.message,\n          status: 'error',\n          title: t('timeline.error.unable-to-load-revision'),\n        })\n      }\n    },\n    [setTimelineRange, t, timelineStore, toast],\n  )\n\n  const selectSince = useCallback(\n    (sinceChunk: Chunk) => {\n      try {\n        const [sinceId, revId] = timelineStore?.findRangeForSince(sinceChunk) || [null, null]\n        setTimelineRange(sinceId, revId)\n      } catch (err) {\n        toast.push({\n          closable: true,\n          description: err.message,\n          status: 'error',\n          title: t('timeline.error.unable-to-load-revision'),\n        })\n      }\n    },\n    [setTimelineRange, t, timelineStore, toast],\n  )\n\n  const handleLoadMore = useCallback(() => {\n    if (!loading) {\n      timelineStore?.loadMore()\n    }\n  }, [loading, timelineStore])\n\n  const content = useMemo(() => {\n    if (timelineError) return <TimelineError />\n\n    if (mode === 'rev') {\n      return (\n        <Timeline\n          chunks={chunks}\n          hasMoreChunks={hasMoreChunks}\n          lastChunk={realRevChunk}\n          onLoadMore={handleLoadMore}\n          onSelect={selectRev}\n        />\n      )\n    }\n\n    const filteredChunks = realRevChunk\n      ? chunks.filter((c) => c.index < realRevChunk.index)\n      : chunks\n    return (\n      <Timeline\n        chunks={filteredChunks}\n        hasMoreChunks={hasMoreChunks}\n        lastChunk={sinceTime}\n        onLoadMore={handleLoadMore}\n        onSelect={selectSince}\n      />\n    )\n  }, [\n    chunks,\n    handleLoadMore,\n    hasMoreChunks,\n    mode,\n    realRevChunk,\n    selectRev,\n    selectSince,\n    sinceTime,\n    timelineError,\n  ])\n\n  const formatParams = {\n    timestamp: {dateStyle: 'medium', timeStyle: 'short'},\n  }\n\n  const revLabel = chunk\n    ? t(TIMELINE_ITEM_I18N_KEY_MAPPING[chunk.type], {\n        context: 'timestamp',\n        timestamp: new Date(chunk?.endTimestamp),\n        formatParams,\n      })\n    : t('timeline.latest-revision')\n\n  const sinceLabel = chunk\n    ? t('timeline.since', {\n        timestamp: new Date(chunk?.endTimestamp),\n        formatParams,\n      })\n    : t('timeline.since-version-missing')\n\n  const buttonLabel = mode === 'rev' ? revLabel : sinceLabel\n\n  return (\n    <PortalProvider __unstable_elements={{[TIMELINE_MENU_PORTAL]: popoverRef}}>\n      <Root\n        data-testid=\"timeline-menu\"\n        constrainSize\n        content={open && content}\n        data-ui=\"versionMenu\"\n        open={open}\n        placement={placement}\n        matchReferenceWidth\n        portal\n        ref={setPopoverRef}\n      >\n        <Flex width={'fill'}>\n          <Button\n            data-testid={open ? 'timeline-menu-close-button' : 'timeline-menu-open-button'}\n            disabled={!ready}\n            mode=\"ghost\"\n            onClick={open ? handleClose : handleOpen}\n            ref={setButton}\n            selected={open}\n            width=\"fill\"\n            tooltipProps={null}\n            justify={'space-between'}\n            style={{\n              maxWidth: '100%',\n            }}\n            iconRight={ChevronDownIcon}\n            text={ready ? buttonLabel : t('timeline.loading-history')}\n          />\n        </Flex>\n      </Root>\n    </PortalProvider>\n  )\n}\n","import {motion} from 'framer-motion'\nimport {type ComponentProps} from 'react'\nimport {keyframes, styled} from 'styled-components'\n\nconst StyledMotionPath = styled(motion.path)`\n  transform-origin: center;\n`\n\ntype MotionCircleProps = Omit<ComponentProps<typeof motion.circle>, 'd'>\ntype MotionPathProps = Omit<ComponentProps<typeof motion.path>, 'd' | 'ref'>\n\nconst Circle = (props: MotionCircleProps) => (\n  <motion.circle fill=\"none\" r=\"8\" cx=\"12.5\" cy=\"12.5\" strokeWidth=\"1.2\" {...props} />\n)\nconst Arrows = (props: MotionPathProps) => (\n  <StyledMotionPath\n    fill=\"none\"\n    d=\"M14 17.5619L11.5 20.5L14.5 23.0619M11 7.43811L13.5 4.50001L10.5 1.93811\"\n    {...props}\n  />\n)\nconst Checkmark = (props: MotionPathProps) => (\n  <motion.path d=\"M9.5 12.1316L11.7414 14.5L16 10\" {...props} />\n)\n\nconst rotateAnimation = keyframes`\n  0% {\n    transform: rotate(0);\n  }\n  100% {\n    transform: rotate(360deg);\n  }\n`\nconst RotateGroup = styled.g`\n  transform-origin: center;\n\n  &[data-rotate] {\n    animation: ${rotateAnimation} 1s ease-in-out infinite;\n  }\n`\n\nconst root = {\n  syncing: {\n    scale: 1,\n    transition: {\n      duration: 0,\n    },\n  },\n  saved: {\n    scale: [1, 0.8, 1.2, 0.9, 1.1, 0.95, 1.05, 0.99, 1],\n    transition: {\n      duration: 0.5,\n      delay: 0.2,\n    },\n  },\n  changes: {transition: {duration: 0}},\n}\n\nconst circle = {\n  syncing: {\n    strokeDasharray: '0, 0, 23, 3, 23, 3',\n    strokeDashoffset: 10,\n    opacity: 1,\n    transition: {\n      duration: 0,\n    },\n  },\n  saved: {\n    strokeDasharray: '0, 0, 23, 0, 23, 0',\n    strokeDashoffset: 10,\n    opacity: 1,\n    transition: {\n      duration: 0.2,\n    },\n  },\n  changes: {\n    strokeDasharray: '0, 60, 23, 0, 23, 0',\n    strokeDashoffset: 0,\n    opacity: 0,\n    transition: {\n      duration: 0.5,\n    },\n  },\n}\n\nconst arrows = {\n  syncing: {\n    opacity: 1,\n    transition: {\n      duration: 0,\n    },\n  },\n  saved: {\n    opacity: 0,\n    transition: {\n      duration: 0.2,\n    },\n  },\n  changes: {\n    opacity: 0,\n  },\n}\n\nconst checkmark = {\n  syncing: {\n    pathLength: 0,\n    transition: {duration: 0},\n  },\n  saved: {\n    pathLength: 1,\n    transition: {\n      delay: 0.4,\n      duration: 0.3,\n    },\n  },\n  changes: {\n    pathLength: 0,\n    transition: {\n      duration: 0.2,\n    },\n  },\n}\n\ninterface AnimatedStatusIconProps {\n  status?: 'changes' | 'saved' | 'syncing'\n}\n\nexport function AnimatedStatusIcon(props: AnimatedStatusIconProps) {\n  const {status} = props\n\n  if (!status) {\n    return null\n  }\n\n  return (\n    <svg\n      width=\"1em\"\n      height=\"1em\"\n      viewBox=\"0 0 25 25\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeWidth=\"1.2\"\n      data-sanity-icon=\"animated-status-icon\"\n    >\n      <motion.g variants={root} initial={status} animate={status}>\n        <RotateGroup data-rotate={status === 'changes' ? undefined : ''}>\n          <Arrows variants={arrows} initial={status} animate={status} />\n          <Circle variants={circle} initial={status} animate={status} />\n        </RotateGroup>\n        <Checkmark variants={checkmark} initial={status} animate={status} />\n      </motion.g>\n    </svg>\n  )\n}\n","import {type ButtonTone, Flex, Text} from '@sanity/ui'\nimport {TextWithTone, useTranslation} from 'sanity'\n\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {AnimatedStatusIcon} from './AnimatedStatusIcon'\n\ntype StatusType = 'saved' | 'syncing'\ninterface ReviewChangesButtonProps {\n  status?: StatusType\n}\n\nconst STATUS_DICTIONARY: Record<StatusType, {i18nKey: string; tone: ButtonTone}> = {\n  saved: {\n    i18nKey: 'status-bar.document-status-pulse.status.saved.text',\n    tone: 'positive',\n  },\n  syncing: {\n    i18nKey: 'status-bar.document-status-pulse.status.syncing.text',\n    tone: 'default',\n  },\n}\n\nexport const DocumentStatusPulse = (props: ReviewChangesButtonProps) => {\n  const {status} = props\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  if (status !== 'saved' && status !== 'syncing') {\n    return null\n  }\n\n  const currentStatus = STATUS_DICTIONARY[status]\n\n  return (\n    <Flex align=\"center\" gap={2} data-testid=\"pane-footer-document-status-pulse\">\n      <TextWithTone size={1} tone={currentStatus.tone}>\n        <AnimatedStatusIcon status={status} />\n      </TextWithTone>\n\n      <Text muted size={1}>\n        {t(currentStatus.i18nKey)}\n      </Text>\n    </Flex>\n  )\n}\n","import {\n  // eslint-disable-next-line no-restricted-imports\n  Button,\n  Flex,\n  Skeleton,\n  Text,\n} from '@sanity/ui'\nimport {motion} from 'framer-motion'\nimport {useEffect, useLayoutEffect, useMemo, useState} from 'react'\nimport {\n  AvatarSkeleton,\n  isPublishedPerspective,\n  TIMELINE_ITEM_I18N_KEY_MAPPING,\n  useEvents,\n  usePerspective,\n  UserAvatar,\n  useRelativeTime,\n  useSource,\n  useSyncState,\n  useTimelineSelector,\n  useTranslation,\n} from 'sanity'\n\nimport {HISTORY_INSPECTOR_NAME} from '../constants'\nimport {TIMELINE_ITEM_I18N_KEY_MAPPING as TIMELINE_ITEM_I18N_KEY_MAPPING_LEGACY} from '../timeline'\nimport {useDocumentPane} from '../useDocumentPane'\nimport {DocumentStatusPulse} from './DocumentStatusPulse'\n\nconst RELATIVE_TIME_OPTIONS = {\n  minimal: true,\n  useTemporalPhrase: true,\n} as const\n\nconst MotionButton = motion.create(Button)\n\nconst ButtonSkeleton = () => {\n  return (\n    <Flex align=\"center\" gap={3} paddingLeft={1} paddingRight={2} paddingY={2}>\n      <div style={{margin: -5}}>\n        <AvatarSkeleton $size={0} animated />\n      </div>\n      <Skeleton animated style={{width: '80px', height: '15px'}} radius={2} />\n    </Flex>\n  )\n}\n\nconst DocumentStatusButton = ({\n  author,\n  translationKey,\n  timestamp = '',\n}: {\n  author: string\n  translationKey: string\n  timestamp?: string\n}) => {\n  const {onHistoryOpen, inspector, onHistoryClose} = useDocumentPane()\n  const {t} = useTranslation()\n  const relativeTime = useRelativeTime(timestamp, RELATIVE_TIME_OPTIONS)\n\n  return (\n    <MotionButton\n      data-testid=\"pane-footer-document-status\"\n      animate={{opacity: 1}}\n      initial={{opacity: 0}} // Width of the skeleton\n      mode=\"bleed\"\n      onClick={inspector?.name === HISTORY_INSPECTOR_NAME ? onHistoryClose : onHistoryOpen}\n      padding={2}\n      muted\n    >\n      <Flex align=\"center\" flex=\"none\" gap={3}>\n        {author && (\n          <div style={{margin: -5}}>\n            <UserAvatar user={author} size={0} />\n          </div>\n        )}\n        <Text muted size={1}>\n          {t(translationKey)} {relativeTime}\n        </Text>\n      </Flex>\n    </MotionButton>\n  )\n}\n\nconst FallbackStatus = () => {\n  const {editState} = useDocumentPane()\n  const {selectedPerspective} = usePerspective()\n\n  const status = useMemo(() => {\n    if (isPublishedPerspective(selectedPerspective) && editState?.published?._updatedAt) {\n      return {\n        translationKey: TIMELINE_ITEM_I18N_KEY_MAPPING.createDocumentVersion,\n        timestamp: editState.published._updatedAt,\n      }\n    }\n    if (editState?.version?._updatedAt) {\n      return {\n        translationKey:\n          editState?.version?._updatedAt === editState?.version?._createdAt\n            ? TIMELINE_ITEM_I18N_KEY_MAPPING.createDocumentVersion\n            : TIMELINE_ITEM_I18N_KEY_MAPPING.editDocumentVersion,\n        timestamp: editState.version._updatedAt,\n      }\n    }\n    if (editState?.draft?._updatedAt) {\n      return {\n        translationKey:\n          editState?.draft?._updatedAt === editState?.draft?._createdAt\n            ? TIMELINE_ITEM_I18N_KEY_MAPPING.createDocumentVersion\n            : TIMELINE_ITEM_I18N_KEY_MAPPING.editDocumentVersion,\n        timestamp: editState.draft._updatedAt,\n      }\n    }\n    return null\n  }, [\n    selectedPerspective,\n    editState?.published?._updatedAt,\n    editState?.version?._updatedAt,\n    editState?.version?._createdAt,\n    editState?.draft?._updatedAt,\n    editState?.draft?._createdAt,\n  ])\n  if (!status) {\n    return null\n  }\n  return (\n    <DocumentStatusButton\n      author=\"\"\n      translationKey={status.translationKey}\n      timestamp={status.timestamp}\n    />\n  )\n}\n\nconst EventsStatus = () => {\n  const {events, loading} = useEvents()\n  const event = events?.[0]\n\n  if (!event && loading) {\n    return <ButtonSkeleton />\n  }\n  if (!event) {\n    return <FallbackStatus />\n  }\n\n  return (\n    <DocumentStatusButton\n      author={event.author}\n      translationKey={TIMELINE_ITEM_I18N_KEY_MAPPING[event.type]}\n      timestamp={event.timestamp}\n    />\n  )\n}\n\nconst TimelineStatus = () => {\n  const {timelineStore} = useDocumentPane()\n  const chunks = useTimelineSelector(timelineStore, (state) => state.chunks)\n  const loading = useTimelineSelector(timelineStore, (state) => state.isLoading)\n  const event = chunks?.[0]\n\n  if (!event && loading) {\n    return <ButtonSkeleton />\n  }\n  if (!event) {\n    return <FallbackStatus />\n  }\n\n  const author = Array.from(event.authors)[0]\n  return (\n    <DocumentStatusButton\n      author={author}\n      translationKey={TIMELINE_ITEM_I18N_KEY_MAPPING_LEGACY[event.type]}\n      timestamp={event.endTimestamp}\n    />\n  )\n}\n\nconst SYNCING_TIMEOUT = 1000\nconst SAVED_TIMEOUT = 3000\n\nexport function DocumentStatusLine() {\n  const {documentId, documentType, editState, value} = useDocumentPane()\n  const [status, setStatus] = useState<'saved' | 'syncing' | null>(null)\n  const source = useSource()\n  const eventsEnabled = source.beta?.eventsAPI?.documents\n\n  const syncState = useSyncState(documentId, documentType, editState?.release)\n\n  const lastUpdated = value?._updatedAt\n\n  // eslint-disable-next-line consistent-return\n  useEffect(() => {\n    // Schedule an update to set the status to 'saved' when status changed to 'syncing.\n    // We use `syncState.isSyncing` here to avoid the status being set to 'saved' when the document is syncing.\n    if (status === 'syncing' && !syncState.isSyncing) {\n      const timerId = setTimeout(() => setStatus('saved'), SYNCING_TIMEOUT)\n      return () => clearTimeout(timerId)\n    }\n    // Schedule an update to clear the status when status changed to 'saved'\n    if (status === 'saved') {\n      const timerId = setTimeout(() => setStatus(null), SAVED_TIMEOUT)\n      return () => clearTimeout(timerId)\n    }\n  }, [status, lastUpdated, syncState.isSyncing])\n\n  // Clear the status when documentId changes to make sure we don't show the wrong status when opening a new document\n  useLayoutEffect(() => {\n    setStatus(null)\n  }, [documentId])\n\n  // Set status to 'syncing' when lastUpdated changes and we go from not syncing to syncing\n  useLayoutEffect(() => {\n    if (syncState.isSyncing) {\n      setStatus('syncing')\n    }\n  }, [syncState.isSyncing, lastUpdated])\n\n  if (status) {\n    return <DocumentStatusPulse status={status || undefined} />\n  }\n\n  if (eventsEnabled) {\n    return <EventsStatus />\n  }\n\n  return <TimelineStatus />\n}\n","import {RestoreIcon} from '@sanity/icons'\nimport {Box, Flex, Text} from '@sanity/ui'\nimport {format} from 'date-fns'\nimport {Translate, useTranslation} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {useDocumentPane} from '../useDocumentPane'\n\nexport const StatusText = styled(Text)`\n  color: var(--card-muted-fg-color);\n\n  em {\n    color: var(--card-fg-color);\n    font-weight: 500;\n    font-style: normal;\n  }\n`\n\nexport function RevisionStatusLine(): React.JSX.Element {\n  const {displayed} = useDocumentPane()\n  const {t} = useTranslation()\n  const date = displayed?._updatedAt || displayed?._createdAt\n\n  const message = {\n    name: 'revision',\n    text: date ? (\n      <Translate\n        t={t}\n        i18nKey=\"document-status.revision-from\"\n        values={{\n          date: format(new Date(date), `MMM d, yyyy '@' pp`),\n        }}\n      />\n    ) : null,\n    tone: 'caution',\n  }\n\n  return (\n    <>\n      <Flex flex={1} gap={3} padding={2}>\n        <Box flex=\"none\">\n          <Text size={1}>\n            <RestoreIcon />\n          </Text>\n        </Box>\n        <Box flex={1}>\n          <StatusText size={1} textOverflow=\"ellipsis\">\n            {message.text}\n          </StatusText>\n        </Box>\n      </Flex>\n    </>\n  )\n}\n","import {useLayoutEffect} from 'react'\nimport {resizeObserver} from 'sanity'\n\nexport function useResizeObserver({\n  element,\n  onResize,\n}: {\n  element?: HTMLDivElement | null\n  onResize: (event: ResizeObserverEntry) => void\n}): void {\n  useLayoutEffect(() => {\n    if (element) {\n      resizeObserver.observe(element, onResize)\n    }\n\n    return () => {\n      if (element) {\n        resizeObserver.unobserve(element)\n      }\n    }\n  }, [element, onResize])\n}\n","import {Card, Flex} from '@sanity/ui'\nimport {type Ref, useCallback, useMemo, useState} from 'react'\nimport {\n  type CreateLinkMetadata,\n  isPublishedPerspective,\n  isReleaseDocument,\n  isSanityCreateLinked,\n  usePerspective,\n  useSanityCreateConfig,\n} from 'sanity'\n\nimport {SpacerButton} from '../../../components/spacerButton'\nimport {DOCUMENT_PANEL_PORTAL_ELEMENT} from '../../../constants'\nimport {useDocumentPane} from '../useDocumentPane'\nimport {useDocumentTitle} from '../useDocumentTitle'\nimport {DocumentBadges} from './DocumentBadges'\nimport {DocumentStatusBarActions, HistoryStatusBarActions} from './DocumentStatusBarActions'\nimport {DocumentStatusLine} from './DocumentStatusLine'\nimport {RevisionStatusLine} from './RevisionStatusLine'\nimport {useResizeObserver} from './useResizeObserver'\n\nexport interface DocumentStatusBarProps {\n  actionsBoxRef?: Ref<HTMLDivElement>\n  createLinkMetadata?: CreateLinkMetadata\n}\n\nconst CONTAINER_BREAKPOINT = 480 // px\n\nexport function DocumentStatusBar(props: DocumentStatusBarProps) {\n  const {actionsBoxRef, createLinkMetadata} = props\n  const {editState, revisionId, onChange: onDocumentChange} = useDocumentPane()\n  const {selectedPerspective} = usePerspective()\n  const {title} = useDocumentTitle()\n\n  const CreateLinkedActions = useSanityCreateConfig().components?.documentLinkedActions\n\n  const showingRevision = Boolean(revisionId)\n  const [collapsed, setCollapsed] = useState<boolean | null>(null)\n  const [rootElement, setRootElement] = useState<HTMLDivElement | null>(null)\n\n  const handleResize = useCallback((event: ResizeObserverEntry) => {\n    setCollapsed(event.contentRect.width < CONTAINER_BREAKPOINT)\n  }, [])\n\n  useResizeObserver({element: rootElement, onResize: handleResize})\n\n  const shouldRender = useMemo(() => {\n    const isReady = Boolean(editState?.ready && typeof collapsed === 'boolean')\n    if (selectedPerspective) {\n      if (isPublishedPerspective(selectedPerspective)) {\n        return isReady && Boolean(editState?.published)\n      }\n      if (isReleaseDocument(selectedPerspective)) {\n        return isReady && Boolean(editState?.version)\n      }\n    }\n    return isReady\n  }, [collapsed, editState?.published, editState?.ready, editState?.version, selectedPerspective])\n\n  let actions: React.JSX.Element | null = null\n  if (createLinkMetadata && isSanityCreateLinked(createLinkMetadata) && CreateLinkedActions) {\n    actions = (\n      <CreateLinkedActions\n        metadata={createLinkMetadata}\n        panelPortalElementId={DOCUMENT_PANEL_PORTAL_ELEMENT}\n        onDocumentChange={onDocumentChange}\n        documentTitle={title}\n      />\n    )\n  } else if (showingRevision) {\n    actions = <HistoryStatusBarActions />\n  } else {\n    actions = <DocumentStatusBarActions />\n  }\n\n  return (\n    <Card tone={showingRevision ? 'caution' : undefined}>\n      <Flex direction=\"column\" ref={setRootElement} sizing=\"border\">\n        {shouldRender && (\n          <Flex\n            align=\"stretch\"\n            gap={1}\n            justify=\"space-between\"\n            paddingY={2}\n            paddingLeft={showingRevision ? 3 : 4}\n            paddingRight={showingRevision ? 2 : 3}\n          >\n            <Flex align=\"center\" flex={1} gap={collapsed ? 2 : 3} wrap=\"wrap\" paddingRight={3}>\n              <Flex align=\"center\">\n                {showingRevision ? <RevisionStatusLine /> : <DocumentStatusLine />}\n                <SpacerButton size=\"large\" />\n              </Flex>\n              <DocumentBadges />\n            </Flex>\n\n            <Flex\n              align=\"flex-start\"\n              justify=\"flex-end\"\n              ref={actionsBoxRef}\n              style={{flexShrink: 0, marginLeft: 'auto'}}\n            >\n              <SpacerButton size=\"large\" />\n              {actions}\n            </Flex>\n          </Flex>\n        )}\n      </Flex>\n    </Card>\n  )\n}\n","import {isHotkey} from 'is-hotkey-esm'\nimport {\n  type ElementType,\n  type HTMLProps,\n  memo,\n  type Ref,\n  useCallback,\n  useMemo,\n  useState,\n} from 'react'\nimport {type DocumentActionDescription, type DocumentActionProps, LegacyLayerProvider} from 'sanity'\n\nimport {RenderActionCollectionState} from '../../../components'\nimport {ActionStateDialog} from '../statusBar'\nimport {useDocumentPane} from '../useDocumentPane'\n\nexport interface KeyboardShortcutResponderProps {\n  actionsBoxElement: HTMLElement | null\n  activeIndex: number\n  as?: ElementType\n  currentMinWidth?: number\n  flex?: number\n  id: string\n  minWidth?: number\n  onActionStart: (index: number) => void\n  rootRef: Ref<HTMLDivElement>\n  states: DocumentActionDescription[]\n}\n\nconst KeyboardShortcutResponder = memo(function KeyboardShortcutResponder(\n  props: KeyboardShortcutResponderProps & Omit<HTMLProps<HTMLDivElement>, 'as' | 'height'>,\n) {\n  const {\n    actionsBoxElement,\n    activeIndex,\n    as: As = 'div',\n    children,\n    id,\n    onActionStart,\n    onKeyDown,\n    rootRef,\n    states,\n    ...rest\n  } = props\n\n  const activeAction = states[activeIndex]\n\n  const handleKeyDown = useCallback(\n    (event: any) => {\n      const matchingStates = states.filter(\n        (state) => state.shortcut && isHotkey(state.shortcut, event),\n      )\n\n      const matchingState = matchingStates[0]\n\n      if (matchingStates.length > 1) {\n        // eslint-disable-next-line no-console\n        console.warn(\n          `Keyboard shortcut conflict: More than one document action matches the shortcut \"${matchingState.shortcut}\"`,\n        )\n      }\n\n      if (matchingState && !matchingState.disabled && matchingState.onHandle) {\n        event.preventDefault()\n        matchingState.onHandle()\n        onActionStart(states.indexOf(matchingState))\n        return\n      }\n\n      if (onKeyDown) {\n        onKeyDown(event)\n      }\n    },\n    [onActionStart, onKeyDown, states],\n  )\n\n  return (\n    <As id={id} onKeyDown={handleKeyDown} tabIndex={-1} {...rest} ref={rootRef}>\n      {children}\n      {activeAction && activeAction.dialog && (\n        <LegacyLayerProvider zOffset=\"paneFooter\">\n          <ActionStateDialog dialog={activeAction.dialog} referenceElement={actionsBoxElement} />\n        </LegacyLayerProvider>\n      )}\n    </As>\n  )\n})\n\nexport interface DocumentActionShortcutsProps {\n  actionsBoxElement: HTMLElement | null\n  as?: ElementType\n  currentMinWidth?: number\n  debug?: boolean\n  flex: number\n  id: string\n  minWidth: number\n  rootRef: Ref<HTMLDivElement>\n}\n\nexport const DocumentActionShortcuts = memo(\n  (props: DocumentActionShortcutsProps & Omit<HTMLProps<HTMLDivElement>, 'as'>) => {\n    const {actionsBoxElement, as = 'div', children, ...rest} = props\n    const {actions, editState} = useDocumentPane()\n    const [activeIndex, setActiveIndex] = useState(-1)\n\n    const onActionStart = useCallback((idx: number) => {\n      setActiveIndex(idx)\n    }, [])\n\n    const actionProps: DocumentActionProps | null = useMemo(\n      () =>\n        editState && {\n          ...editState,\n\n          // @todo: what to call here?\n          onComplete: () => undefined,\n\n          // @todo: get revision string\n          revision: undefined,\n        },\n      [editState],\n    )\n\n    const renderDocumentActionShortcuts = useCallback<\n      (props: {states: DocumentActionDescription[]}) => React.ReactNode\n    >(\n      ({states}) => (\n        <KeyboardShortcutResponder\n          {...rest}\n          activeIndex={activeIndex}\n          actionsBoxElement={actionsBoxElement}\n          as={as}\n          onActionStart={onActionStart}\n          states={states}\n        >\n          {children}\n        </KeyboardShortcutResponder>\n      ),\n      [actionsBoxElement, activeIndex, as, children, onActionStart, rest],\n    )\n\n    if (!actionProps || !actions) return null\n\n    return (\n      <RenderActionCollectionState actionProps={actionProps} actions={actions}>\n        {renderDocumentActionShortcuts}\n      </RenderActionCollectionState>\n    )\n  },\n)\n\nDocumentActionShortcuts.displayName = 'Memo(DocumentActionShortcuts)'\n","import {EarthAmericasIcon, JsonIcon, LinkIcon} from '@sanity/icons'\nimport {type DocumentInspector, type DocumentInspectorMenuItem, type TFunction} from 'sanity'\n\nimport {type PaneMenuItem, type StructureToolFeatures} from '../../types'\nimport {INSPECT_ACTION_PREFIX} from './constants'\n\ninterface GetMenuItemsParams {\n  currentInspector?: DocumentInspector\n  features: StructureToolFeatures\n  hasValue: boolean\n  inspectors: DocumentInspector[]\n  previewUrl?: string | null\n  inspectorMenuItems: DocumentInspectorMenuItem[]\n  t: TFunction\n}\n\nfunction getInspectorItems({\n  currentInspector,\n  hasValue,\n  inspectors,\n  inspectorMenuItems,\n}: GetMenuItemsParams): PaneMenuItem[] {\n  return inspectors\n    .map((inspector, index) => {\n      const menuItem = inspectorMenuItems[index]\n\n      if (!menuItem || menuItem.hidden) return null\n\n      return {\n        action: `${INSPECT_ACTION_PREFIX}${inspector.name}`,\n        group: menuItem.showAsAction ? undefined : 'inspectors',\n        icon: menuItem.icon,\n        isDisabled: !hasValue,\n        selected: currentInspector?.name === inspector.name,\n        shortcut: menuItem.hotkeys?.join('+'),\n        showAsAction: menuItem.showAsAction,\n        title: menuItem.title,\n        tone: menuItem.tone,\n      }\n    })\n    .filter(Boolean) as PaneMenuItem[]\n}\n\nfunction getInspectItem({hasValue, t}: GetMenuItemsParams): PaneMenuItem {\n  return {\n    action: 'inspect',\n    group: 'inspectors',\n    title: t('document-inspector.menu-item.title'),\n    icon: JsonIcon,\n    isDisabled: !hasValue,\n    shortcut: 'Ctrl+Alt+I',\n  }\n}\n\nexport function getProductionPreviewItem({previewUrl, t}: GetMenuItemsParams): PaneMenuItem | null {\n  if (!previewUrl) return null\n\n  return {\n    action: 'production-preview',\n    group: 'links',\n    title: t('production-preview.menu-item.title'),\n    icon: EarthAmericasIcon,\n    shortcut: 'Ctrl+Alt+O',\n  }\n}\n\nexport function getMenuItems(params: GetMenuItemsParams): PaneMenuItem[] {\n  const inspectorItems = getInspectorItems(params)\n  const items = [\n    // Get production preview item\n    getProductionPreviewItem(params),\n  ].filter(Boolean) as PaneMenuItem[]\n\n  return [\n    // Always present document menu item to copy current url to clipboard\n    {\n      action: 'copy-document-url',\n      showAsAction: true,\n      title: params.t('action.copy-document-url.label'),\n      icon: LinkIcon,\n    },\n    ...inspectorItems,\n\n    // TODO: convert to inspector or document view?\n    getInspectItem(params),\n\n    ...items,\n  ]\n}\n","import {type SanityDocument} from '@sanity/types'\nimport {useEffect, useMemo} from 'react'\nimport {useObservable} from 'react-rx'\nimport {BehaviorSubject, from, of} from 'rxjs'\nimport {catchError, debounceTime, distinctUntilChanged, switchMap} from 'rxjs/operators'\nimport {isRecord, useSource} from 'sanity'\n\nconst isSanityDocument = (value: unknown): value is SanityDocument =>\n  isRecord(value) && typeof value._id === 'string' && typeof value._type === 'string'\n\nexport function usePreviewUrl(value: Partial<SanityDocument> | undefined): string | undefined {\n  const {resolveProductionUrl} = useSource().document\n  const subject = useMemo(\n    () => new BehaviorSubject<Partial<SanityDocument> | undefined>(undefined),\n    [],\n  )\n\n  useEffect(() => {\n    subject.next(value)\n  }, [subject, value])\n\n  const resolvedUrlObservable = useMemo(() => {\n    return subject.asObservable().pipe(\n      // this so that the preview URL isn't fetched on every keystroke\n      distinctUntilChanged(),\n      debounceTime(500),\n      switchMap((document) =>\n        isSanityDocument(document) ? from(resolveProductionUrl({document})) : of(undefined),\n      ),\n      distinctUntilChanged(),\n      catchError((err) => {\n        const message =\n          isRecord(err) && typeof err.message === 'string' ? err.message : 'Unknown error'\n        throw new Error(`An error was thrown while trying to get your preview url: ${message}`)\n      }),\n    )\n  }, [resolveProductionUrl, subject])\n\n  return useObservable(resolvedUrlObservable)\n}\n","import {Card, Code, Stack, Text} from '@sanity/ui'\nimport {isDev, Translate, useTranslation} from 'sanity'\n\nimport {ErrorPane} from '../../error'\n\ninterface DocumentLayoutErrorProps {\n  currentMinWidth?: number\n  documentType?: string\n  minWidth?: number\n  paneKey: string\n  value?: Record<string, unknown>\n}\n\nexport function DocumentLayoutError(props: DocumentLayoutErrorProps) {\n  const {documentType, value, currentMinWidth, paneKey, minWidth} = props\n  const {t} = useTranslation()\n\n  return (\n    <ErrorPane\n      currentMinWidth={currentMinWidth}\n      flex={2.5}\n      minWidth={minWidth}\n      paneKey={paneKey}\n      title={\n        <Translate\n          t={t}\n          i18nKey=\"panes.document-pane.document-unknown-type.title\"\n          values={{documentType}}\n        />\n      }\n      tone=\"caution\"\n    >\n      <Stack space={4}>\n        {documentType && (\n          <Text as=\"p\">\n            <Translate\n              t={t}\n              i18nKey=\"panes.document-pane.document-unknown-type.text\"\n              values={{documentType}}\n            />\n          </Text>\n        )}\n\n        {!documentType && (\n          <Text as=\"p\">{t('panes.document-pane.document-unknown-type.without-schema.text')}</Text>\n        )}\n\n        {isDev && value && (\n          /* eslint-disable i18next/no-literal-string */\n          <>\n            <Text as=\"p\">Here is the JSON representation of the document:</Text>\n\n            <Card padding={3} overflow=\"auto\" radius={2} shadow={1} tone=\"inherit\">\n              <Code language=\"json\" size={[1, 1, 2]}>\n                {JSON.stringify(value, null, 2)}\n              </Code>\n            </Card>\n          </>\n          /* eslint-enable i18next/no-literal-string */\n        )}\n      </Stack>\n    </ErrorPane>\n  )\n}\n","import {\n  DialogProvider,\n  type DialogProviderProps,\n  Flex,\n  PortalProvider,\n  useElementRect,\n} from '@sanity/ui'\nimport {isHotkey} from 'is-hotkey-esm'\nimport {type ReactNode, useCallback, useMemo, useState} from 'react'\nimport {useTranslation} from 'react-i18next'\nimport {\n  ChangeConnectorRoot,\n  type DocumentFieldActionNode,\n  type DocumentInspectorMenuItem,\n  FieldActionsProvider,\n  FieldActionsResolver,\n  GetFormValueProvider,\n  getSanityCreateLinkMetadata,\n  isSanityCreateLinked,\n  type Path,\n  useGlobalCopyPasteElementHandler,\n  useSanityCreateConfig,\n  useZIndex,\n} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {TooltipDelayGroupProvider} from '../../../../ui-components'\nimport {Pane, PaneFooter, usePane, usePaneLayout, usePaneRouter} from '../../../components'\nimport {DOCUMENT_PANEL_PORTAL_ELEMENT} from '../../../constants'\nimport {structureLocaleNamespace} from '../../../i18n'\nimport {useStructureTool} from '../../../useStructureTool'\nimport {\n  DOCUMENT_INSPECTOR_MIN_WIDTH,\n  DOCUMENT_PANEL_INITIAL_MIN_WIDTH,\n  DOCUMENT_PANEL_MIN_WIDTH,\n} from '../constants'\nimport {DocumentInspectorMenuItemsResolver} from '../DocumentInspectorMenuItemsResolver'\nimport {DocumentOperationResults} from '../DocumentOperationResults'\nimport {DocumentPanel} from '../documentPanel'\nimport {Banner} from '../documentPanel/banners/Banner'\nimport {DocumentPanelHeader} from '../documentPanel/header'\nimport {DocumentActionShortcuts} from '../keyboardShortcuts'\nimport {getMenuItems} from '../menuItems'\nimport {DocumentStatusBar} from '../statusBar'\nimport {useDocumentPane} from '../useDocumentPane'\nimport {usePreviewUrl} from '../usePreviewUrl'\nimport {DocumentLayoutError} from './DocumentLayoutError'\n\nconst EMPTY_ARRAY: [] = []\n\nconst DIALOG_PROVIDER_POSITION: DialogProviderProps['position'] = [\n  // We use the `position: fixed` for dialogs on narrower screens (first two media breakpoints).\n  'fixed',\n  'fixed',\n  // And we use the `position: absolute` strategy (within panes) on wide screens.\n  'absolute',\n]\n\nconst StyledChangeConnectorRoot = styled(ChangeConnectorRoot)`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  min-height: 0;\n  min-width: 0;\n`\n\nexport function DocumentLayout() {\n  const {\n    changesOpen,\n    documentId,\n    documentType,\n    fieldActions,\n    focusPath,\n    inspectOpen,\n    inspector,\n    inspectors,\n    onFocus,\n    onHistoryOpen,\n    onMenuAction,\n    onPathOpen,\n    paneKey,\n    schemaType,\n    value,\n    isInitialValueLoading,\n    ready,\n  } = useDocumentPane()\n  const {params: paneParams} = usePaneRouter()\n  const {features} = useStructureTool()\n  const {t} = useTranslation(structureLocaleNamespace)\n  const {collapsed: layoutCollapsed} = usePaneLayout()\n\n  const zOffsets = useZIndex()\n  const previewUrl = usePreviewUrl(value)\n\n  const createLinkMetadata = getSanityCreateLinkMetadata(value)\n  const {\n    documentLinkedBannerContent: CreateLinkedBannerContent,\n    startInCreateBanner: StartInCreateBanner,\n  } = useSanityCreateConfig().components ?? {}\n\n  const [rootElement, setRootElement] = useState<HTMLDivElement | null>(null)\n  const [footerElement, setFooterElement] = useState<HTMLDivElement | null>(null)\n  const [headerElement, setHeaderElement] = useState<HTMLDivElement | null>(null)\n\n  const [actionsBoxElement, setActionsBoxElement] = useState<HTMLDivElement | null>(null)\n  const [documentPanelPortalElement, setDocumentPanelPortalElement] = useState<HTMLElement | null>(\n    null,\n  )\n\n  useGlobalCopyPasteElementHandler({\n    element: rootElement,\n    focusPath,\n    value,\n  })\n\n  const [inspectorMenuItems, setInspectorMenuItems] = useState<DocumentInspectorMenuItem[]>([])\n  const [rootFieldActionNodes, setRootFieldActionNodes] = useState<DocumentFieldActionNode[]>([])\n\n  const footerRect = useElementRect(footerElement)\n  const headerRect = useElementRect(headerElement)\n  const footerHeight = footerRect?.height\n  const headerHeight = headerRect?.height\n  const currentMinWidth =\n    DOCUMENT_PANEL_INITIAL_MIN_WIDTH + (inspector ? DOCUMENT_INSPECTOR_MIN_WIDTH : 0)\n  const minWidth = DOCUMENT_PANEL_MIN_WIDTH + (inspector ? DOCUMENT_INSPECTOR_MIN_WIDTH : 0)\n\n  const currentInspector = useMemo(\n    () => inspectors?.find((i) => i.name === inspector?.name),\n    [inspectors, inspector?.name],\n  )\n\n  const hasValue = Boolean(value)\n\n  const menuItems = useMemo(\n    () =>\n      getMenuItems({\n        currentInspector,\n        features,\n        hasValue,\n        inspectorMenuItems,\n        inspectors,\n        previewUrl,\n        t,\n      }),\n    [currentInspector, features, hasValue, inspectorMenuItems, inspectors, previewUrl, t],\n  )\n\n  const handleKeyUp = useCallback(\n    (event: React.KeyboardEvent<HTMLDivElement>) => {\n      for (const item of menuItems) {\n        if (item.shortcut) {\n          if (isHotkey(item.shortcut, event)) {\n            event.preventDefault()\n            event.stopPropagation()\n            onMenuAction(item)\n            return\n          }\n        }\n      }\n    },\n    [onMenuAction, menuItems],\n  )\n\n  const onConnectorSetFocus = useCallback(\n    (path: Path) => {\n      onPathOpen(path)\n      onFocus(path)\n    },\n    [onPathOpen, onFocus],\n  )\n\n  const portalElements = useMemo(\n    () => ({[DOCUMENT_PANEL_PORTAL_ELEMENT]: documentPanelPortalElement}),\n    [documentPanelPortalElement],\n  )\n\n  if (!schemaType) {\n    return (\n      <DocumentLayoutError\n        currentMinWidth={currentMinWidth}\n        documentType={documentType}\n        minWidth={minWidth}\n        paneKey={paneKey}\n        value={value}\n      />\n    )\n  }\n\n  return (\n    <GetFormValueProvider value={value}>\n      {inspectors.length > 0 && (\n        <DocumentInspectorMenuItemsResolver\n          documentId={documentId}\n          documentType={documentType}\n          inspectors={inspectors}\n          onMenuItems={setInspectorMenuItems}\n        />\n      )}\n\n      {fieldActions.length > 0 && schemaType && (\n        <FieldActionsResolver\n          actions={fieldActions}\n          documentId={documentId}\n          documentType={documentType}\n          onActions={setRootFieldActionNodes}\n          path={EMPTY_ARRAY}\n          schemaType={schemaType}\n        />\n      )}\n\n      <FieldActionsProvider actions={rootFieldActionNodes} path={EMPTY_ARRAY}>\n        <DocumentActionShortcuts\n          actionsBoxElement={actionsBoxElement}\n          as={Pane}\n          currentMinWidth={currentMinWidth}\n          data-testid=\"document-pane\"\n          flex={2.5}\n          id={paneKey}\n          minWidth={minWidth}\n          onKeyUp={handleKeyUp}\n          rootRef={setRootElement}\n        >\n          <DocumentPanelHeader ref={setHeaderElement} menuItems={menuItems} />\n\n          {createLinkMetadata &&\n            isSanityCreateLinked(createLinkMetadata) &&\n            CreateLinkedBannerContent && (\n              <ShowWhenPaneOpen>\n                <Banner\n                  tone=\"transparent\"\n                  data-test-id=\"sanity-create-read-only-banner\"\n                  content={<CreateLinkedBannerContent metadata={createLinkMetadata} />}\n                />\n              </ShowWhenPaneOpen>\n            )}\n\n          <DialogProvider position={DIALOG_PROVIDER_POSITION} zOffset={zOffsets.paneDialog}>\n            <Flex direction=\"column\" flex={1} height={layoutCollapsed ? undefined : 'fill'}>\n              <StyledChangeConnectorRoot\n                data-testid=\"change-connector-root\"\n                isReviewChangesOpen={changesOpen && paneParams?.changesInspectorTab === 'review'}\n                onOpenReviewChanges={onHistoryOpen}\n                onSetFocus={onConnectorSetFocus}\n              >\n                <DocumentPanel\n                  footerHeight={footerHeight || null}\n                  headerHeight={headerHeight || null}\n                  isInspectOpen={inspectOpen}\n                  rootElement={rootElement}\n                  setDocumentPanelPortalElement={setDocumentPanelPortalElement}\n                />\n              </StyledChangeConnectorRoot>\n            </Flex>\n          </DialogProvider>\n\n          {/* These providers are added because we want the dialogs in `DocumentStatusBar` to be scoped to the document pane. */}\n          {/* The portal element comes from `DocumentPanel`. */}\n          <PortalProvider __unstable_elements={portalElements}>\n            <DialogProvider position={DIALOG_PROVIDER_POSITION} zOffset={zOffsets.portal}>\n              {StartInCreateBanner && (\n                <ShowWhenPaneOpen>\n                  <StartInCreateBanner\n                    document={value}\n                    documentId={documentId}\n                    documentType={schemaType}\n                    documentReady={ready}\n                    isInitialValueLoading={!!isInitialValueLoading}\n                    panelPortalElementId={DOCUMENT_PANEL_PORTAL_ELEMENT}\n                  />\n                </ShowWhenPaneOpen>\n              )}\n              <PaneFooter ref={setFooterElement}>\n                <TooltipDelayGroupProvider>\n                  <DocumentStatusBar\n                    actionsBoxRef={setActionsBoxElement}\n                    createLinkMetadata={createLinkMetadata}\n                  />\n                </TooltipDelayGroupProvider>\n              </PaneFooter>\n            </DialogProvider>\n          </PortalProvider>\n          <DocumentOperationResults />\n        </DocumentActionShortcuts>\n      </FieldActionsProvider>\n    </GetFormValueProvider>\n  )\n}\n\n/**\n * Prevents whatever is inside of it from rendering when the pane is collapsed.\n * Needed locally as DocumentLayout does lives outside PaneContext, but is provided _somewhere_ within it.\n */\nfunction ShowWhenPaneOpen(props: {children: ReactNode}) {\n  const {collapsed} = usePane()\n  return collapsed ? null : props.children\n}\n","import {type ComponentType} from 'react'\nimport {type DocumentLayoutProps, type PluginOptions, useMiddlewareComponents} from 'sanity'\n\nimport {DocumentLayout} from './DocumentLayout'\n\nfunction pick(plugin: PluginOptions) {\n  return plugin.document?.components?.unstable_layout as ComponentType<\n    Omit<DocumentLayoutProps, 'renderDefault'>\n  >\n}\n\n/**\n * A hook that returns the document layout composed\n * by the Components API (`document.components.layout`).\n */\nexport function useDocumentLayoutComponent(): ComponentType<\n  Omit<DocumentLayoutProps, 'renderDefault'>\n> {\n  return useMiddlewareComponents({\n    pick,\n    defaultComponent: DocumentLayout,\n  })\n}\n","import {defineEvent} from '@sanity/telemetry'\n\n/**\n * @internal\n */\nexport const DocumentURLCopied = defineEvent({\n  name: 'DocumentURLCopied',\n  version: 1,\n  description: 'User copied document URL to clipboard',\n})\n\n/**\n * When a draft is successfully created\n * @internal\n */\nexport const CreatedDraft = defineEvent({\n  name: 'New Draft Created',\n  version: 1,\n  description: 'User created a new draft',\n})\n","import {type Template} from 'sanity'\n\ninterface InitialValueOptions {\n  documentType: string\n  panePayload?: unknown\n  templateName?: string\n  templateParams?: Record<string, unknown>\n  urlTemplate?: string\n}\n\n/**\n * @internal\n */\nexport function getInitialValueTemplateOpts(\n  templates: Template[],\n  opts: InitialValueOptions,\n): {templateName: string; templateParams: Record<string, unknown>} {\n  const payload = opts.panePayload || {}\n  const structureNodeTemplate = opts.templateName\n\n  if (opts.urlTemplate && structureNodeTemplate && structureNodeTemplate !== opts.urlTemplate) {\n    // eslint-disable-next-line no-console\n    console.warn(\n      `Conflicting templates: URL says \"${opts.urlTemplate}\", structure node says \"${structureNodeTemplate}\". Using \"${structureNodeTemplate}\".`,\n    )\n  }\n\n  const template = structureNodeTemplate || opts.urlTemplate\n  const typeTemplates = templates.filter((t) => t.schemaType === opts.documentType)\n\n  const templateParams = {\n    ...opts.templateParams,\n    ...(typeof payload === 'object' ? payload || {} : {}),\n  }\n\n  let templateName = template\n\n  // If we have not specified a specific template, and we only have a single\n  // template available for a schema type, use it\n  if (!template && typeTemplates.length === 1) {\n    templateName = typeTemplates[0].id\n  }\n\n  return {templateName: templateName!, templateParams}\n}\n","/* eslint-disable camelcase */\nimport {isActionEnabled} from '@sanity/schema/_internal'\nimport {useTelemetry} from '@sanity/telemetry/react'\nimport {\n  type ObjectSchemaType,\n  type Path,\n  type SanityDocument,\n  type SanityDocumentLike,\n} from '@sanity/types'\nimport {useToast} from '@sanity/ui'\nimport {fromString as pathFromString, pathFor, resolveKeyedPath} from '@sanity/util/paths'\nimport {omit, throttle} from 'lodash'\nimport {memo, useCallback, useEffect, useInsertionEffect, useMemo, useRef, useState} from 'react'\nimport deepEquals from 'react-fast-compare'\nimport {\n  type DocumentActionsContext,\n  type DocumentActionsVersionType,\n  type DocumentFieldAction,\n  type DocumentInspector,\n  type DocumentPresence,\n  EMPTY_ARRAY,\n  getDraftId,\n  getExpandOperations,\n  getPublishedId,\n  getVersionFromId,\n  isPublishedPerspective,\n  isReleaseDocument,\n  isReleaseScheduledOrScheduling,\n  isSanityCreateLinkedDocument,\n  isVersionId,\n  type OnPathFocusPayload,\n  type PartialContext,\n  type PatchEvent,\n  setAtPath,\n  type StateTree,\n  toMutationPatches,\n  useConnectionState,\n  useCopyPaste,\n  useDocumentOperation,\n  useDocumentValuePermissions,\n  useEditState,\n  useFormState,\n  useInitialValue,\n  usePerspective,\n  usePresenceStore,\n  useSchema,\n  useSource,\n  useTemplates,\n  useTranslation,\n  useUnique,\n  useValidationStatus,\n} from 'sanity'\nimport {DocumentPaneContext} from 'sanity/_singletons'\n\nimport {usePaneRouter} from '../../components'\nimport {structureLocaleNamespace} from '../../i18n'\nimport {type PaneMenuItem} from '../../types'\nimport {useStructureTool} from '../../useStructureTool'\nimport {CreatedDraft, DocumentURLCopied} from './__telemetry__'\nimport {\n  DEFAULT_MENU_ITEM_GROUPS,\n  EMPTY_PARAMS,\n  HISTORY_INSPECTOR_NAME,\n  INSPECT_ACTION_PREFIX,\n} from './constants'\nimport {type DocumentPaneContextValue} from './DocumentPaneContext'\nimport {getInitialValueTemplateOpts} from './getInitialValueTemplateOpts'\nimport {\n  type DocumentPaneProviderProps as DocumentPaneProviderWrapperProps,\n  type HistoryStoreProps,\n} from './types'\nimport {usePreviewUrl} from './usePreviewUrl'\n\ninterface DocumentPaneProviderProps extends DocumentPaneProviderWrapperProps {\n  historyStore: HistoryStoreProps\n}\n\n/**\n * @internal\n */\n// eslint-disable-next-line complexity, max-statements\nexport const DocumentPaneProvider = memo((props: DocumentPaneProviderProps) => {\n  const {children, index, pane, paneKey, onFocusPath, forcedVersion, historyStore} = props\n  const {\n    store: timelineStore,\n    error: timelineError,\n    ready: timelineReady,\n    revisionDocument,\n    onOlderRevision,\n    sinceDocument,\n    isPristine,\n    revisionId,\n    lastNonDeletedRevId,\n  } = historyStore\n\n  const schema = useSchema()\n  const templates = useTemplates()\n  const {setDocumentMeta} = useCopyPaste()\n  const {\n    __internal_tasks,\n    document: {\n      actions: documentActions,\n      badges: documentBadges,\n      unstable_fieldActions: fieldActionsResolver,\n      unstable_languageFilter: languageFilterResolver,\n      inspectors: inspectorsResolver,\n    },\n  } = useSource()\n  const telemetry = useTelemetry()\n  const presenceStore = usePresenceStore()\n  const paneRouter = usePaneRouter()\n  const setPaneParams = paneRouter.setParams\n  const {features} = useStructureTool()\n  const {push: pushToast} = useToast()\n  const {\n    options,\n    menuItemGroups = DEFAULT_MENU_ITEM_GROUPS,\n    title = null,\n    views: viewsProp = [],\n  } = pane\n  const paneOptions = useUnique(options)\n  const documentIdRaw = paneOptions.id\n  const documentId = getPublishedId(documentIdRaw)\n  const documentType = options.type\n  const params = useUnique(paneRouter.params) || EMPTY_PARAMS\n\n  const perspective = usePerspective()\n\n  const {isReleaseLocked, selectedReleaseId, selectedPerspectiveName} = useMemo(() => {\n    // TODO: COREL - Remove this after updating sanity-assist to use <PerspectiveProvider>\n    if (forcedVersion) {\n      return forcedVersion\n    }\n    return {\n      selectedPerspectiveName: perspective.selectedPerspectiveName,\n      selectedReleaseId: perspective.selectedReleaseId,\n      isReleaseLocked: isReleaseDocument(perspective.selectedPerspective)\n        ? isReleaseScheduledOrScheduling(perspective.selectedPerspective)\n        : false,\n    }\n  }, [\n    forcedVersion,\n    perspective.selectedPerspectiveName,\n    perspective.selectedReleaseId,\n    perspective.selectedPerspective,\n  ])\n\n  const panePayload = useUnique(paneRouter.payload)\n  const {templateName, templateParams} = useMemo(\n    () =>\n      getInitialValueTemplateOpts(templates, {\n        documentType,\n        templateName: paneOptions.template,\n        templateParams: paneOptions.templateParameters,\n        panePayload,\n        urlTemplate: params.template,\n      }),\n    [documentType, paneOptions, params, panePayload, templates],\n  )\n  const initialValueRaw = useInitialValue({\n    documentId,\n    documentType,\n    templateName,\n    templateParams,\n    version: params.version,\n  })\n\n  const initialValue = useUnique(initialValueRaw)\n  const isInitialValueLoading = initialValue.loading\n\n  const {patch} = useDocumentOperation(documentId, documentType, selectedReleaseId)\n  const schemaType = schema.get(documentType) as ObjectSchemaType | undefined\n  const editState = useEditState(documentId, documentType, 'default', selectedReleaseId)\n  const {validation: validationRaw} = useValidationStatus(\n    documentId,\n    documentType,\n    selectedReleaseId,\n  )\n  const connectionState = useConnectionState(documentId, documentType, selectedReleaseId)\n  const liveEdit = Boolean(schemaType?.liveEdit)\n\n  const value: SanityDocumentLike = useMemo(() => {\n    if (selectedReleaseId) {\n      return editState.version || editState.draft || editState.published || initialValue.value\n    }\n    if (selectedPerspectiveName && isPublishedPerspective(selectedPerspectiveName)) {\n      return (\n        editState.published ||\n        (liveEdit ? initialValue.value : {_id: documentId, _type: documentType})\n      )\n    }\n    return editState.draft || editState.published || initialValue.value\n  }, [\n    documentId,\n    documentType,\n    editState.draft,\n    editState.published,\n    editState.version,\n    initialValue.value,\n    liveEdit,\n    selectedPerspectiveName,\n    selectedReleaseId,\n  ])\n\n  const [isDeleting, setIsDeleting] = useState(false)\n\n  const getDocumentVersionType = useCallback(() => {\n    let version: DocumentActionsVersionType\n    switch (true) {\n      case Boolean(params.rev):\n        version = 'revision'\n        break\n      case selectedReleaseId && isVersionId(value._id):\n        version = 'version'\n        break\n      case selectedPerspectiveName === 'published':\n        version = 'published'\n        break\n      default:\n        version = 'draft'\n    }\n\n    return version\n  }, [selectedPerspectiveName, selectedReleaseId, params, value._id])\n\n  const actionsPerspective = useMemo(() => getDocumentVersionType(), [getDocumentVersionType])\n\n  const documentActionsProps: PartialContext<DocumentActionsContext> = useMemo(\n    () => ({\n      schemaType: documentType,\n      documentId,\n      versionType: actionsPerspective,\n      ...(selectedReleaseId && {versionName: selectedReleaseId}),\n    }),\n    [documentType, documentId, actionsPerspective, selectedReleaseId],\n  )\n\n  // Resolve document actions\n  const actions = useMemo(\n    () => documentActions(documentActionsProps),\n    [documentActions, documentActionsProps],\n  )\n\n  // Resolve document badges\n  const badges = useMemo(\n    () => documentBadges({schemaType: documentType, documentId}),\n    [documentBadges, documentId, documentType],\n  )\n\n  // Resolve document language filter\n  const languageFilter = useMemo(\n    () => languageFilterResolver({schemaType: documentType, documentId}),\n    [documentId, documentType, languageFilterResolver],\n  )\n\n  const validation = useUnique(validationRaw)\n  const views = useUnique(viewsProp)\n\n  const [focusPath, setFocusPath] = useState<Path>(() =>\n    params.path ? pathFromString(params.path) : EMPTY_ARRAY,\n  )\n  const focusPathRef = useRef<Path>([])\n  const activeViewId = params.view || (views[0] && views[0].id) || null\n\n  /**\n   * Determine if the current document is deleted.\n   *\n   * When the timeline is available – we check for the absence of an editable document pair\n   * (both draft + published versions) as well as a non 'pristine' timeline (i.e. a timeline that consists\n   * of at least one chunk).\n   *\n   * In the _very rare_ case where the timeline cannot be loaded – we skip this check and always assume\n   * the document is NOT deleted. Since we can't accurately determine document deleted status without history,\n   * skipping this check means that in these cases, users will at least be able to create new documents\n   * without them being incorrectly marked as deleted.\n   */\n  const isDeleted = useMemo(() => {\n    if (!timelineReady) {\n      return false\n    }\n    return Boolean(!editState?.draft && !editState?.published && !editState?.version) && !isPristine\n  }, [editState?.draft, editState?.published, editState?.version, isPristine, timelineReady])\n\n  // TODO: this may cause a lot of churn. May be a good idea to prevent these\n  // requests unless the menu is open somehow\n  const previewUrl = usePreviewUrl(value)\n\n  const [presence, setPresence] = useState<DocumentPresence[]>([])\n  useEffect(() => {\n    const subscription = presenceStore.documentPresence(value._id).subscribe((nextPresence) => {\n      setPresence(nextPresence)\n    })\n    return () => {\n      subscription.unsubscribe()\n    }\n  }, [presenceStore, value._id])\n\n  const inspectors: DocumentInspector[] = useMemo(\n    () => inspectorsResolver({documentId, documentType}),\n    [documentId, documentType, inspectorsResolver],\n  )\n\n  const [inspectorName, setInspectorName] = useState<string | null>(() => params.inspect || null)\n\n  // Handle inspector name changes from URL\n  const inspectParamRef = useRef<string | undefined>(params.inspect)\n  useEffect(() => {\n    if (inspectParamRef.current !== params.inspect) {\n      inspectParamRef.current = params.inspect\n      setInspectorName(params.inspect || null)\n    }\n  }, [params.inspect])\n\n  const currentInspector = inspectors?.find((i) => i.name === inspectorName)\n  const resolvedChangesInspector = inspectors.find((i) => i.name === HISTORY_INSPECTOR_NAME)\n\n  const changesOpen = currentInspector?.name === HISTORY_INSPECTOR_NAME\n\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const inspectOpen = params.inspect === 'on'\n  const compareValue: Partial<SanityDocument> | null = changesOpen\n    ? sinceDocument\n    : editState?.published || null\n\n  const fieldActions: DocumentFieldAction[] = useMemo(\n    () => (schemaType ? fieldActionsResolver({documentId, documentType, schemaType}) : []),\n    [documentId, documentType, fieldActionsResolver, schemaType],\n  )\n\n  /**\n   * Note that in addition to connection and edit state, we also wait for a valid document timeline\n   * range to be loaded. This means if we're loading an older revision, the full transaction range must\n   * be loaded in full prior to the document being displayed.\n   *\n   * Previously, visiting studio URLs with timeline params would display the 'current' document and then\n   * 'snap' in the older revision, which was disorienting and could happen mid-edit.\n   *\n   * In the event that the timeline cannot be loaded due to TimelineController errors or blocked requests,\n   * we skip this readiness check to ensure that users aren't locked out of editing. Trying to select\n   * a timeline revision in this instance will display an error localized to the popover itself.\n   */\n  const ready =\n    connectionState === 'connected' &&\n    editState.ready &&\n    (!params.rev || timelineReady || !!timelineError)\n\n  const displayed: Partial<SanityDocument> | undefined = useMemo(\n    () => (onOlderRevision ? revisionDocument || {_id: value._id, _type: value._type} : value),\n    [onOlderRevision, revisionDocument, value],\n  )\n\n  const setTimelineRange = useCallback(\n    (newSince: string, newRev: string | null) => {\n      setPaneParams({\n        ...params,\n        since: newSince,\n        rev: newRev || undefined,\n      })\n    },\n    [params, setPaneParams],\n  )\n\n  const handleBlur = useCallback(\n    (blurredPath: Path) => {\n      if (disableBlurRef.current) {\n        return\n      }\n\n      setFocusPath(EMPTY_ARRAY)\n\n      if (focusPathRef.current !== EMPTY_ARRAY) {\n        focusPathRef.current = EMPTY_ARRAY\n        onFocusPath?.(EMPTY_ARRAY)\n      }\n\n      // note: we're deliberately not syncing presence here since it would make the user avatar disappear when a\n      // user clicks outside a field without focusing another one\n    },\n    [onFocusPath, setFocusPath],\n  )\n\n  const closeInspector = useCallback(\n    (closeInspectorName?: string) => {\n      // inspector?: DocumentInspector\n      const inspector = closeInspectorName && inspectors.find((i) => i.name === closeInspectorName)\n\n      if (closeInspectorName && !inspector) {\n        console.warn(`No inspector named \"${closeInspectorName}\"`)\n        return\n      }\n\n      if (!currentInspector) {\n        return\n      }\n\n      if (inspector) {\n        const result = inspector.onClose?.({params}) ?? {params}\n\n        setInspectorName(null)\n        inspectParamRef.current = undefined\n\n        setPaneParams({...result.params, inspect: undefined})\n\n        return\n      }\n\n      if (currentInspector) {\n        const result = currentInspector.onClose?.({params}) ?? {params}\n\n        setInspectorName(null)\n        inspectParamRef.current = undefined\n\n        setPaneParams({...result.params, inspect: undefined})\n      }\n    },\n    [currentInspector, inspectors, params, setPaneParams],\n  )\n\n  const openInspector = useCallback(\n    (nextInspectorName: string, paneParams?: Record<string, string>) => {\n      const nextInspector = inspectors.find((i) => i.name === nextInspectorName)\n\n      if (!nextInspector) {\n        console.warn(`No inspector named \"${nextInspectorName}\"`)\n        return\n      }\n\n      // if the inspector is already open, only update params\n      if (currentInspector?.name === nextInspector.name) {\n        setPaneParams({...params, ...paneParams, inspect: nextInspector.name})\n        return\n      }\n\n      let currentParams = params\n\n      if (currentInspector) {\n        const closeResult = nextInspector.onClose?.({params: currentParams}) ?? {\n          params: currentParams,\n        }\n\n        currentParams = closeResult.params\n      }\n\n      const result = nextInspector.onOpen?.({params: currentParams}) ?? {params: currentParams}\n\n      setInspectorName(nextInspector.name)\n      inspectParamRef.current = nextInspector.name\n\n      setPaneParams({...result.params, ...paneParams, inspect: nextInspector.name})\n    },\n    [currentInspector, inspectors, params, setPaneParams],\n  )\n\n  const handleHistoryClose = useCallback(() => {\n    if (resolvedChangesInspector) {\n      closeInspector(resolvedChangesInspector.name)\n    }\n  }, [closeInspector, resolvedChangesInspector])\n\n  const handleHistoryOpen = useCallback(() => {\n    if (!features.reviewChanges) {\n      return\n    }\n\n    if (resolvedChangesInspector) {\n      openInspector(resolvedChangesInspector.name, {changesInspectorTab: 'review'})\n    }\n  }, [features.reviewChanges, openInspector, resolvedChangesInspector])\n\n  const handlePaneClose = useCallback(() => paneRouter.closeCurrent(), [paneRouter])\n\n  const handlePaneSplit = useCallback(() => paneRouter.duplicateCurrent(), [paneRouter])\n\n  const toggleLegacyInspect = useCallback(\n    (toggle = !inspectOpen) => {\n      if (toggle) {\n        setPaneParams({...params, inspect: 'on'})\n      } else {\n        setPaneParams(omit(params, 'inspect'))\n      }\n    },\n    [inspectOpen, params, setPaneParams],\n  )\n\n  const handleMenuAction = useCallback(\n    (item: PaneMenuItem) => {\n      if (item.action === 'production-preview' && previewUrl) {\n        window.open(previewUrl)\n        return true\n      }\n\n      if (item.action === 'copy-document-url' && navigator) {\n        telemetry.log(DocumentURLCopied)\n        // Chose to copy the user's current URL instead of\n        // the document's edit intent link because\n        // of bugs when resolving a document that has\n        // multiple access paths within Structure\n        navigator.clipboard.writeText(window.location.toString())\n        pushToast({\n          id: 'copy-document-url',\n          status: 'info',\n          title: t('panes.document-operation-results.operation-success_copy-url'),\n        })\n        return true\n      }\n\n      if (item.action === 'inspect') {\n        toggleLegacyInspect(true)\n        return true\n      }\n\n      if (item.action === 'reviewChanges') {\n        handleHistoryOpen()\n        return true\n      }\n\n      if (typeof item.action === 'string' && item.action.startsWith(INSPECT_ACTION_PREFIX)) {\n        const nextInspectorName = item.action.slice(INSPECT_ACTION_PREFIX.length)\n        const nextInspector = inspectors.find((i) => i.name === nextInspectorName)\n\n        if (nextInspector) {\n          if (nextInspector.name === inspectorName) {\n            closeInspector(nextInspector.name)\n          } else {\n            openInspector(nextInspector.name)\n          }\n          return true\n        }\n      }\n\n      return false\n    },\n    [\n      t,\n      closeInspector,\n      handleHistoryOpen,\n      inspectorName,\n      inspectors,\n      openInspector,\n      previewUrl,\n      toggleLegacyInspect,\n      pushToast,\n      telemetry,\n    ],\n  )\n\n  const handleLegacyInspectClose = useCallback(\n    () => toggleLegacyInspect(false),\n    [toggleLegacyInspect],\n  )\n\n  const [openPath, onSetOpenPath] = useState<Path>([])\n  const [fieldGroupState, onSetFieldGroupState] = useState<StateTree<string>>()\n  const [collapsedPaths, onSetCollapsedPath] = useState<StateTree<boolean>>()\n  const [collapsedFieldSets, onSetCollapsedFieldSets] = useState<StateTree<boolean>>()\n\n  const handleOnSetCollapsedPath = useCallback((path: Path, collapsed: boolean) => {\n    onSetCollapsedPath((prevState) => setAtPath(prevState, path, collapsed))\n  }, [])\n\n  const handleOnSetCollapsedFieldSet = useCallback((path: Path, collapsed: boolean) => {\n    onSetCollapsedFieldSets((prevState) => setAtPath(prevState, path, collapsed))\n  }, [])\n\n  const handleSetActiveFieldGroup = useCallback(\n    (path: Path, groupName: string) =>\n      onSetFieldGroupState((prevState) => setAtPath(prevState, path, groupName)),\n    [],\n  )\n\n  const requiredPermission = value._createdAt ? 'update' : 'create'\n  const docId = value._id ? value._id : 'dummy-id'\n  const docPermissionsInput = useMemo(() => {\n    return {\n      ...value,\n      _id: liveEdit ? getPublishedId(docId) : getDraftId(docId),\n    }\n  }, [liveEdit, value, docId])\n\n  const [permissions, isPermissionsLoading] = useDocumentValuePermissions({\n    document: docPermissionsInput,\n    permission: requiredPermission,\n  })\n\n  const isCreateLinked = isSanityCreateLinkedDocument(value)\n  const isNonExistent = !value?._id\n\n  const readOnly = useMemo(() => {\n    const hasNoPermission = !isPermissionsLoading && !permissions?.granted\n    const updateActionDisabled = !isActionEnabled(schemaType!, 'update')\n    const createActionDisabled = isNonExistent && !isActionEnabled(schemaType!, 'create')\n    const reconnecting = connectionState === 'reconnecting'\n    const isLocked = editState.transactionSyncLock?.enabled\n    // in cases where the document has drafts but the schema is live edit, there is a risk of data loss, so we disable editing in this case\n    if (liveEdit && editState.draft?._id) {\n      return true\n    }\n    if (!liveEdit && selectedPerspectiveName === 'published') {\n      return true\n    }\n\n    // If a release is selected, validate that the document id matches the selected release id\n    if (selectedReleaseId && getVersionFromId(value._id) !== selectedReleaseId) {\n      return true\n    }\n\n    return (\n      !ready ||\n      revisionId !== null ||\n      hasNoPermission ||\n      updateActionDisabled ||\n      createActionDisabled ||\n      reconnecting ||\n      isLocked ||\n      isDeleting ||\n      isDeleted ||\n      isCreateLinked ||\n      isReleaseLocked\n    )\n  }, [\n    isPermissionsLoading,\n    permissions?.granted,\n    schemaType,\n    isNonExistent,\n    connectionState,\n    editState.transactionSyncLock?.enabled,\n    editState.draft?._id,\n    liveEdit,\n    selectedPerspectiveName,\n    selectedReleaseId,\n    value._id,\n    ready,\n    revisionId,\n    isDeleting,\n    isDeleted,\n    isCreateLinked,\n    isReleaseLocked,\n  ])\n\n  const patchRef = useRef<(event: PatchEvent) => void>(() => {\n    throw new Error(\n      'Attempted to patch the Sanity document during initial render or in an `useInsertionEffect`. Input components should only call `onChange()` in a useEffect or an event handler.',\n    )\n  })\n\n  const handleChange = useCallback((event: PatchEvent) => patchRef.current(event), [])\n\n  useInsertionEffect(() => {\n    if (readOnly) {\n      patchRef.current = () => {\n        throw new Error('Attempted to patch a read-only document')\n      }\n    } else {\n      // note: this needs to happen in an insertion effect to make sure we're ready to receive patches from child components when they run their effects initially\n      // in case they do e.g. `useEffect(() => props.onChange(set(\"foo\")), [])`\n      // Note: although we discourage patch-on-mount, we still support it.\n      patchRef.current = (event: PatchEvent) => {\n        // when creating a new draft\n        if (!editState.draft && !editState.published) {\n          telemetry.log(CreatedDraft)\n        }\n\n        patch.execute(toMutationPatches(event.patches), initialValue.value)\n      }\n    }\n  }, [editState.draft, editState.published, initialValue.value, patch, telemetry, readOnly])\n\n  const formState = useFormState({\n    schemaType: schemaType!,\n    documentValue: displayed,\n    readOnly,\n    comparisonValue: compareValue,\n    focusPath,\n    openPath,\n    collapsedPaths,\n    presence,\n    validation,\n    collapsedFieldSets,\n    fieldGroupState,\n    changesOpen,\n  })\n\n  useEffect(() => {\n    setDocumentMeta({\n      documentId,\n      documentType,\n      schemaType: schemaType!,\n      onChange: handleChange,\n    })\n  }, [documentId, documentType, schemaType, handleChange, setDocumentMeta])\n\n  const formStateRef = useRef(formState)\n  useEffect(() => {\n    formStateRef.current = formState\n  }, [formState])\n\n  const setOpenPath = useCallback(\n    (path: Path) => {\n      const ops = getExpandOperations(formStateRef.current!, path)\n      ops.forEach((op) => {\n        if (op.type === 'expandPath') {\n          onSetCollapsedPath((prevState) => setAtPath(prevState, op.path, false))\n        }\n        if (op.type === 'expandFieldSet') {\n          onSetCollapsedFieldSets((prevState) => setAtPath(prevState, op.path, false))\n        }\n        if (op.type === 'setSelectedGroup') {\n          onSetFieldGroupState((prevState) => setAtPath(prevState, op.path, op.groupName))\n        }\n      })\n      onSetOpenPath(path)\n    },\n    [formStateRef],\n  )\n\n  const updatePresence = useCallback(\n    (nextFocusPath: Path, payload?: OnPathFocusPayload) => {\n      presenceStore.setLocation([\n        {\n          type: 'document',\n          documentId: value._id,\n          path: nextFocusPath,\n          lastActiveAt: new Date().toISOString(),\n          selection: payload?.selection,\n        },\n      ])\n    },\n    [presenceStore, value._id],\n  )\n\n  const updatePresenceThrottled = useMemo(\n    () => throttle(updatePresence, 1000, {leading: true, trailing: true}),\n    [updatePresence],\n  )\n\n  const handleFocus = useCallback(\n    (_nextFocusPath: Path, payload?: OnPathFocusPayload) => {\n      const nextFocusPath = pathFor(_nextFocusPath)\n      if (nextFocusPath !== focusPathRef.current) {\n        setFocusPath(pathFor(nextFocusPath))\n        setOpenPath(pathFor(nextFocusPath.slice(0, -1)))\n        focusPathRef.current = nextFocusPath\n        onFocusPath?.(nextFocusPath)\n      }\n      updatePresenceThrottled(nextFocusPath, payload)\n    },\n    [onFocusPath, setOpenPath, updatePresenceThrottled],\n  )\n\n  const documentPane: DocumentPaneContextValue = useMemo(\n    () =>\n      ({\n        actions,\n        activeViewId,\n        badges,\n        changesOpen,\n        closeInspector,\n        collapsedFieldSets,\n        collapsedPaths,\n        compareValue,\n        connectionState,\n        displayed,\n        documentId,\n        documentIdRaw,\n        documentType,\n        editState,\n        fieldActions,\n        focusPath,\n        inspector: currentInspector || null,\n        inspectors,\n        __internal_tasks,\n        onBlur: handleBlur,\n        onChange: handleChange,\n        onFocus: handleFocus,\n        onPathOpen: setOpenPath,\n        onHistoryClose: handleHistoryClose,\n        onHistoryOpen: handleHistoryOpen,\n        onInspectClose: handleLegacyInspectClose,\n        onMenuAction: handleMenuAction,\n        onPaneClose: handlePaneClose,\n        onPaneSplit: handlePaneSplit,\n        onSetActiveFieldGroup: handleSetActiveFieldGroup,\n        onSetCollapsedPath: handleOnSetCollapsedPath,\n        onSetCollapsedFieldSet: handleOnSetCollapsedFieldSet,\n        openInspector,\n        openPath,\n        index,\n        inspectOpen,\n        validation,\n        menuItemGroups: menuItemGroups || [],\n        paneKey,\n        previewUrl,\n        ready,\n        schemaType: schemaType!,\n        isPermissionsLoading,\n        isInitialValueLoading,\n        permissions,\n        setTimelineRange,\n        setIsDeleting,\n        isDeleting,\n        isDeleted,\n        timelineError,\n        timelineStore,\n        title,\n        value,\n        selectedReleaseId,\n        views,\n        formState,\n        unstable_languageFilter: languageFilter,\n        revisionId,\n        lastNonDeletedRevId,\n      }) satisfies DocumentPaneContextValue,\n    [\n      actions,\n      activeViewId,\n      badges,\n      changesOpen,\n      closeInspector,\n      collapsedFieldSets,\n      collapsedPaths,\n      compareValue,\n      connectionState,\n      displayed,\n      documentId,\n      documentIdRaw,\n      documentType,\n      editState,\n      fieldActions,\n      focusPath,\n      currentInspector,\n      inspectors,\n      __internal_tasks,\n      handleBlur,\n      handleChange,\n      handleFocus,\n      setOpenPath,\n      handleHistoryClose,\n      handleHistoryOpen,\n      handleLegacyInspectClose,\n      handleMenuAction,\n      handlePaneClose,\n      handlePaneSplit,\n      handleSetActiveFieldGroup,\n      handleOnSetCollapsedPath,\n      handleOnSetCollapsedFieldSet,\n      openInspector,\n      openPath,\n      index,\n      inspectOpen,\n      validation,\n      menuItemGroups,\n      paneKey,\n      previewUrl,\n      ready,\n      schemaType,\n      isPermissionsLoading,\n      isInitialValueLoading,\n      permissions,\n      setTimelineRange,\n      isDeleting,\n      isDeleted,\n      timelineError,\n      timelineStore,\n      title,\n      value,\n      selectedReleaseId,\n      views,\n      formState,\n      languageFilter,\n      revisionId,\n      lastNonDeletedRevId,\n    ],\n  )\n\n  useEffect(() => {\n    let timeout: ReturnType<typeof setTimeout>\n    if (connectionState === 'reconnecting') {\n      timeout = setTimeout(() => {\n        pushToast({\n          id: 'sanity/structure/reconnecting',\n          status: 'warning',\n          title: t('panes.document-pane-provider.reconnecting.title'),\n        })\n      }, 2000) // 2 seconds, we can iterate on the value\n    }\n    return () => {\n      if (timeout) clearTimeout(timeout)\n    }\n  }, [connectionState, pushToast, t])\n\n  const disableBlurRef = useRef(false)\n\n  // Reset `focusPath` when `documentId` or `params.path` changes\n  useEffect(() => {\n    if (ready && params.path) {\n      const {path, ...restParams} = params\n      const pathFromUrl = resolveKeyedPath(formStateRef.current?.value, pathFromString(path))\n\n      disableBlurRef.current = true\n\n      // Reset focus path when url params path changes\n      if (!deepEquals(focusPathRef.current, pathFromUrl)) {\n        setFocusPath(pathFromUrl)\n        setOpenPath(pathFromUrl)\n        focusPathRef.current = pathFromUrl\n        onFocusPath?.(pathFromUrl)\n      }\n\n      const timeout = setTimeout(() => {\n        disableBlurRef.current = false\n      }, 0)\n\n      // remove the `path`-param from url after we have consumed it as the initial focus path\n      paneRouter.setParams(restParams)\n\n      return () => clearTimeout(timeout)\n    }\n\n    return undefined\n  }, [params, documentId, onFocusPath, setOpenPath, ready, paneRouter])\n\n  return (\n    <DocumentPaneContext.Provider value={documentPane}>{children}</DocumentPaneContext.Provider>\n  )\n})\n\nDocumentPaneProvider.displayName = 'Memo(DocumentPaneProvider)'\n","import {type ReleaseId} from '@sanity/client'\nimport {type ObjectSchemaType} from '@sanity/types'\nimport {useMemo} from 'react'\nimport {\n  EMPTY_ARRAY,\n  EventsProvider,\n  getDraftId,\n  getPublishedId,\n  getReleaseIdFromReleaseDocumentId,\n  getVersionId,\n  isDeleteDocumentGroupEvent,\n  isDeleteDocumentVersionEvent,\n  PerspectiveProvider,\n  useArchivedReleases,\n  useEditState,\n  useEventsStore,\n  usePerspective,\n  useSchema,\n} from 'sanity'\n\nimport {usePaneRouter} from '../../components'\nimport {EMPTY_PARAMS} from './constants'\nimport {usePaneOptions} from './DocumentPane'\nimport {DocumentPaneProvider} from './DocumentPaneProvider'\nimport {type DocumentPaneProviderProps} from './types'\n\nexport const DocumentEventsPane = (props: DocumentPaneProviderProps) => {\n  const {params = EMPTY_PARAMS} = usePaneRouter()\n  const options = usePaneOptions(props.pane.options, params)\n  const schema = useSchema()\n  const documentType = options.type\n  const schemaType = schema.get(options.type) as ObjectSchemaType | undefined\n  const liveEdit = Boolean(schemaType?.liveEdit)\n\n  const {selectedPerspectiveName, selectedReleaseId, selectedPerspective} = usePerspective()\n  const {data: archivedReleases} = useArchivedReleases()\n  const editState = useEditState(\n    getPublishedId(options.id),\n    documentType,\n    'default',\n    selectedReleaseId,\n  )\n\n  const showingPublishedOnDraft = liveEdit && selectedPerspective === 'drafts' && !editState?.draft\n  const {rev, since} = params\n  const historyVersion = params.historyVersion as ReleaseId | undefined\n\n  const documentId = useMemo(() => {\n    if (showingPublishedOnDraft) {\n      return getPublishedId(options.id)\n    }\n    if (\n      historyVersion &&\n      archivedReleases.some(\n        (release) => getReleaseIdFromReleaseDocumentId(release._id) === historyVersion,\n      )\n    ) {\n      // Check if we have a release that matches with this historyVersion\n      return getVersionId(options.id, historyVersion)\n    }\n    if (typeof selectedPerspectiveName === 'undefined') {\n      return getDraftId(options.id)\n    }\n    if (selectedPerspectiveName === 'published') {\n      return getPublishedId(options.id)\n    }\n    if (selectedReleaseId) {\n      return getVersionId(options.id, selectedPerspectiveName)\n    }\n    return options.id\n  }, [\n    archivedReleases,\n    historyVersion,\n    selectedPerspectiveName,\n    options.id,\n    showingPublishedOnDraft,\n    selectedReleaseId,\n  ])\n\n  const eventsStore = useEventsStore({documentId, documentType: options.type, rev, since})\n\n  const historyStoreProps = useMemo(\n    () => ({\n      error: eventsStore.error,\n      revisionId: eventsStore.revision?.revisionId || null,\n      onOlderRevision: Boolean(eventsStore.revision?.document && eventsStore.revision?.revisionId),\n      revisionDocument: eventsStore.revision?.document || null,\n      sinceDocument: eventsStore.sinceRevision?.document || null,\n      ready: !eventsStore.loading,\n      isPristine: Boolean(eventsStore.events.length === 0),\n      lastNonDeletedRevId:\n        eventsStore.events.find(\n          (e) => !isDeleteDocumentGroupEvent(e) && !isDeleteDocumentVersionEvent(e),\n        )?.id || null,\n    }),\n    [eventsStore],\n  )\n\n  const value = useMemo(() => eventsStore, [eventsStore])\n\n  return (\n    <EventsProvider value={value}>\n      {historyVersion ? (\n        <PerspectiveProvider\n          selectedPerspectiveName={historyVersion}\n          excludedPerspectives={EMPTY_ARRAY}\n        >\n          <DocumentPaneProvider {...props} historyStore={historyStoreProps} />\n        </PerspectiveProvider>\n      ) : (\n        <DocumentPaneProvider {...props} historyStore={historyStoreProps} />\n      )}\n    </EventsProvider>\n  )\n}\n","import {type SanityDocument} from '@sanity/types'\nimport {useMemo, useState} from 'react'\nimport {getPublishedId, useTimelineSelector, useTimelineStore} from 'sanity'\n\nimport {usePaneRouter} from '../../components'\nimport {EMPTY_PARAMS} from './constants'\nimport {usePaneOptions} from './DocumentPane'\nimport {DocumentPaneProvider} from './DocumentPaneProvider'\nimport {type DocumentPaneProviderProps} from './types'\n\nexport const DocumentPaneWithLegacyTimelineStore = (props: DocumentPaneProviderProps) => {\n  const {pane} = props\n  const paneRouter = usePaneRouter()\n  const options = usePaneOptions(pane.options, paneRouter.params)\n\n  const params = paneRouter.params || EMPTY_PARAMS\n\n  const [timelineError, setTimelineError] = useState<Error | null>(null)\n\n  const store = useTimelineStore({\n    documentId: getPublishedId(options.id),\n    documentType: options.type,\n    onError: setTimelineError,\n    rev: params.rev,\n    since: params.since,\n  })\n\n  const onOlderRevision = useTimelineSelector(store, (state) => state.onOlderRevision)\n  const revTime = useTimelineSelector(store, (state) => state.revTime)\n  const sinceAttributes = useTimelineSelector(store, (state) => state.sinceAttributes)\n  const timelineDisplayed = useTimelineSelector(store, (state) => state.timelineDisplayed)\n  const timelineReady = useTimelineSelector(store, (state) => state.timelineReady)\n  const isPristine = useTimelineSelector(store, (state) => state.isPristine)\n  const lastNonDeletedRevId = useTimelineSelector(store, (state) => state.lastNonDeletedRevId)\n\n  const historyStoreProps = useMemo(\n    () => ({\n      store,\n      error: timelineError,\n      revisionId: revTime?.id || null,\n      onOlderRevision: onOlderRevision,\n      revisionDocument: timelineDisplayed as SanityDocument | null,\n      sinceDocument: sinceAttributes as SanityDocument | null,\n      ready: timelineReady,\n      isPristine: Boolean(isPristine),\n      lastNonDeletedRevId,\n    }),\n    [\n      store,\n      timelineError,\n      revTime?.id,\n      onOlderRevision,\n      timelineDisplayed,\n      sinceAttributes,\n      timelineReady,\n      isPristine,\n      lastNonDeletedRevId,\n    ],\n  )\n  return <DocumentPaneProvider {...props} historyStore={historyStoreProps} />\n}\n","import {memo} from 'react'\nimport {useSource} from 'sanity'\n\nimport {DocumentEventsPane} from './DocumentEventsPane'\nimport {DocumentPaneWithLegacyTimelineStore} from './DocumentPaneLegacyTimeline'\nimport {type DocumentPaneProviderProps} from './types'\n\n/**\n * @internal\n */\nexport const DocumentPaneProviderWrapper = memo((props: DocumentPaneProviderProps) => {\n  const source = useSource()\n  if (source.beta?.eventsAPI?.documents) {\n    return <DocumentEventsPane {...props} />\n  }\n  return <DocumentPaneWithLegacyTimelineStore {...props} />\n})\nDocumentPaneProviderWrapper.displayName = 'Memo(DocumentPaneProviderWrapper)'\n","import {useEffect, useRef} from 'react'\nimport {usePerspective} from 'sanity'\nimport {useEffectEvent} from 'use-effect-event'\n\nimport {usePaneRouter} from '../../components'\nimport {EMPTY_PARAMS} from './constants'\n\n/**\n * This hooks takes care of resetting the history related params when the perspective changes.\n * It needs to be placed in a stable component, like the `DocumentPane`, which won't be unmounted when the perspective changes.\n */\nexport function useResetHistoryParams() {\n  const {params = EMPTY_PARAMS, setParams} = usePaneRouter()\n\n  const {selectedPerspectiveName} = usePerspective()\n  const isMounted = useRef(false)\n\n  const updateHistoryParams = useEffectEvent((_perspective?: string) => {\n    // Check if any of the history related params are set, and reset them, don't unnecessarily update the params\n    const PARAMS_TO_UPDATE = ['since', 'historyVersion', 'rev', 'preserveRev']\n    const shouldUpdateParams = PARAMS_TO_UPDATE.some((param) => params[param])\n    if (!shouldUpdateParams) return\n\n    setParams({\n      ...params,\n      // Reset the history related params when the perspective changes, as they don't make sense\n      // in the context of the new perspective - preserveRev is used when setting draft revision.\n      rev: params.preserveRev === 'true' ? params.rev : undefined,\n      preserveRev: undefined,\n      since: undefined,\n      historyVersion: undefined,\n    })\n  })\n  useEffect(() => {\n    // Skip the first run to avoid resetting the params on initial load\n    if (isMounted.current) {\n      updateHistoryParams(selectedPerspectiveName)\n    }\n    // TODO: Remove `updateHistoryParams` as a dependency when react eslint plugin is updated\n  }, [selectedPerspectiveName, updateHistoryParams])\n\n  useEffect(() => {\n    isMounted.current = true\n    return () => {\n      isMounted.current = false\n    }\n  }, [])\n}\n","import {type Path} from '@sanity/types'\nimport {Stack, Text} from '@sanity/ui'\nimport {fromString as pathFromString} from '@sanity/util/paths'\nimport {memo, useMemo} from 'react'\nimport {\n  CopyPasteProvider,\n  ReferenceInputOptionsProvider,\n  SourceProvider,\n  Translate,\n  useDocumentType,\n  usePerspective,\n  useSource,\n  useTemplatePermissions,\n  useTemplates,\n  useTranslation,\n} from 'sanity'\n\nimport {usePaneRouter} from '../../components'\nimport {structureLocaleNamespace} from '../../i18n'\nimport {type DocumentPaneNode} from '../../types'\nimport {ErrorPane} from '../error'\nimport {LoadingPane} from '../loading'\nimport {CommentsWrapper} from './comments'\nimport {useDocumentLayoutComponent} from './document-layout'\nimport {DocumentPaneProviderWrapper} from './DocumentPaneProviderWrapper'\nimport {type DocumentPaneProviderProps} from './types'\nimport {useResetHistoryParams} from './useResetHistoryParams'\n\ntype DocumentPaneOptions = DocumentPaneNode['options']\n\n/**\n * @internal\n */\nexport const DocumentPane = memo(function DocumentPane(props: DocumentPaneProviderProps) {\n  const {name: parentSourceName} = useSource()\n\n  return (\n    <SourceProvider name={props.pane.source || parentSourceName}>\n      <CopyPasteProvider>\n        <DocumentPaneInner {...props} />\n      </CopyPasteProvider>\n    </SourceProvider>\n  )\n})\n\nfunction DocumentPaneInner(props: DocumentPaneProviderProps) {\n  const {pane, paneKey} = props\n  const {resolveNewDocumentOptions} = useSource().document\n  const {selectedPerspectiveName} = usePerspective()\n  const paneRouter = usePaneRouter()\n  const options = usePaneOptions(pane.options, paneRouter.params)\n  const {documentType, isLoaded: isDocumentLoaded} = useDocumentType(options.id, options.type)\n  useResetHistoryParams()\n  const DocumentLayout = useDocumentLayoutComponent()\n\n  // The templates that should be creatable from inside this document pane.\n  // For example, from the \"Create new\" menu in reference inputs.\n  const templateItems = useMemo(() => {\n    return resolveNewDocumentOptions({\n      type: 'document',\n      documentId: options.id,\n      schemaType: options.type,\n    })\n  }, [options.id, options.type, resolveNewDocumentOptions])\n\n  const [templatePermissions, isTemplatePermissionsLoading] = useTemplatePermissions({\n    templateItems,\n  })\n  const isLoaded = isDocumentLoaded && !isTemplatePermissionsLoading\n\n  const providerProps = useMemo(() => {\n    return isLoaded && documentType && options.type !== documentType\n      ? mergeDocumentType(props, options, documentType)\n      : props\n  }, [props, documentType, isLoaded, options])\n\n  const {ReferenceChildLink, handleEditReference, groupIndex, routerPanesState} = paneRouter\n  const childParams = routerPanesState[groupIndex + 1]?.[0].params || {}\n  const routerPanesStateLength = routerPanesState.length\n  const {parentRefPath} = childParams\n\n  const activePath: {path: Path; state: 'selected' | 'pressed' | 'none'} = useMemo(() => {\n    return parentRefPath\n      ? {\n          path: pathFromString(parentRefPath),\n          state:\n            // eslint-disable-next-line no-nested-ternary\n            groupIndex >= routerPanesStateLength - 1\n              ? 'none'\n              : groupIndex >= routerPanesStateLength - 2\n                ? 'selected'\n                : 'pressed',\n        }\n      : {path: [], state: 'none'}\n  }, [parentRefPath, groupIndex, routerPanesStateLength])\n\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  if (options.type === '*' && !isLoaded) {\n    return (\n      <LoadingPane\n        flex={2.5}\n        minWidth={320}\n        paneKey={paneKey}\n        title={t('panes.document-pane.document-not-found.loading')}\n      />\n    )\n  }\n\n  if (!documentType) {\n    return (\n      <ErrorPane\n        flex={2.5}\n        minWidth={320}\n        paneKey={paneKey}\n        title={t('panes.document-pane.document-not-found.title')}\n      >\n        <Stack space={4}>\n          <Text as=\"p\">\n            <Translate\n              t={t}\n              i18nKey=\"panes.document-pane.document-not-found.text\"\n              values={{id: options.id}}\n              components={{Code: ({children}) => <code>{children}</code>}}\n            />\n          </Text>\n        </Stack>\n      </ErrorPane>\n    )\n  }\n\n  return (\n    <DocumentPaneProviderWrapper\n      // this needs to be here to avoid formState from being re-used across (incompatible) document types\n      // see https://github.com/sanity-io/sanity/discussions/3794 for a description of the problem\n      key={`${documentType}-${options.id}-${selectedPerspectiveName || ''}`}\n      {...providerProps}\n    >\n      {/* NOTE: this is a temporary location for this provider until we */}\n      {/* stabilize the reference input options formally in the form builder */}\n      {/* eslint-disable-next-line react/jsx-pascal-case */}\n      <ReferenceInputOptionsProvider\n        EditReferenceLinkComponent={ReferenceChildLink}\n        onEditReference={handleEditReference}\n        initialValueTemplateItems={templatePermissions}\n        activePath={activePath}\n      >\n        <CommentsWrapper documentId={options.id} documentType={options.type}>\n          <DocumentLayout documentId={options.id} documentType={options.type} />\n        </CommentsWrapper>\n      </ReferenceInputOptionsProvider>\n    </DocumentPaneProviderWrapper>\n  )\n}\n\n/**\n * @internal\n */\nexport function usePaneOptions(\n  options: DocumentPaneOptions,\n  params: Record<string, string | undefined> = {},\n): DocumentPaneOptions {\n  const templates = useTemplates()\n\n  return useMemo(() => {\n    // The document type is provided, so return\n    if (options.type && options.type !== '*') {\n      return options\n    }\n\n    // Attempt to derive document type from the template configuration\n    const templateName = options.template || params.template\n    const template = templateName ? templates.find((t) => t.id === templateName) : undefined\n    const documentType = template?.schemaType\n\n    // No document type was found in a template\n    if (!documentType) {\n      return options\n    }\n\n    // The template provided the document type, so modify the pane’s `options` property\n    return {...options, type: documentType}\n  }, [options, params.template, templates])\n}\n\nfunction mergeDocumentType(\n  props: DocumentPaneProviderProps,\n  options: DocumentPaneOptions,\n  documentType: string,\n): DocumentPaneProviderProps {\n  return {\n    ...props,\n    pane: {\n      ...props.pane,\n      options: {...options, type: documentType},\n    },\n  }\n}\n","import {type SortOrder} from './types'\n\nexport const PARTIAL_PAGE_LIMIT = 100\nexport const FULL_LIST_LIMIT = 2000\nexport const DEFAULT_ORDERING: SortOrder = {by: [{field: '_updatedAt', direction: 'desc'}]}\nexport const EMPTY_RECORD: Record<string, unknown> = {}\n\nexport const ENABLE_LRU_MEMO = true\n","import {type SanityDocument} from '@sanity/types'\nimport {Box, Container, Flex, Heading, Stack, Text} from '@sanity/ui'\nimport {useCallback, useEffect, useMemo, useState} from 'react'\nimport {\n  CommandList,\n  type CommandListRenderItemCallback,\n  ErrorActions,\n  type GeneralPreviewLayoutKey,\n  getPublishedId,\n  LoadingBlock,\n  SanityDefaultPreview,\n  Translate,\n  useSchema,\n  useTranslation,\n} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Delay, PaneContent, PaneItem, usePane, usePaneLayout} from '../../components'\nimport {structureLocaleNamespace} from '../../i18n'\nimport {FULL_LIST_LIMIT} from './constants'\nimport {type DocumentListPaneItem, type LoadingVariant} from './types'\n\nconst RootBox = styled(Box)<{$opacity?: number}>`\n  position: relative;\n  opacity: ${(props) => props.$opacity || 1};\n  transition: opacity 0.4s;\n`\n\nconst CommandListBox = styled(Box)`\n  position: absolute;\n  left: 0;\n  right: 0;\n  top: 0;\n  bottom: 0;\n`\n\ninterface DocumentListPaneContentProps {\n  childItemId?: string\n  error: {message: string} | null\n  filterIsSimpleTypeConstraint: boolean\n  hasMaxItems?: boolean\n  hasSearchQuery: boolean\n  isActive?: boolean\n  isLazyLoading: boolean\n  isLoading: boolean\n  items: DocumentListPaneItem[]\n  layout?: GeneralPreviewLayoutKey\n  loadingVariant?: LoadingVariant\n  onEndReached: () => void\n  onRetry?: () => void\n  paneTitle: string\n  searchInputElement: HTMLInputElement | null\n  showIcons: boolean\n}\n\nconst SKELETON_ITEMS = [...Array(30).keys()]\n\nfunction LoadingView(props: {layout?: GeneralPreviewLayoutKey}) {\n  const {layout} = props\n\n  return (\n    <Stack paddingX={3} paddingY={2} paddingTop={0} space={1}>\n      {SKELETON_ITEMS.map((num) => (\n        <SanityDefaultPreview isPlaceholder layout={layout} key={num} />\n      ))}\n    </Stack>\n  )\n}\n\nexport function DocumentListPaneContent(props: DocumentListPaneContentProps) {\n  const {\n    childItemId,\n    error,\n    filterIsSimpleTypeConstraint,\n    hasMaxItems,\n    hasSearchQuery,\n    isActive,\n    isLazyLoading,\n    isLoading,\n    items,\n    layout,\n    loadingVariant,\n    onEndReached,\n    onRetry,\n    paneTitle,\n    searchInputElement,\n    showIcons,\n  } = props\n\n  const schema = useSchema()\n\n  const {collapsed: layoutCollapsed} = usePaneLayout()\n  const {collapsed, index} = usePane()\n  const [shouldRender, setShouldRender] = useState(!collapsed)\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const handleEndReached = useCallback(() => {\n    if (shouldRender) {\n      onEndReached()\n    }\n  }, [onEndReached, shouldRender])\n\n  useEffect(() => {\n    if (collapsed) return undefined\n\n    const timer = setTimeout(() => {\n      setShouldRender(true)\n    }, 0)\n\n    return () => {\n      clearTimeout(timer)\n    }\n  }, [collapsed, items])\n\n  const renderItem = useCallback<CommandListRenderItemCallback<SanityDocument>>(\n    (item, {activeIndex}) => {\n      const publishedId = getPublishedId(item._id)\n      const isSelected = childItemId === publishedId\n      const pressed = !isActive && isSelected\n      const selected = isActive && isSelected\n      const isLastItem = activeIndex === items.length - 1\n      const showSpinner = isLastItem && isLazyLoading\n      const showMaxItemsMessage = isLastItem && hasMaxItems\n\n      return (\n        <>\n          <PaneItem\n            icon={showIcons === false ? false : undefined}\n            id={publishedId}\n            layout={layout}\n            marginBottom={1}\n            pressed={pressed}\n            schemaType={schema.get(item._type)}\n            selected={selected}\n            value={item}\n          />\n\n          {showSpinner && <LoadingBlock />}\n\n          {showMaxItemsMessage && (\n            <Box marginY={1} paddingX={3} paddingY={4}>\n              <Text align=\"center\" muted size={1}>\n                {t('panes.document-list-pane.max-items.text', {limit: FULL_LIST_LIMIT})}\n              </Text>\n            </Box>\n          )}\n        </>\n      )\n    },\n    [childItemId, isActive, items.length, layout, schema, showIcons, hasMaxItems, isLazyLoading, t],\n  )\n\n  const noDocumentsContent = useMemo(() => {\n    if (hasSearchQuery) {\n      return (\n        <Flex align=\"center\" direction=\"column\" height=\"fill\" justify=\"center\">\n          <Container width={1}>\n            <Box paddingX={4} paddingY={5}>\n              <Text align=\"center\" muted>\n                {t('panes.document-list-pane.no-documents.text')}\n              </Text>\n            </Box>\n          </Container>\n        </Flex>\n      )\n    }\n\n    return (\n      <Flex align=\"center\" direction=\"column\" height=\"fill\" justify=\"center\">\n        <Container width={1}>\n          <Box paddingX={4} paddingY={5}>\n            <Text align=\"center\" muted>\n              {filterIsSimpleTypeConstraint\n                ? t('panes.document-list-pane.no-documents-of-type.text')\n                : t('panes.document-list-pane.no-matching-documents.text')}\n            </Text>\n          </Box>\n        </Container>\n      </Flex>\n    )\n  }, [filterIsSimpleTypeConstraint, hasSearchQuery, t])\n\n  const mainContent = useMemo(() => {\n    if (!shouldRender) {\n      return null\n    }\n\n    if (error) {\n      return (\n        <Flex align=\"center\" direction=\"column\" height=\"fill\" justify=\"center\">\n          <Container width={1}>\n            <Stack paddingX={4} paddingY={5} space={4}>\n              <Heading as=\"h3\">{t('panes.document-list-pane.error.title')}</Heading>\n              <Text as=\"p\">\n                <Translate\n                  t={t}\n                  i18nKey=\"panes.document-list-pane.error.text\"\n                  values={{error: error.message}}\n                  components={{Code: ({children}) => <code>{children}</code>}}\n                />\n              </Text>\n              <ErrorActions error={error} eventId={null} onRetry={onRetry} />\n            </Stack>\n          </Container>\n        </Flex>\n      )\n    }\n\n    if (!isLoading && items.length === 0) {\n      return noDocumentsContent\n    }\n\n    if (loadingVariant === 'initial' && isLoading) {\n      return (\n        <Delay ms={300}>\n          <LoadingView layout={layout} />\n        </Delay>\n      )\n    }\n\n    if (loadingVariant === 'spinner' && isLoading) {\n      return null\n    }\n\n    // prevents bug when panes won't render if first rendered while collapsed\n    const key = `${index}-${collapsed}`\n\n    return (\n      <RootBox overflow=\"hidden\" height=\"fill\" $opacity={loadingVariant === 'subtle' ? 0.8 : 1}>\n        <CommandListBox>\n          <CommandList\n            activeItemDataAttr=\"data-hovered\"\n            ariaLabel={paneTitle}\n            canReceiveFocus\n            inputElement={searchInputElement}\n            itemHeight={51}\n            items={items}\n            key={key}\n            onEndReached={handleEndReached}\n            onlyShowSelectionWhenActive\n            overscan={10}\n            paddingBottom={1}\n            paddingX={3}\n            renderItem={renderItem}\n            wrapAround={false}\n          />\n        </CommandListBox>\n      </RootBox>\n    )\n  }, [\n    collapsed,\n    error,\n    handleEndReached,\n    index,\n    isLoading,\n    items,\n    layout,\n    loadingVariant,\n    noDocumentsContent,\n    onRetry,\n    paneTitle,\n    renderItem,\n    searchInputElement,\n    shouldRender,\n    t,\n  ])\n\n  return (\n    <PaneContent\n      data-testid=\"document-list-pane\"\n      overflow={layoutCollapsed || loadingVariant === 'initial' ? 'hidden' : 'auto'}\n    >\n      {mainContent}\n    </PaneContent>\n  )\n}\n","import {\n  isIndexSegment,\n  isKeySegment,\n  isReferenceSchemaType,\n  type ObjectField,\n  type ObjectFieldType,\n  type ObjectSchemaType,\n  type SanityDocumentLike,\n  type SchemaType,\n} from '@sanity/types'\nimport * as PathUtils from '@sanity/util/paths'\nimport {type ExprNode, parse} from 'groq-js'\nimport {collate, getPublishedId, isVersionId} from 'sanity'\n\nimport {type DocumentListPaneItem, type SortOrder} from './types'\n\nexport function getDocumentKey(value: DocumentListPaneItem, index: number): string {\n  return value._id ? getPublishedId(value._id) : `item-${index}`\n}\n\nexport function removePublishedWithDrafts(documents: SanityDocumentLike[]): DocumentListPaneItem[] {\n  return collate(documents).map((entry) => {\n    const doc = entry.draft || entry.published\n    const isVersion = doc?.id && isVersionId(doc._id)\n    const hasDraft = Boolean(entry.draft)\n\n    return {\n      ...doc,\n      hasPublished: !!entry.published,\n      hasDraft,\n      isVersion,\n    }\n  }) as any\n}\n\nexport function applyOrderingFunctions(order: SortOrder, schemaType: ObjectSchemaType): SortOrder {\n  const orderBy = order.by.map((by) => {\n    // Skip those that already have a mapper\n    if (by.mapWith) {\n      return by\n    }\n\n    const fieldType = tryResolveSchemaTypeForPath(schemaType, by.field)\n    if (!fieldType) {\n      return by\n    }\n\n    // Note: order matters here, since the jsonType of a date field is `string`,\n    // but we want to apply `datetime()`, not `lower()`\n    if (fieldExtendsType(fieldType, 'datetime')) {\n      return {...by, mapWith: 'dateTime'}\n    }\n\n    if (fieldType.jsonType === 'string') {\n      return {...by, mapWith: 'lower'}\n    }\n\n    return by\n  })\n\n  return orderBy.every((item, index) => item === order.by[index]) ? order : {...order, by: orderBy}\n}\n\nfunction tryResolveSchemaTypeForPath(baseType: SchemaType, path: string): SchemaType | undefined {\n  const pathSegments = PathUtils.fromString(path)\n\n  let current: SchemaType | undefined = baseType\n  for (const segment of pathSegments) {\n    if (!current) {\n      return undefined\n    }\n\n    if (typeof segment === 'string') {\n      current = getFieldTypeByName(current, segment)\n      continue\n    }\n\n    const isArrayAccessor = isKeySegment(segment) || isIndexSegment(segment)\n    if (!isArrayAccessor || current.jsonType !== 'array') {\n      return undefined\n    }\n\n    const [memberType, otherType] = current.of || []\n    if (otherType || !memberType) {\n      // Can't figure out the type without knowing the value\n      return undefined\n    }\n\n    if (!isReferenceSchemaType(memberType)) {\n      current = memberType\n      continue\n    }\n\n    const [refType, otherRefType] = memberType.to || []\n    if (otherRefType || !refType) {\n      // Can't figure out the type without knowing the value\n      return undefined\n    }\n\n    current = refType\n  }\n\n  return current\n}\n\nfunction getFieldTypeByName(type: SchemaType, fieldName: string): SchemaType | undefined {\n  if (!('fields' in type)) {\n    return undefined\n  }\n\n  const fieldType = type.fields.find((field) => field.name === fieldName)\n  return fieldType ? fieldType.type : undefined\n}\n\nexport function fieldExtendsType(field: ObjectField | ObjectFieldType, ofType: string): boolean {\n  let current: SchemaType | undefined = field.type\n  while (current) {\n    if (current.name === ofType) {\n      return true\n    }\n\n    if (!current.type && current.jsonType === ofType) {\n      return true\n    }\n\n    current = current.type\n  }\n\n  return false\n}\n\n/**\n * Recursively extract static `_type`s from GROQ filter expressions. If the\n * types can't be statically determined then it will return `null`.\n */\n// eslint-disable-next-line complexity\nfunction findTypes(node: ExprNode): Set<string> | null {\n  switch (node.type) {\n    case 'OpCall': {\n      const {left, right} = node\n\n      switch (node.op) {\n        // e.g. `a == b`\n        case '==': {\n          // e.g. `_type == 'value'`\n          if (left.type === 'AccessAttribute' && left.name === '_type' && !left.base) {\n            if (right.type !== 'Value' || typeof right.value !== 'string') return null\n            return new Set([right.value])\n          }\n\n          // e.g. `'value' == _type`\n          if (right.type === 'AccessAttribute' && right.name === '_type' && !right.base) {\n            if (left.type !== 'Value' || typeof left.value !== 'string') return null\n            return new Set([left.value])\n          }\n\n          // otherwise, we can't determine the types statically\n          return null\n        }\n\n        // e.g. `a in b`\n        case 'in': {\n          // if `_type` is not on the left hand side of `in` then it can't be determined\n          if (left.type !== 'AccessAttribute' || left.name !== '_type' || left.base) return null\n          // if the right hand side is not an array then the types can't be determined\n          if (right.type !== 'Array') return null\n\n          const types = new Set<string>()\n          // iterate through all the types\n          for (const element of right.elements) {\n            // if we find a splat, then early return, we can't determine the types\n            if (element.isSplat) return null\n            // if the array element is not just a simple value, then early return\n            if (element.value.type !== 'Value') return null\n            // if the array element value is not a string, then early return\n            if (typeof element.value.value !== 'string') return null\n            // otherwise add the element value to the set of types\n            types.add(element.value.value)\n          }\n\n          // if there were any elements in the types set, return it\n          if (types.size) return types\n          // otherwise, the set of types cannot be determined\n          return null\n        }\n\n        default: {\n          return null\n        }\n      }\n    }\n\n    // groups can just be unwrapped, the AST preserves the order\n    case 'Group': {\n      return findTypes(node.base)\n    }\n\n    // e.g. `_type == 'a' || _type == 'b'`\n    // with Or nodes, if we can't determine the types for either the left or\n    // right hand side then we can't determine the types for any\n    // e.g. `_type == 'a' || isActive`\n    // — can't determine types because `isActive` could be true on another types\n    case 'Or': {\n      const left = findTypes(node.left)\n      if (!left) return null\n\n      const right = findTypes(node.right)\n      if (!right) return null\n\n      return new Set([...left, ...right])\n    }\n\n    // e.g. `_type == 'a' && isActive`\n    // with And nodes, we can determine the types as long as we can determine\n    // the types for one side. We can't determine the types if both are `null`.\n    case 'And': {\n      const left = findTypes(node.left)\n      const right = findTypes(node.right)\n\n      if (!left && !right) return null\n      return new Set([...(left || []), ...(right || [])])\n    }\n\n    default: {\n      return null\n    }\n  }\n}\n\nexport function findStaticTypesInFilter(\n  filter: string,\n  params: Record<string, unknown> = {},\n): string[] | null {\n  try {\n    const types = findTypes(parse(filter, {params}))\n    if (!types) return null\n\n    return Array.from(types).sort()\n  } catch {\n    // if we couldn't parse the filter, just return `null`\n    return null\n  }\n}\n","import {type SchemaType, type SortOrderingItem} from '@sanity/types'\n\nconst IMPLICIT_SCHEMA_TYPE_FIELDS = ['_id', '_type', '_createdAt', '_updatedAt', '_rev']\n\n// Takes a path array and a schema type and builds a GROQ join every time it enters a reference field\nfunction joinReferences(schemaType: SchemaType, path: string[], strict: boolean = false): string {\n  const [head, ...tail] = path\n\n  if (!('fields' in schemaType)) {\n    return ''\n  }\n\n  const schemaField = schemaType.fields.find((field) => field.name === head)\n  if (!schemaField) {\n    if (!IMPLICIT_SCHEMA_TYPE_FIELDS.includes(head)) {\n      const errorMessage = `The current ordering config targeted the nonexistent field \"${head}\" on schema type \"${schemaType.name}\". It should be one of ${schemaType.fields.map((field) => field.name).join(', ')}`\n      if (strict) {\n        throw new Error(errorMessage)\n      } else {\n        // eslint-disable-next-line no-console\n        console.warn(errorMessage)\n      }\n    }\n    return ''\n  }\n\n  if ('to' in schemaField.type && schemaField.type.name === 'reference') {\n    const refTypes = schemaField.type.to\n    return `${head}->{${refTypes.map((refType) => joinReferences(refType, tail)).join(',')}}`\n  }\n\n  const tailFields = tail.length > 0 && joinReferences(schemaField.type, tail)\n  const tailWrapper = tailFields ? `{${tailFields}}` : ''\n  return tail.length > 0 ? `${head}${tailWrapper}` : head\n}\n\nexport function getExtendedProjection(\n  schemaType: SchemaType,\n  orderBy: SortOrderingItem[],\n  strict: boolean = false,\n): string {\n  return orderBy\n    .map((ordering) => joinReferences(schemaType, ordering.field.split('.'), strict))\n    .join(', ')\n}\n","import {type ClientPerspective, type SanityClient} from '@sanity/client'\nimport {\n  asyncScheduler,\n  defer,\n  map,\n  merge,\n  mergeMap,\n  type Observable,\n  of,\n  partition,\n  share,\n  take,\n  throttleTime,\n  throwError,\n  timer,\n} from 'rxjs'\nimport {exhaustMapWithTrailing} from 'rxjs-exhaustmap-with-trailing'\nimport {\n  createSearch,\n  createSWR,\n  getSearchableTypes,\n  type SanityDocumentLike,\n  type Schema,\n  type SearchOptions,\n  type SearchStrategy,\n} from 'sanity'\n\nimport {getExtendedProjection} from '../../structureBuilder/util/getExtendedProjection'\nimport {type SortOrder} from './types'\n\ninterface ListenQueryOptions {\n  client: SanityClient\n  filter: string\n  limit: number\n  params: Record<string, unknown>\n  schema: Schema\n  searchQuery: string\n  sort: SortOrder\n  perspective?: ClientPerspective\n  staticTypeNames?: string[] | null\n  maxFieldDepth?: number\n  searchStrategy?: SearchStrategy\n}\n\nexport interface SearchQueryResult {\n  fromCache: boolean\n  documents: SanityDocumentLike[]\n}\n\nconst swr = createSWR<SanityDocumentLike[]>({maxSize: 100})\n\nexport function listenSearchQuery(options: ListenQueryOptions): Observable<SearchQueryResult> {\n  const {\n    client,\n    schema,\n    sort,\n    perspective,\n    limit,\n    params,\n    filter,\n    searchQuery,\n    staticTypeNames,\n    maxFieldDepth,\n    searchStrategy,\n  } = options\n  const sortBy = sort.by\n  const extendedProjection = sort?.extendedProjection\n\n  // Listen for changes with the given filter and params, and whenever a change occurs, we want to\n  // re-fetch the documents that match the search query (see below).\n  // We use a separate listener since the search query is too large to use in a listen query.\n  const events$ = defer(() => {\n    return client.listen(`*[${filter}]`, params, {\n      events: ['welcome', 'mutation', 'reconnect'],\n      includeResult: false,\n      visibility: 'query',\n      tag: 'listen-search-query',\n    })\n  }).pipe(\n    mergeMap((ev, i) => {\n      const isFirst = i === 0\n      if (isFirst && ev.type !== 'welcome') {\n        // If the first event is not welcome, it is most likely a reconnect and\n        // if it's not a reconnect something is very wrong and we should throw.\n        return throwError(\n          () =>\n            new Error(\n              ev.type === 'reconnect'\n                ? 'Could not establish EventSource connection'\n                : `Received unexpected type of first event \"${ev.type}\"`,\n            ),\n        )\n      }\n      return of(ev)\n    }),\n    share(),\n  )\n\n  const [welcome$, mutationAndReconnect$] = partition(events$, (ev) => ev.type === 'welcome')\n\n  const swrKey = JSON.stringify({\n    filter,\n    limit,\n    params,\n    searchQuery,\n    perspective,\n    sort,\n    staticTypeNames,\n  })\n\n  return merge(\n    welcome$.pipe(take(1)),\n    mutationAndReconnect$.pipe(throttleTime(1000, asyncScheduler, {leading: true, trailing: true})),\n  ).pipe(\n    exhaustMapWithTrailing((event) => {\n      // Get the types names to use for searching.\n      // If we have a static list of types, we can skip fetching the types and use the static list.\n      const typeNames$ = staticTypeNames\n        ? of(staticTypeNames)\n        : client.observable.fetch(`array::unique(*[${filter}][]._type)`, params)\n\n      // Use the type names to create a search query and fetch the documents that match the query.\n      return typeNames$.pipe(\n        mergeMap((typeNames: string[]) => {\n          const types = getSearchableTypes(schema, staticTypeNames || []).filter((type) => {\n            if (typeNames.includes(type.name)) {\n              // make a call to getExtendedProjection in strict mode to verify that all fields are\n              // known. This method will throw an exception if there are any unknown fields specified\n              // in the sort by list\n              getExtendedProjection(type, sort.by, true)\n              return true\n            }\n            return false\n          })\n\n          const search = createSearch(types, client, {\n            filter,\n            params,\n            strategy: searchStrategy,\n            maxDepth: maxFieldDepth,\n          })\n\n          const doFetch = () => {\n            const searchTerms = {\n              query: searchQuery || '',\n              types,\n            }\n\n            const searchOptions: SearchOptions = {\n              __unstable_extendedProjection: extendedProjection,\n              comments: [`findability-source: ${searchQuery ? 'list-query' : 'list'}`],\n              limit,\n              skipSortByScore: true,\n              sort: sortBy,\n              perspective,\n            }\n\n            return search(searchTerms, searchOptions).pipe(\n              map((result) =>\n                // eslint-disable-next-line max-nested-callbacks\n                result.hits.map(({hit}) => hit),\n              ),\n            )\n          }\n\n          if (event.type === 'mutation' && event.visibility !== 'query') {\n            // Even though the listener request specifies visibility=query, the events are not guaranteed to be delivered with visibility=query\n            // If the event we are responding to arrives with visibility != query, we add a little delay to allow for the updated document to be available for queries\n            // See https://www.sanity.io/docs/listening#visibility-c4786e55c3ff\n            return timer(1200).pipe(mergeMap(doFetch))\n          }\n          return doFetch()\n        }),\n      )\n    }),\n    swr(swrKey),\n    map(({fromCache, value}) => ({fromCache, documents: value})),\n  )\n}\n","import {type ClientPerspective} from '@sanity/client'\nimport {observableCallback} from 'observable-callback'\nimport {useMemo, useState} from 'react'\nimport {useObservable} from 'react-rx'\nimport {concat, fromEvent, merge, of} from 'rxjs'\nimport {\n  catchError,\n  filter,\n  map,\n  mergeMap,\n  scan,\n  share,\n  shareReplay,\n  take,\n  takeUntil,\n  withLatestFrom,\n} from 'rxjs/operators'\nimport {\n  DEFAULT_STUDIO_CLIENT_OPTIONS,\n  useClient,\n  useSchema,\n  useSearchMaxFieldDepth,\n  useWorkspace,\n} from 'sanity'\n\nimport {DEFAULT_ORDERING, FULL_LIST_LIMIT, PARTIAL_PAGE_LIMIT} from './constants'\nimport {findStaticTypesInFilter, removePublishedWithDrafts} from './helpers'\nimport {listenSearchQuery} from './listenSearchQuery'\nimport {type DocumentListPaneItem, type SortOrder} from './types'\n\ninterface UseDocumentListOpts {\n  apiVersion?: string\n  filter: string\n  perspective?: ClientPerspective\n  params: Record<string, unknown>\n  searchQuery: string | null\n  sortOrder?: SortOrder\n}\n\ninterface DocumentListState {\n  error: {message: string} | null\n  isLoadingFullList: boolean\n  isLoading: boolean\n  fromCache?: boolean\n  items: DocumentListPaneItem[]\n}\n\nconst INITIAL_QUERY_STATE: DocumentListState = {\n  error: null,\n  isLoading: true,\n  isLoadingFullList: false,\n  fromCache: false,\n  items: [],\n}\n\ninterface UseDocumentListHookValue extends DocumentListState {\n  onRetry: () => void\n  onLoadFullList: () => void\n}\n\n/**\n * @internal\n */\nexport function useDocumentList(opts: UseDocumentListOpts): UseDocumentListHookValue {\n  const {\n    filter: searchFilter,\n    params: paramsProp,\n    sortOrder,\n    searchQuery,\n    perspective,\n    apiVersion,\n  } = opts\n  const client = useClient({\n    ...DEFAULT_STUDIO_CLIENT_OPTIONS,\n    apiVersion: apiVersion || DEFAULT_STUDIO_CLIENT_OPTIONS.apiVersion,\n  })\n  const {strategy: searchStrategy} = useWorkspace().search\n  const schema = useSchema()\n  const maxFieldDepth = useSearchMaxFieldDepth()\n\n  // Get the type name from the filter, if it is a simple type filter.\n  const typeNameFromFilter = useMemo(\n    () => findStaticTypesInFilter(searchFilter, paramsProp),\n    [searchFilter, paramsProp],\n  )\n\n  const [[onRetry$, onRetry]] = useState(() => observableCallback())\n  const [[onFetchFullList$, onLoadFullList]] = useState(() => observableCallback())\n\n  const queryResults$ = useMemo(() => {\n    const listenSearchQueryArgs = {\n      client,\n      filter: searchFilter,\n      limit: PARTIAL_PAGE_LIMIT,\n      params: paramsProp,\n      schema,\n      perspective,\n      searchQuery: searchQuery || '',\n      sort: sortOrder || DEFAULT_ORDERING,\n      staticTypeNames: typeNameFromFilter,\n      maxFieldDepth,\n      searchStrategy,\n    }\n\n    const partialList$ = listenSearchQuery(listenSearchQueryArgs).pipe(\n      shareReplay({refCount: true, bufferSize: 1}),\n    )\n\n    // we want to fetch the full list if the last result of the partial list is at the limit\n    const fullList$ = onFetchFullList$.pipe(\n      withLatestFrom(partialList$),\n      filter(([, result]) => result?.documents.length === PARTIAL_PAGE_LIMIT),\n      // we want to set up the full list listener only once\n      take(1),\n      mergeMap(() =>\n        concat(\n          of({type: 'loadFullList' as const}),\n          listenSearchQuery({...listenSearchQueryArgs, limit: FULL_LIST_LIMIT}).pipe(\n            map((result) => ({type: 'result' as const, result})),\n          ),\n        ),\n      ),\n      share(),\n    )\n\n    // The combined search results from both partial page and full list\n    return merge(\n      partialList$.pipe(\n        map((result) => ({\n          type: 'result' as const,\n          result,\n        })),\n        // when the full list listener kicks off, we want to stop the partial list listener\n        takeUntil(fullList$),\n      ),\n      fullList$,\n    ).pipe(\n      catchError((err: unknown, caught$) => {\n        return concat(\n          of({type: 'error' as const, error: safeError(err)}),\n          merge(fromEvent(window, 'online'), onRetry$).pipe(\n            take(1),\n            mergeMap(() => caught$),\n          ),\n        )\n      }),\n      scan((prev, event) => {\n        if (event.type === 'error') {\n          return {\n            ...prev,\n            error: event.error,\n          }\n        }\n        if (event.type === 'result') {\n          return {\n            ...prev,\n            error: null,\n            fromCache: event.result.fromCache,\n            isLoading: false,\n            items: removePublishedWithDrafts(event.result.documents),\n            isLoadingFullList: false,\n          }\n        }\n        if (event.type === 'loadFullList') {\n          return {\n            ...prev,\n            error: null,\n            isLoadingFullList: true,\n          }\n        }\n        throw new Error('Unexpected')\n      }, INITIAL_QUERY_STATE),\n    )\n  }, [\n    client,\n    searchFilter,\n    paramsProp,\n    schema,\n    perspective,\n    searchQuery,\n    sortOrder,\n    typeNameFromFilter,\n    maxFieldDepth,\n    searchStrategy,\n    onFetchFullList$,\n    onRetry$,\n  ])\n\n  const {error, items, isLoading, fromCache, isLoadingFullList} = useObservable(\n    queryResults$,\n    INITIAL_QUERY_STATE,\n  )\n\n  return {\n    error,\n    onRetry,\n    isLoading,\n    items,\n    fromCache,\n    onLoadFullList,\n    isLoadingFullList,\n  }\n}\n\n// todo: candidate for re-use\nconst nonErrorThrownWarning = `[WARNING: This was thrown as a non-error. Only Error instances should be thrown]`\nfunction safeError(thrown: unknown): Error {\n  if (thrown instanceof Error) {\n    return thrown\n  }\n  if (typeof thrown === 'object' && thrown !== null) {\n    if ('message' in thrown && typeof thrown.message === 'string') {\n      return new Error(`${thrown.message} ${nonErrorThrownWarning}`)\n    }\n    return new Error(`${String(thrown)} ${nonErrorThrownWarning}`)\n  }\n  return new Error(`${String(thrown)} ${nonErrorThrownWarning}`)\n}\n","import {SearchIcon, SpinnerIcon} from '@sanity/icons'\nimport {Box, TextInput} from '@sanity/ui'\nimport {memo, useCallback, useEffect, useMemo, useState} from 'react'\nimport {useObservableEvent} from 'react-rx'\nimport {debounce, map, type Observable, of, tap, timer} from 'rxjs'\nimport {\n  type GeneralPreviewLayoutKey,\n  useActiveReleases,\n  useI18nText,\n  usePerspective,\n  useSchema,\n  useTranslation,\n  useUnique,\n} from 'sanity'\nimport {keyframes, styled} from 'styled-components'\n\nimport {structureLocaleNamespace} from '../../i18n'\nimport {type BaseStructureToolPaneProps} from '../types'\nimport {EMPTY_RECORD, FULL_LIST_LIMIT} from './constants'\nimport {DocumentListPaneContent} from './DocumentListPaneContent'\nimport {applyOrderingFunctions, findStaticTypesInFilter} from './helpers'\nimport {useShallowUnique} from './PaneContainer'\nimport {type LoadingVariant, type SortOrder} from './types'\nimport {useDocumentList} from './useDocumentList'\n\n/**\n * @internal\n */\nexport type DocumentListPaneProps = BaseStructureToolPaneProps<'documentList'> & {\n  sortOrder?: SortOrder\n  layout?: Exclude<GeneralPreviewLayoutKey, 'sheetList'>\n}\n\nconst rotate = keyframes`\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n`\n\nconst fadeIn = keyframes`\n  0% {\n    opacity: 0;\n  }\n  50% {\n    opacity: 0.1;\n  }\n  100% {\n    opacity: 0.4;\n  }\n`\n\nconst AnimatedSpinnerIcon = styled(SpinnerIcon)`\n  animation: ${rotate} 500ms linear infinite;\n`\n\nconst SubtleSpinnerIcon = styled(SpinnerIcon)`\n  animation: ${rotate} 1500ms linear infinite;\n  opacity: 0.4;\n`\n\nconst DelayedSubtleSpinnerIcon = styled(SpinnerIcon)`\n  animation:\n    ${rotate} 1500ms linear infinite,\n    ${fadeIn} 1000ms linear;\n  opacity: 0.4;\n`\n\n/**\n * @internal\n */\n\nexport const DocumentListPane = memo(function DocumentListPane(props: DocumentListPaneProps) {\n  const {childItemId, isActive, pane, paneKey, sortOrder: sortOrderRaw, layout} = props\n  const schema = useSchema()\n  const releases = useActiveReleases()\n  const {perspectiveStack} = usePerspective()\n  const {displayOptions, options} = pane\n  const {apiVersion, filter} = options\n  const params = useShallowUnique(options.params || EMPTY_RECORD)\n  const typeName = useMemo(() => {\n    const staticTypes = findStaticTypesInFilter(filter, params)\n    if (staticTypes?.length === 1) return staticTypes[0]\n    return null\n  }, [filter, params])\n\n  const showIcons = displayOptions?.showIcons !== false\n\n  const {t} = useTranslation(structureLocaleNamespace)\n  const {title} = useI18nText(pane)\n\n  const [searchQuery, setSearchQuery] = useState<string>('')\n  const [searchInputValue, setSearchInputValue] = useState<string>('')\n  const [searchInputElement, setSearchInputElement] = useState<HTMLInputElement | null>(null)\n\n  const sortWithOrderingFn =\n    typeName && sortOrderRaw\n      ? applyOrderingFunctions(sortOrderRaw, schema.get(typeName) as any)\n      : sortOrderRaw\n\n  const sortOrder = useUnique(sortWithOrderingFn)\n\n  const {\n    error,\n    isLoadingFullList,\n    isLoading: documentListIsLoading,\n    items,\n    fromCache,\n    onLoadFullList,\n    onRetry,\n  } = useDocumentList({\n    apiVersion,\n    filter,\n    perspective: perspectiveStack.length === 0 ? 'raw' : perspectiveStack,\n    params,\n    searchQuery: searchQuery?.trim(),\n    sortOrder,\n  })\n\n  const isLoading = documentListIsLoading || releases.loading\n\n  const handleQueryChange = useObservableEvent(\n    (event$: Observable<React.ChangeEvent<HTMLInputElement>>) => {\n      return event$.pipe(\n        map((event) => event.target.value),\n        tap(setSearchInputValue),\n        debounce((value) => (value === '' ? of('') : timer(300))),\n        tap(setSearchQuery),\n      )\n    },\n  )\n\n  const handleClearSearch = useCallback(() => {\n    setSearchQuery('')\n    setSearchInputValue('')\n  }, [])\n\n  const handleSearchKeyDown = useCallback(\n    (event: React.KeyboardEvent<HTMLInputElement>) => {\n      if (event.key === 'Escape') {\n        handleClearSearch()\n      }\n    },\n    [handleClearSearch],\n  )\n\n  const [enableSearchSpinner, setEnableSearchSpinner] = useState<string | void>()\n\n  useEffect(() => {\n    if (!enableSearchSpinner && !isLoading) {\n      setEnableSearchSpinner(paneKey)\n    }\n  }, [enableSearchSpinner, isLoading, paneKey])\n\n  useEffect(() => {\n    // Clear search field and disable search spinner\n    // when switching between panes (i.e. when paneKey changes).\n    handleClearSearch()\n    setEnableSearchSpinner()\n  }, [paneKey, handleClearSearch])\n\n  const loadingVariant: LoadingVariant = useMemo(() => {\n    if (isLoading && enableSearchSpinner === paneKey) {\n      return 'spinner'\n    }\n    if (fromCache) {\n      return 'subtle'\n    }\n\n    return 'initial'\n  }, [enableSearchSpinner, fromCache, isLoading, paneKey])\n\n  const textInputIcon = useMemo(() => {\n    if (loadingVariant === 'spinner') {\n      return AnimatedSpinnerIcon\n    }\n    if (searchInputValue && loadingVariant === 'subtle') {\n      return SubtleSpinnerIcon\n    }\n    return SearchIcon\n  }, [loadingVariant, searchInputValue])\n\n  return (\n    <>\n      <Box paddingX={3} paddingBottom={3}>\n        <TextInput\n          aria-label={t('panes.document-list-pane.search-input.aria-label')}\n          autoComplete=\"off\"\n          border={false}\n          clearButton={Boolean(searchQuery)}\n          disabled={Boolean(error)}\n          fontSize={[2, 2, 1]}\n          icon={textInputIcon}\n          iconRight={\n            loadingVariant === 'subtle' && !searchInputValue ? DelayedSubtleSpinnerIcon : null\n          }\n          onChange={handleQueryChange}\n          onClear={handleClearSearch}\n          onKeyDown={handleSearchKeyDown}\n          padding={2}\n          placeholder={t('panes.document-list-pane.search-input.placeholder')}\n          radius={2}\n          ref={setSearchInputElement}\n          spellCheck={false}\n          value={searchInputValue}\n        />\n      </Box>\n      <DocumentListPaneContent\n        childItemId={childItemId}\n        error={error}\n        filterIsSimpleTypeConstraint={!!typeName}\n        hasMaxItems={items.length === FULL_LIST_LIMIT}\n        hasSearchQuery={Boolean(searchQuery)}\n        isActive={isActive}\n        isLazyLoading={isLoadingFullList}\n        isLoading={isLoading}\n        items={items}\n        key={paneKey}\n        layout={layout}\n        loadingVariant={loadingVariant}\n        onEndReached={onLoadFullList}\n        onRetry={onRetry}\n        paneTitle={title}\n        searchInputElement={searchInputElement}\n        showIcons={showIcons}\n      />\n    </>\n  )\n})\n","import {ArrowLeftIcon} from '@sanity/icons'\nimport {memo, type ReactNode, useMemo} from 'react'\nimport {type GeneralPreviewLayoutKey, type InitialValueTemplateItem} from 'sanity'\n\nimport {Button, TooltipDelayGroupProvider} from '../../../ui-components'\nimport {\n  BackLink,\n  PaneHeader as StructurePaneHeader,\n  PaneHeaderActions,\n  usePane,\n} from '../../components'\nimport {\n  type PaneMenuItem,\n  type PaneMenuItemGroup,\n  type StructureToolPaneActionHandler,\n} from '../../types'\nimport {useStructureTool} from '../../useStructureTool'\nimport {type SortOrder} from './types'\n\ninterface PaneHeaderProps {\n  contentAfter?: ReactNode\n  index: number\n  initialValueTemplates?: InitialValueTemplateItem[]\n  menuItemGroups?: PaneMenuItemGroup[]\n  menuItems?: PaneMenuItem[]\n  setLayout: (layout: GeneralPreviewLayoutKey) => void\n  setSortOrder: (sortOrder: SortOrder) => void\n  title: string\n}\n\nexport const PaneHeader = memo(\n  ({\n    contentAfter,\n    index,\n    initialValueTemplates = [],\n    menuItemGroups = [],\n    menuItems = [],\n    setLayout,\n    setSortOrder,\n    title,\n  }: PaneHeaderProps) => {\n    const {features} = useStructureTool()\n    const {collapsed, isLast} = usePane()\n    // Prevent focus if this is the last (non-collapsed) pane.\n    const tabIndex = isLast && !collapsed ? -1 : 0\n\n    const actionHandlers = useMemo((): Record<string, StructureToolPaneActionHandler> => {\n      return {\n        setLayout: ({layout: value}: {layout: GeneralPreviewLayoutKey}) => {\n          setLayout(value)\n        },\n        setSortOrder: (sort: SortOrder) => {\n          setSortOrder(sort)\n        },\n      }\n    }, [setLayout, setSortOrder])\n\n    return (\n      <TooltipDelayGroupProvider>\n        <StructurePaneHeader\n          actions={\n            <PaneHeaderActions\n              initialValueTemplateItems={initialValueTemplates}\n              actionHandlers={actionHandlers}\n              menuItemGroups={menuItemGroups}\n              menuItems={menuItems}\n            />\n          }\n          backButton={\n            features.backButton &&\n            index > 0 && (\n              <Button\n                as={BackLink}\n                data-as=\"a\"\n                icon={ArrowLeftIcon}\n                mode=\"bleed\"\n                tooltipProps={{content: 'Back'}}\n              />\n            )\n          }\n          contentAfter={contentAfter}\n          tabIndex={tabIndex}\n          title={title}\n        />\n      </TooltipDelayGroupProvider>\n    )\n  },\n)\n\nPaneHeader.displayName = 'Memo(PaneHeader)'\n","'use no memo'\n// The `use no memo` directive is due to a known issue with react-table and react compiler: https://github.com/TanStack/table/issues/5567\n\nimport {type SanityDocument} from '@sanity/client'\nimport {Checkbox} from '@sanity/ui'\nimport {type CellContext} from '@tanstack/react-table'\nimport {type MouseEvent, useCallback} from 'react'\n\nexport function DocumentSheetListSelect(props: CellContext<SanityDocument, unknown>) {\n  const {row, table} = props\n\n  const {selectedAnchor, setSelectedAnchor} = table.options.meta || {}\n\n  const handleOnClick = useCallback(\n    (e: MouseEvent<HTMLInputElement>) => {\n      if (e.shiftKey && selectedAnchor !== null && selectedAnchor !== undefined) {\n        const shiftClickIndex = row.index\n        const lowerIndex = shiftClickIndex < selectedAnchor ? shiftClickIndex : selectedAnchor\n        const upperIndex = shiftClickIndex < selectedAnchor ? selectedAnchor : shiftClickIndex\n\n        const additionalSelectedRows = table\n          .getRowModel()\n          .flatRows.slice(lowerIndex, upperIndex + 1)\n          .map(({id}) => id)\n\n        const currentSelectedRows = table.getSelectedRowModel().rows.map(({id}) => id)\n        table.setRowSelection(() =>\n          [...additionalSelectedRows, ...currentSelectedRows].reduce(\n            (nextSelectedRows, rowId) => ({...nextSelectedRows, [rowId]: true}),\n            {},\n          ),\n        )\n      } else if (setSelectedAnchor) {\n        const isRowCurrentlySelected = row.getIsSelected()\n        if (isRowCurrentlySelected) {\n          // about to unselect so invalidate current anchor\n          setSelectedAnchor(null)\n        } else {\n          // override anchor with new selection index\n          setSelectedAnchor(row.index)\n        }\n\n        row.toggleSelected()\n      }\n    },\n    [selectedAnchor, row, setSelectedAnchor, table],\n  )\n\n  return (\n    <Checkbox\n      style={{paddingLeft: 4}}\n      checked={props.row.getIsSelected()}\n      disabled={!props.row.getCanSelect()}\n      // onChange doesn't have shiftKey in event, but want to control this checkbox\n      // need to define noop onChange to suppress the warning\n      // eslint-disable-next-line react/jsx-no-bind\n      onChange={() => null}\n      onClick={handleOnClick}\n    />\n  )\n}\n","import {type SanityDocument} from '@sanity/types'\nimport {type Table} from '@tanstack/react-table'\nimport {type ReactNode, useCallback, useContext, useEffect, useMemo, useState} from 'react'\nimport {DocumentSheetListContext} from 'sanity/_singletons'\n\ninterface DocumentSheetListProviderProps {\n  children?: ReactNode\n  table: Table<SanityDocument>\n}\n\ntype SelectedCellDetails = {\n  colId: string\n  rowIndex: number\n  state: 'focused' | 'selected'\n} | null\n\n/** @internal */\nexport interface DocumentSheetListContextValue {\n  focusAnchorCell: () => void\n  resetFocusSelection: () => void\n  setSelectedAnchorCell: (colId: string, rowIndex: number) => void\n  getStateByCellId: (\n    colId: string,\n    rowIndex: number,\n  ) => 'focused' | 'selectedAnchor' | 'selectedRange' | null\n  submitFocusedCell: () => void\n}\n\n/** @internal */\nexport const useDocumentSheetListContext = (): DocumentSheetListContextValue => {\n  const context = useContext(DocumentSheetListContext)\n\n  if (context === undefined) {\n    throw new Error('useDocumentSheetListContext must be used within an DocumentSheetListProvider')\n  }\n  return context\n}\n\n/** @internal */\nexport function DocumentSheetListProvider({\n  children,\n  table,\n}: DocumentSheetListProviderProps): ReactNode {\n  const [selectedAnchorCellDetails, setSelectedAnchorCellDetails] =\n    useState<SelectedCellDetails>(null)\n  const [selectedRangeCellIndexes, setSelectedRangeCellIndexes] = useState<number[]>([])\n\n  const clearAndSetFocusSelection = useCallback(\n    (nextAnchorDetails: SelectedCellDetails = null) => {\n      if (\n        selectedAnchorCellDetails?.state === 'focused' &&\n        document.activeElement instanceof HTMLElement\n      ) {\n        document.activeElement.blur()\n      }\n\n      setSelectedAnchorCellDetails(nextAnchorDetails)\n      setSelectedRangeCellIndexes([])\n    },\n    [selectedAnchorCellDetails],\n  )\n\n  const resetFocusSelection = useCallback(\n    () => clearAndSetFocusSelection(),\n    [clearAndSetFocusSelection],\n  )\n\n  const changeSelectionColumn = useCallback(\n    (direction: 'left' | 'right') => {\n      if (!selectedAnchorCellDetails) return\n\n      const visibleColumns = table.getVisibleLeafColumns()\n      const columnIndexAfterMove =\n        visibleColumns.findIndex((col) => col.id === selectedAnchorCellDetails.colId) +\n        (direction === 'left' ? -1 : 1)\n\n      if (columnIndexAfterMove < 0 || columnIndexAfterMove >= visibleColumns.length) return\n\n      clearAndSetFocusSelection({\n        colId: visibleColumns[columnIndexAfterMove].id,\n        rowIndex: selectedAnchorCellDetails.rowIndex,\n        state: 'selected',\n      })\n    },\n    [clearAndSetFocusSelection, selectedAnchorCellDetails, table],\n  )\n\n  const changeSelectionRange = useCallback(\n    (direction: 'up' | 'down') => {\n      if (!selectedAnchorCellDetails) return\n\n      setSelectedRangeCellIndexes((previousSelection) => {\n        const {rowIndex: anchorIndex} = selectedAnchorCellDetails\n        const getNextIndex = (startingIndex: number) =>\n          startingIndex + (direction === 'down' ? 1 : -1)\n        // if no cells are selected, select the cell in the direction\n        if (!previousSelection.length) {\n          const firstSelectedIndex = getNextIndex(anchorIndex)\n          if (firstSelectedIndex < 0) return []\n          return [firstSelectedIndex]\n        }\n        const lastIndexSelected = previousSelection[previousSelection.length - 1]\n        const nextIndex = getNextIndex(lastIndexSelected)\n\n        // if the cell in the direction is out of bounds, return the previous selection\n        if (nextIndex < 0) return previousSelection\n\n        // if the cell in the direction is the same as the focused cell, deselect all cells\n        if (nextIndex === anchorIndex) return []\n\n        // if the cell in the direction is already selected, deselect the last selected cell\n        if (previousSelection.includes(nextIndex)) {\n          return previousSelection.slice(0, -1)\n        }\n\n        return [...previousSelection, nextIndex]\n      })\n    },\n    [selectedAnchorCellDetails],\n  )\n\n  const setSelectedAnchorCell = useCallback(\n    (colId: string, rowIndex: number) => {\n      clearAndSetFocusSelection({colId, rowIndex, state: 'selected'})\n    },\n    [clearAndSetFocusSelection],\n  )\n\n  const handleEscapePress = useCallback(() => {\n    if (!selectedAnchorCellDetails) return\n    if (selectedRangeCellIndexes.length) {\n      // only clear selected range if it exists\n      setSelectedRangeCellIndexes([])\n    } else {\n      const nextAnchorCellDetails: SelectedCellDetails =\n        selectedAnchorCellDetails.state === 'selected'\n          ? null\n          : {\n              ...selectedAnchorCellDetails,\n              state: 'selected',\n            }\n      clearAndSetFocusSelection(nextAnchorCellDetails)\n    }\n  }, [clearAndSetFocusSelection, selectedAnchorCellDetails, selectedRangeCellIndexes.length])\n\n  const handleUpDownKey = useCallback(\n    (isShiftKey: boolean, key: string) => {\n      if (!selectedAnchorCellDetails) return\n\n      const direction = key === 'ArrowDown' ? 'down' : 'up'\n      const offset = direction === 'down' ? 1 : -1\n\n      if (isShiftKey) {\n        changeSelectionRange(direction)\n      } else {\n        const newSelectedCellRowIndex = selectedAnchorCellDetails.rowIndex + offset\n        if (newSelectedCellRowIndex < 0) return\n\n        setSelectedAnchorCell(selectedAnchorCellDetails.colId, newSelectedCellRowIndex)\n      }\n    },\n    [changeSelectionRange, selectedAnchorCellDetails, setSelectedAnchorCell],\n  )\n\n  const handleAnchorKeydown = useCallback(\n    (event: KeyboardEvent) => {\n      if (!selectedAnchorCellDetails) return\n\n      const {key, shiftKey} = event\n\n      switch (key) {\n        case 'Shift':\n          break // shift allow should do nothing\n\n        case 'Escape':\n          handleEscapePress()\n          break\n\n        case 'ArrowDown':\n        case 'ArrowUp':\n          event.preventDefault()\n          handleUpDownKey(shiftKey, key)\n          break\n\n        case 'ArrowLeft':\n        case 'ArrowRight':\n          // when cell is focused, arrows should have default behavior\n          // only prevent default when cell is selected\n          if (selectedAnchorCellDetails.state === 'selected') {\n            event.preventDefault()\n            changeSelectionColumn(key === 'ArrowLeft' ? 'left' : 'right')\n          }\n          break\n\n        default:\n          break\n      }\n    },\n    [selectedAnchorCellDetails, handleEscapePress, handleUpDownKey, changeSelectionColumn],\n  )\n\n  const handleAnchorClick = useCallback(\n    (event: MouseEvent) => {\n      if (!selectedAnchorCellDetails) return\n      const isClickInAnchorCell = document\n        .getElementById(\n          `cell-${selectedAnchorCellDetails.colId}-${selectedAnchorCellDetails.rowIndex}`,\n        )\n        ?.contains(event.target as Node)\n\n      if (!isClickInAnchorCell) resetFocusSelection()\n    },\n    [resetFocusSelection, selectedAnchorCellDetails],\n  )\n\n  useEffect(() => {\n    if (selectedAnchorCellDetails) {\n      document.addEventListener('keydown', handleAnchorKeydown)\n      document.addEventListener('click', handleAnchorClick)\n    }\n\n    return () => {\n      if (selectedAnchorCellDetails) {\n        document.removeEventListener('keydown', handleAnchorKeydown)\n        document.removeEventListener('click', handleAnchorClick)\n      }\n    }\n  }, [handleAnchorClick, handleAnchorKeydown, selectedAnchorCellDetails])\n\n  const focusAnchorCell = useCallback(\n    () =>\n      setSelectedAnchorCellDetails((anchorCellDetails) => {\n        if (!anchorCellDetails) return null\n\n        return {...anchorCellDetails, state: 'focused'}\n      }),\n    [],\n  )\n\n  const getStateByCellId = useCallback(\n    (colId: string, rowIndex: number) => {\n      if (selectedAnchorCellDetails?.colId !== colId) return null\n\n      if (selectedAnchorCellDetails.rowIndex === rowIndex)\n        return selectedAnchorCellDetails.state === 'focused' ? 'focused' : 'selectedAnchor'\n\n      if (selectedRangeCellIndexes.includes(rowIndex)) return 'selectedRange'\n\n      return null\n    },\n    [selectedAnchorCellDetails, selectedRangeCellIndexes],\n  )\n\n  const submitFocusedCell = useCallback(() => {\n    if (!selectedAnchorCellDetails) return\n\n    clearAndSetFocusSelection({\n      colId: selectedAnchorCellDetails.colId,\n      rowIndex: selectedAnchorCellDetails.rowIndex + 1,\n      state: 'selected',\n    })\n  }, [clearAndSetFocusSelection, selectedAnchorCellDetails])\n\n  const value = useMemo<DocumentSheetListContextValue>(\n    () => ({\n      focusAnchorCell,\n      resetFocusSelection,\n      setSelectedAnchorCell,\n      getStateByCellId,\n      submitFocusedCell,\n    }),\n    [\n      focusAnchorCell,\n      resetFocusSelection,\n      setSelectedAnchorCell,\n      getStateByCellId,\n      submitFocusedCell,\n    ],\n  )\n\n  return (\n    <DocumentSheetListContext.Provider value={value}>{children}</DocumentSheetListContext.Provider>\n  )\n}\n","'use no memo'\n// The `use no memo` directive is due to a known issue with react-table and react compiler: https://github.com/TanStack/table/issues/5567\n\n/* eslint-disable i18next/no-literal-string */\nimport {type ObjectFieldType} from '@sanity/types'\nimport {Select, TextInput} from '@sanity/ui'\nimport {type Cell, type CellContext, flexRender} from '@tanstack/react-table'\nimport {type MouseEventHandler, useCallback, useEffect, useRef, useState} from 'react'\nimport {type SanityDocument} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {useDocumentSheetListContext} from './DocumentSheetListProvider'\n\nconst DataCell = styled.td<{width: number}>`\n  display: flex;\n  overflow: hidden;\n  box-sizing: border-box;\n  width: ${({width}) => width}px;\n  border-top: 1px solid var(--card-border-color);\n  background-color: var(--card-bg-color);\n`\n\nconst PinnedDataCell = styled(DataCell)`\n  position: sticky;\n  z-index: 2;\n`\n\ninterface SheetListCellInnerProps extends CellContext<SanityDocument, unknown> {\n  fieldType: ObjectFieldType\n}\n\ntype CellInputElement = HTMLInputElement | HTMLSelectElement\ntype InputRef = CellInputElement | null\n\n/** @internal */\nexport function SheetListCellInner(props: SheetListCellInnerProps) {\n  const {getValue, column, row, fieldType} = props\n  const cellId = `cell-${column.id}-${row.index}`\n  const [renderValue, setRenderValue] = useState<string>(getValue() as string)\n  const [isDirty, setIsDirty] = useState(false)\n  const inputRef = useRef<InputRef>(null)\n  const {\n    focusAnchorCell,\n    resetFocusSelection,\n    setSelectedAnchorCell,\n    getStateByCellId,\n    submitFocusedCell,\n  } = useDocumentSheetListContext()\n  const cellState = getStateByCellId(column.id, row.index)\n\n  const handleOnFocus = useCallback(() => {\n    // reselect in cases where focus achieved without initial mousedown\n    setSelectedAnchorCell(column.id, row.index)\n    focusAnchorCell()\n  }, [column.id, focusAnchorCell, row.index, setSelectedAnchorCell])\n  const {patchDocument} = props.table.options.meta || {}\n\n  const handleProgrammaticFocus = () => {\n    inputRef.current?.focus()\n    if (inputRef.current instanceof HTMLInputElement) {\n      inputRef.current.select()\n    }\n  }\n\n  const handleOnMouseDown: MouseEventHandler<CellInputElement> = (event) => {\n    if (event.detail === 2) {\n      handleProgrammaticFocus()\n    } else {\n      event.preventDefault()\n      setSelectedAnchorCell(column.id, row.index)\n    }\n  }\n\n  const handleOnEnterDown = useCallback(\n    (event: KeyboardEvent) => {\n      const {key} = event\n      if (key === 'Enter') {\n        if (cellState === 'selectedAnchor') handleProgrammaticFocus()\n        if (cellState === 'focused') submitFocusedCell()\n      }\n    },\n    [cellState, submitFocusedCell],\n  )\n\n  const handleOnChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setIsDirty(true)\n    setRenderValue(event.target.value)\n  }\n\n  const handleOnBlur = () => {\n    if (isDirty) {\n      patchDocument?.(row.id, column.id, renderValue)\n      setIsDirty(false)\n    }\n    resetFocusSelection()\n  }\n\n  const handlePaste = useCallback(\n    (event: ClipboardEvent) => {\n      const clipboardData = event.clipboardData?.getData('Text')\n\n      if (typeof clipboardData === 'string' || typeof clipboardData === 'number') {\n        setRenderValue(clipboardData)\n        // patch immediately when pasting\n        patchDocument?.(row.id, column.id, clipboardData)\n      }\n    },\n    [column.id, patchDocument, row.id],\n  )\n\n  const handleCopy = useCallback(() => {\n    navigator.clipboard.writeText(renderValue.toString())\n  }, [renderValue])\n\n  useEffect(() => {\n    if (cellState === 'selectedAnchor' || cellState === 'focused')\n      // only listen for enter key when cell is focused or anchor\n      document.addEventListener('keydown', handleOnEnterDown)\n    if (cellState === 'selectedAnchor' || cellState === 'selectedRange')\n      // if cell is selected, paste events should be handled\n      document.addEventListener('paste', handlePaste)\n\n    if (cellState === 'selectedAnchor')\n      // only allow copying when cell is selected anchor\n      document.addEventListener('copy', handleCopy)\n\n    return () => {\n      if (cellState === 'selectedAnchor' || cellState === 'focused')\n        document.removeEventListener('keydown', handleOnEnterDown)\n      if (cellState === 'selectedAnchor' || cellState === 'selectedRange')\n        document.removeEventListener('paste', handlePaste)\n      if (cellState === 'selectedAnchor') document.removeEventListener('copy', handleCopy)\n    }\n  }, [\n    cellId,\n    cellState,\n    column.id,\n    getStateByCellId,\n    handleCopy,\n    handleOnEnterDown,\n    handlePaste,\n    row.index,\n  ])\n\n  const getBorderStyle = () => {\n    if (cellState === 'focused') return '2px solid blue'\n    if (cellState === 'selectedRange') return '1px solid green'\n    if (cellState === 'selectedAnchor') return '1px solid blue'\n\n    return '1px solid transparent'\n  }\n\n  const inputProps = {\n    'onFocus': handleOnFocus,\n    'onBlur': handleOnBlur,\n    'onMouseDown': handleOnMouseDown,\n    'aria-selected': !!cellState,\n    'data-testid': cellId,\n    'id': cellId,\n    'ref': (ref: InputRef) => {\n      inputRef.current = ref\n    },\n  }\n\n  if (fieldType.name === 'boolean') {\n    return (\n      <Select\n        {...inputProps}\n        onChange={() => null}\n        radius={0}\n        style={{\n          boxShadow: 'none',\n          border: getBorderStyle(),\n          padding: 0,\n        }}\n        value={JSON.stringify(renderValue)}\n      >\n        <option value=\"True\">True</option>\n        <option value=\"False\">False</option>\n      </Select>\n    )\n  }\n\n  return (\n    <TextInput\n      {...inputProps}\n      size={0}\n      radius={0}\n      border={false}\n      style={{\n        border: getBorderStyle(),\n        padding: '22px 16px',\n      }}\n      value={\n        typeof renderValue === 'string' || typeof renderValue === 'number'\n          ? renderValue\n          : JSON.stringify(renderValue)\n      }\n      onChange={handleOnChange}\n    />\n  )\n}\n\n/** @internal */\nexport function SheetListCell(cell: Cell<SanityDocument, unknown>) {\n  const isPinned = cell.column.getIsPinned()\n  const Cell = isPinned ? PinnedDataCell : DataCell\n  const borderWidth = isPinned && cell.column.getIsLastColumn('left') ? 2 : 1\n\n  return (\n    <Cell\n      key={cell.row.original._id + cell.id}\n      style={{\n        left: cell.column.getStart('left') ?? undefined,\n        borderRight: `${borderWidth}px solid var(--card-border-color)`,\n      }}\n      width={cell.column.getSize()}\n    >\n      {flexRender(cell.column.columnDef.cell, cell.getContext?.())}\n    </Cell>\n  )\n}\n","'use no memo'\n// The `use no memo` directive is due to a known issue with react-table and react compiler: https://github.com/TanStack/table/issues/5567\n\nimport {isObjectSchemaType, type ObjectSchemaType} from '@sanity/types'\nimport {Box, Checkbox, Flex, Text} from '@sanity/ui'\nimport {\n  type AccessorKeyColumnDef,\n  createColumnHelper,\n  type GroupColumnDef,\n  type VisibilityState,\n} from '@tanstack/react-table'\nimport {useMemo} from 'react'\nimport {useObservable} from 'react-rx'\nimport {\n  type DocumentPreviewStore,\n  DocumentStatusIndicator,\n  getPreviewStateObservable,\n  type SanityDocument,\n  type SchemaType,\n  useDocumentPreviewStore,\n} from 'sanity'\n\nimport {DocumentSheetListSelect} from './DocumentSheetListSelect'\nimport {SheetListCellInner} from './SheetListCell'\n\nexport const VISIBLE_COLUMN_LIMIT = 5\n\nconst PreviewCell = (props: {\n  documentPreviewStore: DocumentPreviewStore\n  schemaType: SchemaType\n  row: {\n    original: SanityDocument\n  }\n}) => {\n  const {documentPreviewStore, row, schemaType} = props\n  const title = 'Document title'\n  const previewStateObservable = useMemo(\n    () => getPreviewStateObservable(documentPreviewStore, schemaType, row.original._id, title),\n    [documentPreviewStore, row.original._id, schemaType],\n  )\n  const {draft, published, isLoading} = useObservable(previewStateObservable, {\n    draft: null,\n    isLoading: true,\n    published: null,\n  })\n  if (isLoading) {\n    return (\n      <Text size={1} muted>\n        Loading...\n      </Text>\n    )\n  }\n  const displayValue = (draft?.title ?? published?.title ?? 'Untitled') as string\n  return (\n    <Flex align=\"center\" gap={3}>\n      <DocumentStatusIndicator draft={draft} published={published} versions={undefined} />\n      <Text size={1}>{displayValue}</Text>\n    </Flex>\n  )\n}\n\nconst columnHelper = createColumnHelper<SanityDocument>()\nconst SUPPORTED_FIELDS = ['string', 'number', 'boolean']\n\ntype Columns = (\n  | AccessorKeyColumnDef<SanityDocument, unknown>\n  | GroupColumnDef<SanityDocument, unknown>\n)[]\n\nconst getColsFromSchemaType = (schemaType: ObjectSchemaType, parentalField?: string): Columns => {\n  return schemaType.fields.reduce<Columns>((tableColumns: Columns, field) => {\n    const {type, name} = field\n    if (SUPPORTED_FIELDS.includes(type.name)) {\n      const nextCol = columnHelper.accessor(\n        // accessor must use dot notation for internal tanstack method of reading cell data\n        parentalField ? `${parentalField}.${field.name}` : field.name,\n        {\n          id: parentalField ? `${parentalField}_${field.name}` : field.name,\n          header: field.type.title,\n          enableHiding: true,\n          cell: (info) => <SheetListCellInner {...info} fieldType={type} />,\n        },\n      )\n\n      return [...tableColumns, nextCol]\n    }\n\n    // if first layer nested object\n    if (type.name === 'object' && isObjectSchemaType(type) && !parentalField) {\n      return [\n        ...tableColumns,\n        columnHelper.group({header: name, columns: getColsFromSchemaType(type, field.name)}),\n      ]\n    }\n\n    return tableColumns\n  }, [])\n}\n\n// Type guard function to check if a column is of type GroupColumnDef\nfunction isAccessorKeyColumnDef(\n  column: Columns[number],\n): column is AccessorKeyColumnDef<SanityDocument, unknown> {\n  return 'accessorKey' in column\n}\nfunction isGroupColumnDef(\n  column: AccessorKeyColumnDef<SanityDocument, unknown> | GroupColumnDef<SanityDocument, unknown>,\n): column is GroupColumnDef<SanityDocument, unknown> {\n  return 'columns' in column\n}\n\nconst flatColumns = (cols: Columns): AccessorKeyColumnDef<SanityDocument, unknown>[] => {\n  return cols.flatMap((col) => {\n    if (isAccessorKeyColumnDef(col)) {\n      return col\n    }\n    if (isGroupColumnDef(col)) {\n      return col.columns ? flatColumns(col.columns) : []\n    }\n    return []\n  })\n}\n\nexport function useDocumentSheetColumns(documentSchemaType?: ObjectSchemaType) {\n  const documentPreviewStore = useDocumentPreviewStore()\n\n  const columns: Columns = useMemo(() => {\n    if (!documentSchemaType) {\n      return []\n    }\n    return [\n      columnHelper.display({\n        id: 'selected',\n        enableHiding: false,\n        header: (info) => (\n          <Box>\n            <Checkbox\n              style={{paddingLeft: 4}}\n              indeterminate={info.table.getIsSomeRowsSelected()}\n              onChange={info.table.getToggleAllPageRowsSelectedHandler()}\n            />\n            {/* eslint-disable-next-line i18next/no-literal-string */}\n            {info.table.getSelectedRowModel().rows.length} selected\n          </Box>\n        ),\n        cell: DocumentSheetListSelect,\n      }),\n      columnHelper.accessor('Preview', {\n        enableHiding: false,\n        id: 'Preview',\n        cell: (info) => {\n          return (\n            <PreviewCell\n              {...info}\n              documentPreviewStore={documentPreviewStore}\n              schemaType={documentSchemaType}\n            />\n          )\n        },\n      }),\n      ...getColsFromSchemaType(documentSchemaType),\n    ]\n  }, [documentPreviewStore, documentSchemaType])\n\n  const [initialColumnsVisibility]: [VisibilityState, number] = useMemo(\n    () =>\n      flatColumns(columns).reduce<[VisibilityState, number]>(\n        ([accCols, countAllowedVisible], column) => {\n          if (!column.id) throw new Error('Column must have an id')\n          const visibilityKey = column.id\n\n          // this column is always visible\n          if (!column.enableHiding) {\n            return [{...accCols, [visibilityKey]: true}, countAllowedVisible]\n          }\n\n          // have already reached column visibility limit, hide column by default\n          if (countAllowedVisible === VISIBLE_COLUMN_LIMIT) {\n            return [{...accCols, [visibilityKey]: false}, countAllowedVisible]\n          }\n\n          return [{...accCols, [visibilityKey]: true}, countAllowedVisible + 1]\n        },\n        [{}, 0],\n      ),\n    [columns],\n  )\n\n  return {columns, initialColumnsVisibility}\n}\n","'use no memo'\n// The `use no memo` directive is due to a known issue with react-table and react compiler: https://github.com/TanStack/table/issues/5567\n\nimport {Box, Checkbox, Flex, Menu, Stack, Text} from '@sanity/ui'\nimport {type Column, type Table} from '@tanstack/react-table'\nimport {useCallback} from 'react'\nimport {type SanityDocument, useTranslation} from 'sanity'\n\nimport {Button, MenuButton} from '../../../../ui-components'\nimport {VISIBLE_COLUMN_LIMIT} from './useDocumentSheetColumns'\n\ntype ColumnsControlProps = {\n  table: Table<SanityDocument>\n}\n\nexport function ColumnsControl({table}: ColumnsControlProps) {\n  const {t} = useTranslation()\n  const isVisibleLimitReached =\n    table.getVisibleLeafColumns().filter((col) => col.getCanHide()).length >= VISIBLE_COLUMN_LIMIT\n\n  const setInitialColumns = useCallback(() => {\n    table.resetColumnVisibility()\n  }, [table])\n\n  const handleColumnOnChange = (column: Column<SanityDocument, unknown>) => () => {\n    column.toggleVisibility()\n  }\n\n  const getColumnVisibilityDisabled = (column: Column<SanityDocument, unknown>) => {\n    const isColumnVisible = column.getIsVisible()\n    const isSingleColumnVisible =\n      table.getVisibleLeafColumns().filter((col) => col.getCanHide()).length === 1\n\n    return (isVisibleLimitReached && !isColumnVisible) || (isSingleColumnVisible && isColumnVisible)\n  }\n\n  return (\n    <MenuButton\n      button={<Button mode=\"bleed\" text={t('sheet-list.edit-columns')} />}\n      id=\"columns-control\"\n      menu={\n        <Menu padding={3} paddingTop={4} style={{width: 240}}>\n          <Flex direction=\"column\" height=\"fill\" gap={3}>\n            <Text weight=\"semibold\" size={1}>\n              {t('sheet-list.select-fields')}\n            </Text>\n            <Flex style={{flex: '1 1 auto', maxHeight: 320, overflowY: 'scroll'}}>\n              <Stack>\n                {table\n                  .getAllLeafColumns()\n                  .filter((column) => column.getCanHide())\n                  .map((column) => (\n                    <Flex key={column.id} marginY={2} align=\"center\">\n                      <Checkbox\n                        readOnly={getColumnVisibilityDisabled(column)}\n                        checked={column.getIsVisible()}\n                        onChange={handleColumnOnChange(column)}\n                        id={`col-visibility-${column.id}`}\n                        style={{display: 'block'}}\n                      />\n                      <Box flex={1} paddingLeft={3}>\n                        <Text size={1}>\n                          <label htmlFor={`col-visibility-${column.id}`}>\n                            {column.columnDef.header?.toString()}\n                          </label>\n                        </Text>\n                      </Box>\n                    </Flex>\n                  ))}\n              </Stack>\n            </Flex>\n            <Button\n              width=\"fill\"\n              mode=\"ghost\"\n              text={t('sheet-list.reset-columns')}\n              onClick={setInitialColumns}\n            />\n          </Flex>\n        </Menu>\n      }\n      placement=\"bottom\"\n      popover={{portal: true}}\n    />\n  )\n}\n","import {Flex} from '@sanity/ui'\nimport {Filters, SearchHeader, useSearchState} from 'sanity'\nimport {styled} from 'styled-components'\n\nconst SearchContainer = styled(Flex)`\n  flex-shrink: 0;\n`\n\nexport function DocumentSheetListFilter() {\n  const {\n    state: {filtersVisible},\n  } = useSearchState()\n\n  return (\n    <SearchContainer>\n      <SearchHeader />\n      {filtersVisible && <Filters showTypeFilter={false} />}\n    </SearchContainer>\n  )\n}\n","'use no memo'\n// The `use no memo` directive is due to a known issue with react-table and react compiler: https://github.com/TanStack/table/issues/5567\n\nimport {CloseIcon, EllipsisHorizontalIcon} from '@sanity/icons'\nimport {type SanityDocument} from '@sanity/types'\nimport {Box, Flex, Menu, Text} from '@sanity/ui'\nimport {flexRender, type Header as HeaderType, type HeaderGroup} from '@tanstack/react-table'\nimport {useTranslation} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Button, MenuButton, MenuItem, Tooltip} from '../../../../ui-components'\n\nconst Header = styled.th<{width: number}>`\n  margin: 16px;\n  z-index: 1;\n  padding: 22px 0px;\n  border-top: 1px solid var(--card-border-color);\n  background-color: var(--card-badge-default-bg-color);\n  box-sizing: border-box;\n  text-align: left;\n  width: ${({width}) => width}px;\n  max-width: ${({width}) => width}px;\n`\n\nconst PinnedHeader = styled(Header)`\n  position: sticky;\n  z-index: 2;\n`\n\nconst HoverMenu = styled.div`\n  visibility: hidden;\n\n  ${Header}:hover & {\n    visibility: visible;\n  }\n`\n\ntype DocumentSheetListHeaderProps = {\n  header: HeaderType<SanityDocument, unknown>\n  headerGroup: HeaderGroup<SanityDocument>\n}\n\nexport function DocumentSheetListHeader(props: DocumentSheetListHeaderProps) {\n  const {header, headerGroup} = props\n  const {t} = useTranslation()\n\n  const isPinned = header.column.getIsPinned()\n\n  const headerTitle =\n    headerGroup.depth > 0 && !header.column.parent ? null : (\n      <Text size={1} weight=\"semibold\" textOverflow=\"ellipsis\">\n        {flexRender(header.column.columnDef.header, header.getContext())}\n      </Text>\n    )\n\n  const HeaderTag = isPinned ? PinnedHeader : Header\n\n  const canShowHeaderMenu =\n    header.column.getCanHide() &&\n    (headerGroup.depth === 0 ? !header.column.columns.length : header.column.parent)\n\n  const borderWidth = isPinned && header.column.getIsLastColumn('left') ? 2 : 1\n\n  return (\n    <HeaderTag\n      style={{\n        left: header.column.getStart('left') ?? undefined,\n        borderRight: `${borderWidth}px solid var(--card-border-color)`,\n      }}\n      key={header.id}\n      data-testid={`header-${header.id}`}\n      width={header.getSize()}\n    >\n      <Flex justify=\"space-between\" marginX={2} align=\"baseline\">\n        <Tooltip delay={500} content={headerTitle}>\n          <Box style={{boxSizing: 'border-box'}} marginLeft={3} marginRight={3}>\n            {headerTitle}\n          </Box>\n        </Tooltip>\n        {canShowHeaderMenu && (\n          <HoverMenu>\n            <MenuButton\n              button={\n                <Button\n                  tooltipProps={{content: 'Open field menu'}}\n                  mode=\"bleed\"\n                  icon={EllipsisHorizontalIcon}\n                  data-testid=\"field-menu-button\"\n                />\n              }\n              id=\"field menu\"\n              popover={{placement: 'bottom-end'}}\n              menu={\n                <Menu>\n                  <MenuItem\n                    text={t('sheet-list.hide-field')}\n                    icon={CloseIcon}\n                    onClick={() => header.column.toggleVisibility()}\n                  />\n                </Menu>\n              }\n            />\n          </HoverMenu>\n        )}\n      </Flex>\n    </HeaderTag>\n  )\n}\n","'use no memo'\n// The `use no memo` directive is due to a known issue with react-table and react compiler: https://github.com/TanStack/table/issues/5567\n\n/* eslint-disable i18next/no-literal-string */\n/* eslint-disable @sanity/i18n/no-attribute-string-literals */\n/* eslint-disable react/jsx-no-bind */\nimport {\n  ChevronLeftIcon,\n  ChevronRightIcon,\n  DoubleChevronLeftIcon,\n  DoubleChevronRightIcon,\n} from '@sanity/icons'\nimport {Flex, Text} from '@sanity/ui'\nimport {type Table} from '@tanstack/react-table'\nimport {type SanityDocument} from 'sanity'\n\nimport {Button, TooltipDelayGroupProvider} from '../../../../ui-components'\n\nexport function DocumentSheetListPaginator({table}: {table: Table<SanityDocument>}) {\n  return (\n    <TooltipDelayGroupProvider>\n      <Flex gap={3} align={'center'}>\n        <Button\n          onClick={() => table.setPageIndex(0)}\n          disabled={!table.getCanPreviousPage()}\n          icon={DoubleChevronLeftIcon}\n          tooltipProps={{\n            content: 'Go to first page',\n          }}\n        />\n        <Button\n          onClick={() => table.previousPage()}\n          disabled={!table.getCanPreviousPage()}\n          icon={ChevronLeftIcon}\n          tooltipProps={{\n            content: 'Go to previous page',\n          }}\n        />\n        <Text style={{whiteSpace: 'nowrap'}}>\n          {table.getState().pagination.pageIndex + 1} of {table.getPageCount()}\n        </Text>\n\n        <Button\n          onClick={() => table.nextPage()}\n          disabled={!table.getCanNextPage()}\n          icon={ChevronRightIcon}\n          tooltipProps={{\n            content: 'Go to next page',\n          }}\n        />\n        <Button\n          onClick={() => table.setPageIndex(table.getPageCount() - 1)}\n          disabled={!table.getCanNextPage()}\n          icon={DoubleChevronRightIcon}\n          tooltipProps={{\n            content: 'Go to last page',\n          }}\n        />\n        <select\n          value={table.getState().pagination.pageSize}\n          onChange={(e) => {\n            table.setPageSize(Number(e.target.value))\n          }}\n        >\n          {[25, 50, 100].map((pageSize) => (\n            <option key={pageSize} value={pageSize}>\n              {pageSize}\n            </option>\n          ))}\n        </select>\n      </Flex>\n    </TooltipDelayGroupProvider>\n  )\n}\n","import {type ListenEvent, type ListenOptions} from '@sanity/client'\nimport {useCallback, useEffect, useMemo, useReducer, useState} from 'react'\nimport {catchError, of} from 'rxjs'\nimport {DEFAULT_STUDIO_CLIENT_OPTIONS, getDraftId, type SanityDocument, useClient} from 'sanity'\n\ninterface DocumentDeletedAction {\n  id: string\n  type: 'DOCUMENT_DELETED'\n}\n\ninterface DocumentUpdatedAction {\n  payload: SanityDocument\n  type: 'DOCUMENT_UPDATED'\n}\n\ninterface DocumentsSetAction {\n  documents: SanityDocument[]\n  type: 'DOCUMENTS_SET'\n}\n\ninterface DocumentReceivedAction {\n  payload: SanityDocument\n  type: 'DOCUMENT_RECEIVED'\n}\n\nexport type DocumentsReducerAction =\n  | DocumentDeletedAction\n  | DocumentUpdatedAction\n  | DocumentsSetAction\n  | DocumentReceivedAction\n\nexport interface DocumentsReducerState {\n  documents: Record<string, SanityDocument>\n}\n\nfunction createDocumentsSet(documents: SanityDocument[]) {\n  const documentsById = documents.reduce((acc, doc) => ({...acc, [doc._id]: doc}), {})\n  return documentsById\n}\n\nfunction documentsReducer(\n  state: DocumentsReducerState,\n  action: DocumentsReducerAction,\n): DocumentsReducerState {\n  switch (action.type) {\n    case 'DOCUMENTS_SET': {\n      // Create an object with the documents id as key\n      const documents = createDocumentsSet(action.documents)\n\n      return {\n        ...state,\n        documents: documents,\n      }\n    }\n\n    case 'DOCUMENT_RECEIVED': {\n      const nextDocumentResult = action.payload as SanityDocument\n\n      return {\n        ...state,\n        documents: {\n          ...state.documents,\n          [nextDocumentResult._id]: nextDocumentResult,\n        },\n      }\n    }\n\n    case 'DOCUMENT_DELETED': {\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const {[action.id]: _, ...restDocuments} = state.documents\n\n      return {\n        ...state,\n        documents: restDocuments,\n      }\n    }\n\n    case 'DOCUMENT_UPDATED': {\n      const updatedDocument = action.payload\n      const id = updatedDocument._id as string\n      const document = state.documents[id]\n\n      const nextDocument = {\n        // Add existing document data\n        ...document,\n        // Add incoming document data\n        ...updatedDocument,\n      } satisfies SanityDocument\n\n      return {\n        ...state,\n        documents: {\n          ...state.documents,\n          [id]: nextDocument,\n        },\n      }\n    }\n\n    default:\n      return state\n  }\n}\n\nconst LISTEN_OPTIONS: ListenOptions = {\n  events: ['welcome', 'mutation', 'reconnect'],\n  includeResult: true,\n  visibility: 'query',\n  tag: 'document-sheet-list-store',\n}\n\n/**\n * TODO:\n * [] Lazy load more documents, reduce initial fetch.\n * [] Add support for sorting and filtering.\n * []  Make a projection of the query according to the schema. e.g. get only the primitive fields and the _id to reduce the data payload.\n */\nexport function useDocumentSheetListStore({\n  filter,\n  params,\n  apiVersion,\n}: {\n  filter: string\n  params?: Record<string, unknown>\n  apiVersion?: string\n}) {\n  const QUERY = `*[${filter}][0...2000]`\n  const client = useClient({\n    ...DEFAULT_STUDIO_CLIENT_OPTIONS,\n    apiVersion: apiVersion || DEFAULT_STUDIO_CLIENT_OPTIONS.apiVersion,\n  })\n  const [state, dispatch] = useReducer(documentsReducer, {\n    documents: {},\n  })\n  const [isLoading, setIsLoading] = useState<boolean>(client !== null)\n  const [error, setError] = useState<Error | null>(null)\n\n  const initialFetch = useCallback(async () => {\n    if (!client) {\n      setIsLoading(false)\n      return\n    }\n    try {\n      const res = await client.fetch(QUERY, params)\n      dispatch({type: 'DOCUMENTS_SET', documents: res})\n      setIsLoading(false)\n    } catch (err) {\n      setError(err)\n    }\n  }, [client, params, QUERY])\n\n  const handleListenerEvent = useCallback(\n    async (event: ListenEvent<Record<string, SanityDocument>>) => {\n      // Fetch all documents on initial connection\n      if (event.type === 'welcome') {\n        setIsLoading(true)\n        await initialFetch()\n        setIsLoading(false)\n      }\n\n      // The reconnect event means that we are trying to reconnect to the realtime listener.\n      // In this case we set loading to true to indicate that we're trying to\n      // reconnect. Once a connection has been established, the welcome event\n      // will be received and we'll fetch all documents again (above).\n      if (event.type === 'reconnect') {\n        setIsLoading(true)\n      }\n\n      // Handle mutations (create, update, delete) from the realtime listener\n      // and update the documents store accordingly\n      if (event.type === 'mutation') {\n        if (event.transition === 'appear') {\n          const nextDocument = event.result as SanityDocument | undefined\n\n          if (nextDocument) {\n            dispatch({\n              type: 'DOCUMENT_RECEIVED',\n              payload: nextDocument,\n            })\n          }\n        }\n\n        if (event.transition === 'disappear') {\n          dispatch({type: 'DOCUMENT_DELETED', id: event.documentId})\n        }\n\n        if (event.transition === 'update') {\n          const updatedDocument = event.result as SanityDocument | undefined\n\n          if (updatedDocument) {\n            dispatch({\n              type: 'DOCUMENT_UPDATED',\n              payload: updatedDocument,\n            })\n          }\n        }\n      }\n    },\n    [initialFetch],\n  )\n\n  const listener$ = useMemo(() => {\n    if (!client) return of()\n\n    const events$ = client.observable.listen(QUERY, params, LISTEN_OPTIONS).pipe(\n      catchError((err) => {\n        setError(err)\n        return of(err)\n      }),\n    )\n\n    return events$\n  }, [client, params, QUERY])\n\n  useEffect(() => {\n    const sub = listener$.subscribe(handleListenerEvent)\n\n    return () => {\n      sub?.unsubscribe()\n    }\n  }, [handleListenerEvent, listener$])\n\n  // Contemplate that we could have drafts and live documents here, merge them.\n  const dataAsArray = useMemo(() => {\n    // Joins the drafts and the live documents\n    const uniques = Object.keys(state.documents).reduce(\n      (acc: {[key: string]: SanityDocument}, key) => {\n        const document = state.documents[key]\n        const isDraft = document._id === getDraftId(document._id)\n        const id = isDraft ? document._id : getDraftId(document._id)\n        // If we already have the document, and this document is not the draft one, it means\n        // the draft hast already been added to the list, so we skip it.\n        if (acc[id] && !isDraft) {\n          return acc\n        }\n        acc[id] = document\n        return acc\n      },\n      {},\n    )\n    return Object.values(uniques)\n  }, [state.documents])\n\n  return {\n    data: dataAsArray,\n    isLoading,\n    error,\n  }\n}\n","import {useMemo} from 'react'\nimport {getPublishedId, useSearchState} from 'sanity'\n\nimport {useDocumentSheetListStore} from './useDocumentSheetListStore'\n\ninterface DocumentSheetListOptions {\n  /** The schemaType.name  */\n  typeName: string\n}\n\nexport function useDocumentSheetList({typeName}: DocumentSheetListOptions) {\n  const {state} = useSearchState()\n\n  const items = useMemo(() => {\n    const map = new Map()\n    state.result.hits.forEach((h) => map.set(getPublishedId(h.hit._id), h.hit))\n    return map\n  }, [state.result.hits])\n\n  // The store is listening to all the documents that match with the _type filter.\n  const {data, isLoading} = useDocumentSheetListStore({\n    filter: `_type == \"${typeName}\"`,\n  })\n\n  // Only return the documents that match with the serverSide filter items.\n  const documents = useMemo(() => {\n    return data.filter((doc) => items.has(getPublishedId(doc._id)))\n  }, [data, items])\n\n  return {data: documents, isLoading}\n}\n","'use no memo'\n// The `use no memo` directive is due to a known issue with react-table and react compiler: https://github.com/TanStack/table/issues/5567\n\nimport {isDocumentSchemaType, type ObjectSchemaType, type SanityDocument} from '@sanity/types'\nimport {Box, Flex, Text} from '@sanity/ui'\nimport {\n  getCoreRowModel,\n  getFilteredRowModel,\n  getPaginationRowModel,\n  type Row,\n  useReactTable,\n} from '@tanstack/react-table'\nimport {useCallback, useEffect, useState} from 'react'\nimport {SearchProvider, useSchema, useSearchState} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {type BaseStructureToolPaneProps} from '../../types'\nimport {ColumnsControl} from './ColumnsControl'\nimport {DocumentSheetListFilter} from './DocumentSheetListFilter'\nimport {DocumentSheetListHeader} from './DocumentSheetListHeader'\nimport {DocumentSheetListPaginator} from './DocumentSheetListPaginator'\nimport {DocumentSheetListProvider} from './DocumentSheetListProvider'\nimport {SheetListCell} from './SheetListCell'\nimport {useDocumentSheetColumns} from './useDocumentSheetColumns'\nimport {useDocumentSheetList} from './useDocumentSheetList'\n\ntype DocumentSheetListPaneProps = BaseStructureToolPaneProps<'documentList'>\n\nconst PaneContainer = styled(Flex)`\n  height: 100%;\n`\nconst TableContainer = styled.div`\n  overflow: auto; //our scrollable table container\n  position: relative; //needed for sticky header\n`\nconst Table = styled.table`\n  border-collapse: separate;\n  border-spacing: 0;\n  font-family: arial, sans-serif;\n  white-space: nowrap;\n  width: 100%;\n  border: 1px solid lightgray;\n\n  thead {\n    display: grid;\n    position: sticky;\n    top: 0;\n    z-index: 10;\n  }\n  tr {\n    padding: 0;\n  }\n  tr:last-child {\n    border-bottom: none;\n  }\n`\n\nfunction DocumentSheetListPaneInner({\n  documentSchemaType,\n}: DocumentSheetListPaneProps & {documentSchemaType: ObjectSchemaType}) {\n  const {dispatch, state} = useSearchState()\n  const {columns, initialColumnsVisibility} = useDocumentSheetColumns(documentSchemaType)\n  const {data} = useDocumentSheetList({\n    typeName: documentSchemaType.name,\n  })\n  const [selectedAnchor, setSelectedAnchor] = useState<number | null>(null)\n\n  const totalRows = state.result.hits.length\n  const table = useReactTable({\n    data,\n    columns,\n    getCoreRowModel: getCoreRowModel(),\n    getFilteredRowModel: getFilteredRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n    // Avoids resetting the page index when the data changes, e.g. a mutation is received\n    autoResetPageIndex: false,\n    initialState: {\n      columnPinning: {left: ['selected', 'Preview']},\n      pagination: {pageSize: 25},\n      columnVisibility: initialColumnsVisibility,\n    },\n    getRowId: (row) => row._id,\n    meta: {\n      selectedAnchor,\n      setSelectedAnchor,\n      patchDocument: (documentId, fieldId, value) => null,\n    },\n  })\n\n  const {rows} = table.getRowModel()\n\n  useEffect(() => {\n    dispatch({type: 'TERMS_TYPE_ADD', schemaType: documentSchemaType})\n    return () => {\n      dispatch({type: 'TERMS_TYPE_REMOVE', schemaType: documentSchemaType})\n    }\n  }, [documentSchemaType, dispatch])\n\n  const renderRow = useCallback((row: Row<SanityDocument>) => {\n    return (\n      <Box\n        as=\"tr\"\n        key={row.original._id + row.id}\n        paddingY={2}\n        style={{display: 'flex', width: '100%'}}\n      >\n        {row.getVisibleCells().map((cell) => (\n          <SheetListCell {...cell} key={row.original._id + cell.id} />\n        ))}\n      </Box>\n    )\n  }, [])\n\n  const rowsCount = `Total: ${totalRows} rows, showing ${rows.length} rows`\n  return (\n    <PaneContainer direction=\"column\" paddingX={3} data-testid=\"document-sheet-list-pane\">\n      <Flex direction=\"row\" align=\"center\" paddingY={3} paddingX={1} justify=\"space-between\">\n        <Flex direction=\"row\" align=\"center\">\n          <DocumentSheetListFilter />\n          <Text size={0} muted>\n            {rowsCount}\n          </Text>\n        </Flex>\n        <ColumnsControl table={table} />\n      </Flex>\n      <TableContainer>\n        <DocumentSheetListProvider table={table}>\n          <Table>\n            <thead>\n              {table.getHeaderGroups().map((headerGroup) => (\n                <Box as=\"tr\" key={headerGroup.id}>\n                  {headerGroup.headers.map((header) => (\n                    <DocumentSheetListHeader\n                      key={header.id}\n                      header={header}\n                      headerGroup={headerGroup}\n                    />\n                  ))}\n                </Box>\n              ))}\n            </thead>\n            <tbody>{table.getRowModel().rows.map(renderRow)}</tbody>\n          </Table>\n        </DocumentSheetListProvider>\n      </TableContainer>\n      <Flex justify={'flex-end'} padding={3} gap={4} paddingY={5}>\n        <DocumentSheetListPaginator table={table} />\n      </Flex>\n    </PaneContainer>\n  )\n}\n\nexport function DocumentSheetListPane(props: DocumentSheetListPaneProps) {\n  const schema = useSchema()\n  const typeName = props.pane.schemaTypeName\n\n  const schemaType = schema.get(typeName)\n  if (!schemaType || !isDocumentSchemaType(schemaType)) {\n    throw new Error(`Schema type \"${typeName}\" not found or not a document schema`)\n  }\n  return (\n    <SearchProvider>\n      <DocumentSheetListPaneInner {...props} documentSchemaType={schemaType} />\n    </SearchProvider>\n  )\n}\n","import {Card, Code} from '@sanity/ui'\nimport {isEqual} from 'lodash'\nimport {memo, useMemo, useState} from 'react'\nimport {\n  EMPTY_ARRAY,\n  type GeneralDocumentListLayoutKey,\n  SourceProvider,\n  useI18nText,\n  useSource,\n} from 'sanity'\nimport shallowEquals from 'shallow-equals'\n\nimport {Pane} from '../../components/pane'\nimport {_DEBUG} from '../../constants'\nimport {type PaneMenuItem} from '../../types'\nimport {useStructureToolSetting} from '../../useStructureToolSetting'\nimport {type BaseStructureToolPaneProps} from '../types'\nimport {DEFAULT_ORDERING, EMPTY_RECORD} from './constants'\nimport {DocumentListPane} from './DocumentListPane'\nimport {findStaticTypesInFilter} from './helpers'\nimport {PaneHeader} from './PaneHeader'\nimport {DocumentSheetListPane} from './sheetList/DocumentSheetListPane'\nimport {type SortOrder} from './types'\n\nconst addSelectedStateToMenuItems = (options: {\n  menuItems?: PaneMenuItem[]\n  sortOrderRaw?: SortOrder\n  layout?: GeneralDocumentListLayoutKey\n}) => {\n  const {menuItems, sortOrderRaw, layout} = options\n\n  return menuItems?.map((item) => {\n    if (item.params?.layout) {\n      return {\n        ...item,\n        selected: layout === item.params?.layout,\n      }\n    }\n\n    if (item?.params?.by) {\n      return {\n        ...item,\n        selected: isEqual(sortOrderRaw?.by, item?.params?.by || EMPTY_ARRAY),\n      }\n    }\n\n    return {...item, selected: false}\n  })\n}\n\nexport function useShallowUnique<ValueType>(value: ValueType): ValueType {\n  const [previous, setPrevious] = useState<ValueType>(value)\n  if (!shallowEquals(previous, value)) {\n    setPrevious(value)\n    return value\n  }\n  return previous\n}\n\n/**\n * @internal\n */\nexport const PaneContainer = memo(function PaneContainer(\n  props: BaseStructureToolPaneProps<'documentList'>,\n) {\n  const {index, isSelected, pane, paneKey} = props\n  const {name: parentSourceName} = useSource()\n\n  const {\n    defaultLayout = 'default',\n    initialValueTemplates = EMPTY_ARRAY,\n    menuItemGroups,\n    menuItems,\n    options,\n  } = pane\n  const {defaultOrdering = EMPTY_ARRAY, filter} = options\n  const params = useShallowUnique(options.params || EMPTY_RECORD)\n  const sourceName = pane.source\n  const typeName = useMemo(() => {\n    const staticTypes = findStaticTypesInFilter(filter, params)\n    if (staticTypes?.length === 1) return staticTypes[0]\n    return null\n  }, [filter, params])\n\n  const [layout, setLayout] = useStructureToolSetting<GeneralDocumentListLayoutKey>(\n    'layout',\n    typeName ?? pane.id, //pane.id for anything that is not documentTypeList\n    defaultLayout,\n  )\n\n  const {title} = useI18nText(pane)\n\n  // Ensure that we use the defaultOrdering value from structure builder if any as the default\n  const defaultSortOrder = useMemo(() => {\n    return defaultOrdering?.length > 0 ? {by: defaultOrdering} : DEFAULT_ORDERING\n  }, [defaultOrdering])\n\n  const [sortOrderRaw, setSortOrder] = useStructureToolSetting<SortOrder>(\n    'sort-order',\n    typeName ?? pane.id, //pane.id for anything that is not documentTypeList\n    defaultSortOrder,\n  )\n\n  const menuItemsWithSelectedState = useMemo(\n    () =>\n      addSelectedStateToMenuItems({\n        menuItems,\n        sortOrderRaw,\n        layout,\n      }),\n    [layout, menuItems, sortOrderRaw],\n  )\n\n  const isSheetListLayout = layout === 'sheetList'\n  const paneLayout = isSheetListLayout ? (\n    <DocumentSheetListPane {...props} key={props.pane.id} />\n  ) : (\n    <DocumentListPane {...props} sortOrder={sortOrderRaw} layout={layout} />\n  )\n\n  return (\n    <SourceProvider name={sourceName || parentSourceName}>\n      <Pane\n        data-ui=\"DocumentListPane\"\n        id={paneKey}\n        minWidth={320}\n        {...(isSheetListLayout ? {} : {currentMaxWidth: 350, maxWidth: 640})}\n        selected={isSelected}\n      >\n        {_DEBUG && (\n          <Card padding={4} tone=\"transparent\">\n            <Code>{pane.source || '(none)'}</Code>\n          </Card>\n        )}\n\n        <PaneHeader\n          index={index}\n          initialValueTemplates={initialValueTemplates}\n          menuItemGroups={menuItemGroups}\n          menuItems={menuItemsWithSelectedState}\n          setLayout={setLayout}\n          setSortOrder={setSortOrder}\n          title={title}\n        />\n        {paneLayout}\n      </Pane>\n    </SourceProvider>\n  )\n})\nPaneContainer.displayName = 'Memo(PaneContainer)'\n","import {type SerializePath} from './StructureNodes'\n\n/** @internal */\nexport class SerializeError extends Error {\n  public readonly path: SerializePath\n  public helpId?: HELP_URL\n\n  constructor(\n    message: string,\n    parentPath: SerializePath,\n    pathSegment: string | number | undefined,\n    hint?: string,\n  ) {\n    super(message)\n    this.name = 'SerializeError'\n    const segment = typeof pathSegment === 'undefined' ? '<unknown>' : `${pathSegment}`\n    this.path = (parentPath || []).concat(hint ? `${segment} (${hint})` : segment)\n  }\n\n  withHelpUrl(id: HELP_URL): SerializeError {\n    this.helpId = id\n    return this\n  }\n}\n\n/** @internal */\nexport enum HELP_URL {\n  ID_REQUIRED = 'structure-node-id-required',\n  TITLE_REQUIRED = 'structure-title-required',\n  FILTER_REQUIRED = 'structure-filter-required',\n  INVALID_LIST_ITEM = 'structure-invalid-list-item',\n  COMPONENT_REQUIRED = 'structure-view-component-required',\n  DOCUMENT_ID_REQUIRED = 'structure-document-id-required',\n  DOCUMENT_TYPE_REQUIRED = 'structure-document-type-required',\n  SCHEMA_TYPE_REQUIRED = 'structure-schema-type-required',\n  SCHEMA_TYPE_NOT_FOUND = 'structure-schema-type-not-found',\n  LIST_ITEMS_MUST_BE_ARRAY = 'structure-list-items-must-be-array',\n  QUERY_PROVIDED_FOR_FILTER = 'structure-query-provided-for-filter',\n  ACTION_OR_INTENT_REQUIRED = 'structure-action-or-intent-required',\n  LIST_ITEM_IDS_MUST_BE_UNIQUE = 'structure-list-item-ids-must-be-unique',\n  ACTION_AND_INTENT_MUTUALLY_EXCLUSIVE = 'structure-action-and-intent-mutually-exclusive',\n  API_VERSION_REQUIRED_FOR_CUSTOM_FILTER = 'structure-api-version-required-for-custom-filter',\n}\n","import {type SortOrdering} from '@sanity/types'\n\nimport {structureLocaleNamespace} from '../i18n'\n\nexport const ORDER_BY_UPDATED_AT: SortOrdering = {\n  title: 'Last edited',\n  i18n: {\n    title: {\n      key: 'menu-items.sort-by.last-edited',\n      ns: structureLocaleNamespace,\n    },\n  },\n  name: 'lastEditedDesc',\n  by: [{field: '_updatedAt', direction: 'desc'}],\n}\n\nexport const ORDER_BY_CREATED_AT: SortOrdering = {\n  title: 'Created',\n  i18n: {\n    title: {\n      key: 'menu-items.sort-by.created',\n      ns: structureLocaleNamespace,\n    },\n  },\n  name: 'lastCreatedDesc',\n  by: [{field: '_createdAt', direction: 'desc'}],\n}\n\nexport const DEFAULT_SELECTED_ORDERING_OPTION = ORDER_BY_UPDATED_AT\n\nexport const DEFAULT_ORDERING_OPTIONS: SortOrdering[] = [\n  ORDER_BY_UPDATED_AT, // _updatedAt\n  ORDER_BY_CREATED_AT, // _createdAt\n]\n","import {SortIcon} from '@sanity/icons'\nimport {type SchemaType, type SortOrdering, type SortOrderingItem} from '@sanity/types'\nimport {type I18nTextRecord} from 'sanity'\n\nimport {type Intent} from './Intent'\nimport {HELP_URL, SerializeError} from './SerializeError'\nimport {DEFAULT_ORDERING_OPTIONS} from './Sort'\nimport {type Serializable, type SerializeOptions, type SerializePath} from './StructureNodes'\nimport {type StructureContext} from './types'\nimport {getExtendedProjection} from './util/getExtendedProjection'\n\n/** @internal */\nexport function maybeSerializeMenuItem(\n  item: MenuItem | MenuItemBuilder,\n  index: number,\n  path: SerializePath,\n): MenuItem {\n  return item instanceof MenuItemBuilder ? item.serialize({path, index}) : item\n}\n\n/**\n * Menu item action type\n * @public */\nexport type MenuItemActionType =\n  | string\n  | ((params: Record<string, string> | undefined, scope?: any) => void)\n\n/**\n * Menu items parameters\n *\n * @public */\nexport type MenuItemParamsType = Record<string, string | unknown | undefined>\n\n/**\n * Interface for menu items\n *\n * @public */\nexport interface MenuItem {\n  /**\n   * The i18n key and namespace used to populate the localized title. This is\n   * the recommend way to set the title if you are localizing your studio.\n   */\n  i18n?: I18nTextRecord<'title'>\n  /**\n   * Menu Item title. Note that the `i18n` configuration will take\n   * precedence and this title is left here as a fallback if no i18n key is\n   * provided and compatibility with older plugins\n   */\n  title: string\n  /** Menu Item action */\n  action?: MenuItemActionType\n  /** Menu Item intent */\n  intent?: Intent\n  /** Menu Item group */\n  group?: string\n  // TODO: align these with TemplateItem['icon']\n  /** Menu Item icon */\n  icon?: React.ComponentType | React.ReactNode\n  /** Menu Item parameters. See {@link MenuItemParamsType} */\n  params?: MenuItemParamsType\n  /** Determine if it will show the MenuItem as action */\n  showAsAction?: boolean\n}\n\n/**\n * Partial menu items\n * @public\n */\nexport type PartialMenuItem = Partial<MenuItem>\n\n/**\n * Class for building menu items.\n *\n * @public */\nexport class MenuItemBuilder implements Serializable<MenuItem> {\n  /** menu item option object. See {@link PartialMenuItem} */\n  protected spec: PartialMenuItem\n\n  constructor(\n    /**\n     * Structure context. See {@link StructureContext}\n     */\n    protected _context: StructureContext,\n    spec?: MenuItem,\n  ) {\n    this.spec = spec ? spec : {}\n  }\n\n  /**\n   * Set menu item action\n   * @param action - menu item action. See {@link MenuItemActionType}\n   * @returns menu item builder based on action provided. See {@link MenuItemBuilder}\n   */\n  action(action: MenuItemActionType): MenuItemBuilder {\n    return this.clone({action})\n  }\n\n  /**\n   * Get menu item action\n   * @returns menu item builder action. See {@link PartialMenuItem}\n   */\n  getAction(): PartialMenuItem['action'] {\n    return this.spec.action\n  }\n\n  /**\n   * Set menu item intent\n   * @param intent - menu item intent. See {@link Intent}\n   * @returns menu item builder based on intent provided. See {@link MenuItemBuilder}\n   */\n  intent(intent: Intent): MenuItemBuilder {\n    return this.clone({intent})\n  }\n\n  /**\n   * Get menu item intent\n   * @returns menu item intent. See {@link PartialMenuItem}\n   */\n  getIntent(): PartialMenuItem['intent'] {\n    return this.spec.intent\n  }\n\n  /**\n   * Set menu item title\n   * @param title - menu item title\n   * @returns menu item builder based on title provided. See {@link MenuItemBuilder}\n   */\n  title(title: string): MenuItemBuilder {\n    return this.clone({title})\n  }\n\n  /**\n   * Get menu item title. Note that the `i18n` configuration will take\n   * precedence and this title is left here for compatibility.\n   * @returns menu item title\n   */\n  getTitle(): string | undefined {\n    return this.spec.title\n  }\n\n  /**\n   * Set the i18n key and namespace used to populate the localized title.\n   * @param i18n - object with i18n key and related namespace\n   * @returns menu item builder based on i18n config provided. See {@link MenuItemBuilder}\n   */\n  i18n(i18n: I18nTextRecord<'title'>): MenuItemBuilder {\n    return this.clone({i18n})\n  }\n\n  /**\n   * Get the i18n key and namespace used to populate the localized title.\n   * @returns the i18n key and namespace used to populate the localized title.\n   */\n  getI18n(): I18nTextRecord<'title'> | undefined {\n    return this.spec.i18n\n  }\n\n  /**\n   * Set menu item group\n   * @param group - menu item group\n   * @returns menu item builder based on group provided. See {@link MenuItemBuilder}\n   */\n  group(group: string): MenuItemBuilder {\n    return this.clone({group})\n  }\n\n  /**\n   * Get menu item group\n   * @returns menu item group. See {@link PartialMenuItem}\n   */\n  getGroup(): PartialMenuItem['group'] {\n    return this.spec.group\n  }\n\n  /**\n   * Set menu item icon\n   * @param icon - menu item icon\n   * @returns menu item builder based on icon provided. See {@link MenuItemBuilder}\n   */\n  icon(icon: React.ComponentType | React.ReactNode): MenuItemBuilder {\n    return this.clone({icon})\n  }\n\n  /**\n   * Get menu item icon\n   * @returns menu item icon. See {@link PartialMenuItem}\n   */\n  getIcon(): PartialMenuItem['icon'] {\n    return this.spec.icon\n  }\n\n  /**\n   * Set menu item parameters\n   * @param params - menu item parameters. See {@link MenuItemParamsType}\n   * @returns menu item builder based on parameters provided. See {@link MenuItemBuilder}\n   */\n  params(params: MenuItemParamsType): MenuItemBuilder {\n    return this.clone({params})\n  }\n\n  /**\n   * Get meny item parameters\n   * @returns menu item parameters. See {@link PartialMenuItem}\n   */\n  getParams(): PartialMenuItem['params'] {\n    return this.spec.params\n  }\n\n  /**\n   * Set menu item to show as action\n   * @param showAsAction - determine if menu item should show as action\n   * @returns menu item builder based on if it should show as action. See {@link MenuItemBuilder}\n   */\n  showAsAction(showAsAction = true): MenuItemBuilder {\n    return this.clone({showAsAction: Boolean(showAsAction)})\n  }\n\n  /**\n   * Check if menu item should show as action\n   * @returns true if menu item should show as action, false if not. See {@link PartialMenuItem}\n   */\n  getShowAsAction(): PartialMenuItem['showAsAction'] {\n    return this.spec.showAsAction\n  }\n\n  /** Serialize menu item builder\n   * @param options - serialization options. See {@link SerializeOptions}\n   * @returns menu item node based on path provided in options. See {@link MenuItem}\n   */\n  serialize(options: SerializeOptions = {path: []}): MenuItem {\n    const {title, action, intent} = this.spec\n    if (!title) {\n      const hint = typeof action === 'string' ? `action: \"${action}\"` : undefined\n      throw new SerializeError(\n        '`title` is required for menu item',\n        options.path,\n        options.index,\n        hint,\n      ).withHelpUrl(HELP_URL.TITLE_REQUIRED)\n    }\n\n    if (!action && !intent) {\n      throw new SerializeError(\n        `\\`action\\` or \\`intent\\` required for menu item with title ${this.spec.title}`,\n        options.path,\n        options.index,\n        `\"${title}\"`,\n      ).withHelpUrl(HELP_URL.ACTION_OR_INTENT_REQUIRED)\n    }\n\n    if (intent && action) {\n      throw new SerializeError(\n        'cannot set both `action` AND `intent`',\n        options.path,\n        options.index,\n        `\"${title}\"`,\n      ).withHelpUrl(HELP_URL.ACTION_AND_INTENT_MUTUALLY_EXCLUSIVE)\n    }\n\n    return {...this.spec, title}\n  }\n\n  /** Clone menu item builder\n   * @param withSpec - menu item options. See {@link PartialMenuItem}\n   * @returns menu item builder based on context and spec provided. See {@link MenuItemBuilder}\n   */\n  clone(withSpec?: PartialMenuItem): MenuItemBuilder {\n    const builder = new MenuItemBuilder(this._context)\n    builder.spec = {...this.spec, ...(withSpec || {})}\n    return builder\n  }\n}\n\n/** @internal */\nexport interface SortMenuItem extends MenuItem {\n  params: {\n    by: SortOrderingItem[]\n  }\n}\n\n/** @internal */\nexport function getOrderingMenuItem(\n  context: StructureContext,\n  {by, title, i18n}: SortOrdering,\n  extendedProjection?: string,\n): MenuItemBuilder {\n  let builder = new MenuItemBuilder(context)\n    .group('sorting')\n    .title(\n      context.i18n.t('default-menu-item.fallback-title', {\n        // note this lives in the `studio` bundle because that one is loaded by default\n        ns: 'studio',\n        replace: {title}, // replaces the `{{title}}` option\n      }),\n    ) // fallback title\n    .icon(SortIcon)\n    .action('setSortOrder')\n    .params({by, extendedProjection})\n\n  if (i18n) {\n    builder = builder.i18n(i18n)\n  }\n\n  return builder\n}\n\n/** @internal */\nexport function getOrderingMenuItemsForSchemaType(\n  context: StructureContext,\n  typeName: SchemaType | string,\n): MenuItemBuilder[] {\n  const {schema} = context\n  const type = typeof typeName === 'string' ? schema.get(typeName) : typeName\n  if (!type || !('orderings' in type)) {\n    return []\n  }\n\n  return (\n    type.orderings ? type.orderings.concat(DEFAULT_ORDERING_OPTIONS) : DEFAULT_ORDERING_OPTIONS\n  ).map((ordering: SortOrdering) =>\n    getOrderingMenuItem(context, ordering, getExtendedProjection(type, ordering.by)),\n  )\n}\n","import {type I18nTextRecord} from 'sanity'\n\nimport {HELP_URL, SerializeError} from './SerializeError'\nimport {type Serializable, type SerializeOptions, type SerializePath} from './StructureNodes'\nimport {type StructureContext} from './types'\n\n/** @internal */\nexport function maybeSerializeMenuItemGroup(\n  item: MenuItemGroup | MenuItemGroupBuilder,\n  index: number,\n  path: SerializePath,\n): MenuItemGroup {\n  return item instanceof MenuItemGroupBuilder ? item.serialize({path, index}) : item\n}\n\n/**\n * Interface for menu item groups\n * @public\n */\nexport interface MenuItemGroup {\n  /** Menu group Id */\n  id: string\n  /** Menu group title */\n  title: string\n  i18n?: I18nTextRecord<'title'>\n}\n\n/**\n * Class for building menu item groups.\n *\n * @public\n */\nexport class MenuItemGroupBuilder implements Serializable<MenuItemGroup> {\n  /** Menu item group ID */\n  protected _id: string\n  /** Menu item group title */\n  protected _title: string\n\n  protected _i18n?: I18nTextRecord<'title'>\n\n  constructor(\n    /**\n     * Structure context. See {@link StructureContext}\n     */\n    protected _context: StructureContext,\n    spec?: MenuItemGroup,\n  ) {\n    this._id = spec ? spec.id : ''\n    this._title = spec ? spec.title : ''\n    this._i18n = spec ? spec.i18n : undefined\n  }\n\n  /**\n   * Set menu item group ID\n   * @param id - menu item group ID\n   * @returns menu item group builder based on ID provided. See {@link MenuItemGroupBuilder}\n   */\n  id(id: string): MenuItemGroupBuilder {\n    return new MenuItemGroupBuilder(this._context, {id, title: this._title, i18n: this._i18n})\n  }\n\n  /**\n   * Get menu item group ID\n   * @returns menu item group ID\n   */\n  getId(): string {\n    return this._id\n  }\n\n  /**\n   * Set menu item group title\n   * @param title - menu item group title\n   * @returns menu item group builder based on title provided. See {@link MenuItemGroupBuilder}\n   */\n  title(title: string): MenuItemGroupBuilder {\n    return new MenuItemGroupBuilder(this._context, {title, id: this._id, i18n: this._i18n})\n  }\n\n  /**\n   * Get menu item group title\n   * @returns menu item group title\n   */\n  getTitle(): string {\n    return this._title\n  }\n\n  /**\n   * Set the i18n key and namespace used to populate the localized title.\n   * @param i18n - object with i18n key and related namespace\n   * @returns menu item group builder based on i18n info provided. See {@link MenuItemGroupBuilder}\n   */\n  i18n(i18n: I18nTextRecord<'title'>): MenuItemGroupBuilder {\n    return new MenuItemGroupBuilder(this._context, {i18n, id: this._id, title: this._title})\n  }\n\n  /**\n   * Get the i18n key and namespace used to populate the localized title.\n   * @returns the i18n key and namespace used to populate the localized title.\n   */\n  getI18n(): I18nTextRecord<'title'> | undefined {\n    return this._i18n\n  }\n\n  /**\n   * Serialize menu item group builder\n   * @param options - serialization options (path). See {@link SerializeOptions}\n   * @returns menu item group based on path provided in options. See {@link MenuItemGroup}\n   */\n  serialize(options: SerializeOptions = {path: []}): MenuItemGroup {\n    const {_id, _title, _i18n} = this\n    if (!_id) {\n      throw new SerializeError(\n        '`id` is required for a menu item group',\n        options.path,\n        options.index,\n        _title,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    if (!_title) {\n      throw new SerializeError(\n        '`title` is required for a menu item group',\n        options.path,\n        _id,\n      ).withHelpUrl(HELP_URL.TITLE_REQUIRED)\n    }\n\n    return {\n      id: _id,\n      title: _title,\n      i18n: _i18n,\n    }\n  }\n}\n","import {SerializeError} from '../SerializeError'\nimport {type SerializePath} from '../StructureNodes'\n\nexport const disallowedPattern = /([^A-Za-z0-9-_.])/\n\nexport function validateId(\n  id: string,\n  parentPath: SerializePath,\n  pathSegment: string | number | undefined,\n): string {\n  if (typeof id !== 'string') {\n    throw new SerializeError(\n      `Structure node id must be of type string, got ${typeof id}`,\n      parentPath,\n      pathSegment,\n    )\n  }\n\n  const [disallowedChar] = id.match(disallowedPattern) || []\n  if (disallowedChar) {\n    throw new SerializeError(\n      `Structure node id cannot contain character \"${disallowedChar}\"`,\n      parentPath,\n      pathSegment,\n    )\n  }\n\n  if (id.startsWith('__edit__')) {\n    throw new SerializeError(\n      `Structure node id cannot start with __edit__`,\n      parentPath,\n      pathSegment,\n    )\n  }\n\n  return id\n}\n","import {camelCase} from 'lodash'\nimport getSlug from 'speakingurl'\n\nimport {disallowedPattern} from './validateId'\n\nexport function getStructureNodeId(title: string, id?: string): string {\n  if (id) {\n    return id\n  }\n\n  const camelCased = camelCase(title)\n\n  return disallowedPattern.test(camelCased) ? camelCase(getSlug(title)) : camelCased\n}\n","import {type I18nTextRecord} from 'sanity'\n\nimport {type IntentChecker} from './Intent'\nimport {maybeSerializeMenuItem, type MenuItem, type MenuItemBuilder} from './MenuItem'\nimport {\n  maybeSerializeMenuItemGroup,\n  type MenuItemGroup,\n  type MenuItemGroupBuilder,\n} from './MenuItemGroup'\nimport {HELP_URL, SerializeError} from './SerializeError'\nimport {\n  type Child,\n  type Serializable,\n  type SerializeOptions,\n  type StructureNode,\n} from './StructureNodes'\nimport {type UserComponent} from './types'\nimport {getStructureNodeId} from './util/getStructureNodeId'\nimport {validateId} from './util/validateId'\n\n/**\n * Interface for component\n *\n * @public\n */\n// TODO: rename to `StructureComponent` since it clashes with React?\nexport interface Component extends StructureNode {\n  /** Component of type {@link UserComponent} */\n  component: UserComponent\n  /** Component child of type {@link Child} */\n  child?: Child\n  /** Component menu items, array of type {@link MenuItem} */\n  menuItems: MenuItem[]\n  /** Component menu item group, array of type {@link MenuItemGroup} */\n  menuItemGroups: MenuItemGroup[]\n  /** Component options */\n  options: {[key: string]: unknown}\n  canHandleIntent?: IntentChecker\n}\n\n/**\n * Interface for component input\n *\n * @public\n */\nexport interface ComponentInput extends StructureNode {\n  /** Component of type {@link UserComponent} */\n  component: UserComponent\n  /** Component child of type {@link Child} */\n  child?: Child\n  /** Component options */\n  options?: {[key: string]: unknown}\n  /** Component menu items. See {@link MenuItem} and {@link MenuItemBuilder}  */\n  menuItems?: (MenuItem | MenuItemBuilder)[]\n  /** Component menu item groups. See {@link MenuItemGroup} and {@link MenuItemGroupBuilder} */\n  menuItemGroups?: (MenuItemGroup | MenuItemGroupBuilder)[]\n}\n\n/**\n * Interface for buildable component\n *\n * @public\n */\nexport interface BuildableComponent extends Partial<StructureNode> {\n  /** Component of type {@link UserComponent} */\n  component?: UserComponent\n  /** Component child of type {@link Child} */\n  child?: Child\n  /** Component options */\n  options?: {[key: string]: unknown}\n  /** Component menu items. See {@link MenuItem} and {@link MenuItemBuilder}  */\n  menuItems?: (MenuItem | MenuItemBuilder)[]\n  /** Component menu item groups. See {@link MenuItemGroup} and {@link MenuItemGroupBuilder} */\n  menuItemGroups?: (MenuItemGroup | MenuItemGroupBuilder)[]\n  canHandleIntent?: IntentChecker\n}\n\n/**\n * Class for building components\n *\n * @public\n */\nexport class ComponentBuilder implements Serializable<Component> {\n  /** component builder option object */\n  protected spec: BuildableComponent\n\n  constructor(spec?: ComponentInput) {\n    this.spec = {options: {}, ...(spec ? spec : {})}\n  }\n\n  /** Set Component ID\n   * @param id - component ID\n   * @returns component builder based on ID provided\n   */\n  id(id: string): ComponentBuilder {\n    return this.clone({id})\n  }\n\n  /** Get ID\n   * @returns ID\n   */\n  getId(): BuildableComponent['id'] {\n    return this.spec.id\n  }\n\n  /** Set Component title\n   * @param title - component title\n   * @returns component builder based on title provided (and ID)\n   */\n  title(title: string): ComponentBuilder {\n    return this.clone({title, id: getStructureNodeId(title, this.spec.id)})\n  }\n\n  /** Get Component title\n   * @returns title\n   */\n  getTitle(): BuildableComponent['title'] {\n    return this.spec.title\n  }\n\n  /** Set the i18n key and namespace used to populate the localized title.\n   * @param i18n - the key and namespaced used to populate the localized title.\n   * @returns component builder based on i18n key and ns provided\n   */\n  i18n(i18n: I18nTextRecord<'title'>): ComponentBuilder {\n    return this.clone({i18n})\n  }\n\n  /** Get i18n key and namespace used to populate the localized title\n   * @returns the i18n key and namespace used to populate the localized title\n   */\n  getI18n(): I18nTextRecord<'title'> | undefined {\n    return this.spec.i18n\n  }\n\n  /** Set Component child\n   * @param child - child component\n   * @returns component builder based on child component provided\n   */\n  child(child: Child): ComponentBuilder {\n    return this.clone({child})\n  }\n\n  /** Get Component child\n   * @returns child component\n   */\n  getChild(): BuildableComponent['child'] {\n    return this.spec.child\n  }\n\n  /** Set component\n   * @param component - user built component\n   * @returns component builder based on component provided\n   */\n  component(component: UserComponent): ComponentBuilder {\n    return this.clone({component})\n  }\n\n  /** Get Component\n   * @returns component\n   */\n  getComponent(): BuildableComponent['component'] {\n    return this.spec.component\n  }\n\n  /** Set Component options\n   * @param options - component options\n   * @returns component builder based on options provided\n   */\n  options(options: {[key: string]: unknown}): ComponentBuilder {\n    return this.clone({options})\n  }\n\n  /** Get Component options\n   * @returns component options\n   */\n  getOptions(): NonNullable<BuildableComponent['options']> {\n    return this.spec.options || {}\n  }\n\n  /** Set Component menu items\n   * @param menuItems - component menu items\n   * @returns component builder based on menuItems provided\n   */\n  menuItems(menuItems: (MenuItem | MenuItemBuilder)[]): ComponentBuilder {\n    return this.clone({menuItems})\n  }\n\n  /** Get Component menu items\n   * @returns menu items\n   */\n  getMenuItems(): BuildableComponent['menuItems'] {\n    return this.spec.menuItems\n  }\n\n  /** Set Component menu item groups\n   * @param menuItemGroups - component menu item groups\n   * @returns component builder based on menuItemGroups provided\n   */\n  menuItemGroups(menuItemGroups: (MenuItemGroup | MenuItemGroupBuilder)[]): ComponentBuilder {\n    return this.clone({menuItemGroups})\n  }\n\n  /** Get Component menu item groups\n   * @returns menu item groups\n   */\n  getMenuItemGroups(): BuildableComponent['menuItemGroups'] {\n    return this.spec.menuItemGroups\n  }\n\n  canHandleIntent(canHandleIntent: IntentChecker): ComponentBuilder {\n    return this.clone({canHandleIntent})\n  }\n\n  /** Serialize component\n   * @param options - serialization options\n   * @returns component object based on path provided in options\n   *\n   */\n  serialize(options: SerializeOptions = {path: []}): Component {\n    const {id, title, child, options: componentOptions, component} = this.spec\n    if (!id) {\n      throw new SerializeError(\n        '`id` is required for `component` structure item',\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    if (!component) {\n      throw new SerializeError(\n        '`component` is required for `component` structure item',\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    return {\n      id: validateId(id, options.path, options.index),\n      title,\n      type: 'component',\n      child,\n      component,\n      canHandleIntent: this.spec.canHandleIntent,\n      options: componentOptions || {},\n      menuItems: (this.spec.menuItems || []).map((item, i) =>\n        maybeSerializeMenuItem(item, i, options.path),\n      ),\n      menuItemGroups: (this.spec.menuItemGroups || []).map((item, i) =>\n        maybeSerializeMenuItemGroup(item, i, options.path),\n      ),\n    }\n  }\n\n  /** Clone component builder (allows for options overriding)\n   * @param withSpec - component builder options\n   * @returns cloned builder\n   */\n  clone(withSpec?: BuildableComponent): ComponentBuilder {\n    const builder = new ComponentBuilder()\n    builder.spec = {...this.spec, ...(withSpec || {})}\n    return builder\n  }\n}\n","import {type SanityClient} from '@sanity/client'\nimport {\n  DEFAULT_STUDIO_CLIENT_OPTIONS,\n  getDraftId,\n  getPublishedId,\n  type SourceClientOptions,\n} from 'sanity'\n\nexport async function resolveTypeForDocument(\n  getClient: (options: SourceClientOptions) => SanityClient,\n  id: string,\n): Promise<string | undefined> {\n  const query = '*[_id in [$documentId, $draftId]]._type'\n  const documentId = getPublishedId(id)\n  const draftId = getDraftId(id)\n\n  const types = await getClient(DEFAULT_STUDIO_CLIENT_OPTIONS).fetch(\n    query,\n    {documentId, draftId},\n    {tag: 'structure.resolve-type'},\n  )\n\n  return types[0]\n}\n","import {kebabCase} from 'lodash'\n\nimport {HELP_URL, SerializeError} from '../SerializeError'\nimport {type Serializable, type SerializeOptions, type SerializePath} from '../StructureNodes'\nimport {type View} from '../types'\nimport {validateId} from '../util/validateId'\nimport {type ComponentViewBuilder} from './ComponentView'\nimport {type FormViewBuilder} from './FormView'\n\n/**\n * Interface for base view\n *\n * @public */\nexport interface BaseView {\n  /** View id */\n  id: string\n  /** View Title */\n  title: string\n  /** View Icon */\n  icon?: React.ComponentType | React.ReactNode\n}\n\n/**\n * Class for building generic views.\n *\n * @public\n */\nexport abstract class GenericViewBuilder<TView extends Partial<BaseView>, ConcreteImpl>\n  implements Serializable<BaseView>\n{\n  /** Generic view option object */\n  protected spec: TView = {} as TView\n\n  /** Set generic view ID\n   * @param id - generic view ID\n   * @returns generic view builder based on ID provided.\n   */\n  id(id: string): ConcreteImpl {\n    return this.clone({id})\n  }\n  /** Get generic view ID\n   * @returns generic view ID\n   */\n  getId(): TView['id'] {\n    return this.spec.id\n  }\n\n  /** Set generic view title\n   * @param title - generic view title\n   * @returns generic view builder based on title provided and (if provided) its ID.\n   */\n  title(title: string): ConcreteImpl {\n    return this.clone({title, id: this.spec.id || kebabCase(title)})\n  }\n\n  /** Get generic view title\n   * @returns generic view title\n   */\n  getTitle(): TView['title'] {\n    return this.spec.title\n  }\n\n  /** Set generic view icon\n   * @param icon - generic view icon\n   * @returns generic view builder based on icon provided.\n   */\n  icon(icon: React.ComponentType | React.ReactNode): ConcreteImpl {\n    return this.clone({icon})\n  }\n\n  /** Get generic view icon\n   * @returns generic view icon\n   */\n  getIcon(): TView['icon'] {\n    return this.spec.icon\n  }\n\n  /** Serialize generic view\n   * @param options - serialization options. See {@link SerializeOptions}\n   * @returns generic view object based on path provided in options. See {@link BaseView}\n   */\n  serialize(options: SerializeOptions = {path: []}): BaseView {\n    const {id, title, icon} = this.spec\n    if (!id) {\n      throw new SerializeError(\n        '`id` is required for view item',\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    if (!title) {\n      throw new SerializeError(\n        '`title` is required for view item',\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.TITLE_REQUIRED)\n    }\n\n    return {\n      id: validateId(id, options.path, options.index),\n      title,\n      icon,\n    }\n  }\n\n  /** Clone generic view builder (allows for options overriding)\n   * @param withSpec - Partial generic view builder options. See {@link BaseView}\n   * @returns Generic view builder.\n   */\n  abstract clone(withSpec?: Partial<BaseView>): ConcreteImpl\n}\n\nfunction isSerializable(view: BaseView | Serializable<BaseView>): view is Serializable<BaseView> {\n  return typeof (view as Serializable<BaseView>).serialize === 'function'\n}\n\n/** @internal */\nexport function maybeSerializeView(\n  item: View | Serializable<View>,\n  index: number,\n  path: SerializePath,\n): View {\n  return isSerializable(item) ? item.serialize({path, index}) : item\n}\n\n/**\n * View builder. See {@link ComponentViewBuilder} and {@link FormViewBuilder}\n *\n * @public\n */\nexport type ViewBuilder = ComponentViewBuilder | FormViewBuilder\n","import {isRecord} from 'sanity'\n\nimport {HELP_URL, SerializeError} from '../SerializeError'\nimport {type SerializeOptions} from '../StructureNodes'\nimport {type UserViewComponent} from '../types'\nimport {type BaseView, GenericViewBuilder} from './View'\n\n/**\n * Interface for component views.\n *\n * @public */\nexport interface ComponentView<TOptions = Record<string, any>> extends BaseView {\n  type: 'component'\n  /** Component view components. See {@link UserViewComponent} */\n  component: UserViewComponent\n  /** Component view options */\n  options: TOptions\n}\n\nconst isComponentSpec = (spec: unknown): spec is ComponentView =>\n  isRecord(spec) && spec.type === 'component'\n\n/**\n * Class for building a component view.\n *\n * @public */\nexport class ComponentViewBuilder extends GenericViewBuilder<\n  Partial<ComponentView>,\n  ComponentViewBuilder\n> {\n  /** Partial Component view option object. See {@link ComponentView} */\n  protected spec: Partial<ComponentView>\n\n  constructor(\n    /**\n     * Component view component or spec\n     * @param componentOrSpec - user view component or partial component view. See {@link UserViewComponent} and {@link ComponentView}\n     */\n    componentOrSpec?: UserViewComponent | Partial<ComponentView>,\n  ) {\n    const spec = isComponentSpec(componentOrSpec) ? {...componentOrSpec} : {options: {}}\n\n    super()\n    this.spec = spec\n\n    const userComponent =\n      typeof componentOrSpec === 'function' ? componentOrSpec : this.spec.component\n\n    if (userComponent) {\n      // Because we're cloning, this'll return a new instance, so grab the spec from it\n      this.spec = this.component(userComponent).spec\n    }\n  }\n\n  /** Set view Component\n   * @param component - component view component. See {@link UserViewComponent}\n   * @returns component view builder based on component view provided. See {@link ComponentViewBuilder}\n   */\n  component(component: UserViewComponent): ComponentViewBuilder {\n    return this.clone({component})\n  }\n\n  /** Get view Component\n   * @returns Partial component view. See {@link ComponentView}\n   */\n  getComponent(): Partial<ComponentView>['component'] {\n    return this.spec.component\n  }\n\n  /** Set view Component options\n   * @param options - component view options\n   * @returns component view builder based on options provided. See {@link ComponentViewBuilder}\n   */\n  options(options: {[key: string]: any}): ComponentViewBuilder {\n    return this.clone({options})\n  }\n\n  /** Get view Component options\n   * @returns component view options. See {@link ComponentView}\n   */\n  getOptions(): ComponentView['options'] {\n    return this.spec.options || {}\n  }\n\n  /** Serialize view Component\n   * @param options - serialization options. See {@link SerializeOptions}\n   * @returns component view based on path provided in options. See {@link ComponentView}\n   *\n   */\n  serialize(options: SerializeOptions = {path: []}): ComponentView {\n    const base = super.serialize(options)\n\n    const component = this.spec.component\n    if (typeof component !== 'function') {\n      throw new SerializeError(\n        '`component` is required and must be a function for `component()` view item',\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.COMPONENT_REQUIRED)\n    }\n\n    return {\n      ...base,\n      component,\n      options: this.spec.options || {},\n      type: 'component',\n    }\n  }\n\n  /** Clone Component view builder (allows for options overriding)\n   * @param withSpec - partial for component view option. See {@link ComponentView}\n   * @returns component view builder. See {@link ComponentViewBuilder}\n   */\n  clone(withSpec?: Partial<ComponentView>): ComponentViewBuilder {\n    const builder = new ComponentViewBuilder()\n    builder.spec = {...this.spec, ...(withSpec || {})}\n    return builder\n  }\n}\n","import {type SerializeOptions} from '../StructureNodes'\nimport {type BaseView, GenericViewBuilder} from './View'\n\n/**\n * Interface for form views.\n *\n * @public */\nexport interface FormView extends BaseView {\n  type: 'form'\n}\n\n/**\n * Class for building a form view.\n *\n * @public */\nexport class FormViewBuilder extends GenericViewBuilder<Partial<BaseView>, FormViewBuilder> {\n  /** Document list options. See {@link FormView} */\n  protected spec: Partial<FormView>\n\n  constructor(spec?: Partial<FormView>) {\n    super()\n    this.spec = {id: 'editor', title: 'Editor', ...(spec ? spec : {})}\n  }\n\n  /**\n   * Serialize Form view builder\n   * @param options - Serialize options. See {@link SerializeOptions}\n   * @returns form view builder based on path provided in options. See {@link FormView}\n   */\n  serialize(options: SerializeOptions = {path: []}): FormView {\n    return {\n      ...super.serialize(options),\n      type: 'form',\n    }\n  }\n\n  /**\n   * Clone Form view builder (allows for options overriding)\n   * @param withSpec - Partial form view builder options. See {@link FormView}\n   * @returns form view builder. See {@link FormViewBuilder}\n   */\n  clone(withSpec?: Partial<FormView>): FormViewBuilder {\n    const builder = new FormViewBuilder()\n    builder.spec = {...this.spec, ...(withSpec || {})}\n    return builder\n  }\n}\n","import {type UserViewComponent} from '../types'\nimport {type ComponentView, ComponentViewBuilder} from './ComponentView'\nimport {type FormView, FormViewBuilder} from './FormView'\n\nexport * from './ComponentView'\nexport * from './FormView'\nexport * from './View'\n\n/** @internal */\nexport const form = (spec?: Partial<FormView>): FormViewBuilder => new FormViewBuilder(spec)\n\n/** @internal */\nexport const component = (\n  componentOrSpec?: UserViewComponent | Partial<ComponentView>,\n): ComponentViewBuilder => new ComponentViewBuilder(componentOrSpec)\n","import {type SchemaType} from '@sanity/types'\nimport {uniq} from 'lodash'\nimport {type I18nTextRecord} from 'sanity'\n\nimport {type ChildResolver} from './ChildResolver'\nimport {HELP_URL, SerializeError} from './SerializeError'\nimport {\n  type Child,\n  type DocumentNode,\n  type EditorNode,\n  type Serializable,\n  type SerializeOptions,\n} from './StructureNodes'\nimport {type StructureContext, type View} from './types'\nimport {getStructureNodeId} from './util/getStructureNodeId'\nimport {resolveTypeForDocument} from './util/resolveTypeForDocument'\nimport {validateId} from './util/validateId'\nimport {form} from './views'\nimport {maybeSerializeView, type ViewBuilder} from './views/View'\n\nconst createDocumentChildResolver =\n  ({resolveDocumentNode, getClient}: StructureContext): ChildResolver =>\n  async (itemId, {params, path}) => {\n    let type = params.type\n\n    const parentPath = path.slice(0, path.length - 1)\n    const currentSegment = path[path.length - 1]\n\n    if (!type) {\n      type = await resolveTypeForDocument(getClient, itemId)\n    }\n\n    if (!type) {\n      throw new SerializeError(\n        `Failed to resolve document, and no type provided in parameters.`,\n        parentPath,\n        currentSegment,\n      )\n    }\n\n    return resolveDocumentNode({documentId: itemId, schemaType: type})\n  }\n\n/**\n * Interface for options of Partial Documents. See {@link PartialDocumentNode}\n *\n * @public */\nexport interface DocumentOptions {\n  /** Document Id */\n  id: string\n  /** Document Type */\n  type: string\n  /** Document Template */\n  template?: string\n  /** Template parameters */\n  templateParameters?: Record<string, unknown>\n}\n\n/**\n * Interface for partial document (focused on the document pane)\n *\n * @public */\nexport interface PartialDocumentNode {\n  /** Document Id */\n  id?: string\n  /** Document title */\n  title?: string\n  /** I18n key and namespace used to populate the localized title */\n  i18n?: I18nTextRecord<'title'>\n  /** Document children of type {@link Child} */\n  child?: Child\n  /**\n   * Views for the document pane. See {@link ViewBuilder} and {@link View}\n   */\n  views?: (View | ViewBuilder)[]\n  /**\n   * Document options. See {@link DocumentOptions}\n   */\n  options?: Partial<DocumentOptions>\n}\n\n/**\n * A `DocumentBuilder` is used to build a document node.\n *\n * @public */\nexport class DocumentBuilder implements Serializable<DocumentNode> {\n  /** Component builder option object See {@link PartialDocumentNode} */\n  protected spec: PartialDocumentNode\n\n  constructor(\n    /**\n     * Structure context. See {@link StructureContext}\n     */\n    protected _context: StructureContext,\n    spec?: PartialDocumentNode,\n  ) {\n    this.spec = spec ? spec : {}\n  }\n\n  /** Set Document Builder ID\n   * @param id - document builder ID\n   * @returns document builder based on ID provided. See {@link DocumentBuilder}\n   */\n  id(id: string): DocumentBuilder {\n    return this.clone({id})\n  }\n\n  /** Get Document Builder ID\n   * @returns document ID. See {@link PartialDocumentNode}\n   */\n  getId(): PartialDocumentNode['id'] {\n    return this.spec.id\n  }\n\n  /** Set Document title\n   * @param title - document title\n   * @returns document builder based on title provided (and ID). See {@link DocumentBuilder}\n   */\n  title(title: string): DocumentBuilder {\n    return this.clone({title, id: getStructureNodeId(title, this.spec.id)})\n  }\n\n  /** Get Document title\n   * @returns document title. See {@link PartialDocumentNode}\n   */\n  getTitle(): PartialDocumentNode['title'] {\n    return this.spec.title\n  }\n\n  /** Set the i18n key and namespace used to populate the localized title.\n   * @param i18n - the key and namespaced used to populate the localized title.\n   * @returns component builder based on i18n key and ns provided\n   */\n  i18n(i18n: I18nTextRecord<'title'>): DocumentBuilder {\n    return this.clone({i18n})\n  }\n\n  /** Get i18n key and namespace used to populate the localized title\n   * @returns the i18n key and namespace used to populate the localized title\n   */\n  getI18n(): I18nTextRecord<'title'> | undefined {\n    return this.spec.i18n\n  }\n\n  /** Set Document child\n   * @param child - document child\n   * @returns document builder based on child provided. See {@link DocumentBuilder}\n   */\n  child(child: Child): DocumentBuilder {\n    return this.clone({child})\n  }\n\n  /** Get Document child\n   * @returns document child. See {@link PartialDocumentNode}\n   */\n  getChild(): PartialDocumentNode['child'] {\n    return this.spec.child\n  }\n\n  /** Set Document ID\n   * @param documentId - document ID\n   * @returns document builder with document based on ID provided. See {@link DocumentBuilder}\n   */\n  documentId(documentId: string): DocumentBuilder {\n    // Let's try to be a bit helpful and assign an ID from document ID if none is specified\n    const paneId = this.spec.id || documentId\n    return this.clone({\n      id: paneId,\n      options: {\n        ...(this.spec.options || {}),\n        id: documentId,\n      },\n    })\n  }\n\n  /** Get Document ID\n   * @returns document ID. See {@link DocumentOptions}\n   */\n  getDocumentId(): Partial<DocumentOptions>['id'] {\n    return this.spec.options?.id\n  }\n\n  /** Set Document Type\n   * @param documentType - document type\n   * @returns document builder with document based on type provided. See {@link DocumentBuilder}\n   */\n  schemaType(documentType: SchemaType | string): DocumentBuilder {\n    return this.clone({\n      options: {\n        ...(this.spec.options || {}),\n        type: typeof documentType === 'string' ? documentType : documentType.name,\n      },\n    })\n  }\n\n  /** Get Document Type\n   * @returns document type. See {@link DocumentOptions}\n   */\n  getSchemaType(): Partial<DocumentOptions>['type'] {\n    return this.spec.options?.type\n  }\n\n  /** Set Document Template\n   * @param templateId - document template ID\n   * @param parameters - document template parameters\n   * @returns document builder with document based on template provided. See {@link DocumentBuilder}\n   */\n  initialValueTemplate(templateId: string, parameters?: Record<string, unknown>): DocumentBuilder {\n    return this.clone({\n      options: {\n        ...(this.spec.options || {}),\n        template: templateId,\n        templateParameters: parameters,\n      },\n    })\n  }\n\n  /** Get Document Template\n   * @returns document template. See {@link DocumentOptions}\n   */\n  getInitialValueTemplate(): Partial<DocumentOptions>['template'] {\n    return this.spec.options?.template\n  }\n\n  /** Get Document's initial value Template parameters\n   * @returns document template parameters. See {@link DocumentOptions}\n   */\n  getInitialValueTemplateParameters(): Partial<DocumentOptions>['templateParameters'] {\n    return this.spec.options?.templateParameters\n  }\n\n  /** Set Document views\n   * @param views - document views. See {@link ViewBuilder} and {@link View}\n   * @returns document builder with document based on views provided. See {@link DocumentBuilder}\n   */\n  views(views: (View | ViewBuilder)[]): DocumentBuilder {\n    return this.clone({views})\n  }\n\n  /** Get Document views\n   * @returns document views. See {@link ViewBuilder} and {@link View}\n   */\n  getViews(): (View | ViewBuilder)[] {\n    return this.spec.views || []\n  }\n\n  /** Serialize Document builder\n   * @param options - serialization options. See {@link SerializeOptions}\n   * @returns document node based on path, index and hint provided in options. See {@link DocumentNode}\n   */\n  serialize({path = [], index, hint}: SerializeOptions = {path: []}): DocumentNode {\n    const urlId = path[index || path.length - 1]\n\n    // Try to grab document ID / editor ID from URL if not defined\n    const id = this.spec.id || (urlId && `${urlId}`) || ''\n    const options: Partial<DocumentOptions> = {\n      id,\n      type: undefined,\n      template: undefined,\n      templateParameters: undefined,\n      ...this.spec.options,\n    }\n\n    if (typeof id !== 'string' || !id) {\n      throw new SerializeError(\n        '`id` is required for document nodes',\n        path,\n        index,\n        hint,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    if (!options || !options.id) {\n      throw new SerializeError(\n        'document id (`id`) is required for document nodes',\n        path,\n        id,\n        hint,\n      ).withHelpUrl(HELP_URL.DOCUMENT_ID_REQUIRED)\n    }\n\n    if (!options || !options.type) {\n      throw new SerializeError(\n        'document type (`schemaType`) is required for document nodes',\n        path,\n        id,\n        hint,\n      )\n    }\n\n    const views = (this.spec.views && this.spec.views.length > 0 ? this.spec.views : [form()]).map(\n      (item, i) => maybeSerializeView(item, i, path),\n    )\n\n    const viewIds = views.map((view) => view.id)\n    const dupes = uniq(viewIds.filter((viewId, i) => viewIds.includes(viewId, i + 1)))\n    if (dupes.length > 0) {\n      throw new SerializeError(\n        `document node has views with duplicate IDs: ${dupes.join(',  ')}`,\n        path,\n        id,\n        hint,\n      )\n    }\n\n    return {\n      ...this.spec,\n      child: this.spec.child || createDocumentChildResolver(this._context),\n      id: validateId(id, path, index),\n      type: 'document',\n      options: getDocumentOptions(options),\n      views,\n    }\n  }\n\n  /** Clone Document builder\n   * @param withSpec - partial document node specification used to extend the cloned builder. See {@link PartialDocumentNode}\n   * @returns document builder based on context and spec provided. See {@link DocumentBuilder}\n   */\n  clone(withSpec: PartialDocumentNode = {}): DocumentBuilder {\n    const builder = new DocumentBuilder(this._context)\n    const options = {...(this.spec.options || {}), ...(withSpec.options || {})}\n    builder.spec = {...this.spec, ...withSpec, options}\n    return builder\n  }\n}\n\nfunction getDocumentOptions(spec: Partial<DocumentOptions>): DocumentOptions {\n  const opts: DocumentOptions = {\n    id: spec.id || '',\n    type: spec.type || '*',\n  }\n\n  if (spec.template) {\n    opts.template = spec.template\n  }\n\n  if (spec.templateParameters) {\n    opts.templateParameters = spec.templateParameters\n  }\n\n  return opts\n}\n\n/** @internal */\nexport function documentFromEditor(context: StructureContext, spec?: EditorNode): DocumentBuilder {\n  let doc = spec?.type\n    ? // Use user-defined document fragment as base if possible\n      context.resolveDocumentNode({schemaType: spec.type})\n    : // Fall back to plain old document builder\n      new DocumentBuilder(context)\n\n  if (!spec) return doc\n\n  const {id, type, template, templateParameters} = spec.options\n  doc = doc.id(spec.id).documentId(id)\n\n  if (type) {\n    doc = doc.schemaType(type)\n  }\n  if (template) {\n    doc = doc.initialValueTemplate(template, templateParameters)\n  }\n  if (spec.child) {\n    doc = doc.child(spec.child)\n  }\n\n  return doc\n}\n\n/** @internal */\nexport function documentFromEditorWithInitialValue(\n  {resolveDocumentNode, templates}: StructureContext,\n  templateId: string,\n  parameters?: Record<string, unknown>,\n): DocumentBuilder {\n  const template = templates.find((t) => t.id === templateId)\n\n  if (!template) {\n    throw new Error(`Template with ID \"${templateId}\" not defined`)\n  }\n\n  return resolveDocumentNode({schemaType: template.schemaType}).initialValueTemplate(\n    templateId,\n    parameters,\n  )\n}\n","import {AddIcon} from '@sanity/icons'\nimport {type InitialValueTemplateItem} from 'sanity'\n\nimport {type BaseIntentParams, type IntentParams} from './Intent'\nimport {type MenuItem, MenuItemBuilder} from './MenuItem'\nimport {HELP_URL, SerializeError} from './SerializeError'\nimport {type Serializable, type SerializeOptions, type SerializePath} from './StructureNodes'\nimport {type StructureContext} from './types'\n\n/**\n * A `InitialValueTemplateItemBuilder` is used to build a document node with an initial value set.\n *\n * @public\n */\nexport class InitialValueTemplateItemBuilder implements Serializable<InitialValueTemplateItem> {\n  /** Initial Value template item option object. See {@link InitialValueTemplateItem} */\n  protected spec: Partial<InitialValueTemplateItem>\n\n  constructor(\n    /**\n     * Structure context. See {@link StructureContext}\n     */\n    protected _context: StructureContext,\n    spec?: Partial<InitialValueTemplateItem>,\n  ) {\n    this.spec = spec ? spec : {}\n  }\n\n  /** Set initial value template item builder ID\n   * @param id - initial value template item ID\n   * @returns initial value template item based on ID provided. See {@link InitialValueTemplateItemBuilder}\n   */\n  id(id: string): InitialValueTemplateItemBuilder {\n    return this.clone({id})\n  }\n\n  /** Get initial value template item builder ID\n   * @returns initial value template item ID. See {@link InitialValueTemplateItem}\n   */\n  getId(): Partial<InitialValueTemplateItem>['id'] {\n    return this.spec.id\n  }\n\n  /** Set initial value template item title\n   * @param title - initial value template item title\n   * @returns initial value template item based on title provided. See {@link InitialValueTemplateItemBuilder}\n   */\n  title(title: string): InitialValueTemplateItemBuilder {\n    return this.clone({title})\n  }\n\n  /** Get initial value template item title\n   * @returns initial value template item title. See {@link InitialValueTemplateItem}\n   */\n  getTitle(): Partial<InitialValueTemplateItem>['title'] {\n    return this.spec.title\n  }\n\n  /** Set initial value template item description\n   * @param description - initial value template item description\n   * @returns initial value template item builder based on description provided. See {@link InitialValueTemplateItemBuilder}\n   */\n  description(description: string): InitialValueTemplateItemBuilder {\n    return this.clone({description})\n  }\n\n  /** Get initial value template item description\n   * @returns initial value template item description. See {@link InitialValueTemplateItem}\n   */\n  getDescription(): Partial<InitialValueTemplateItem>['description'] {\n    return this.spec.description\n  }\n\n  /** Set initial value template ID\n   * @param templateId - initial value template item template ID\n   * @returns initial value template item based builder on template ID provided. See {@link InitialValueTemplateItemBuilder}\n   */\n  templateId(templateId: string): InitialValueTemplateItemBuilder {\n    // Let's try to be a bit helpful and assign an ID from template ID if none is specified\n    const paneId = this.spec.id || templateId\n    return this.clone({\n      id: paneId,\n      templateId,\n    })\n  }\n\n  /** Get initial value template item template ID\n   * @returns initial value template item ID. See {@link InitialValueTemplateItem}\n   */\n  getTemplateId(): Partial<InitialValueTemplateItem>['templateId'] {\n    return this.spec.templateId\n  }\n\n  /** Get initial value template item template parameters\n   * @param parameters - initial value template item parameters\n   * @returns initial value template item builder based on parameters provided. See {@link InitialValueTemplateItemBuilder}\n   */\n  parameters(parameters: {[key: string]: any}): InitialValueTemplateItemBuilder {\n    return this.clone({parameters})\n  }\n\n  /** Get initial value template item template parameters\n   * @returns initial value template item parameters. See {@link InitialValueTemplateItem}\n   */\n  getParameters(): Partial<InitialValueTemplateItem>['parameters'] {\n    return this.spec.parameters\n  }\n\n  /** Serialize initial value template item\n   * @param options - serialization options. See {@link SerializeOptions}\n   * @returns initial value template item object based on the path, index and hint provided in options. See {@link InitialValueTemplateItem}\n   */\n  serialize({path = [], index, hint}: SerializeOptions = {path: []}): InitialValueTemplateItem {\n    const {spec, _context} = this\n    const {templates} = _context\n\n    if (typeof spec.id !== 'string' || !spec.id) {\n      throw new SerializeError(\n        '`id` is required for initial value template item nodes',\n        path,\n        index,\n        hint,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    if (!spec.templateId) {\n      throw new SerializeError(\n        'template id (`templateId`) is required for initial value template item nodes',\n        path,\n        spec.id,\n        hint,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    const template = templates.find((t) => t.id === spec.templateId)\n\n    if (!template) {\n      throw new SerializeError(\n        'template id (`templateId`) is required for initial value template item nodes',\n        path,\n        spec.id,\n        hint,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    return {\n      id: spec.id,\n      templateId: spec.id,\n      schemaType: template.schemaType,\n      type: 'initialValueTemplateItem',\n      description: spec.description || template.description,\n      title: spec.title || template.title,\n      subtitle: spec.subtitle,\n      icon: spec.icon || template.icon,\n      initialDocumentId: spec.initialDocumentId,\n      parameters: spec.parameters,\n    }\n  }\n\n  /** Clone generic view builder (allows for options overriding)\n   * @param withSpec - initial value template item builder options. See {@link InitialValueTemplateItemBuilder}\n   * @returns initial value template item builder based on the context and options provided. See {@link InitialValueTemplateItemBuilder}\n   */\n  clone(withSpec: Partial<InitialValueTemplateItem> = {}): InitialValueTemplateItemBuilder {\n    const builder = new InitialValueTemplateItemBuilder(this._context)\n    builder.spec = {...this.spec, ...withSpec}\n    return builder\n  }\n}\n\n/** @internal */\nexport function defaultInitialValueTemplateItems(\n  context: StructureContext,\n): InitialValueTemplateItemBuilder[] {\n  const {schema, getStructureBuilder, templates} = context\n\n  // Sort templates by their schema type, in order or definition\n  const typeNames = schema.getTypeNames()\n  const ordered = templates\n    // Don't list templates that require parameters\n    // TODO: this should use the new-document template items instead maybe?\n    .filter((tpl) => !tpl.parameters?.length)\n    .sort((a, b) => typeNames.indexOf(a.schemaType) - typeNames.indexOf(b.schemaType))\n\n  // Create actual template items out of the templates\n  return ordered.map((tpl) => getStructureBuilder().initialValueTemplateItem(tpl.id))\n}\n\n/** @internal */\nexport function maybeSerializeInitialValueTemplateItem(\n  item: InitialValueTemplateItem | InitialValueTemplateItemBuilder,\n  index: number,\n  path: SerializePath,\n): InitialValueTemplateItem {\n  return item instanceof InitialValueTemplateItemBuilder ? item.serialize({path, index}) : item\n}\n\n/** @internal */\nexport function menuItemsFromInitialValueTemplateItems(\n  context: StructureContext,\n  templateItems: InitialValueTemplateItem[],\n): MenuItem[] {\n  const {schema, templates} = context\n  return templateItems.map((item) => {\n    const template = templates.find((t) => t.id === item.templateId)\n    const title = item.title || template?.title || 'Create'\n\n    const params: BaseIntentParams = {}\n    if (template && template.schemaType) {\n      params.type = template.schemaType\n    }\n\n    if (item.templateId) {\n      params.template = item.templateId\n    }\n\n    const intentParams: IntentParams = item.parameters ? [params, item.parameters] : params\n    const schemaType = template && schema.get(template.schemaType)\n\n    const i18n = item.i18n || template?.i18n\n\n    let builder = new MenuItemBuilder(context)\n      .title(title)\n      .icon((template && template.icon) || schemaType?.icon || AddIcon)\n      .intent({type: 'create', params: intentParams})\n\n    if (i18n) {\n      builder = builder.i18n(i18n)\n    }\n\n    return builder.serialize()\n  })\n}\n","import {type SearchParam} from 'sanity/router'\n\nimport {getTypeNamesFromFilter, type PartialDocumentList} from './DocumentList'\nimport {type StructureNode} from './StructureNodes'\n\n/**\n * Intent parameters (json)\n *\n * @public\n */\nexport type IntentJsonParams = {[key: string]: any}\n\n/**\n * Base intent parameters\n *\n * @public\n * @todo dedupe with core\n */\nexport interface BaseIntentParams {\n  /**\n   * Document schema type name to create/edit.\n   * Required for `create` intents, optional for `edit` (but encouraged, safer and faster)\n   */\n  type?: string\n\n  /**\n   * ID of the document to create/edit.\n   * Required for `edit` intents, optional for `create`.\n   */\n  id?: string\n\n  /**\n   * Name (ID) of initial value template to use for `create` intent. Optional.\n   */\n  template?: string\n\n  /**\n   * Experimental field path\n   *\n   * @beta\n   * @experimental\n   * @hidden\n   */\n  path?: string\n\n  /**\n   * Optional \"mode\" to use for edit intent.\n   * Known modes are `structure` and `presentation`.\n   */\n  mode?: string\n\n  /**\n   * Arbitrary/custom parameters are generally discouraged - try to keep them to a minimum,\n   * or use `payload` (arbitrary JSON-serializable object) instead.\n   */\n  [key: string]: string | undefined\n}\n\n/** @internal */\nexport const DEFAULT_INTENT_HANDLER = Symbol('Document type list canHandleIntent')\n\n/**\n * Intent parameters\n * See {@link router.BaseIntentParams} and {@link router.IntentJsonParams}\n *\n * @public\n */\nexport type IntentParams = BaseIntentParams | [BaseIntentParams, IntentJsonParams]\n\n/**\n * Interface for intents\n * @public */\n// TODO: intents should be unified somewhere\nexport interface Intent {\n  /** Intent type */\n  type: string\n  /** Intent parameters. See {@link IntentParams}\n   */\n  params?: IntentParams\n\n  searchParams?: SearchParam[]\n}\n\n/**\n * Interface for intent checker\n *\n * @public\n */\nexport interface IntentChecker {\n  (\n    /** Intent name */\n    intentName: string,\n    /** Intent checker parameter */\n    params: {[key: string]: any},\n    /** Structure context. See {@link StructureNode} */\n    context: {pane: StructureNode; index: number},\n  ): boolean\n  /** intent checker identify */\n  identity?: symbol\n}\n\n/** @internal */\nexport const defaultIntentChecker: IntentChecker = (intentName, params, {pane}): boolean => {\n  const isEdit = intentName === 'edit'\n  const isCreate = intentName === 'create'\n  const typedSpec = pane as PartialDocumentList\n  const paneFilter = typedSpec.options?.filter || ''\n  const paneParams = typedSpec.options?.params || {}\n  const typeNames = typedSpec.schemaTypeName\n    ? [typedSpec.schemaTypeName]\n    : getTypeNamesFromFilter(paneFilter, paneParams)\n\n  const initialValueTemplates = typedSpec.initialValueTemplates || []\n\n  if (isCreate && params.template) {\n    return initialValueTemplates.some((tpl) => tpl.templateId === params.template)\n  }\n\n  return (\n    (isEdit && params.id && typeNames.includes(params.type)) ||\n    (isCreate && typeNames.includes(params.type))\n  )\n}\n\ndefaultIntentChecker.identity = DEFAULT_INTENT_HANDLER\n","export const layoutOptions = ['default', 'card', 'media', 'detail', 'block']\n","import {type I18nTextRecord, type InitialValueTemplateItem, type PreviewLayoutKey} from 'sanity'\n\nimport {\n  type InitialValueTemplateItemBuilder,\n  maybeSerializeInitialValueTemplateItem,\n} from './InitialValueTemplateItem'\nimport {defaultIntentChecker, type IntentChecker} from './Intent'\nimport {layoutOptions} from './Layout'\nimport {maybeSerializeMenuItem, type MenuItem, type MenuItemBuilder} from './MenuItem'\nimport {\n  maybeSerializeMenuItemGroup,\n  type MenuItemGroup,\n  type MenuItemGroupBuilder,\n} from './MenuItemGroup'\nimport {SerializeError} from './SerializeError'\nimport {\n  type Child,\n  type Serializable,\n  type SerializeOptions,\n  type StructureNode,\n} from './StructureNodes'\nimport {getStructureNodeId} from './util/getStructureNodeId'\nimport {validateId} from './util/validateId'\n\nfunction noChildResolver() {\n  return undefined\n}\n\n/** @internal */\nexport const shallowIntentChecker: IntentChecker = (intentName, params, {pane, index}): boolean => {\n  return index <= 1 && defaultIntentChecker(intentName, params, {pane, index})\n}\n\n/**\n * Interface for list display options\n *\n * @public */\nexport interface ListDisplayOptions {\n  /** Check if list display should show icons */\n  showIcons?: boolean\n}\n\n/**\n * Interface for base generic list\n *\n * @public\n */\nexport interface BaseGenericList extends StructureNode {\n  /** List layout key. */\n  defaultLayout?: PreviewLayoutKey\n  /** Can handle intent. See {@link IntentChecker} */\n  canHandleIntent?: IntentChecker\n  /** List display options. See {@link ListDisplayOptions} */\n  displayOptions?: ListDisplayOptions\n  /** List child. See {@link Child} */\n  child: Child\n  /** List initial values array. See {@link InitialValueTemplateItem} and {@link InitialValueTemplateItemBuilder} */\n  initialValueTemplates?: (InitialValueTemplateItem | InitialValueTemplateItemBuilder)[]\n}\n\n/**\n * Interface for generic list\n *\n * @public\n */\n// \"POJO\"/verbatim-version - end result\nexport interface GenericList extends BaseGenericList {\n  /** List type */\n  type: string\n  /** List menu items array. See {@link MenuItem} */\n  menuItems: MenuItem[]\n  /** List menu item groups array. See {@link MenuItemGroup} */\n  menuItemGroups: MenuItemGroup[]\n}\n\n/**\n * Interface for buildable generic list\n *\n * @public\n */\n// Used internally in builder classes to make everything optional\nexport interface BuildableGenericList extends Partial<BaseGenericList> {\n  /** List menu items array. See {@link MenuItem} and {@link MenuItemBuilder} */\n  menuItems?: (MenuItem | MenuItemBuilder)[]\n  /** List menu items groups array. See {@link MenuItemGroup} and {@link MenuItemGroupBuilder} */\n  menuItemGroups?: (MenuItemGroup | MenuItemGroupBuilder)[]\n}\n\n/**\n * Interface for generic list input\n * Allows builders and only requires things not inferrable\n *\n * @public */\n// Input version, allows builders and only requires things not inferrable\nexport interface GenericListInput extends StructureNode {\n  /** Input id */\n  id: string\n  /** Input title */\n  title: string\n  /** Input menu items groups. See {@link MenuItem} and {@link MenuItemBuilder} */\n  menuItems?: (MenuItem | MenuItemBuilder)[]\n  /** Input menu items groups. See {@link MenuItemGroup} and {@link MenuItemGroupBuilder} */\n  menuItemGroups?: (MenuItemGroup | MenuItemGroupBuilder)[]\n  /** Input initial value array. See {@link InitialValueTemplateItem} and {@link InitialValueTemplateItemBuilder} */\n  initialValueTemplates?: (InitialValueTemplateItem | InitialValueTemplateItemBuilder)[]\n  /** Input default layout. */\n  defaultLayout?: PreviewLayoutKey\n  /** If input can handle intent. See {@link IntentChecker} */\n  canHandleIntent?: IntentChecker\n  /** Input child of type {@link Child} */\n  child?: Child\n}\n\n/**\n * Class for building generic lists\n *\n * @public\n */\nexport abstract class GenericListBuilder<TList extends BuildableGenericList, ConcreteImpl>\n  implements Serializable<GenericList>\n{\n  /** Check if initial value templates are set */\n  protected initialValueTemplatesSpecified = false\n  /** Generic list option object */\n  protected spec: TList = {} as TList\n\n  /** Set generic list ID\n   * @param id - generic list ID\n   * @returns generic list builder based on ID provided.\n   */\n  id(id: string): ConcreteImpl {\n    return this.clone({id})\n  }\n\n  /** Get generic list ID\n   * @returns generic list ID\n   */\n  getId(): TList['id'] {\n    return this.spec.id\n  }\n\n  /** Set generic list title\n   * @param title - generic list title\n   * @returns generic list builder based on title and ID provided.\n   */\n  title(title: string): ConcreteImpl {\n    return this.clone({title, id: getStructureNodeId(title, this.spec.id)})\n  }\n\n  /** Get generic list title\n   * @returns generic list title\n   */\n  getTitle(): TList['title'] {\n    return this.spec.title\n  }\n\n  /** Set the i18n key and namespace used to populate the localized title.\n   * @param i18n - the key and namespaced used to populate the localized title.\n   * @returns component builder based on i18n key and ns provided\n   */\n  i18n(i18n: I18nTextRecord<'title'>): ConcreteImpl {\n    return this.clone({i18n})\n  }\n\n  /** Get i18n key and namespace used to populate the localized title\n   * @returns the i18n key and namespace used to populate the localized title\n   */\n  getI18n(): TList['i18n'] {\n    return this.spec.i18n\n  }\n\n  /** Set generic list layout\n   * @param defaultLayout - generic list layout key.\n   * @returns generic list builder based on layout provided.\n   */\n  defaultLayout(defaultLayout: PreviewLayoutKey): ConcreteImpl {\n    return this.clone({defaultLayout})\n  }\n\n  /** Get generic list layout\n   * @returns generic list layout\n   */\n  getDefaultLayout(): TList['defaultLayout'] {\n    return this.spec.defaultLayout\n  }\n\n  /** Set generic list menu items\n   * @param menuItems - generic list menu items. See {@link MenuItem} and {@link MenuItemBuilder}\n   * @returns generic list builder based on menu items provided.\n   */\n  menuItems(menuItems: (MenuItem | MenuItemBuilder)[] | undefined): ConcreteImpl {\n    return this.clone({menuItems})\n  }\n\n  /** Get generic list menu items\n   * @returns generic list menu items\n   */\n  getMenuItems(): TList['menuItems'] {\n    return this.spec.menuItems\n  }\n\n  /** Set generic list menu item groups\n   * @param menuItemGroups - generic list menu item groups. See {@link MenuItemGroup} and {@link MenuItemGroupBuilder}\n   * @returns generic list builder based on menu item groups provided.\n   */\n  menuItemGroups(menuItemGroups: (MenuItemGroup | MenuItemGroupBuilder)[]): ConcreteImpl {\n    return this.clone({menuItemGroups})\n  }\n\n  /** Get generic list menu item groups\n   * @returns generic list menu item groups\n   */\n  getMenuItemGroups(): TList['menuItemGroups'] {\n    return this.spec.menuItemGroups\n  }\n\n  /** Set generic list child\n   * @param child - generic list child. See {@link Child}\n   * @returns generic list builder based on child provided (clone).\n   */\n  child(child: Child): ConcreteImpl {\n    return this.clone({child})\n  }\n\n  /** Get generic list child\n   * @returns generic list child\n   */\n  getChild(): TList['child'] {\n    return this.spec.child\n  }\n\n  /** Set generic list can handle intent\n   * @param canHandleIntent - generic list intent checker. See {@link IntentChecker}\n   * @returns generic list builder based on can handle intent provided.\n   */\n  canHandleIntent(canHandleIntent?: IntentChecker): ConcreteImpl {\n    return this.clone({canHandleIntent})\n  }\n\n  /** Get generic list can handle intent\n   * @returns generic list can handle intent\n   */\n  getCanHandleIntent(): TList['canHandleIntent'] {\n    return this.spec.canHandleIntent\n  }\n\n  /** Set generic list display options\n   * @param enabled - allow / disallow for showing icons\n   * @returns generic list builder based on display options (showIcons) provided.\n   */\n  showIcons(enabled = true): ConcreteImpl {\n    return this.clone({\n      displayOptions: {...(this.spec.displayOptions || {}), showIcons: enabled},\n    })\n  }\n\n  /** Get generic list display options\n   * @returns generic list display options (specifically showIcons)\n   */\n  getShowIcons(): boolean | undefined {\n    return this.spec.displayOptions ? this.spec.displayOptions.showIcons : undefined\n  }\n\n  /** Set generic list initial value templates\n   * @param templates - generic list initial value templates. See {@link InitialValueTemplateItemBuilder}\n   * @returns generic list builder based on templates provided.\n   */\n  initialValueTemplates(\n    templates:\n      | InitialValueTemplateItem\n      | InitialValueTemplateItemBuilder\n      | Array<InitialValueTemplateItem | InitialValueTemplateItemBuilder>,\n  ): ConcreteImpl {\n    this.initialValueTemplatesSpecified = true\n    return this.clone({initialValueTemplates: Array.isArray(templates) ? templates : [templates]})\n  }\n\n  /** Get generic list initial value templates\n   * @returns generic list initial value templates\n   */\n  getInitialValueTemplates(): TList['initialValueTemplates'] {\n    return this.spec.initialValueTemplates\n  }\n\n  /** Serialize generic list\n   * @param options - serialization options. See {@link SerializeOptions}\n   * @returns generic list object based on path provided in options. See {@link GenericList}\n   */\n  serialize(options: SerializeOptions = {path: []}): GenericList {\n    const id = this.spec.id || ''\n    const path = options.path\n\n    const defaultLayout = this.spec.defaultLayout\n    if (defaultLayout && !layoutOptions.includes(defaultLayout)) {\n      throw new SerializeError(\n        `\\`layout\\` must be one of ${layoutOptions.map((item) => `\"${item}\"`).join(', ')}`,\n        path,\n        id || options.index,\n        this.spec.title,\n      )\n    }\n\n    const initialValueTemplates = (this.spec.initialValueTemplates || []).map((item, i) =>\n      maybeSerializeInitialValueTemplateItem(item, i, path),\n    )\n\n    return {\n      id: validateId(id, options.path, id || options.index),\n      title: this.spec.title,\n      i18n: this.spec.i18n,\n      type: 'genericList',\n      defaultLayout,\n      child: this.spec.child || noChildResolver,\n      canHandleIntent: this.spec.canHandleIntent || shallowIntentChecker,\n      displayOptions: this.spec.displayOptions,\n      initialValueTemplates,\n      menuItems: (this.spec.menuItems || []).map((item, i) =>\n        maybeSerializeMenuItem(item, i, path),\n      ),\n      menuItemGroups: (this.spec.menuItemGroups || []).map((item, i) =>\n        maybeSerializeMenuItemGroup(item, i, path),\n      ),\n    }\n  }\n\n  /** Clone generic list builder (allows for options overriding)\n   * @param _withSpec - generic list options.\n   * @returns generic list builder.\n   */\n  abstract clone(_withSpec?: object): ConcreteImpl\n}\n","import {generateHelpUrl} from '@sanity/generate-help-url'\nimport {AddIcon} from '@sanity/icons'\nimport {type SchemaType, type SortOrderingItem} from '@sanity/types'\nimport {DEFAULT_STUDIO_CLIENT_OPTIONS, type InitialValueTemplateItem} from 'sanity'\n\nimport {type ChildResolver, type ChildResolverOptions, type ItemChild} from './ChildResolver'\nimport {DocumentBuilder} from './Document'\nimport {\n  type BuildableGenericList,\n  type GenericList,\n  GenericListBuilder,\n  type GenericListInput,\n} from './GenericList'\nimport {HELP_URL, SerializeError} from './SerializeError'\nimport {type Child, type SerializeOptions} from './StructureNodes'\nimport {type StructureContext} from './types'\nimport {resolveTypeForDocument} from './util/resolveTypeForDocument'\n\nconst validateFilter = (spec: PartialDocumentList, options: SerializeOptions) => {\n  const filter = spec.options?.filter.trim() || ''\n\n  if (['*', '{'].includes(filter[0])) {\n    throw new SerializeError(\n      `\\`filter\\` cannot start with \\`${filter[0]}\\` - looks like you are providing a query, not a filter`,\n      options.path,\n      spec.id,\n      spec.title,\n    ).withHelpUrl(HELP_URL.QUERY_PROVIDED_FOR_FILTER)\n  }\n\n  return filter\n}\n\nconst createDocumentChildResolverForItem =\n  (context: StructureContext): ChildResolver =>\n  (itemId: string, options: ChildResolverOptions): ItemChild | Promise<ItemChild> | undefined => {\n    const parentItem = options.parent as DocumentList\n    const template = options.params?.template\n      ? context.templates.find((tpl) => tpl.id === options.params.template)\n      : undefined\n    const type = template\n      ? template.schemaType\n      : parentItem.schemaTypeName || resolveTypeForDocument(context.getClient, itemId)\n\n    return Promise.resolve(type).then((schemaType) =>\n      schemaType\n        ? context.resolveDocumentNode({schemaType, documentId: itemId})\n        : new DocumentBuilder(context).id('editor').documentId(itemId).schemaType(''),\n    )\n  }\n\n/**\n * Partial document list\n *\n * @public\n */\nexport interface PartialDocumentList extends BuildableGenericList {\n  /** Document list options. See {@link DocumentListOptions} */\n  options?: DocumentListOptions\n  /** Schema type name */\n  schemaTypeName?: string\n}\n\n/**\n * Interface for document list input\n *\n * @public\n */\nexport interface DocumentListInput extends GenericListInput {\n  /** Document list options. See {@link DocumentListOptions} */\n  options: DocumentListOptions\n}\n\n/**\n * Interface for document list\n *\n * @public\n */\nexport interface DocumentList extends GenericList {\n  type: 'documentList'\n  /** Document list options. See {@link DocumentListOptions} */\n  options: DocumentListOptions\n  /** Document list child. See {@link Child} */\n  child: Child\n  /** Document schema type name */\n  schemaTypeName?: string\n}\n\n/**\n * Interface for document List options\n *\n * @public\n */\nexport interface DocumentListOptions {\n  /** Document list filter */\n  filter: string\n  /** Document list parameters */\n  params?: Record<string, unknown>\n  /** Document list API version */\n  apiVersion?: string\n  /** Document list API default ordering array. */\n  defaultOrdering?: SortOrderingItem[]\n}\n\n/**\n * Class for building document list\n *\n * @public\n */\nexport class DocumentListBuilder extends GenericListBuilder<\n  PartialDocumentList,\n  DocumentListBuilder\n> {\n  /** Document list options. See {@link PartialDocumentList} */\n  protected spec: PartialDocumentList\n\n  constructor(\n    /**\n     * Structure context. See {@link StructureContext}\n     */\n    protected _context: StructureContext,\n    spec?: DocumentListInput,\n  ) {\n    super()\n    this.spec = spec || {}\n    this.initialValueTemplatesSpecified = Boolean(spec?.initialValueTemplates)\n  }\n\n  /** Set API version\n   * @param apiVersion - API version\n   * @returns document list builder based on the options and API version provided. See {@link DocumentListBuilder}\n   */\n  apiVersion(apiVersion: string): DocumentListBuilder {\n    return this.clone({options: {...(this.spec.options || {filter: ''}), apiVersion}})\n  }\n\n  /** Get API version\n   * @returns API version\n   */\n  getApiVersion(): string | undefined {\n    return this.spec.options?.apiVersion\n  }\n\n  /** Set Document list filter\n   * @param filter - GROQ-filter used to determine which documents to display. Do not support joins, since they operate on individual documents, and will ignore order-clauses and projections. See {@link https://www.sanity.io/docs/realtime-updates}\n   * @returns document list builder based on the options and filter provided. See {@link DocumentListBuilder}\n   */\n  filter(filter: string): DocumentListBuilder {\n    return this.clone({options: {...(this.spec.options || {}), filter}})\n  }\n\n  /** Get Document list filter\n   * @returns filter\n   */\n  getFilter(): string | undefined {\n    return this.spec.options?.filter\n  }\n\n  /** Set Document list schema type name\n   * @param type - schema type name.\n   * @returns document list builder based on the schema type name provided. See {@link DocumentListBuilder}\n   */\n  schemaType(type: SchemaType | string): DocumentListBuilder {\n    const schemaTypeName = typeof type === 'string' ? type : type.name\n    return this.clone({schemaTypeName})\n  }\n\n  /** Get Document list schema type name\n   * @returns schema type name\n   */\n  getSchemaType(): string | undefined {\n    return this.spec.schemaTypeName\n  }\n\n  /** Set Document list options' parameters\n   * @param params - parameters\n   * @returns document list builder based on the options provided. See {@link DocumentListBuilder}\n   */\n  params(params: Record<string, unknown>): DocumentListBuilder {\n    return this.clone({\n      options: {...(this.spec.options || {filter: ''}), params},\n    })\n  }\n\n  /** Get Document list options' parameters\n   * @returns options\n   */\n  getParams(): Record<string, unknown> | undefined {\n    return this.spec.options?.params\n  }\n\n  /** Set Document list default ordering\n   * @param ordering - default sort ordering array. See {@link SortOrderingItem}\n   * @returns document list builder based on ordering provided. See {@link DocumentListBuilder}\n   */\n  defaultOrdering(ordering: SortOrderingItem[]): DocumentListBuilder {\n    if (!Array.isArray(ordering)) {\n      throw new Error('`defaultOrdering` must be an array of order clauses')\n    }\n\n    return this.clone({\n      options: {...(this.spec.options || {filter: ''}), defaultOrdering: ordering},\n    })\n  }\n\n  /** Get Document list default ordering\n   * @returns default ordering. See {@link SortOrderingItem}\n   */\n  getDefaultOrdering(): SortOrderingItem[] | undefined {\n    return this.spec.options?.defaultOrdering\n  }\n\n  /** Serialize Document list\n   * @param options - serialization options. See {@link SerializeOptions}\n   * @returns document list object based on path provided in options. See {@link DocumentList}\n   */\n  serialize(options: SerializeOptions = {path: []}): DocumentList {\n    if (typeof this.spec.id !== 'string' || !this.spec.id) {\n      throw new SerializeError(\n        '`id` is required for document lists',\n        options.path,\n        options.index,\n        this.spec.title,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    if (!this.spec.options || !this.spec.options.filter) {\n      throw new SerializeError(\n        '`filter` is required for document lists',\n        options.path,\n        this.spec.id,\n        this.spec.title,\n      ).withHelpUrl(HELP_URL.FILTER_REQUIRED)\n    }\n\n    const hasSimpleFilter = this.spec.options?.filter === '_type == $type'\n    if (!hasSimpleFilter && this.spec.options.filter && !this.spec.options.apiVersion) {\n      console.warn(\n        `No apiVersion specified for document type list with custom filter: \\`${this.spec.options.filter}\\`. This will be required in the future. See %s for more info.`,\n        generateHelpUrl(HELP_URL.API_VERSION_REQUIRED_FOR_CUSTOM_FILTER),\n      )\n    }\n    return {\n      ...super.serialize(options),\n      type: 'documentList',\n      schemaTypeName: this.spec.schemaTypeName,\n      child: this.spec.child || createDocumentChildResolverForItem(this._context),\n      options: {\n        ...this.spec.options,\n        // @todo: make specifying .apiVersion required when using custom (non-simple) filters in v4\n        apiVersion: this.spec.options.apiVersion || DEFAULT_STUDIO_CLIENT_OPTIONS.apiVersion,\n        filter: validateFilter(this.spec, options),\n      },\n    }\n  }\n\n  /** Clone Document list builder (allows for options overriding)\n   * @param withSpec - override document list spec. See {@link PartialDocumentList}\n   * @returns document list builder. See {@link DocumentListBuilder}\n   */\n  clone(withSpec?: PartialDocumentList): DocumentListBuilder {\n    const builder = new DocumentListBuilder(this._context)\n    builder.spec = {...this.spec, ...(withSpec || {})}\n\n    if (!this.initialValueTemplatesSpecified) {\n      builder.spec.initialValueTemplates = inferInitialValueTemplates(this._context, builder.spec)\n    }\n\n    if (!builder.spec.schemaTypeName) {\n      builder.spec.schemaTypeName = inferTypeName(builder.spec)\n    }\n\n    return builder\n  }\n\n  /** Get Document list spec\n   * @returns document list spec. See {@link PartialDocumentList}\n   */\n  getSpec(): PartialDocumentList {\n    return this.spec\n  }\n}\n\nfunction inferInitialValueTemplates(\n  context: StructureContext,\n  spec: PartialDocumentList,\n): InitialValueTemplateItem[] | undefined {\n  const {document} = context\n  const {schemaTypeName, options} = spec\n  const {filter, params} = options || {filter: '', params: {}}\n  const typeNames = schemaTypeName\n    ? [schemaTypeName]\n    : Array.from(new Set(getTypeNamesFromFilter(filter, params)))\n\n  if (typeNames.length === 0) {\n    return undefined\n  }\n\n  return typeNames\n    .flatMap((schemaType) =>\n      document.resolveNewDocumentOptions({\n        type: 'structure',\n        schemaType,\n      }),\n    )\n    .map((option) => ({...option, icon: AddIcon}))\n}\n\nfunction inferTypeName(spec: PartialDocumentList): string | undefined {\n  const {options} = spec\n  const {filter, params} = options || {filter: '', params: {}}\n  const typeNames = getTypeNamesFromFilter(filter, params)\n  return typeNames.length === 1 ? typeNames[0] : undefined\n}\n\n/** @internal */\nexport function getTypeNamesFromFilter(\n  filter: string,\n  params: Record<string, unknown> = {},\n): string[] {\n  let typeNames = getTypeNamesFromEqualityFilter(filter, params)\n\n  if (typeNames.length === 0) {\n    typeNames = getTypeNamesFromInTypesFilter(filter, params)\n  }\n\n  return typeNames\n}\n\n// From _type == \"movie\" || _type == $otherType\nfunction getTypeNamesFromEqualityFilter(\n  filter: string,\n  params: Record<string, unknown> = {},\n): string[] {\n  const pattern =\n    /\\b_type\\s*==\\s*(['\"].*?['\"]|\\$.*?(?:\\s|$))|\\B(['\"].*?['\"]|\\$.*?(?:\\s|$))\\s*==\\s*_type/g\n  const matches: string[] = []\n  let match\n  while ((match = pattern.exec(filter)) !== null) {\n    matches.push(match[1] || match[2])\n  }\n\n  return matches\n    .map((candidate) => {\n      const typeName = candidate[0] === '$' ? params[candidate.slice(1)] : candidate\n      const normalized = ((typeName as string) || '').trim().replace(/^[\"']|[\"']$/g, '')\n      return normalized\n    })\n    .filter(Boolean)\n}\n\n// From _type in [\"dog\", \"cat\", $otherSpecies]\nfunction getTypeNamesFromInTypesFilter(\n  filter: string,\n  params: Record<string, unknown> = {},\n): string[] {\n  const pattern = /\\b_type\\s+in\\s+\\[(.*?)\\]/\n  const matches = filter.match(pattern)\n  if (!matches) {\n    return []\n  }\n\n  return matches[1]\n    .split(/,\\s*/)\n    .map((match) => match.trim().replace(/^[\"']+|[\"']+$/g, ''))\n    .map((item) => (item[0] === '$' ? params[item.slice(1)] : item))\n    .filter(Boolean) as string[]\n}\n","import {find} from 'lodash'\nimport {isRecord} from 'sanity'\n\nimport {type ChildResolver, type ChildResolverOptions} from './ChildResolver'\nimport {isDocumentListItem} from './DocumentListItem'\nimport {\n  type BuildableGenericList,\n  type GenericList,\n  GenericListBuilder,\n  type GenericListInput,\n  shallowIntentChecker,\n} from './GenericList'\nimport {type IntentChecker} from './Intent'\nimport {type ListItem, ListItemBuilder} from './ListItem'\nimport {HELP_URL, SerializeError} from './SerializeError'\nimport {type Divider, type SerializeOptions, type SerializePath} from './StructureNodes'\nimport {type StructureContext} from './types'\n\nconst getArgType = (thing: ListItem) => {\n  if (thing instanceof ListBuilder) {\n    return 'ListBuilder'\n  }\n\n  if (isPromise<ListItem>(thing)) {\n    return 'Promise'\n  }\n\n  return Array.isArray(thing) ? 'array' : typeof thing\n}\n\nconst isListItem = (item: ListItem | Divider): item is ListItem => {\n  return item.type === 'listItem'\n}\n\nconst defaultCanHandleIntent: IntentChecker = (intentName: string, params, context) => {\n  const pane = context.pane as List\n  const items = pane.items || []\n  return (\n    items\n      .filter(isDocumentListItem)\n      .some((item) => item.schemaType.name === params.type && item._id === params.id) ||\n    shallowIntentChecker(intentName, params, context)\n  )\n}\n\nconst resolveChildForItem: ChildResolver = (itemId: string, options: ChildResolverOptions) => {\n  const parentItem = options.parent as List\n  const items = parentItem.items.filter(isListItem)\n  const target = (items.find((item) => item.id === itemId) || {child: undefined}).child\n\n  if (!target || typeof target !== 'function') {\n    return target\n  }\n\n  return typeof target === 'function' ? target(itemId, options) : target\n}\n\nfunction maybeSerializeListItem(\n  item: ListItem | ListItemBuilder | Divider,\n  index: number,\n  path: SerializePath,\n): ListItem | Divider {\n  if (item instanceof ListItemBuilder) {\n    return item.serialize({path, index})\n  }\n\n  const listItem = item as ListItem\n  if (listItem && listItem.type === 'divider') {\n    return item as Divider\n  }\n\n  if (!listItem || listItem.type !== 'listItem') {\n    const gotWhat = (listItem && listItem.type) || getArgType(listItem)\n    const helpText = gotWhat === 'array' ? ' - did you forget to spread (...moreItems)?' : ''\n    throw new SerializeError(\n      `List items must be of type \"listItem\", got \"${gotWhat}\"${helpText}`,\n      path,\n      index,\n    ).withHelpUrl(HELP_URL.INVALID_LIST_ITEM)\n  }\n\n  return item\n}\n\nfunction isPromise<T>(thing: unknown): thing is PromiseLike<T> {\n  return isRecord(thing) && typeof thing.then === 'function'\n}\n\n/**\n * Interface for List\n *\n * @public\n */\nexport interface List extends GenericList {\n  type: 'list'\n  /** List items. See {@link ListItem} and {@link Divider} */\n  items: (ListItem | Divider)[]\n}\n\n/**\n * Interface for list input\n *\n * @public\n */\nexport interface ListInput extends GenericListInput {\n  /** List input items array. See {@link ListItem}, {@link ListItemBuilder} and {@link Divider} */\n  items?: (ListItem | ListItemBuilder | Divider)[]\n}\n\n/**\n * Interface for buildable list\n *\n * @public\n */\nexport interface BuildableList extends BuildableGenericList {\n  /** List items. See {@link ListItem}, {@link ListItemBuilder} and {@link Divider} */\n  items?: (ListItem | ListItemBuilder | Divider)[]\n}\n\n/**\n * A `ListBuilder` is used to build a list of items in the structure tool.\n *\n * @public */\nexport class ListBuilder extends GenericListBuilder<BuildableList, ListBuilder> {\n  /** buildable list option object. See {@link BuildableList} */\n  protected spec: BuildableList\n\n  constructor(\n    /**\n     * Structure context. See {@link StructureContext}\n     */\n    protected _context: StructureContext,\n    spec?: ListInput,\n  ) {\n    super()\n    this.spec = spec ? spec : {}\n    this.initialValueTemplatesSpecified = Boolean(spec && spec.initialValueTemplates)\n  }\n\n  /**\n   * Set list builder based on items provided\n   * @param items - list items. See {@link ListItemBuilder}, {@link ListItem} and {@link Divider}\n   * @returns list builder based on items provided. See {@link ListBuilder}\n   */\n  items(items: (ListItemBuilder | ListItem | Divider)[]): ListBuilder {\n    return this.clone({items})\n  }\n\n  /** Get list builder items\n   * @returns list items. See {@link BuildableList}\n   */\n  getItems(): BuildableList['items'] {\n    return this.spec.items\n  }\n\n  /** Serialize list builder\n   * @param options - serialization options. See {@link SerializeOptions}\n   * @returns list based on path in options. See {@link List}\n   */\n  serialize(options: SerializeOptions = {path: []}): List {\n    const id = this.spec.id\n    if (typeof id !== 'string' || !id) {\n      throw new SerializeError(\n        '`id` is required for lists',\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    const items = typeof this.spec.items === 'undefined' ? [] : this.spec.items\n    if (!Array.isArray(items)) {\n      throw new SerializeError(\n        '`items` must be an array of items',\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.LIST_ITEMS_MUST_BE_ARRAY)\n    }\n\n    const path = (options.path || []).concat(id)\n    const serializedItems = items.map((item, index) => maybeSerializeListItem(item, index, path))\n    const dupes = serializedItems.filter((val, i) => find(serializedItems, {id: val.id}, i + 1))\n\n    if (dupes.length > 0) {\n      const dupeIds = dupes.map((item) => item.id).slice(0, 5)\n      const dupeDesc = dupes.length > 5 ? `${dupeIds.join(', ')}...` : dupeIds.join(', ')\n      throw new SerializeError(\n        `List items with same ID found (${dupeDesc})`,\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.LIST_ITEM_IDS_MUST_BE_UNIQUE)\n    }\n\n    return {\n      ...super.serialize(options),\n      type: 'list',\n      canHandleIntent: this.spec.canHandleIntent || defaultCanHandleIntent,\n      child: this.spec.child || resolveChildForItem,\n      items: serializedItems,\n    }\n  }\n\n  /**\n   * Clone list builder and return new list builder based on context and spec provided\n   * @param withSpec - list options. See {@link BuildableList}\n   * @returns new list builder based on context and spec provided. See {@link ListBuilder}\n   */\n  clone(withSpec?: BuildableList): ListBuilder {\n    const builder = new ListBuilder(this._context)\n    builder.spec = {...this.spec, ...(withSpec || {})}\n    return builder\n  }\n}\n","import {type SchemaType} from '@sanity/types'\nimport {type Observable} from 'rxjs'\nimport {type I18nTextRecord} from 'sanity'\n\nimport {type ChildResolver, type ItemChild} from './ChildResolver'\nimport {ComponentBuilder} from './Component'\nimport {DocumentBuilder} from './Document'\nimport {DocumentListBuilder} from './DocumentList'\nimport {ListBuilder} from './List'\nimport {HELP_URL, SerializeError} from './SerializeError'\nimport {\n  type Collection,\n  type CollectionBuilder,\n  type Serializable,\n  type SerializeOptions,\n} from './StructureNodes'\nimport {type StructureContext} from './types'\nimport {getStructureNodeId} from './util/getStructureNodeId'\nimport {validateId} from './util/validateId'\n\n/**\n * Unserialized list item child.\n * See {@link Collection}, {@link CollectionBuilder}, {@link ChildResolver} and {@link ItemChild}\n *\n * @public\n */\nexport type UnserializedListItemChild =\n  | Collection\n  | CollectionBuilder\n  | ChildResolver\n  | Observable<ItemChild>\n\n/**\n * Child of List Item\n * See {@link Collection}, {@link ChildResolver}, {@link ItemChild}\n * @public\n */\nexport type ListItemChild = Collection | ChildResolver | Observable<ItemChild> | undefined\n\n/**\n * Interface for serialize list item options\n *\n * @public\n */\nexport interface ListItemSerializeOptions extends SerializeOptions {\n  /** Check if list item title is optional */\n  titleIsOptional?: boolean\n}\n\n/**\n * Interface for ist item display options\n *\n * @public */\nexport interface ListItemDisplayOptions {\n  /** Check if list item display should show icon */\n  showIcon?: boolean\n}\n\n/**\n * interface for list item input\n *\n * @public */\nexport interface ListItemInput {\n  /** List item id */\n  id: string\n  /** List item title */\n  title?: string\n  /** List item icon */\n  icon?: React.ComponentType | React.ReactNode\n  /** List item child. See {@link ListItemChild} */\n  child?: ListItemChild\n  /** List item display options. See {@link ListItemDisplayOptions} */\n  displayOptions?: ListItemDisplayOptions\n  /** List item schema type. See {@link SchemaType} */\n  schemaType?: SchemaType | string\n}\n\n/**\n * Interface for List Item\n *\n * @public */\nexport interface ListItem {\n  /** List item id */\n  id: string\n  /** List item type */\n  type: string\n  /**\n   * The i18n key and namespace used to populate the localized title. This is\n   * the recommend way to set the title if you are localizing your studio.\n   */\n  i18n?: I18nTextRecord<'title'>\n  /** List item title. Note that the `i18n` key and namespace will take precedence. */\n  title?: string\n  /** List item icon */\n  icon?: React.ComponentType | React.ReactNode\n  /** List item child. See {@link ListItemChild} */\n  child?: ListItemChild\n  /** List item display options. See {@link ListItemDisplayOptions} */\n  displayOptions?: ListItemDisplayOptions\n  /** List item schema type. See {@link SchemaType} */\n  schemaType?: SchemaType\n}\n\n/**\n * Interface for unserialized list items.\n *\n * @public\n */\nexport interface UnserializedListItem {\n  /** List item ID */\n  id: string\n  /** List item title */\n  title: string\n  /**\n   * The i18n key and namespace used to populate the localized title. This is\n   * the recommend way to set the title if you are localizing your studio.\n   */\n  i18n?: I18nTextRecord<'title'>\n  /** List item icon */\n  icon?: React.ComponentType | React.ReactNode\n  /** List item child. See {@link UnserializedListItemChild} */\n  child?: UnserializedListItemChild\n  /** List item display options. See {@link ListItemDisplayOptions} */\n  displayOptions?: ListItemDisplayOptions\n  /** List item schema. See {@link SchemaType} */\n  schemaType?: SchemaType | string\n}\n\n/**\n * Partial list item. See {@link UnserializedListItem}\n *\n * @public */\nexport type PartialListItem = Partial<UnserializedListItem>\n\n/**\n * Class for building list items\n *\n * @public */\nexport class ListItemBuilder implements Serializable<ListItem> {\n  /** List item option object. See {@link PartialListItem} */\n  protected spec: PartialListItem\n\n  constructor(\n    /**\n     * Structure context. See {@link StructureContext}\n     */\n    protected _context: StructureContext,\n    spec?: ListItemInput,\n  ) {\n    this.spec = spec ? spec : {}\n  }\n\n  /**\n   * Set list item ID\n   * @returns list item builder based on ID provided. See {@link ListItemBuilder}\n   */\n  id(id: string): ListItemBuilder {\n    return this.clone({id})\n  }\n\n  /**\n   * Get list item ID\n   * @returns list item ID. See {@link PartialListItem}\n   */\n  getId(): PartialListItem['id'] {\n    return this.spec.id\n  }\n\n  /**\n   * Set list item title\n   * @returns list item builder based on title provided. See {@link ListItemBuilder}\n   */\n  title(title: string): ListItemBuilder {\n    return this.clone({title, id: getStructureNodeId(title, this.spec.id)})\n  }\n\n  /**\n   * Get list item title\n   * @returns list item title. See {@link PartialListItem}\n   */\n  getTitle(): PartialListItem['title'] {\n    return this.spec.title\n  }\n\n  /** Set the i18n key and namespace used to populate the localized title.\n   * @param i18n - the key and namespaced used to populate the localized title.\n   * @returns component builder based on i18n key and ns provided\n   */\n  i18n(i18n: I18nTextRecord<'title'>): ListItemBuilder {\n    return this.clone({i18n})\n  }\n\n  /** Get i18n key and namespace used to populate the localized title\n   * @returns the i18n key and namespace used to populate the localized title\n   */\n  getI18n(): I18nTextRecord<'title'> | undefined {\n    return this.spec.i18n\n  }\n\n  /**\n   * Set list item icon\n   * @returns list item builder based on icon provided. See {@link ListItemBuilder}\n   */\n  icon(icon: React.ComponentType | React.ReactNode): ListItemBuilder {\n    return this.clone({icon})\n  }\n\n  /**\n   * Set if list item should show icon\n   * @returns list item builder based on showIcon provided. See {@link ListItemBuilder}\n   */\n  showIcon(enabled = true): ListItemBuilder {\n    return this.clone({\n      displayOptions: {...(this.spec.displayOptions || {}), showIcon: enabled},\n    })\n  }\n\n  /**\n   * Check if list item should show icon\n   * @returns true if it should show the icon, false if not, undefined if not set\n   */\n  getShowIcon(): boolean | undefined {\n    return this.spec.displayOptions ? this.spec.displayOptions.showIcon : undefined\n  }\n\n  /**\n   *Get list item icon\n   * @returns list item icon. See {@link PartialListItem}\n   */\n  getIcon(): PartialListItem['icon'] {\n    return this.spec.icon\n  }\n\n  /**\n   * Set list item child\n   * @param child - list item child. See {@link UnserializedListItemChild}\n   * @returns list item builder based on child provided. See {@link ListItemBuilder}\n   */\n  child(child: UnserializedListItemChild): ListItemBuilder {\n    return this.clone({child})\n  }\n\n  /**\n   * Get list item child\n   * @returns list item child. See {@link PartialListItem}\n   */\n  getChild(): PartialListItem['child'] {\n    return this.spec.child\n  }\n\n  /**\n   * Set list item schema type\n   * @param schemaType - list item schema type. See {@link SchemaType}\n   * @returns list item builder based on schema type provided. See {@link ListItemBuilder}\n   */\n  schemaType(schemaType: SchemaType | string): ListItemBuilder {\n    return this.clone({schemaType})\n  }\n\n  /**\n   * Get list item schema type\n   * @returns list item schema type. See {@link PartialListItem}\n   */\n  getSchemaType(): PartialListItem['schemaType'] {\n    const schemaType = this.spec.schemaType\n\n    if (typeof schemaType === 'string') {\n      return this._context.schema.get(schemaType)\n    }\n\n    return this.spec.schemaType\n  }\n\n  /** Serialize list item builder\n   * @param options - serialization options. See {@link ListItemSerializeOptions}\n   * @returns list item node based on path provided in options. See {@link ListItem}\n   */\n  serialize(options: ListItemSerializeOptions = {path: []}): ListItem {\n    const {id, title, child} = this.spec\n    if (typeof id !== 'string' || !id) {\n      throw new SerializeError(\n        '`id` is required for list items',\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    if (!options.titleIsOptional && (typeof title !== 'string' || !title)) {\n      throw new SerializeError('`title` is required for list items', options.path, id).withHelpUrl(\n        HELP_URL.TITLE_REQUIRED,\n      )\n    }\n\n    let schemaType = this.spec.schemaType\n    if (typeof schemaType === 'string') {\n      const type = this._context.schema.get(schemaType)\n      if (!type) {\n        throw new SerializeError(\n          `Could not find type \"${schemaType}\" in schema`,\n          options.path,\n          id,\n        ).withHelpUrl(HELP_URL.SCHEMA_TYPE_NOT_FOUND)\n      }\n\n      schemaType = type\n    }\n\n    const serializeOptions = {path: options.path.concat(id), hint: 'child'}\n    let listChild =\n      child instanceof ComponentBuilder ||\n      child instanceof DocumentListBuilder ||\n      child instanceof DocumentBuilder ||\n      child instanceof ListBuilder\n        ? child.serialize(serializeOptions)\n        : child\n\n    // In the case of a function, create a bound version that will pass the correct serialize\n    // context, so we may lazily resolve it at some point in the future without losing context\n    if (typeof listChild === 'function') {\n      const originalChild = listChild\n      listChild = (itemId, childOptions) => {\n        return originalChild(itemId, {...childOptions, serializeOptions})\n      }\n    }\n\n    return {\n      ...this.spec,\n      id: validateId(id, options.path, options.index),\n      schemaType,\n      child: listChild,\n      title,\n      type: 'listItem',\n    }\n  }\n\n  /** Clone list item builder\n   * @param withSpec - partial list item options. See {@link PartialListItem}\n   * @returns list item builder based on context and spec provided. See {@link ListItemBuilder}\n   */\n  clone(withSpec?: PartialListItem): ListItemBuilder {\n    const builder = new ListItemBuilder(this._context)\n    builder.spec = {...this.spec, ...(withSpec || {})}\n    return builder\n  }\n}\n","import {type SchemaType} from '@sanity/types'\nimport {isRecord} from 'sanity'\n\nimport {DocumentBuilder} from './Document'\nimport {\n  type ListItem,\n  ListItemBuilder,\n  type ListItemInput,\n  type UnserializedListItem,\n} from './ListItem'\nimport {HELP_URL, SerializeError} from './SerializeError'\nimport {type SerializeOptions} from './StructureNodes'\nimport {type StructureContext} from './types'\n\n/**\n * Interface for document list item input\n *\n * @public\n */\nexport interface DocumentListItemInput extends ListItemInput {\n  /** Document list item input schema type. See {@link SchemaType} */\n  schemaType: SchemaType | string\n}\n\n/**\n * Interface for document list item\n *\n * @public\n */\nexport interface DocumentListItem extends ListItem {\n  /** Document schema type. See {@link SchemaType} */\n  schemaType: SchemaType\n  /** Document ID */\n  _id: string\n}\n\n/**\n * Partial document list item\n *\n * @public\n */\nexport type PartialDocumentListItem = Partial<UnserializedListItem>\n\nconst createDefaultChildResolver =\n  (context: StructureContext, spec: PartialDocumentListItem) => (documentId: string) => {\n    const schemaType =\n      spec.schemaType &&\n      (typeof spec.schemaType === 'string' ? spec.schemaType : spec.schemaType.name)\n\n    return schemaType\n      ? context.resolveDocumentNode({schemaType, documentId})\n      : new DocumentBuilder(context).id('documentEditor').documentId(documentId)\n  }\n\n/**\n * Class for building a document list item\n *\n * @public\n */\nexport class DocumentListItemBuilder extends ListItemBuilder {\n  /** Document list options. See {@link PartialDocumentListItem} */\n  protected spec: PartialDocumentListItem\n\n  constructor(\n    /**\n     * Structure context. See {@link StructureContext}\n     */\n    protected _context: StructureContext,\n    spec?: DocumentListItemInput,\n  ) {\n    super(_context, spec)\n    this.spec = spec ? spec : {}\n  }\n\n  /**\n   * Serialize document list item\n   * @param options - serialization options. See {@link SerializeOptions}\n   * @returns document list item object based on path provided in options. See {@link DocumentListItem}\n   */\n  serialize(options: SerializeOptions = {path: []}): DocumentListItem {\n    const spec = super.serialize({...options, titleIsOptional: true})\n\n    if (!spec.schemaType) {\n      throw new SerializeError(\n        '`schemaType` is required for document list items',\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.SCHEMA_TYPE_REQUIRED)\n    }\n\n    const child = spec.child || createDefaultChildResolver(this._context, spec)\n    return {...spec, child, schemaType: spec.schemaType, _id: spec.id}\n  }\n\n  /** Clone Document list item builder (allows for options overriding)\n   * @param withSpec - Document list item builder options. See {@link PartialDocumentListItem}\n   * @returns document list item builder. See {@link DocumentListItemBuilder}\n   */\n  clone(withSpec?: PartialDocumentListItem): DocumentListItemBuilder {\n    const builder = new DocumentListItemBuilder(this._context)\n    builder.spec = {...this.spec, ...(withSpec || {})}\n    return builder\n  }\n}\n\n/** @internal */\nexport function isDocumentListItem(item: unknown): item is DocumentListItem {\n  return isRecord(item) && typeof item.schemaType !== 'undefined' && typeof item._id === 'string'\n}\n","import {type SchemaType} from '@sanity/types'\n\nimport {DocumentListBuilder, type DocumentListInput, type PartialDocumentList} from './DocumentList'\nimport {type GenericListInput} from './GenericList'\nimport {DEFAULT_INTENT_HANDLER} from './Intent'\nimport {type Child} from './StructureNodes'\nimport {type StructureContext} from './types'\n\n/**\n * Interface for document type list input\n *\n * @public\n */\nexport interface DocumentTypeListInput extends Partial<GenericListInput> {\n  /** Document type list input schema type. See {@link SchemaType} */\n  schemaType: SchemaType | string\n}\n\n/**\n * Class for building a document type list\n *\n * @public\n */\nexport class DocumentTypeListBuilder extends DocumentListBuilder {\n  /** Document list options. See {@link PartialDocumentList} */\n  protected spec: PartialDocumentList\n\n  constructor(\n    /**\n     * Structure context. See {@link StructureContext}\n     */\n    protected _context: StructureContext,\n    spec?: DocumentListInput,\n  ) {\n    super(_context)\n    this.spec = spec ? spec : {}\n  }\n\n  /**\n   * Set Document type list child\n   * @param child - Child component. See {@link Child}\n   * @returns document type list builder based on child component provided without default intent handler. See {@link DocumentTypeListBuilder}\n   */\n  child(child: Child): DocumentTypeListBuilder {\n    return this.cloneWithoutDefaultIntentHandler({child})\n  }\n\n  /** Clone Document type list builder (allows for options overriding)\n   * @param withSpec - Document type list builder options. See {@link PartialDocumentList}\n   * @returns document type list builder. See {@link DocumentTypeListBuilder}\n   */\n  clone(withSpec?: PartialDocumentList): DocumentTypeListBuilder {\n    const parent = super.clone(withSpec)\n    const builder = new DocumentTypeListBuilder(this._context)\n    builder.spec = {...this.spec, ...parent.getSpec(), ...(withSpec || {})}\n    return builder\n  }\n\n  /** Clone Document type list builder (allows for options overriding) and remove default intent handler\n   * @param withSpec - Document type list builder options. See {@link PartialDocumentList}\n   * @returns document type list builder without default intent handler. See {@link DocumentTypeListBuilder}\n   */\n  cloneWithoutDefaultIntentHandler(withSpec?: PartialDocumentList): DocumentTypeListBuilder {\n    const parent = super.clone(withSpec)\n    const builder = new DocumentTypeListBuilder(this._context)\n    const canHandleIntent = this.spec.canHandleIntent\n    const shouldOverride = canHandleIntent && canHandleIntent.identity === DEFAULT_INTENT_HANDLER\n    const override = shouldOverride ? {canHandleIntent: undefined} : {}\n    builder.spec = {\n      ...parent.getSpec(),\n      ...this.spec,\n      ...(withSpec || {}),\n      ...override,\n    }\n    return builder\n  }\n}\n","import {StackCompactIcon, StackIcon} from '@sanity/icons'\nimport {type SchemaType} from '@sanity/types'\nimport {startCase} from 'lodash'\n\nimport {structureLocaleNamespace} from '../i18n'\nimport {type DocumentListBuilder} from './DocumentList'\nimport {DocumentTypeListBuilder, type DocumentTypeListInput} from './DocumentTypeList'\nimport {defaultIntentChecker} from './Intent'\nimport {type List} from './List'\nimport {type ListItem, ListItemBuilder} from './ListItem'\nimport {getOrderingMenuItemsForSchemaType, MenuItemBuilder} from './MenuItem'\nimport {DEFAULT_SELECTED_ORDERING_OPTION} from './Sort'\nimport {type Collection} from './StructureNodes'\nimport {type StructureContext} from './types'\n\nconst BUNDLED_DOC_TYPES = ['sanity.imageAsset', 'sanity.fileAsset']\n\nfunction isBundledDocType(typeName: string) {\n  return BUNDLED_DOC_TYPES.includes(typeName)\n}\n\nfunction isDocumentType(schemaType: SchemaType) {\n  return schemaType.type?.name === 'document'\n}\n\nfunction isList(collection: Collection): collection is List {\n  return collection.type === 'list'\n}\n\nexport function getDocumentTypes({schema}: StructureContext): string[] {\n  return schema\n    .getTypeNames()\n    .filter((n) => {\n      const schemaType = schema.get(n)\n      return schemaType && isDocumentType(schemaType)\n    })\n    .filter((n) => !isBundledDocType(n))\n}\n\nexport function getDocumentTypeListItems(context: StructureContext): ListItemBuilder[] {\n  const types = getDocumentTypes(context)\n  return types.map((typeName) => getDocumentTypeListItem(context, typeName))\n}\n\nexport function getDocumentTypeListItem(\n  context: StructureContext,\n  typeName: string,\n): ListItemBuilder {\n  const {schema} = context\n\n  const type = schema.get(typeName)\n  if (!type) {\n    throw new Error(`Schema type with name \"${typeName}\" not found`)\n  }\n\n  const title = type.title || startCase(typeName)\n\n  return new ListItemBuilder(context)\n    .id(typeName)\n    .title(title)\n    .schemaType(type)\n    .child((id, childContext) => {\n      const parent = childContext.parent as Collection\n      const parentItem = isList(parent)\n        ? (parent.items.find((item) => item.id === id) as ListItem)\n        : null\n\n      let list = getDocumentTypeList(context, typeName)\n      if (parentItem && parentItem.title) {\n        list = list.title(parentItem.title)\n      }\n\n      return list\n    })\n}\n\nexport function getDocumentTypeList(\n  context: StructureContext,\n  typeNameOrSpec: string | DocumentTypeListInput,\n): DocumentListBuilder {\n  const {schema, resolveDocumentNode} = context\n\n  const schemaType = typeof typeNameOrSpec === 'string' ? typeNameOrSpec : typeNameOrSpec.schemaType\n  const typeName = typeof schemaType === 'string' ? schemaType : schemaType.name\n  const spec: DocumentTypeListInput =\n    typeof typeNameOrSpec === 'string' ? {schemaType} : typeNameOrSpec\n\n  const type = schema.get(typeName)\n  if (!type) {\n    throw new Error(`Schema type with name \"${typeName}\" not found`)\n  }\n\n  const title = type.title || startCase(typeName)\n\n  return new DocumentTypeListBuilder(context)\n    .id(spec.id || typeName)\n    .title(spec.title || title)\n    .filter('_type == $type')\n    .params({type: typeName})\n    .schemaType(type)\n    .defaultOrdering(DEFAULT_SELECTED_ORDERING_OPTION.by)\n    .menuItemGroups(\n      spec.menuItemGroups || [\n        {\n          id: 'sorting',\n          title: 'Sort',\n          i18n: {title: {key: 'menu-item-groups.actions-group', ns: structureLocaleNamespace}},\n        },\n        {\n          id: 'layout',\n          title: 'Layout',\n          i18n: {title: {key: 'menu-item-groups.layout-group', ns: structureLocaleNamespace}},\n        },\n        {\n          id: 'actions',\n          title: 'Actions',\n          i18n: {title: {key: 'menu-item-groups.sorting-group', ns: structureLocaleNamespace}},\n        },\n      ],\n    )\n    .child(\n      spec.child ||\n        ((documentId: string) => resolveDocumentNode({schemaType: typeName, documentId})),\n    )\n    .canHandleIntent(spec.canHandleIntent || defaultIntentChecker)\n    .menuItems(\n      spec.menuItems || [\n        // Create new (from action button) will be added in serialization step of GenericList\n\n        // Sort by <Y>\n        ...getOrderingMenuItemsForSchemaType(context, type),\n\n        // Display as <Z>\n        new MenuItemBuilder(context)\n          .group('layout')\n          .i18n({title: {key: 'menu-items.layout.compact-view', ns: structureLocaleNamespace}})\n          .title('Compact view') // fallback title\n          .icon(StackCompactIcon)\n          .action('setLayout')\n          .params({layout: 'default'}),\n\n        new MenuItemBuilder(context)\n          .group('layout')\n          .i18n({title: {key: 'menu-items.layout.detailed-view', ns: structureLocaleNamespace}})\n          .title('Detailed view') // fallback title\n          .icon(StackIcon)\n          .action('setLayout')\n          .params({layout: 'detail'}),\n\n        // Create new (from menu) will be added in serialization step of GenericList\n      ],\n    )\n}\n","import {type SchemaType} from '@sanity/types'\nimport {uniqueId} from 'lodash'\nimport {isValidElementType} from 'react-is'\nimport {getConfigContextFromSource, getPublishedId, type Source} from 'sanity'\n\nimport {structureLocaleNamespace} from '../i18n'\nimport {ComponentBuilder, type ComponentInput} from './Component'\nimport {DocumentBuilder, documentFromEditor, documentFromEditorWithInitialValue} from './Document'\nimport {DocumentListBuilder} from './DocumentList'\nimport {DocumentListItemBuilder} from './DocumentListItem'\nimport {\n  getDocumentTypeList,\n  getDocumentTypeListItem,\n  getDocumentTypeListItems,\n} from './documentTypeListItems'\nimport {\n  defaultInitialValueTemplateItems,\n  InitialValueTemplateItemBuilder,\n  menuItemsFromInitialValueTemplateItems,\n} from './InitialValueTemplateItem'\nimport {ListBuilder} from './List'\nimport {ListItemBuilder} from './ListItem'\nimport {getOrderingMenuItem, getOrderingMenuItemsForSchemaType, MenuItemBuilder} from './MenuItem'\nimport {MenuItemGroupBuilder} from './MenuItemGroup'\nimport {type Divider} from './StructureNodes'\nimport {\n  type DefaultDocumentNodeResolver,\n  type StructureBuilder,\n  type StructureContext,\n  type UserComponent,\n} from './types'\nimport * as views from './views'\n\n/** @internal */\nexport interface StructureBuilderOptions {\n  source: Source\n  defaultDocumentNode?: DefaultDocumentNodeResolver\n}\n\nfunction hasIcon(schemaType?: SchemaType | string): boolean {\n  if (!schemaType || typeof schemaType === 'string') {\n    return false\n  }\n\n  return Boolean(schemaType.icon)\n}\n\nfunction getDefaultStructure(context: StructureContext): ListBuilder {\n  const items = getDocumentTypeListItems(context)\n  return new ListBuilder(context)\n    .id('__root__')\n    .title('Content')\n    .i18n({title: {key: 'default-definition.content-title', ns: structureLocaleNamespace}})\n    .items(items)\n    .showIcons(items.some((item) => hasIcon(item.getSchemaType())))\n}\n\n/** @internal */\nexport function createStructureBuilder({\n  defaultDocumentNode,\n  source,\n}: StructureBuilderOptions): StructureBuilder {\n  const configContext = getConfigContextFromSource(source)\n  const context: StructureContext = {\n    ...source,\n    getStructureBuilder: () => structureBuilder,\n    resolveDocumentNode: (options) => {\n      let builder =\n        defaultDocumentNode?.(structureBuilder, {...options, ...configContext}) ||\n        new DocumentBuilder(context)\n\n      if (!builder.getId()) {\n        builder = builder.id('documentEditor')\n      }\n\n      if (options.documentId) {\n        builder = builder.documentId(getPublishedId(options.documentId))\n      }\n\n      return builder.schemaType(options.schemaType)\n    },\n  }\n\n  const structureBuilder: StructureBuilder = {\n    defaults: () => getDefaultStructure(context),\n    documentTypeList: (...args) => getDocumentTypeList(context, ...args),\n    documentTypeListItem: (...args) => getDocumentTypeListItem(context, ...args),\n    documentTypeListItems: (...args) => getDocumentTypeListItems(context, ...args),\n    document: (...args) => new DocumentBuilder(context, ...args),\n    documentWithInitialValueTemplate: (...args) =>\n      documentFromEditorWithInitialValue(context, ...args),\n    defaultDocument: context.resolveDocumentNode,\n\n    list: (...args) => new ListBuilder(context, ...args),\n    listItem: (...args) => new ListItemBuilder(context, ...args),\n\n    menuItem: (...args) => new MenuItemBuilder(context, ...args),\n    menuItemGroup: (...args) => new MenuItemGroupBuilder(context, ...args),\n    menuItemsFromInitialValueTemplateItems: (...args) =>\n      menuItemsFromInitialValueTemplateItems(context, ...args),\n\n    documentList: (...args) => new DocumentListBuilder(context, ...args),\n    documentListItem: (...args) => new DocumentListItemBuilder(context, ...args),\n\n    orderingMenuItem: (...args) => getOrderingMenuItem(context, ...args),\n    orderingMenuItemsForType: (...args) => getOrderingMenuItemsForSchemaType(context, ...args),\n\n    editor: (...args) => documentFromEditor(context, ...args),\n\n    defaultInitialValueTemplateItems: (...args) =>\n      defaultInitialValueTemplateItems(context, ...args),\n\n    initialValueTemplateItem: (\n      templateId: string,\n      parameters?: Record<string, unknown>,\n    ): InitialValueTemplateItemBuilder =>\n      new InitialValueTemplateItemBuilder(context, {\n        id: templateId,\n        parameters,\n        templateId,\n      }),\n\n    component: (spec?: ComponentInput | UserComponent) => {\n      return isValidElementType(spec)\n        ? new ComponentBuilder().component(spec as UserComponent)\n        : new ComponentBuilder(spec as ComponentInput)\n    },\n\n    divider: (): Divider => ({id: uniqueId('__divider__'), type: 'divider'}),\n\n    view: views,\n    context,\n  }\n\n  return structureBuilder\n}\n","import {type DocumentBadgeComponent} from 'sanity'\n\n/** @internal */\nexport const LiveEditBadge: DocumentBadgeComponent = (props) => {\n  const {liveEditSchemaType, version} = props\n\n  if (liveEditSchemaType && !version) {\n    return {\n      label: 'Live',\n      color: 'danger',\n    }\n  }\n\n  return null\n}\nLiveEditBadge.displayName = 'LiveEditBadge'\n","import {uuid} from '@sanity/uuid'\n\nimport {EMPTY_PARAMS, type LOADING_PANE} from './constants'\nimport {type PaneNode, type RouterPanes} from './types'\n\nconst state: {\n  activePanes: Array<PaneNode | typeof LOADING_PANE>\n} = {activePanes: []}\n\nexport function setActivePanes(panes: Array<PaneNode | typeof LOADING_PANE>): void {\n  state.activePanes = panes\n}\n\n/**\n * This function looks at the _active panes_ to resolve an intent. this type of\n * intent resolution is faster and does not cause the panes to reset\n *\n * @internal\n */\nexport function getIntentState(\n  intent: string,\n  params: Record<string, string>,\n  routerState: {panes?: RouterPanes} | undefined,\n  payload: unknown,\n): {panes: RouterPanes} | {intent: string; params: Record<string, string>; payload: unknown} {\n  const panes = routerState?.panes || []\n  const activePanes = state.activePanes || []\n  const editDocumentId = params.id || uuid()\n  const isTemplate = intent === 'create' && params.template\n  const isVersion = intent === 'create' && params.version\n\n  // Loop through open panes and see if any of them can handle the intent\n  for (let i = activePanes.length - 1; i >= 0; i--) {\n    const pane = activePanes[i]\n\n    if (typeof pane !== 'object') continue\n\n    // NOTE: if you update this logic, please also update the similar handler in\n    // `resolveIntent.ts`\n    if (\n      pane.canHandleIntent?.(intent, params, {\n        pane,\n        index: i,\n      }) ||\n      // see `resolveIntent.ts` for more info\n      (pane.type === 'documentList' &&\n        pane.schemaTypeName === params.type &&\n        pane.options.filter === '_type == $type')\n    ) {\n      const paneParams: {\n        template?: string\n        version?: string\n      } = EMPTY_PARAMS\n      if (isTemplate) paneParams.template = params.template\n      if (isVersion) paneParams.version = params.version\n\n      return {\n        panes: panes\n          .slice(0, i)\n          .concat([[{id: editDocumentId, params: paneParams, payload}]]) as RouterPanes,\n      }\n    }\n  }\n\n  return {intent: intent, params, payload}\n}\n","import {type ObjectDiff} from '@sanity/diff'\nimport {BoundaryElementProvider, Box, Card, Flex, Text} from '@sanity/ui'\nimport {useMemo, useState} from 'react'\nimport {\n  ChangeFieldWrapper,\n  ChangeList,\n  type DocumentChangeContextInstance,\n  LoadingBlock,\n  NoChanges,\n  type ObjectSchemaType,\n  ScrollContainer,\n  usePerspective,\n  useTimelineSelector,\n  useTranslation,\n} from 'sanity'\nimport {DocumentChangeContext} from 'sanity/_singletons'\nimport {styled} from 'styled-components'\n\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {TimelineMenu} from '../../timeline'\nimport {TimelineError} from '../../timeline/TimelineError'\nimport {useDocumentPane} from '../../useDocumentPane'\n\nconst Scroller = styled(ScrollContainer)`\n  height: 100%;\n  overflow: auto;\n  position: relative;\n  scroll-behavior: smooth;\n`\n\nconst Grid = styled(Box)`\n  &:not([hidden]) {\n    display: grid;\n  }\n  grid-template-columns: 48px 1fr;\n  align-items: center;\n  gap: 0.25em;\n`\n\nexport function ChangesInspector({showChanges}: {showChanges: boolean}): React.JSX.Element {\n  const {documentId, schemaType, timelineError, timelineStore, value} = useDocumentPane()\n  const {selectedReleaseId} = usePerspective()\n\n  const [scrollRef, setScrollRef] = useState<HTMLDivElement | null>(null)\n\n  const rev = useTimelineSelector(timelineStore, (state) => state.revTime)\n  const diff = useTimelineSelector(timelineStore, (state) => state.diff)\n  const onOlderRevision = useTimelineSelector(timelineStore, (state) => state.onOlderRevision)\n  const selectionState = useTimelineSelector(timelineStore, (state) => state.selectionState)\n  const sinceTime = useTimelineSelector(timelineStore, (state) => state.sinceTime)\n  const loading = selectionState === 'loading'\n  const isComparingCurrent = !onOlderRevision\n\n  // Note that we are using the studio core namespace here, as changes theoretically should\n  // be part of Sanity core (needs to be moved from structure at some point)\n  const {t: structureT} = useTranslation(structureLocaleNamespace)\n\n  const documentContext: DocumentChangeContextInstance = useMemo(\n    () => ({\n      documentId,\n      schemaType,\n      FieldWrapper: ChangeFieldWrapper,\n      rootDiff: diff,\n      isComparingCurrent,\n      value,\n      showFromValue: true,\n    }),\n    [documentId, diff, isComparingCurrent, schemaType, value],\n  )\n\n  if (selectedReleaseId) {\n    return (\n      <Flex data-testid=\"review-changes-pane\" direction=\"column\" height=\"fill\">\n        <Card flex={1} padding={2} paddingTop={0}>\n          <TimelineError versionError />\n        </Card>\n      </Flex>\n    )\n  }\n\n  return (\n    <Flex data-testid=\"review-changes-pane\" direction=\"column\" height=\"fill\" overflow=\"hidden\">\n      <Box padding={3}>\n        <Grid paddingX={2} paddingBottom={2}>\n          <Text size={1} muted>\n            {structureT('changes.from.label')}\n          </Text>\n\n          <TimelineMenu mode=\"since\" chunk={sinceTime} placement=\"bottom-start\" />\n          <Text size={1} muted>\n            {structureT('changes.to.label')}\n          </Text>\n          <TimelineMenu chunk={rev} mode=\"rev\" placement=\"bottom-end\" />\n        </Grid>\n      </Box>\n\n      <Card flex={1} paddingX={2} paddingY={2}>\n        <BoundaryElementProvider element={scrollRef}>\n          <Scroller data-ui=\"Scroller\" ref={setScrollRef}>\n            <Box flex={1} paddingX={3} height=\"fill\">\n              {showChanges && (\n                <Content\n                  diff={diff}\n                  documentContext={documentContext}\n                  error={timelineError}\n                  loading={loading}\n                  schemaType={schemaType}\n                />\n              )}\n            </Box>\n          </Scroller>\n        </BoundaryElementProvider>\n      </Card>\n    </Flex>\n  )\n}\n\nfunction Content({\n  error,\n  diff,\n  documentContext,\n  loading,\n  schemaType,\n}: {\n  error?: Error | null\n  diff: ObjectDiff<any> | null\n  documentContext: DocumentChangeContextInstance\n  loading: boolean\n  schemaType: ObjectSchemaType\n}) {\n  if (error) {\n    return <NoChanges />\n  }\n\n  if (loading) {\n    return <LoadingBlock showText />\n  }\n\n  if (!diff) {\n    return <NoChanges />\n  }\n\n  return (\n    <DocumentChangeContext.Provider value={documentContext}>\n      <ChangeList diff={diff} schemaType={schemaType} />\n    </DocumentChangeContext.Provider>\n  )\n}\n","import {Card, Flex} from '@sanity/ui'\nimport {type MouseEvent, useCallback} from 'react'\nimport {\n  type DocumentGroupEvent,\n  Event,\n  isDeleteDocumentGroupEvent,\n  isDeleteDocumentVersionEvent,\n  isScheduleDocumentVersionEvent,\n  isUnpublishDocumentEvent,\n  isUnscheduleDocumentVersionEvent,\n  useTranslation,\n} from 'sanity'\n\nimport {Tooltip} from '../../../../../ui-components'\n\nexport interface TimelineItemProps {\n  event: DocumentGroupEvent\n  isSelected: boolean\n  onSelect: (chunk: DocumentGroupEvent) => void\n  optionsMenu?: React.ReactNode\n}\n\nconst getIsSelectable = (event: DocumentGroupEvent) => {\n  return (\n    !isDeleteDocumentVersionEvent(event) &&\n    !isDeleteDocumentGroupEvent(event) &&\n    !isUnpublishDocumentEvent(event) &&\n    !isScheduleDocumentVersionEvent(event) &&\n    !isUnscheduleDocumentVersionEvent(event)\n  )\n}\n\nexport function EventTimelineItem({event, isSelected, onSelect, optionsMenu}: TimelineItemProps) {\n  const {t} = useTranslation('studio')\n  const isSelectable = getIsSelectable(event)\n  const handleClick = useCallback(\n    (evt: MouseEvent<HTMLDivElement>) => {\n      evt.preventDefault()\n      evt.stopPropagation()\n\n      if (isSelectable) {\n        onSelect(event)\n      }\n    },\n    [onSelect, event, isSelectable],\n  )\n  return (\n    <Tooltip content={isSelectable ? '' : t('changes.not-selectable')} disabled={isSelectable}>\n      <Flex gap={1}>\n        <Card\n          as={isSelectable ? 'button' : 'div'}\n          onClick={handleClick}\n          padding={2}\n          pressed={isSelected}\n          radius={2}\n          data-ui=\"timelineItem\"\n          data-testid=\"timeline-item-button\"\n          data-chunk-timestamp={event.timestamp}\n          style={{\n            cursor: isSelectable ? 'pointer' : 'default',\n          }}\n        >\n          <Event event={event} showChangesBy=\"tooltip\" />\n        </Card>\n        {optionsMenu}\n      </Flex>\n    </Tooltip>\n  )\n}\n","import {\n  Flex,\n  Menu,\n  // eslint-disable-next-line no-restricted-imports\n  MenuItem,\n  Text,\n  usePortal,\n} from '@sanity/ui'\nimport {useCallback} from 'react'\nimport {\n  ContextMenuButton,\n  getReleaseTone,\n  getVersionFromId,\n  type PublishDocumentVersionEvent,\n  RELEASES_INTENT,\n  Translate,\n  useSetPerspective,\n  useTranslation,\n  VersionInlineBadge,\n} from 'sanity'\nimport {IntentLink} from 'sanity/router'\nimport {usePaneRouter} from 'sanity/structure'\n\nimport {MenuButton} from '../../../../../ui-components'\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {TIMELINE_MENU_PORTAL} from '../timelineMenu'\n\nexport function PublishedEventMenu({event}: {event: PublishDocumentVersionEvent}) {\n  const {t} = useTranslation(structureLocaleNamespace)\n  const portalContext = usePortal()\n  const {params, setParams} = usePaneRouter()\n  const setPerspective = useSetPerspective()\n\n  const handleOpenReleaseDocument = useCallback(() => {\n    setParams({\n      ...params,\n      rev: event.versionRevisionId || '@lastPublished',\n      since: undefined,\n      historyEvent: event.id,\n      historyVersion: getVersionFromId(event.versionId),\n    })\n  }, [setParams, params, event])\n\n  const handleOpenDraftDocument = useCallback(() => {\n    setParams({\n      ...params,\n      rev: event.versionRevisionId,\n      preserveRev: 'true',\n      since: undefined,\n    })\n    setTimeout(() => {\n      // A bug is generated when we change the perspective and the params at the same time\n      // Resetting the params to the value it had before, because the paneRouter uses the previous value\n      setPerspective('drafts')\n    }, 100)\n  }, [setParams, params, event.versionRevisionId, setPerspective])\n\n  const VersionBadge = ({children}: {children: React.ReactNode}) => {\n    return (\n      <VersionInlineBadge $tone={event.release ? getReleaseTone(event.release) : undefined}>\n        {children}\n      </VersionInlineBadge>\n    )\n  }\n  return (\n    <MenuButton\n      id={`timeline-item-menu-button-${event.versionId}`}\n      button={\n        <ContextMenuButton\n          aria-label={t('timeline-item.menu-button.aria-label')}\n          tooltipProps={{content: t('timeline-item.menu-button.tooltip')}}\n        />\n      }\n      menu={\n        <Menu padding={1}>\n          {event.release ? (\n            <>\n              <IntentLink\n                intent={RELEASES_INTENT}\n                params={{id: event.release?.name}}\n                style={{textDecoration: 'none'}}\n              >\n                <MenuItem padding={3}>\n                  <Flex align={'center'}>\n                    <Text size={1} style={{textDecoration: 'none'}}>\n                      <Translate\n                        components={{\n                          VersionBadge: ({children}) => <VersionBadge>{children} </VersionBadge>,\n                        }}\n                        i18nKey=\"events.open.release\"\n                        values={{\n                          releaseTitle: event.release.metadata.title,\n                        }}\n                        t={t}\n                      />\n                    </Text>\n                  </Flex>\n                </MenuItem>\n              </IntentLink>\n              <MenuItem onClick={handleOpenReleaseDocument}>\n                <Flex align={'center'}>\n                  <Text size={1}>\n                    <Translate\n                      components={{\n                        VersionBadge: ({children}) => <VersionBadge>{children} </VersionBadge>,\n                      }}\n                      i18nKey=\"events.inspect.release\"\n                      values={{\n                        releaseTitle: event.release.metadata.title,\n                      }}\n                      t={t}\n                    />\n                  </Text>\n                </Flex>\n              </MenuItem>\n            </>\n          ) : (\n            <MenuItem onClick={handleOpenDraftDocument} disabled={!event.versionRevisionId}>\n              <Flex align={'center'}>\n                <Text size={1}>\n                  <Translate\n                    components={{\n                      VersionBadge: ({children}) => (\n                        <VersionInlineBadge $tone=\"caution\">{children}</VersionInlineBadge>\n                      ),\n                    }}\n                    i18nKey=\"events.open.draft\"\n                    t={t}\n                  />\n                </Text>\n              </Flex>\n            </MenuItem>\n          )}\n        </Menu>\n      }\n      popover={{\n        // when used inside the timeline menu we want to keep the element inside the popover, to avoid closing the popover when clicking expand.\n        portal: portalContext.elements?.[TIMELINE_MENU_PORTAL] ? TIMELINE_MENU_PORTAL : true,\n        placement: 'bottom',\n        fallbackPlacements: ['bottom-end', 'bottom-start'],\n      }}\n    />\n  )\n}\n","import {Box, Flex, Spinner, Stack, Text} from '@sanity/ui'\nimport {motion, type Variants} from 'framer-motion'\nimport {useCallback, useEffect, useMemo, useState} from 'react'\nimport {\n  CommandList,\n  type CommandListRenderItemCallback,\n  type DocumentGroupEvent,\n  getDocumentVariantType,\n  isCreateDocumentVersionEvent,\n  isEditDocumentVersionEvent,\n  isPublishDocumentVersionEvent,\n  LoadingBlock,\n  useTranslation,\n} from 'sanity'\n\nimport {ExpandableTimelineItemButton} from '../expandableTimelineItemButton'\nimport {ListWrapper, Root} from '../timeline.styled'\nimport {EventTimelineItem} from './EventTimelineItem'\nimport {PublishedEventMenu} from './PublishedEventMenu'\n\ninterface TimelineProps {\n  events: DocumentGroupEvent[]\n  hasMoreEvents: boolean | null\n  selectedEventId?: string\n  onLoadMore: () => void\n  onSelect: (event: DocumentGroupEvent) => void\n  fetchEventChildren: (event: DocumentGroupEvent) => Promise<void>\n  /**\n   * The list needs a predefined max height for the scroller to work.\n   */\n  listMaxHeight?: string\n}\n\nconst TimelineItemWrapper = motion.create(Box)\nconst CHILDREN_ITEMS_VARIANTS: Variants = {\n  initial: {\n    opacity: 0,\n  },\n  animate: {\n    opacity: 1,\n  },\n  exit: {\n    opacity: 0,\n  },\n}\n\nconst ITEM_HEIGHT = 57\n\nexport const TIMELINE_LIST_WRAPPER_ID = 'timeline-list-wrapper'\n\nexport const EventsTimeline = ({\n  events: allEvents,\n  hasMoreEvents,\n  selectedEventId,\n  onLoadMore,\n  onSelect,\n  listMaxHeight = 'calc(100vh - 280px)',\n  fetchEventChildren,\n}: TimelineProps) => {\n  const [mounted, setMounted] = useState(false)\n  const {t} = useTranslation('studio')\n  const [expandedParents, setExpandedParents] = useState<Set<string>>(() => {\n    if (selectedEventId) {\n      // Find that event and if it has a parent, expand the parent.\n      const selectedEvent = allEvents.find((event) => event.id === selectedEventId)\n      if (selectedEvent && 'parentId' in selectedEvent && selectedEvent.parentId) {\n        return new Set([selectedEvent.parentId])\n      }\n    }\n    return new Set()\n  })\n  const [expandingParents, setExpandingParents] = useState<Set<string>>(new Set())\n\n  const events = useMemo(() => {\n    return allEvents.filter((event) => {\n      if (isCreateDocumentVersionEvent(event) && event.parentId) {\n        // Check if it's the last event in the list, in that case, we want to show it\n        const isLastEvent = allEvents[allEvents.length - 1].id === event.id\n        if (isLastEvent) return true\n        return expandedParents.has(event.parentId)\n      }\n      if (isEditDocumentVersionEvent(event) && event.parentId) {\n        return expandedParents.has(event.parentId)\n      }\n      return true\n    })\n  }, [expandedParents, allEvents])\n\n  const handleExpandParent = useCallback(\n    (event: DocumentGroupEvent) => async () => {\n      const parentId = event.id\n\n      let isExpanding = false\n      setExpandedParents((prev) => {\n        const next = new Set(prev)\n\n        if (prev.has(parentId)) next.delete(parentId)\n        else {\n          isExpanding = true\n          next.add(parentId)\n        }\n\n        return next\n      })\n      if (isExpanding) {\n        setExpandingParents((prev) => {\n          const next = new Set(prev)\n          next.add(parentId)\n          return next\n        })\n        await fetchEventChildren(event)\n        setExpandingParents((prev) => {\n          const next = new Set(prev)\n          next.delete(parentId)\n          return next\n        })\n      }\n    },\n    [fetchEventChildren, setExpandingParents],\n  )\n\n  const handleSelectChunk = useCallback(\n    (event: DocumentGroupEvent) => {\n      onSelect(event)\n    },\n    [onSelect],\n  )\n\n  const renderOptionsMenu = useCallback(\n    (event: DocumentGroupEvent) => {\n      const documentVariantType = getDocumentVariantType(event.documentId)\n      if (isPublishDocumentVersionEvent(event) && documentVariantType === 'published') {\n        return <PublishedEventMenu event={event} />\n      }\n      if (\n        isPublishDocumentVersionEvent(event) &&\n        documentVariantType === 'draft' &&\n        event.creationEvent\n      ) {\n        return (\n          <ExpandableTimelineItemButton\n            isExpanded={expandedParents.has(event.id)}\n            onExpand={handleExpandParent(event)}\n          />\n        )\n      }\n      return null\n    },\n    [expandedParents, handleExpandParent],\n  )\n\n  const renderItem = useCallback<CommandListRenderItemCallback<DocumentGroupEvent[][number]>>(\n    (event, {activeIndex}) => {\n      /**\n       * The create version event will be present while expanding (loading the edits), so we are attaching to it the loading block at the top.\n       * - publishEvent (expanding?)\n       * --- loadingBlock  ~createEvent~\n       * */\n      const showExpandingLoader =\n        isCreateDocumentVersionEvent(event) &&\n        event.parentId &&\n        expandingParents.has(event.parentId)\n\n      const isLastEvent = activeIndex === events.length - 1\n      if (showExpandingLoader) {\n        return (\n          <TimelineItemWrapper\n            animate={{opacity: 1}}\n            initial={{opacity: 0}}\n            transition={{duration: 0.2, delay: 0.2}}\n          >\n            {/* We need this item to match the same height as the rest of the list items, which is 57px */}\n            <Flex align=\"center\" justify=\"center\" style={{height: ITEM_HEIGHT}}>\n              <Spinner />\n            </Flex>\n          </TimelineItemWrapper>\n        )\n      }\n      return (\n        <TimelineItemWrapper\n          paddingBottom={1}\n          paddingRight={1}\n          key={event.timestamp}\n          animate=\"animate\"\n          exit=\"exit\"\n          initial=\"initial\"\n          variants={'parentId' in event ? CHILDREN_ITEMS_VARIANTS : undefined}\n          paddingLeft={\n            (isEditDocumentVersionEvent(event) || isCreateDocumentVersionEvent(event)) &&\n            event.parentId &&\n            !isLastEvent\n              ? 4\n              : 1\n          }\n        >\n          <EventTimelineItem\n            event={event}\n            isSelected={event.id === selectedEventId}\n            onSelect={handleSelectChunk}\n            optionsMenu={renderOptionsMenu(event)}\n          />\n\n          {isLastEvent && hasMoreEvents && <LoadingBlock />}\n        </TimelineItemWrapper>\n      )\n    },\n    [\n      expandingParents,\n      selectedEventId,\n      handleSelectChunk,\n      renderOptionsMenu,\n      events.length,\n      hasMoreEvents,\n    ],\n  )\n\n  useEffect(() => setMounted(true), [])\n  const selectedIndex = events.findIndex((event) => event.id === selectedEventId)\n\n  return (\n    <Root\n      /**\n       * We delay initial rendering if `selectedIndex` is present.\n       * This is a _temporary_ workaround to allow the virtual <CommandList>\n       * to scroll to a specific index prior to being displayed.\n       *\n       * Without this, there'll be a noticeable 'flash' where the virtual list\n       * will render with its child items at the top and then scroll into position.\n       */\n      $visible={!selectedIndex || mounted}\n      data-ui=\"timeline\"\n    >\n      {events.length > 0 ? (\n        <ListWrapper direction=\"column\" $maxHeight={listMaxHeight} id={TIMELINE_LIST_WRAPPER_ID}>\n          <CommandList\n            activeItemDataAttr=\"data-hovered\"\n            ariaLabel={t('timeline.list.aria-label')}\n            autoFocus=\"list\"\n            initialIndex={selectedIndex}\n            initialScrollAlign=\"center\"\n            itemHeight={ITEM_HEIGHT}\n            items={events}\n            onEndReached={onLoadMore}\n            onEndReachedIndexOffset={20}\n            overscan={5}\n            renderItem={renderItem}\n            wrapAround={false}\n          />\n        </ListWrapper>\n      ) : (\n        <Stack padding={3} space={3}>\n          <Text size={1} weight=\"medium\">\n            {t('timeline.error.no-document-history-title')}\n          </Text>\n          <Text muted size={1}>\n            {t('timeline.error.no-document-history-description')}\n          </Text>\n        </Stack>\n      )}\n    </Root>\n  )\n}\n\nEventsTimeline.displayName = 'EventsTimeline'\n","import {ChevronDownIcon} from '@sanity/icons'\nimport {\n  Flex,\n  type Placement,\n  PortalProvider,\n  useClickOutsideEvent,\n  useGlobalKeyDown,\n  useToast,\n} from '@sanity/ui'\nimport {useCallback, useMemo, useState} from 'react'\nimport {\n  type DocumentGroupEvent,\n  isDeleteDocumentGroupEvent,\n  isDeleteDocumentVersionEvent,\n  isScheduleDocumentVersionEvent,\n  isUnpublishDocumentEvent,\n  isUnscheduleDocumentVersionEvent,\n  TIMELINE_ITEM_I18N_KEY_MAPPING,\n  useEvents,\n  useTranslation,\n} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Button, Popover} from '../../../../../ui-components'\nimport {useDocumentPane} from '../../useDocumentPane'\nimport {TimelineError} from '../TimelineError'\nimport {EventsTimeline} from './EventsTimeline'\n\ninterface TimelineMenuProps {\n  event: DocumentGroupEvent | null\n  events: DocumentGroupEvent[]\n  mode: 'rev' | 'since'\n  placement?: Placement\n}\n\nconst Root = styled(Popover)`\n  overflow: hidden;\n  overflow: clip;\n`\n\nexport const TIMELINE_MENU_PORTAL = 'timeline-menu'\n\nconst formatParams = {\n  timestamp: {dateStyle: 'medium', timeStyle: 'short'},\n}\n\nexport function EventsTimelineMenu({event, events, mode, placement}: TimelineMenuProps) {\n  const {setTimelineRange} = useDocumentPane()\n  const [open, setOpen] = useState(false)\n  const [button, setButton] = useState<HTMLButtonElement | null>(null)\n  const [popoverRef, setPopoverRef] = useState<HTMLElement | null>(null)\n  const toast = useToast()\n  const {\n    nextCursor,\n    loading,\n    error: eventsError,\n    findRangeForRevision,\n    findRangeForSince,\n    loadMoreEvents,\n    expandEvent,\n  } = useEvents()\n\n  const {t} = useTranslation('studio')\n\n  const handleOpen = useCallback(() => {\n    setOpen(true)\n  }, [])\n\n  const handleClose = useCallback(() => {\n    setOpen(false)\n  }, [])\n\n  const handleGlobalKeyDown = useCallback(\n    (e: KeyboardEvent) => {\n      if (open && (e.key === 'Escape' || e.key === 'Tab')) {\n        handleClose()\n        button?.focus()\n      }\n    },\n    [button, handleClose, open],\n  )\n\n  useGlobalKeyDown(handleGlobalKeyDown)\n  useClickOutsideEvent(open && handleClose, () => [button, popoverRef])\n\n  const selectRev = useCallback(\n    (revEvent: DocumentGroupEvent) => {\n      try {\n        if (\n          isDeleteDocumentVersionEvent(revEvent) ||\n          isDeleteDocumentGroupEvent(revEvent) ||\n          isUnpublishDocumentEvent(revEvent) ||\n          isScheduleDocumentVersionEvent(revEvent) ||\n          isUnscheduleDocumentVersionEvent(revEvent)\n        ) {\n          console.error('Event is not selectable')\n          return\n        }\n        const [since, rev] = findRangeForRevision(revEvent?.id)\n        setTimelineRange(since, rev)\n        handleClose()\n      } catch (err) {\n        toast.push({\n          closable: true,\n          description: err.message,\n          status: 'error',\n          title: t('timeline.error.unable-to-load-revision'),\n        })\n      }\n    },\n    [t, toast, setTimelineRange, findRangeForRevision, handleClose],\n  )\n\n  const selectSince = useCallback(\n    (sinceEvent: DocumentGroupEvent) => {\n      try {\n        const [since, rev] = findRangeForSince(sinceEvent.id)\n        setTimelineRange(since, rev)\n        handleClose()\n      } catch (err) {\n        toast.push({\n          closable: true,\n          description: err.message,\n          status: 'error',\n          title: t('timeline.error.unable-to-load-revision'),\n        })\n      }\n    },\n    [findRangeForSince, setTimelineRange, toast, t, handleClose],\n  )\n\n  const handleLoadMore = useCallback(() => {\n    if (!loading && nextCursor) {\n      loadMoreEvents()\n    }\n  }, [loading, loadMoreEvents, nextCursor])\n\n  const content = useMemo(() => {\n    if (eventsError) return <TimelineError />\n\n    return (\n      <EventsTimeline\n        events={events}\n        fetchEventChildren={expandEvent}\n        hasMoreEvents={Boolean(nextCursor)}\n        selectedEventId={event?.id}\n        onLoadMore={handleLoadMore}\n        onSelect={mode === 'rev' ? selectRev : selectSince}\n      />\n    )\n  }, [\n    eventsError,\n    mode,\n    expandEvent,\n    events,\n    nextCursor,\n    event?.id,\n    handleLoadMore,\n    selectSince,\n    selectRev,\n  ])\n\n  const revLabel = event\n    ? t(TIMELINE_ITEM_I18N_KEY_MAPPING[event.type], {\n        context: 'timestamp',\n        timestamp: new Date(event.timestamp),\n        formatParams,\n      })\n    : t('timeline.latest-revision')\n\n  // eslint-disable-next-line no-nested-ternary\n  const sinceLabel = event\n    ? t(TIMELINE_ITEM_I18N_KEY_MAPPING[event.type], {\n        context: 'timestamp',\n        timestamp: new Date(event.timestamp),\n        formatParams,\n      })\n    : events.length > 0\n      ? t('timeline.since-version-missing')\n      : t('timeline.no-previous-events')\n\n  const buttonLabel = mode === 'rev' ? revLabel : sinceLabel\n\n  return (\n    <PortalProvider __unstable_elements={{[TIMELINE_MENU_PORTAL]: popoverRef}}>\n      <Root\n        data-testid=\"timeline-menu\"\n        constrainSize\n        content={open && content}\n        data-ui=\"versionMenu\"\n        open={open}\n        placement={placement}\n        matchReferenceWidth\n        portal\n        ref={setPopoverRef}\n      >\n        <Flex width={'fill'}>\n          <Button\n            data-testid={open ? 'timeline-menu-close-button' : 'timeline-menu-open-button'}\n            disabled={loading || !events.length}\n            mode=\"ghost\"\n            onClick={open ? handleClose : handleOpen}\n            ref={setButton}\n            selected={open}\n            width=\"fill\"\n            tooltipProps={null}\n            justify={'space-between'}\n            style={{\n              maxWidth: '100%',\n            }}\n            iconRight={ChevronDownIcon}\n            text={loading ? t('timeline.loading-history') : buttonLabel}\n          />\n        </Flex>\n      </Root>\n    </PortalProvider>\n  )\n}\n","import {BoundaryElementProvider, Box, Card, Flex, Spinner, Text} from '@sanity/ui'\nimport {motion} from 'framer-motion'\nimport {type ReactElement, useMemo, useState} from 'react'\nimport {useObservable} from 'react-rx'\nimport {\n  ChangeFieldWrapper,\n  ChangeList,\n  ChangesError,\n  type DocumentChangeContextInstance,\n  LoadingBlock,\n  NoChanges,\n  type ObjectSchemaType,\n  ScrollContainer,\n  useEvents,\n  useTranslation,\n} from 'sanity'\nimport {DocumentChangeContext} from 'sanity/_singletons'\nimport {styled} from 'styled-components'\n\nimport {EventsTimelineMenu} from '../../timeline/events/EventsTimelineMenu'\nimport {useDocumentPane} from '../../useDocumentPane'\n\nconst Scroller = styled(ScrollContainer)`\n  height: 100%;\n  overflow: auto;\n  position: relative;\n  scroll-behavior: smooth;\n`\n\nconst Grid = styled(Box)`\n  &:not([hidden]) {\n    display: grid;\n  }\n  grid-template-columns: 48px 1fr;\n  align-items: center;\n  gap: 0.25em;\n`\n\nconst SpinnerContainer = styled(Flex)`\n  width: 100%;\n  position: absolute;\n  bottom: -4px;\n`\n\nconst DIFF_INITIAL_VALUE = {\n  diff: null,\n  loading: true,\n}\nexport function EventsInspector({showChanges}: {showChanges: boolean}): ReactElement {\n  const {documentId, schemaType, timelineError, value, formState} = useDocumentPane()\n  const [scrollRef, setScrollRef] = useState<HTMLDivElement | null>(null)\n\n  const {events, revision, sinceRevision, getChangesList} = useEvents()\n\n  const isComparingCurrent = !revision?.revisionId\n  const changesList$ = useMemo(() => getChangesList(), [getChangesList])\n  const {diff, loading: diffLoading} = useObservable(changesList$, DIFF_INITIAL_VALUE)\n\n  const {t} = useTranslation('studio')\n\n  const documentContext: DocumentChangeContextInstance = useMemo(() => {\n    return {\n      documentId,\n      schemaType,\n      FieldWrapper: ChangeFieldWrapper,\n      rootDiff: diff,\n      isComparingCurrent: isComparingCurrent && !formState?.readOnly,\n      value,\n      showFromValue: true,\n    }\n  }, [diff, documentId, isComparingCurrent, formState?.readOnly, schemaType, value])\n\n  const [sinceEvent, toEvent] = useMemo(() => {\n    if (!events) return [null, null]\n    return [\n      events.find((e) => e.id === sinceRevision?.revisionId) || null,\n      events.find((e) => e.id === revision?.revisionId) || events[0],\n    ]\n  }, [events, revision?.revisionId, sinceRevision?.revisionId])\n\n  const sinceEvents = useMemo(() => {\n    // The sinceEvents need to account the toEvent showing only events that are older than the toEvent\n    if (!toEvent) return events.slice(1)\n    return events.slice(events.indexOf(toEvent) + 1).map((event) => {\n      // If the to event has a parent id, we need to remove the parent id from the since events or they won't be rendered, as they have no parent to expand.\n      if ('parentId' in toEvent && 'parentId' in event && event.parentId === toEvent.parentId) {\n        return {...event, parentId: undefined}\n      }\n      return event\n    })\n  }, [events, toEvent])\n\n  return (\n    <Flex data-testid=\"review-changes-pane\" direction=\"column\" height=\"fill\" overflow=\"hidden\">\n      <Box padding={3} style={{position: 'relative'}}>\n        <Grid paddingX={2} paddingBottom={2}>\n          <Text size={1} muted>\n            {t('changes.inspector.from-label')}\n          </Text>\n          <EventsTimelineMenu\n            event={sinceEvent || null}\n            events={sinceEvents}\n            mode=\"since\"\n            placement=\"bottom-start\"\n          />\n          <Text size={1} muted>\n            {t('changes.inspector.to-label')}\n          </Text>\n          <EventsTimelineMenu\n            event={toEvent || null}\n            events={events}\n            mode=\"rev\"\n            placement=\"bottom-end\"\n          />\n        </Grid>\n        {diffLoading && (\n          <motion.div\n            animate={{opacity: 1}}\n            initial={{opacity: 0}}\n            transition={{delay: 0.2, duration: 0.2}}\n          >\n            <SpinnerContainer justify=\"center\" align=\"center\" gap={2}>\n              <Text muted size={0}>\n                {t('changes.loading-changes')}\n              </Text>\n              <Spinner size={0} />\n            </SpinnerContainer>\n          </motion.div>\n        )}\n      </Box>\n\n      <Card flex={1} paddingX={2} paddingY={2}>\n        <BoundaryElementProvider element={scrollRef}>\n          <Scroller data-ui=\"Scroller\" ref={setScrollRef}>\n            <Box flex={1} paddingX={3} height=\"fill\">\n              {showChanges && (\n                <Content\n                  documentContext={documentContext}\n                  error={timelineError}\n                  loading={revision?.loading || sinceRevision?.loading || false}\n                  schemaType={schemaType}\n                />\n              )}\n            </Box>\n          </Scroller>\n        </BoundaryElementProvider>\n      </Card>\n    </Flex>\n  )\n}\n\nfunction Content({\n  error,\n  documentContext,\n  loading,\n  schemaType,\n}: {\n  error?: Error | null\n  documentContext: DocumentChangeContextInstance\n  loading: boolean\n  schemaType: ObjectSchemaType\n}) {\n  if (error) {\n    return <ChangesError />\n  }\n\n  if (loading) {\n    return <LoadingBlock showText />\n  }\n\n  if (!documentContext.rootDiff) {\n    return (\n      <motion.div\n        animate={{opacity: 1}}\n        initial={{opacity: 0}}\n        transition={{delay: 0.2, duration: 0.2}}\n      >\n        <NoChanges />\n      </motion.div>\n    )\n  }\n\n  return (\n    <DocumentChangeContext.Provider value={documentContext}>\n      <ChangeList diff={documentContext.rootDiff} schemaType={schemaType} />\n    </DocumentChangeContext.Provider>\n  )\n}\n","import {BoundaryElementProvider, Card, Flex, useToast} from '@sanity/ui'\nimport {useCallback, useState} from 'react'\nimport {\n  type DocumentGroupEvent,\n  isDeleteDocumentGroupEvent,\n  isDeleteDocumentVersionEvent,\n  isScheduleDocumentVersionEvent,\n  isUnpublishDocumentEvent,\n  isUnscheduleDocumentVersionEvent,\n  LoadingBlock,\n  ScrollContainer,\n  useEvents,\n  useTranslation,\n} from 'sanity'\nimport {useDocumentPane} from 'sanity/structure'\nimport {styled} from 'styled-components'\n\nimport {EventsTimeline} from '../../timeline/events/EventsTimeline'\nimport {TimelineError} from '../../timeline/TimelineError'\n\nconst Scroller = styled(ScrollContainer)`\n  height: 100%;\n  overflow: auto;\n  position: relative;\n  scroll-behavior: smooth;\n`\n\nexport function EventsSelector({showList}: {showList: boolean}) {\n  const [scrollRef, setScrollRef] = useState<HTMLDivElement | null>(null)\n  const [listHeight, setListHeight] = useState(0)\n  const {setTimelineRange} = useDocumentPane()\n  const getScrollerRef = useCallback(\n    (el: HTMLDivElement | null) => {\n      if (!listHeight && el) {\n        /**\n         * Hacky solution, the list height needs to be defined, it cannot be obtained from the parent using a `max-height: 100%`\n         * Because the scroller won't work properly and it won't scroll to the selected element on mount.\n         * To fix this, this component will set the list height to the height of the parent element - 1px, to avoid a double scroll line.\n         */\n        setListHeight(el.clientHeight ? el.clientHeight - 1 : 0)\n        setScrollRef(el)\n      }\n    },\n    [listHeight],\n  )\n  const {\n    events,\n    nextCursor,\n    loading,\n    error,\n    revision,\n    loadMoreEvents,\n    findRangeForRevision,\n    expandEvent,\n  } = useEvents()\n\n  const {t} = useTranslation('studio')\n  const toast = useToast()\n\n  const selectRev = useCallback(\n    (event: DocumentGroupEvent) => {\n      try {\n        if (\n          isDeleteDocumentVersionEvent(event) ||\n          isDeleteDocumentGroupEvent(event) ||\n          isUnpublishDocumentEvent(event) ||\n          isScheduleDocumentVersionEvent(event) ||\n          isUnscheduleDocumentVersionEvent(event)\n        ) {\n          console.error('Event is not selectable')\n          return\n        }\n        const [since, rev] = findRangeForRevision(event.id)\n        setTimelineRange(since, rev)\n      } catch (err) {\n        toast.push({\n          closable: true,\n          description: err.message,\n          status: 'error',\n          title: t('timeline.error.unable-to-load-revision'),\n        })\n      }\n    },\n    [t, toast, setTimelineRange, findRangeForRevision],\n  )\n\n  const initialLoad = loading && !events.length\n  return (\n    <Flex data-testid=\"review-changes-pane\" direction=\"column\" height=\"fill\">\n      <Card flex={1} padding={2} paddingTop={0}>\n        {error ? (\n          <TimelineError />\n        ) : (\n          <BoundaryElementProvider element={scrollRef}>\n            <Scroller data-ui=\"Scroller\" ref={getScrollerRef}>\n              {listHeight &&\n              // This forces the list to unmount and remount, which is needed to reset the scroll position\n              showList &&\n              !initialLoad ? (\n                <EventsTimeline\n                  events={events}\n                  fetchEventChildren={expandEvent}\n                  hasMoreEvents={Boolean(nextCursor)}\n                  // If we have a revision, we select it, otherwise we select the first event\n                  selectedEventId={revision?.revisionId || events[0]?.id}\n                  onLoadMore={loadMoreEvents}\n                  onSelect={selectRev}\n                  listMaxHeight={`${listHeight}px`}\n                />\n              ) : null}\n              {loading && <LoadingBlock />}\n            </Scroller>\n          </BoundaryElementProvider>\n        )}\n      </Card>\n    </Flex>\n  )\n}\n","import {BoundaryElementProvider, Card, Flex, useToast} from '@sanity/ui'\nimport {useCallback, useState} from 'react'\nimport {\n  type Chunk,\n  ScrollContainer,\n  usePerspective,\n  useTimelineSelector,\n  useTranslation,\n} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Timeline} from '../../timeline'\nimport {TimelineError} from '../../timeline/TimelineError'\nimport {useDocumentPane} from '../../useDocumentPane'\n\nconst Scroller = styled(ScrollContainer)`\n  height: 100%;\n  overflow: auto;\n  position: relative;\n  scroll-behavior: smooth;\n`\n\nexport function HistorySelector({showList}: {showList: boolean}) {\n  const {timelineError, setTimelineRange, timelineStore} = useDocumentPane()\n  const {selectedReleaseId} = usePerspective()\n  const [scrollRef, setScrollRef] = useState<HTMLDivElement | null>(null)\n  const [listHeight, setListHeight] = useState(0)\n\n  const getScrollerRef = useCallback((el: HTMLDivElement | null) => {\n    if (!el?.clientHeight) return\n    /**\n     * Hacky solution, the list height needs to be defined, it cannot be obtained from the parent using a `max-height: 100%`\n     * Because the scroller won't work properly and it won't scroll to the selected element on mount.\n     * To fix this, this component will set the list height to the height of the parent element - 1px, to avoid a double scroll line.\n     */\n    setListHeight(el.clientHeight - 1)\n    setScrollRef(el)\n  }, [])\n\n  const chunks = useTimelineSelector(timelineStore, (state) => state.chunks)\n  const realRevChunk = useTimelineSelector(timelineStore, (state) => state.realRevChunk)\n  const hasMoreChunks = useTimelineSelector(timelineStore, (state) => state.hasMoreChunks)\n  const loading = useTimelineSelector(timelineStore, (state) => state.isLoading)\n\n  const {t} = useTranslation('studio')\n  const toast = useToast()\n  const selectRev = useCallback(\n    (revChunk: Chunk) => {\n      try {\n        const [sinceId, revId] = timelineStore?.findRangeForRev(revChunk) || [null, null]\n        setTimelineRange(sinceId, revId)\n      } catch (err) {\n        toast.push({\n          closable: true,\n          description: err.message,\n          status: 'error',\n          title: t('timeline.error.unable-to-load-revision'),\n        })\n      }\n    },\n    [setTimelineRange, t, timelineStore, toast],\n  )\n\n  const handleLoadMore = useCallback(() => {\n    // If updated, be sure to update the TimeLineMenu component as well\n    if (!loading) {\n      timelineStore?.loadMore()\n    }\n  }, [loading, timelineStore])\n\n  return (\n    <Flex data-testid=\"review-changes-pane\" direction=\"column\" height=\"fill\">\n      <Card flex={1} padding={2} paddingTop={0}>\n        {timelineError || selectedReleaseId ? (\n          <TimelineError versionError={Boolean(selectedReleaseId)} />\n        ) : (\n          <BoundaryElementProvider element={scrollRef}>\n            <Scroller data-ui=\"Scroller\" ref={getScrollerRef}>\n              {listHeight &&\n              // This forces the list to unmount and remount, which is needed to reset the scroll position\n              showList ? (\n                <Timeline\n                  chunks={chunks}\n                  hasMoreChunks={hasMoreChunks}\n                  lastChunk={realRevChunk}\n                  onLoadMore={handleLoadMore}\n                  onSelect={selectRev}\n                  listMaxHeight={`${listHeight}px`}\n                />\n              ) : null}\n            </Scroller>\n          </BoundaryElementProvider>\n        )}\n      </Card>\n    </Flex>\n  )\n}\n","import {CloseIcon} from '@sanity/icons'\nimport {Box, Flex, TabList, TabPanel} from '@sanity/ui'\nimport {type DocumentInspectorProps, useSource, useTranslation} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Button, Tab} from '../../../../../ui-components'\nimport {usePaneRouter} from '../../../../components/paneRouter/usePaneRouter'\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {HISTORY_INSPECTOR_NAME} from '../../constants'\nimport {ChangesInspector} from './ChangesInspector'\nimport {EventsInspector} from './EventsInspector'\nimport {EventsSelector} from './EventsSelector'\nimport {HistorySelector} from './HistorySelector'\n\nconst FadeInFlex = styled(Flex)`\n  opacity: 0;\n  transition: opacity 200ms;\n  &[data-ready] {\n    opacity: 1;\n  }\n`\nconst TABS = ['history', 'review'] as const\nconst isValidTab = (tab: string | undefined): tab is (typeof TABS)[number] =>\n  // @ts-expect-error TS doesn't understand the type guard\n  tab && TABS.includes(tab)\n\nexport function ChangesTabs(props: DocumentInspectorProps) {\n  const {params, setParams} = usePaneRouter()\n  const source = useSource()\n\n  const {t} = useTranslation(structureLocaleNamespace)\n  const isReady = params?.inspect === HISTORY_INSPECTOR_NAME\n\n  const paneRouterTab = isValidTab(params?.changesInspectorTab)\n    ? params.changesInspectorTab\n    : TABS[0]\n\n  const setPaneRouterTab = (tab: (typeof TABS)[number]) =>\n    setParams({\n      ...params,\n      changesInspectorTab: tab,\n      // Reset the since when changing the tab, as it's not relevant for the history tab\n      since: tab === 'history' ? undefined : params?.since,\n    })\n\n  return (\n    <FadeInFlex direction=\"column\" padding={0} height=\"fill\" data-ready={isReady ? '' : undefined}>\n      <Flex align=\"center\" padding={3} gap={2}>\n        <TabList space={1} flex={1}>\n          <Tab\n            aria-controls=\"history-panel\"\n            id=\"history-tab\"\n            label={t('changes.tab.history')}\n            onClick={() => setPaneRouterTab('history')}\n            selected={paneRouterTab === 'history'}\n          />\n          <Tab\n            aria-controls=\"review-changes-panel\"\n            id=\"changes-tab\"\n            label={t('changes.tab.review-changes')}\n            onClick={() => setPaneRouterTab('review')}\n            selected={paneRouterTab === 'review'}\n          />\n        </TabList>\n        <Box flex=\"none\">\n          <Button\n            aria-label={t('changes.action.close-label')}\n            icon={CloseIcon}\n            mode=\"bleed\"\n            onClick={props.onClose}\n            tooltipProps={{content: t('document-inspector.close-button.tooltip')}}\n          />\n        </Box>\n      </Flex>\n\n      <TabPanel\n        aria-labelledby=\"history-tab\"\n        height=\"fill\"\n        hidden={paneRouterTab !== 'history'}\n        id=\"history-panel\"\n      >\n        {source.beta?.eventsAPI?.documents ? (\n          <EventsSelector showList={paneRouterTab === 'history'} />\n        ) : (\n          <HistorySelector showList={paneRouterTab === 'history'} />\n        )}\n      </TabPanel>\n\n      <TabPanel\n        aria-labelledby=\"review-tab\"\n        hidden={paneRouterTab !== 'review'}\n        id=\"review-panel\"\n        height=\"fill\"\n      >\n        {source.beta?.eventsAPI?.documents ? (\n          <>\n            {paneRouterTab === 'review' ? (\n              <EventsInspector showChanges={paneRouterTab === 'review'} />\n            ) : null}\n          </>\n        ) : (\n          <ChangesInspector showChanges={paneRouterTab === 'review'} />\n        )}\n      </TabPanel>\n    </FadeInFlex>\n  )\n}\n","import {RestoreIcon} from '@sanity/icons'\nimport {type DocumentInspector, useTranslation} from 'sanity'\n\nimport {useStructureTool} from '../../../../useStructureTool'\nimport {HISTORY_INSPECTOR_NAME} from '../../constants'\nimport {ChangesTabs} from './ChangesTabs'\n\nexport const changesInspector: DocumentInspector = {\n  name: HISTORY_INSPECTOR_NAME,\n  useMenuItem: () => {\n    const {features} = useStructureTool()\n    const {t} = useTranslation()\n\n    return {\n      hidden: !features.reviewChanges,\n      icon: RestoreIcon,\n      title: t('changes.title'),\n    }\n  },\n  component: ChangesTabs,\n  onClose: ({params}) => ({\n    params: {\n      ...params,\n      since: undefined,\n      rev: undefined,\n      changesInspectorTab: undefined,\n      historyVersion: undefined,\n    },\n  }),\n  onOpen: ({params}) => ({params: {...params, since: '@lastPublished'}}),\n}\n","/* eslint-disable no-loop-func */\n\nimport {type Path, type SanityDocument, type SchemaType} from '@sanity/types'\nimport {isArray, isRecord} from 'sanity'\n\nexport function getPathTitles(options: {\n  path: Path\n  schemaType: SchemaType\n  value: Partial<SanityDocument> | null\n}): Array<{name: string; title?: string}> {\n  const {path, schemaType, value} = options\n  const result: Array<{name: string; title?: string}> = []\n\n  let s = schemaType\n  let v: unknown = value\n\n  for (const segment of path) {\n    // field name\n    if (typeof segment === 'string') {\n      if (!isRecord(v) && v !== undefined) {\n        throw new Error(`Parent value is not an object, cannot get path segment: .${segment}`)\n      }\n\n      if (s.jsonType !== 'object') {\n        throw new Error(\n          `Parent type is not an object schema type, cannot get path segment: .${segment}`,\n        )\n      }\n\n      v = v?.[segment]\n\n      const field = s.fields.find((f) => f.name === segment)\n\n      if (!field) {\n        result.push({name: segment})\n        return result\n      }\n\n      s = field.type\n\n      result.push(s)\n\n      continue\n    }\n\n    // array item index\n    if (typeof segment === 'number') {\n      if (!isArray(v) && v !== undefined) {\n        throw new Error(`Parent value is not an array, cannot get path segment: [${segment}]`)\n      }\n\n      if (s.jsonType !== 'array') {\n        throw new Error(\n          `Parent type is not an array schema type, cannot get path segment: [${segment}]`,\n        )\n      }\n\n      v = v?.[segment]\n\n      const itemType = s.of.find((ofType) => {\n        if (typeof v === 'string') {\n          return ofType.jsonType === 'string'\n        }\n\n        if (typeof v === 'number') {\n          return ofType.jsonType === 'number'\n        }\n\n        if (typeof v === 'boolean') {\n          return ofType.jsonType === 'boolean'\n        }\n\n        if (isRecord(v)) {\n          return ofType.name === v?._type\n        }\n\n        return false\n      })\n\n      if (!itemType) {\n        throw new Error(`Item type not found: [${segment}]`)\n      }\n\n      s = itemType\n\n      result.push(s)\n\n      continue\n    }\n\n    // array item key\n    if (isRecord(segment) && segment._key) {\n      if (!isArray(v)) {\n        throw new Error(\n          `Parent value is not an array, cannot get path segment: [_key == ${segment}]`,\n        )\n      }\n\n      if (s.jsonType !== 'array') {\n        throw new Error(\n          `Parent type is not an array schema type, cannot get path segment: .${segment}`,\n        )\n      }\n\n      const values = v ?? []\n\n      v = values.find((i) => isRecord(i) && i._key === segment._key)\n\n      if (!isRecord(v)) {\n        throw new Error(`Array item not found: [_key == ${segment._key}]`)\n      }\n\n      const ofType = s.of.find((i) => isRecord(v) && i.name === v?._type)\n\n      if (!ofType) {\n        throw new Error(`Array item type not found: .${v?._type}`)\n      }\n\n      s = ofType\n\n      result.push(s)\n\n      continue\n    }\n\n    throw new Error(`Invalid path segment: ${JSON.stringify(segment)}`)\n  }\n\n  return result\n}\n","import {\n  ErrorOutlineIcon,\n  type IconComponent,\n  InfoOutlineIcon,\n  WarningOutlineIcon,\n} from '@sanity/icons'\nimport {\n  type ObjectSchemaType,\n  type Path,\n  type SanityDocument,\n  type SchemaType,\n  type ValidationMarker,\n} from '@sanity/types'\nimport {Box, Card, type CardTone, Flex, Stack, Text} from '@sanity/ui'\nimport {type ErrorInfo, Fragment, useCallback, useMemo, useState} from 'react'\nimport {type DocumentInspectorProps, useTranslation} from 'sanity'\n\nimport {ErrorBoundary} from '../../../../../ui-components'\nimport {DocumentInspectorHeader} from '../../documentInspector'\nimport {useDocumentPane} from '../../useDocumentPane'\nimport {getPathTitles} from './getPathTitles'\n\nconst MARKER_ICON: Record<'error' | 'warning' | 'info', IconComponent> = {\n  error: ErrorOutlineIcon,\n  warning: WarningOutlineIcon,\n  info: InfoOutlineIcon,\n}\n\nconst MARKER_TONE: Record<'error' | 'warning' | 'info', CardTone> = {\n  error: 'critical',\n  warning: 'caution',\n  info: 'primary',\n}\n\nexport function ValidationInspector(props: DocumentInspectorProps) {\n  const {onClose} = props\n  const {onFocus, onPathOpen, schemaType, validation, value} = useDocumentPane()\n  const {t} = useTranslation('validation')\n\n  const handleOpen = useCallback(\n    (path: Path) => {\n      onPathOpen(path)\n      onFocus(path)\n    },\n    [onFocus, onPathOpen],\n  )\n\n  return (\n    <Flex direction=\"column\" height=\"fill\" overflow=\"hidden\">\n      <DocumentInspectorHeader\n        as=\"header\"\n        closeButtonLabel={t('panel.close-button-aria-label')}\n        flex=\"none\"\n        onClose={onClose}\n        title={t('panel.title')}\n      />\n\n      <Card flex={1} overflow=\"auto\" padding={3}>\n        {validation.length === 0 && (\n          <Box padding={2}>\n            <Text muted size={1}>\n              {t('panel.no-errors-message')}\n            </Text>\n          </Box>\n        )}\n\n        {validation.length > 0 && (\n          <Stack space={2}>\n            {validation.map((marker, i) => (\n              <ValidationCard\n                // eslint-disable-next-line react/no-array-index-key\n                key={i}\n                marker={marker}\n                onOpen={handleOpen}\n                schemaType={schemaType}\n                value={value}\n              />\n            ))}\n          </Stack>\n        )}\n      </Card>\n    </Flex>\n  )\n}\n\nfunction ValidationCard(props: {\n  marker: ValidationMarker\n  onOpen: (path: Path) => void\n  schemaType: ObjectSchemaType\n  value: Partial<SanityDocument> | null\n}) {\n  const {marker, onOpen, schemaType, value} = props\n  const handleOpen = useCallback(() => onOpen(marker.path), [marker, onOpen])\n  const [errorInfo, setErrorInfo] = useState<{error: Error; info: ErrorInfo} | null>(null)\n  const Icon = MARKER_ICON[marker.level]\n\n  return (\n    <ErrorBoundary onCatch={setErrorInfo}>\n      {errorInfo && (\n        <Card padding={3} radius={2} tone=\"critical\">\n          <Text size={1}>{errorInfo.error.message}</Text>\n        </Card>\n      )}\n\n      {!errorInfo && (\n        <Card\n          __unstable_focusRing\n          as=\"button\"\n          onClick={handleOpen}\n          padding={3}\n          radius={2}\n          tone={MARKER_TONE[marker.level]}\n        >\n          <Flex align=\"flex-start\" gap={3}>\n            <Box flex=\"none\">\n              <Text size={1}>\n                <Icon />\n              </Text>\n            </Box>\n\n            <Stack flex={1} space={2}>\n              <DocumentNodePathBreadcrumbs\n                path={marker.path}\n                schemaType={schemaType}\n                value={value}\n              />\n\n              <Text muted size={1}>\n                {marker.message}\n              </Text>\n            </Stack>\n          </Flex>\n        </Card>\n      )}\n    </ErrorBoundary>\n  )\n}\n\nfunction DocumentNodePathBreadcrumbs(props: {\n  path: Path\n  schemaType: SchemaType\n  value: Partial<SanityDocument> | null\n}) {\n  const {path, schemaType, value} = props\n\n  const pathTitles = useMemo(() => {\n    try {\n      return getPathTitles({path, schemaType, value})\n    } catch (e) {\n      console.error(e)\n    }\n    return null\n  }, [path, schemaType, value])\n\n  if (!pathTitles?.length) return null\n\n  return (\n    <Text size={1}>\n      {pathTitles.map((t, i) => (\n        <Fragment key={i}>\n          {i > 0 && <span style={{color: 'var(--card-muted-fg-color)', opacity: 0.5}}> / </span>}\n          <span style={{fontWeight: 500}}>{t.title || t.name}</span>\n        </Fragment>\n      ))}\n    </Text>\n  )\n}\n","import {CheckmarkCircleIcon, ErrorOutlineIcon, WarningOutlineIcon} from '@sanity/icons'\nimport {useMemo} from 'react'\nimport {\n  type DocumentInspector,\n  type DocumentInspectorMenuItem,\n  type DocumentInspectorUseMenuItemProps,\n  type FormNodeValidation,\n  isValidationError,\n  isValidationWarning,\n  usePerspective,\n  useTranslation,\n  useValidationStatus,\n} from 'sanity'\n\nimport {VALIDATION_INSPECTOR_NAME} from '../../constants'\nimport {ValidationInspector} from './ValidationInspector'\n\nfunction useMenuItem(props: DocumentInspectorUseMenuItemProps): DocumentInspectorMenuItem {\n  const {documentId, documentType} = props\n  const {t} = useTranslation('validation')\n  const {selectedReleaseId} = usePerspective()\n  const {validation: validationMarkers} = useValidationStatus(\n    documentId,\n    documentType,\n    selectedReleaseId,\n  )\n\n  const validation: FormNodeValidation[] = useMemo(\n    () =>\n      validationMarkers.map((item) => ({\n        level: item.level,\n        message: item.message,\n        path: item.path,\n      })),\n    [validationMarkers],\n  )\n\n  const hasErrors = validation.some(isValidationError)\n  const hasWarnings = validation.some(isValidationWarning)\n\n  const icon = useMemo(() => {\n    if (hasErrors) return ErrorOutlineIcon\n    if (hasWarnings) return WarningOutlineIcon\n    return CheckmarkCircleIcon\n  }, [hasErrors, hasWarnings])\n\n  const tone = useMemo(() => {\n    if (hasErrors) return 'critical'\n    if (hasWarnings) return 'caution'\n    return 'positive'\n  }, [hasErrors, hasWarnings])\n\n  return {\n    hidden: validation.length === 0,\n    icon,\n    title: t('panel.title'),\n    tone,\n    showAsAction: true,\n  }\n}\n\nexport const validationInspector: DocumentInspector = {\n  name: VALIDATION_INSPECTOR_NAME,\n  component: ValidationInspector,\n  useMenuItem,\n}\n","import {omit} from 'lodash'\nimport {decodeJsonParams, encodeJsonParams, route} from 'sanity/router'\n\nimport {type RouterPaneGroup, type RouterPanes, type RouterPaneSibling} from './types'\n\nconst EMPTY_PARAMS = {}\n\n/**\n * @internal\n */\nexport function legacyEditParamsToState(params: string): Record<string, unknown> {\n  try {\n    return JSON.parse(decodeURIComponent(params))\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.warn('Failed to parse JSON parameters')\n    return {}\n  }\n}\n\nexport function encodePanesSegment(panes: RouterPanes): string {\n  return (panes || [])\n    .map((group) => group.map(encodeChunks).join('|'))\n    .map(encodeURIComponent)\n    .join(';')\n}\n\n/**\n * @internal\n */\nexport function legacyEditParamsToPath(params: Record<string, unknown>): string {\n  return JSON.stringify(params)\n}\n\n// http://localhost:3333/intent/create/template=book-by-author;type=book/eyJhdXRob3JJZCI6Imdycm0ifQ==\n\n/**\n * @internal\n */\nexport function toState(pathSegment: string): RouterPaneGroup[] {\n  return parsePanesSegment(decodeURIComponent(pathSegment))\n}\n\n/**\n * @internal\n */\nexport function toPath(panes: RouterPaneGroup[]): string {\n  return encodePanesSegment(panes)\n}\n\nexport const router = route.create('/', [\n  // \"Asynchronous intent resolving\" route\n  route.intents('/intent'),\n\n  // Legacy fallback route, will be redirected to new format\n  route.create('/edit/:type/:editDocumentId', [\n    route.create({\n      path: '/:params',\n      transform: {params: {toState: legacyEditParamsToState, toPath: legacyEditParamsToPath}},\n    }),\n  ]),\n\n  // The regular path - when the intent can be resolved to a specific pane\n  route.create({\n    path: '/:panes',\n    // Legacy URLs, used to handle redirects\n    children: [route.create('/:action', route.create('/:legacyEditDocumentId'))],\n    transform: {\n      panes: {toState, toPath},\n    },\n  }),\n])\n\n// old: authors;knut,{\"template\":\"diaryEntry\"}\n// new: authors;knut,view=diff,eyJyZXYxIjoiYWJjMTIzIiwicmV2MiI6ImRlZjQ1NiJ9|latest-posts\n\nconst panePattern = /^([.a-z0-9_-]+),?({.*?})?(?:(;|$))/i\nconst isParam = (str: string) => /^[a-z0-9]+=[^=]+/i.test(str)\nconst isPayloadLike = (str: string) => /^[A-Za-z0-9\\-_]+(?:={0,2})$/.test(str)\nconst exclusiveParams = ['view', 'since', 'rev', 'inspect', 'comment']\n\ntype Truthy<T> = T extends false\n  ? never\n  : T extends ''\n    ? never\n    : T extends 0\n      ? never\n      : T extends 0n\n        ? never\n        : T extends null | undefined\n          ? NonNullable<T>\n          : T\nconst isTruthy = Boolean as (t: unknown) => boolean as <T>(t: T) => t is Truthy<T>\n\nfunction parseChunks(chunks: string[], initial: RouterPaneSibling): RouterPaneSibling {\n  const sibling: RouterPaneSibling = {...initial, params: EMPTY_PARAMS, payload: undefined}\n  return chunks.reduce((pane, chunk) => {\n    if (isParam(chunk)) {\n      const key = chunk.slice(0, chunk.indexOf('='))\n      const value = chunk.slice(key.length + 1)\n      pane.params = {...pane.params, [decodeURIComponent(key)]: decodeURIComponent(value)}\n    } else if (isPayloadLike(chunk)) {\n      pane.payload = tryParseBase64Payload(chunk)\n    } else {\n      // eslint-disable-next-line no-console\n      console.warn('Unknown pane segment: %s - skipping', chunk)\n    }\n\n    return pane\n  }, sibling)\n}\n\nfunction encodeChunks(pane: RouterPaneSibling, index: number, group: RouterPaneGroup): string {\n  const {payload, params = {}, id} = pane\n  const [firstSibling] = group\n  const paneIsFirstSibling = pane === firstSibling\n  const sameAsFirst = index !== 0 && id === firstSibling.id\n  const encodedPayload =\n    typeof payload === 'undefined' ? undefined : encodeJsonParams(payload as any)\n\n  const encodedParams = Object.entries(params)\n    .filter((entry): entry is [string, string] => {\n      const [key, value] = entry\n      if (!value) return false\n      if (paneIsFirstSibling) return true\n\n      // omit the value if it's the same as the value from the first sibling\n      const valueFromFirstSibling = firstSibling.params?.[key]\n      if (value === valueFromFirstSibling && !exclusiveParams.includes(key)) return false\n      return true\n    })\n    .map(([key, value]) => `${encodeURIComponent(key)}=${encodeURIComponent(value)}`)\n\n  return (\n    [sameAsFirst ? '' : id]\n      .concat([encodedParams.length > 0 && encodedParams, encodedPayload].filter(isTruthy).flat())\n      .join(',') || ','\n  )\n}\n\nexport function parsePanesSegment(str: string): RouterPanes {\n  if (str.indexOf(',{') !== -1) {\n    return parseOldPanesSegment(str)\n  }\n\n  return str\n    .split(';')\n    .map((group) => {\n      const [firstSibling, ...restOfSiblings] = group.split('|').map((segment) => {\n        const [id, ...chunks] = segment.split(',')\n        return parseChunks(chunks, {id})\n      })\n\n      return [\n        firstSibling,\n        ...restOfSiblings.map((sibling) => ({\n          ...firstSibling,\n          ...sibling,\n          id: sibling.id || firstSibling.id,\n          params: {...omit(firstSibling.params, exclusiveParams), ...sibling.params},\n          payload: sibling.payload || firstSibling.payload,\n        })),\n      ]\n    })\n    .filter((group) => group.length > 0)\n}\n\nfunction parseOldPanesSegment(str: string): RouterPanes {\n  const chunks: RouterPaneGroup = []\n\n  let buffer = str\n  while (buffer.length) {\n    const [match, id, payloadChunk] = buffer.match(panePattern) || []\n    if (!match) {\n      buffer = buffer.slice(1)\n      continue\n    }\n\n    const payload = payloadChunk && tryParsePayload(payloadChunk)\n    chunks.push({id, payload})\n\n    buffer = buffer.slice(match.length)\n  }\n\n  return [chunks]\n}\n\nfunction tryParsePayload(json: string) {\n  try {\n    return JSON.parse(json)\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.warn(`Failed to parse parameters: ${err.message}`)\n    return undefined\n  }\n}\n\nfunction tryParseBase64Payload(data: string): unknown {\n  try {\n    return data ? decodeJsonParams(data) : undefined\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.warn(`Failed to parse parameters: ${err.message}`)\n    return undefined\n  }\n}\n","import {MasterDetailIcon} from '@sanity/icons'\nimport {lazy} from 'react'\nimport {definePlugin} from 'sanity'\n\nimport {\n  DeleteAction,\n  DiscardChangesAction,\n  DuplicateAction,\n  HistoryRestoreAction,\n  PublishAction,\n  UnpublishAction,\n} from './documentActions'\nimport {LiveEditBadge} from './documentBadges'\nimport {getIntentState} from './getIntentState'\nimport {structureUsEnglishLocaleBundle} from './i18n'\nimport {changesInspector} from './panes/document/inspectors/changes'\nimport {validationInspector} from './panes/document/inspectors/validation'\nimport {router} from './router'\nimport {type StructureToolOptions} from './types'\n\nconst documentActions = [\n  PublishAction,\n  UnpublishAction,\n  DiscardChangesAction,\n  DuplicateAction,\n  DeleteAction,\n  HistoryRestoreAction,\n]\n\nconst documentBadges = [LiveEditBadge]\n\nconst inspectors = [validationInspector, changesInspector]\n\n/**\n * The structureTool is a studio plugin which adds the “structure tool” – a tool within\n * Sanity Studio in which content editors can drill down to specific documents to edit them.\n * You can configure your Studio's structure tool(s).\n *\n * @public\n * @param options - Options for the structure tool. See {@link StructureToolOptions}\n * @example Minimal example\n * ```ts\n * // sanity.config.ts\n * import { defineConfig } from 'sanity'\n * import { structureTool } from 'sanity/structure'\n *\n * export default defineConfig((\n *  // ...\n *  plugins: [\n *    structureTool() // use defaults\n *  ]\n * })\n * ```\n *\n * @example To customise your structure tool\n * ```ts\n * // sanity.config.ts\n * import { defineConfig } from 'sanity'\n * import { structureTool } from 'sanity/structure'\n * import { FaCar } from 'react-icons'\n\n * export default defineConfig((\n *\t // ...\n *   plugins: [\n *    structureTool({\n *      name: 'cars',\n *      title: 'Cars',\n *      icon: FaCar,\n *      structure: (S) => S.documentTypeList('car'),\n *      defaultDocumentNode: (S) =>\n *        S.document().views([\n *          S.view.form(),\n *          S.view.component(Preview).title('Preview')\n *        ])\n *    })\n *  ]\n * })\n * ```\n * */\nexport const structureTool = definePlugin<StructureToolOptions | void>((options) => {\n  const icon = options?.icon || MasterDetailIcon\n\n  return {\n    name: 'sanity/structure',\n    document: {\n      actions: (prevActions) => {\n        // NOTE: since it's possible to have several structure tools in one Studio,\n        // we need to check whether the document actions already exist in the Studio config\n        return Array.from(new Set([...prevActions, ...documentActions]))\n      },\n      badges: (prevBadges) => {\n        // NOTE: since it's possible to have several structure tools in one Studio,\n        // we need to check whether the document badges already exist in the Studio config\n        return Array.from(new Set([...prevBadges, ...documentBadges]))\n      },\n      inspectors: (prevInspectors) => {\n        // NOTE: since it's possible to have several structure tools in one Studio,\n        // we need to check whether the inspectors already exist in the Studio config\n        return Array.from(new Set([...prevInspectors, ...inspectors]))\n      },\n    },\n\n    tools: [\n      {\n        name: options?.name || 'structure',\n        title: options?.title || 'Structure',\n        icon,\n        component: lazy(() => import('./components/structureTool')),\n        canHandleIntent: (intent, params) => {\n          if (intent === 'create') return canHandleCreateIntent(params)\n          if (intent === 'edit') return canHandleEditIntent(params)\n          return false\n        },\n        getIntentState,\n        // Controlled by sanity/src/structure/components/structureTool/StructureTitle.tsx\n        controlsDocumentTitle: true,\n        options,\n        router,\n        __internalApplicationType: 'sanity/structure',\n      },\n    ],\n\n    i18n: {\n      bundles: [structureUsEnglishLocaleBundle],\n    },\n  }\n})\n\nfunction canHandleCreateIntent(params: Record<string, unknown>) {\n  // We can't handle create intents without a `type` parameter\n  if (!('type' in params)) {\n    return false\n  }\n\n  // We can handle any create intent as long as it has a `type` parameter,\n  // but we also know how to deal with templates, where other tools might not\n  return 'template' in params ? {template: true} : true\n}\n\nfunction canHandleEditIntent(params: Record<string, unknown>) {\n  // We can't handle edit intents without an `id` parameter\n  if (!('id' in params)) {\n    return false\n  }\n\n  // We can handle any edit intent with a document ID, but we're best at `structure` mode\n  // This ensures that other tools that can handle modes such as `presentation` or `batch`\n  // can take precedence over the structure tool\n  return 'mode' in params ? {mode: params.mode === 'structure'} : true\n}\n","import {type ReactNode, useMemo, useState} from 'react'\nimport {useConfigContextFromSource, useDocumentStore, useSource} from 'sanity'\nimport {StructureToolContext} from 'sanity/_singletons'\n\nimport {createStructureBuilder, type DefaultDocumentNodeResolver} from './structureBuilder'\nimport {\n  type StructureResolver,\n  type StructureToolContextValue,\n  type UnresolvedPaneNode,\n} from './types'\n\n/** @internal */\nexport interface StructureToolProviderProps {\n  structure?: StructureResolver\n  defaultDocumentNode?: DefaultDocumentNodeResolver\n  children: ReactNode\n}\n\n/** @internal */\nexport function StructureToolProvider({\n  defaultDocumentNode,\n  structure: resolveStructure,\n  children,\n}: StructureToolProviderProps): React.JSX.Element {\n  const [layoutCollapsed, setLayoutCollapsed] = useState(false)\n  const source = useSource()\n  const configContext = useConfigContextFromSource(source)\n  const documentStore = useDocumentStore()\n\n  const S = useMemo(() => {\n    return createStructureBuilder({\n      defaultDocumentNode,\n      source,\n    })\n  }, [defaultDocumentNode, source])\n\n  const rootPaneNode = useMemo(() => {\n    // TODO: unify types and remove cast\n    if (resolveStructure)\n      return resolveStructure(S, {\n        ...configContext,\n        documentStore,\n      }) as UnresolvedPaneNode\n    return S.defaults() as UnresolvedPaneNode\n  }, [S, resolveStructure, configContext, documentStore])\n\n  const features: StructureToolContextValue['features'] = useMemo(\n    () => ({\n      backButton: layoutCollapsed,\n      resizablePanes: !layoutCollapsed,\n      reviewChanges: !layoutCollapsed,\n      splitPanes: !layoutCollapsed,\n      splitViews: !layoutCollapsed,\n    }),\n    [layoutCollapsed],\n  )\n\n  const structureTool: StructureToolContextValue = useMemo(() => {\n    return {\n      features,\n      layoutCollapsed,\n      setLayoutCollapsed,\n      rootPaneNode,\n      structureContext: S.context,\n    }\n  }, [features, layoutCollapsed, rootPaneNode, S.context])\n\n  return (\n    <StructureToolContext.Provider value={structureTool}>{children}</StructureToolContext.Provider>\n  )\n}\n"],"names":["structureLocaleNamespace","structureUsEnglishLocaleBundle","defineLocaleResourceBundle","locale","namespace","resources","DocTitle","props","$","_c","document","documentValue","schema","useSchema","t0","_type","get","schemaType","t","useTranslation","t1","value","error","useValuePreview","t2","t3","message","errorMessage","title","color","ChevronWrapper","styled","Box","CrossDatasetReferencesDetails","details","CrossDatasetReferencesSummary","summary","Table","table","theme","rem","sanity","space","DocumentIdFlex","Flex","OtherReferenceCount","difference","totalCount","references","length","count","Symbol","for","t4","t5","PaneItemPreview","icon","layout","presence","isRecord","isValidElement","isString","isNumber","data","loading","useActiveReleases","releasesIds","useReleasesIds","perspectiveStack","selectedPerspectiveName","usePerspective","documentPreviewStore","_id","getPreviewStateObservable","ids","stack","previewStateObservable","draft","isLoading","published","version","versions","previewIsLoading","useObservable","status","tooltip","t6","getPreviewValueWithFallback","perspective","t7","BackLink","forwardRef","ref","routerPanesState","groupIndex","useContext","PaneRouterContext","slice","panes","state","usePaneLayout","pane","PaneLayoutContext","Error","ChildLink","childId","childParameters","childPayload","rest","id","params","payload","ParameterizedLink","currentPanes","siblingIndex","nextParams","useUnique","nextPayload","currentGroup","currentSibling","nextSibling","nextGroup","t8","t9","nextPanes","t10","nextState","t11","ReferenceChildLink","children","documentId","documentType","parentRefPath","template","pathToString","type","usePaneRouter","EMPTY_ARRAY","ReferencePreviewLink","onClick","getPublishedId","documentPresence","useDocumentPresence","useDocumentPreviewStore","name","linkProps","ConfirmDeleteDialogBody","crossDatasetReferences","internalReferences","documentTitle","action","datasetNames","hasUnknownDatasetNames","onReferenceLinkClick","toast","useToast","item","UnknownIcon","renderPreviewItem","DocumentTitle","T0","T1","T2","t12","normalizedDatasetNames","datasetSubtitle","datasets","join","context","t13","t14","t15","t16","Card","map","item_0","borderTop","undefined","documentCount","minWidth","filter","_temp","t17","index","projectId","datasetName","CopyIcon","content","navigator","clipboard","writeText","then","push","catch","reference","isClientError","e","POLL_INTERVAL","visiblePoll$","getVisiblePoll$","fromEvent","pipe","startWith","visibilityState","distinctUntilChanged","switchMap","visible","timer","EMPTY","shareReplay","refCount","bufferSize","getDocumentExistence","versionedClient","draftId","getDraftId","publishedId","requestOptions","uri","getDataUrl","json","query","excludeContent","tag","observable","request","omitted","nonExistant","doc","reason","some","fetchCrossDatasetReferences","checkDocumentId","of","currentDataset","config","dataset","url","catchError","statusCode","useInternalReferences","createHookFromObservableFactory","documentStore","listenQuery","fetch","listen","transitions","throttleTime","useCrossDatasetReferences","useReferringDocuments","useClient","DEFAULT_STUDIO_CLIENT_OPTIONS","useDocumentStore","isInternalReferencesLoading","isCrossDatasetReferencesLoading","Array","from","Set","Boolean","sort","projectIds","_temp2","_temp3","_temp4","crossDatasetReference_1","crossDatasetReference","crossDatasetReference_0","DialogBody","LoadingContainer","attrs","align","direction","justify","ConfirmDeleteDialog","onCancel","onConfirm","dialogId","useId","showConfirmButton","text","cancelButton","confirmButton","ConfirmDeleteDialogContainer","setError","useState","handleRetry","tone","Delay","ms","ready","setReady","timeoutId","setTimeout","clearTimeout","useEffect","PANE_DEBUG","PANE_COLLAPSED_WIDTH","PANE_DEFAULT_MIN_WIDTH","Root","Layer","PaneDivider","disabled","element","resize","dragging","setDragging","event","preventDefault","startX","pageX","handleMouseMove","deltaX","handleMouseUp","e_0","window","removeEventListener","addEventListener","handleMouseDown","Pane","forwardedRef","currentMaxWidthProp","currentMinWidthProp","maxWidthProp","minWidthProp","restProps","currentMinWidth","currentMaxWidth","flex","maxWidth","selected","flexProp","rootElement","setRootElement","collapse","collapsed","layoutCollapsed","expand","expandedElement","mount","p","find","indexOf","paneIndex","nextPane","isLast","expanded","nextCollapsed","useRef","current","useImperativeHandle","refValue","setRef","useLayoutEffect","handleCollapse","handleExpand","contextValue","bb0","bb1","hidden","divider","Infinity","t18","style","t19","t20","t21","t22","t23","t24","t25","t26","t27","t28","displayName","usePane","PaneContext","PaneContent","as","overflow","padding","toLowerCaseNoSpaces","str","toLocaleLowerCase","replaceAll","MENU_GROUP_POPOVER_PROPS","constrainSize","placement","portal","PaneMenuButtonItem","isAfterGroup","node","getI18nText","useGetI18nText","child","childIndex","key","child_0","childIndex_0","PaneContextMenuItemResolver","intent","PaneContextMenuItem","tooltipContent","useI18nText","hotkey","split","iconRight","CheckmarkIcon","onAction","PaneContextIntentMenuItem","intentLink","useIntentLink","handleClick","href","CONTEXT_MENU_POPOVER_PROPS","nodesHasTone","nodes","PaneContextMenuButton","actionsNodes","hasCritical","hasCaution","nodeIndex","RootCard","PaneFooter","$border","css","Layout","TitleCard","fg","bg","card","enabled","TitleTextSkeleton","TextSkeleton","TitleText","Text","TabsBox","rgba","base","PaneHeader","actions","backButton","border","contentAfter","subActions","tabs","tabIndex","paneElement","paneRect","useElementRect","height","innerHeight","width","layoutStyle","handleTitleClick","handleLayoutClick","showTabsOrSubActions","getDisabledReason","disabledReason","ariaLabel","isDisabled","PaneHeaderActionButton","warn","PaneHeaderMenuItemActionButton","hotkeys","PaneHeaderActionIntentButton","PaneHeaderMenuGroupActionButton","idx","_calcPaneResize","cache","left","right","sum","leftMinWidth","rightMinWidth","leftMaxWidth","Math","min","rightMaxWidth","minDeltaX","rightMinDeltaX","maxDeltaX","leftMaxDeltaX","_deltaX","max","leftW","rightW","leftFlex","rightFlex","_getDOMPath","el","path","parentElement","childNodes","unshift","EMPTY_PATH","_sortElements","elements","WeakMap","set","_sortByElementPath","a","b","_a","_b","len","i","aIndex","bIndex","createPaneLayoutController","observers","optionsMap","userCollapsedElementSet","rootWidth","resizeDataMap","Map","resizing","add","_notifyObservers","delete","options","original","splice","leftElement","leftIndex","leftOptions","rightElement","rightOptions","offsetWidth","leftResizeData","rightResizeData","nextRootElement","setRootWidth","nextRootWidth","subscribe","observer","_elements","dataMap","lastElement","collapsedWidth","remaingWidth","userCollapsed","has","sizeCollapsed","resizeData","PaneLayout","onCollapse","onExpand","controller","setState","paneLayout","isMenuNodeButton","renderAsButton","isNotMenuNodeButton","negate","resolveMenuNodes","fieldActions","menuItems","menuItemGroups","keyOffset","mapFieldActionToPaneMenuNode","groups","itemGroup","g","i18n","ungroupedItems","group","shortcut","actionHandler","showAsAction","childIdx","IntentButton","searchParams","linkRef","Link","InsufficientPermissionsMessageTooltip","reveal","currentUser","useCurrentUser","POPOVER_PROPS","getIntent","templates","typeName","templateId","baseParams","initialDocumentId","parameters","PaneHeaderCreateButton","templateItems","useTemplates","selectedReleaseId","isReleaseActive","useIsReleaseActive","tCore","templatePermissions","isTemplatePermissionsLoading","useTemplatePermissions","every","nothingGranted","reduce","permissionsById","AddIcon","firstItem","granted","itemIndex","disabled_0","intent_0","acc","permission_0","permission","isNonNullable","hashObject","sortObject","v","isArray","Object","entries","keyA","keyB","localeCompare","JSON","stringify","parse","PaneHeaderActions","memo","initialValueTemplateItems","initialValueTemplateItemsFromStructure","actionHandlers","EMPTY_OBJECT","handleAction","useCallback","console","handler","menuNodes","useMemo","actionNodes","contextMenuNodes","initialValueTemplateItemFromMenuItems","menuItemIndex","intentParams","templateParams","description","combinedInitialValueTemplates","uniqBy","MissingSchemaType","Code","getIconWithFallback","defaultIcon","PaneItem","pressed","margin","marginBottom","marginTop","hasSchemaType","clicked","setClicked","isSanityDocument","DocumentIcon","opacity","FolderIcon","preview","metaKey","preloading","setPreload","timeoutRef","startTransition","handleMouseEnter","handleMouseLeave","PreloadDocumentPane","RenderActionCollectionState","actionProps","onActionComplete","RenderBadgeCollectionState","badges","badgeProps","ErrorPane","paneKey","getWaitMessages","thresholds","messageKey","isDev","src","merge","threshold","mapTo","delay","DEFAULT_MESSAGE_KEY","Content","LoadingPane","messageProp","resolvedMessage","currentMessage","setCurrentMessage","sub","unsubscribe","contentElement","setContentElement","mounted","setMounted","_raf2","DELAY","useDocumentPane","documentPane","DocumentPaneContext","CommentsWrapper","CommentsProviderWrapper","useCommentsEnabled","connectionState","onPathOpen","inspector","openInspector","setParams","createPathWithParams","selectedCommentId","comment","paramsRef","commentId","inspect","COMMENTS_INSPECTOR_NAME","location","origin","getCommentLink","handleClearSelectedComment","handleOpenCommentsInspector","_DEBUG","EMPTY_PARAMS","LOADING_PANE","DOCUMENT_PANEL_PORTAL_ELEMENT","useStructureTool","structureTool","StructureToolContext","DOCUMENT_PANEL_MIN_WIDTH","DOCUMENT_PANEL_INITIAL_MIN_WIDTH","DOCUMENT_INSPECTOR_MIN_WIDTH","DOCUMENT_INSPECTOR_MAX_WIDTH","INSPECT_ACTION_PREFIX","DEFAULT_MENU_ITEM_GROUPS","HISTORY_INSPECTOR_NAME","VALIDATION_INSPECTOR_NAME","DocumentInspectorMenuItemsResolver","inspectors","onMenuItems","setMenuItems","newFieldActions","setMenuItem","prev","next","InspectorMenuItems","useMenuItem","defineInspectorMenuItemComponent","InspectorMenuItem","menuItem","useDocumentTitle","displayed","subscribed","IGNORE_OPS","DocumentOperationResults","pushToast","documentPaneValue","documentTitleInfo","titleError","useDocumentOperationEvent","prevEvent","paneRouter","includes","op","documentTitleBase","cleanupId","closable","duration","Strong","closeCurrentAndAfter","isLiveEditEnabled","liveEdit","position","zIndex","lineHeight","DocumentInspectorHeader","closeButtonLabel","forwardedAs","onClose","CloseIcon","DocumentInspectorPanel","closeInspector","features","handleClose","Component","component","resizablePanes","STRUCTURE_TOOL_NAMESPACE","useStructureToolSetting","defaultValue","keyValueStore","useKeyValueStore","keyValueStoreKey","getKey","value_0","newValue","setKey","VIEW_MODE_PARSED","VIEW_MODE_RAW","VIEW_MODES","lru","LRU","maxSize","isExpanded","keyPath","cached","toggleExpanded","selectElement","sel","getSelection","range","createRange","removeAllRanges","selectNodeContents","addRange","select","currentTarget","maybeSelectAll","keyCode","ctrlKey","isDocumentLike","JSONInspectorWrapper","div","fonts","code","family","sizes","fontSize","syntax","property","constant","string","boolean","number","Search","onChange","target","handleChange","SearchIcon","InspectDialog","onInspectClose","dialogIdPrefix","viewModeId","onViewModeChange","mode","viewMode","setParsedViewMode","setRawViewMode","bottom","outline","ignoreCase","Banner","Icon","paddingY","DeletedDocumentBanners","isDeleted","isDeleting","selectedPerspective","isPublishedPerspective","isDraftPerspective","DeletedDocumentBanner","lastNonDeletedRevId","restore","useDocumentOperation","navigateIntent","useRouter","execute","handleRestore","ReadOnlyIcon","ArchivedReleaseBanner","release","metadata","DocumentRemoveIcon","DeprecatedDocumentTypeBanner","isDeprecatedSchemaType","deprecated","ErrorOutlineIcon","AskToEditDialogOpened","defineEvent","AskToEditRequestSent","MAX_NOTE_LENGTH","RequestPermissionDialog","onRequestSubmitted","telemtry","useTelemetry","useProjectId","apiVersion","client","zOffset","useZIndex","isSubmitting","setIsSubmitting","note","setNote","msgError","setMsgError","hasTooManyRequests","setHasTooManyRequests","hasBeenDenied","setHasBeenDenied","adminRole","roles","requestedRole","method","body","requestUrl","log","err","response","errMessage","finally","onSubmit","fullscreen","role_0","role","appliesToUsers","LOADING_STATE","EMPTY_STATE","DECLINED_STATE","PENDING_STATE","EXPIRED_STATE","useRoleRequestsStatus","checkRoleRequests","checkRoleRequests$","requests","projectRequests","resourceId","declinedRequest","isAfter","addWeeks","Date","createdAt","isBefore","InsufficientPermissionBanner","requiredPermission","roleRequestStatus","requestStatusLoading","requestStatusError","requestSent","setRequestSent","requestPending","currentUserRoles","isOnlyViewer","showRequestPermissionDialog","setShowRequestPermissionDialog","listFormat","useListFormat","telemetry","roleTitles","formatToParts","Roles","part","ReferenceChangedBanner","replaceCurrent","routerReferenceId","parentSibling","parentId","hasHistoryOpen","rev","pathFromString","referenceInfoObservable","parentRefPathSegment","keyedSegmentIndex","findIndex","concat","unstable_observePathsDocumentPair","debounceTime","result","availability","pathGet","snapshot","_ref","referenceInfo","handleReloadReference","available","SyncIcon","WarningOutlineIcon","AddToReleaseBanner","currentRelease","LATEST","getReleaseTone","createVersion","useVersionOperations","getReleaseIdFromReleaseDocumentId","handleAddToRelease","Label","backgroundColor","borderRadius","textDecoration","fontWeight","ArchivedReleaseDocumentBanner","archivedReleases","useArchivedReleases","historyEvent","since","historyVersion","handleGoBack","r","VersionBadge","ResolvedLiveEdit","DraftLiveEditBanner","isPublishing","setPublishing","isDiscarding","setDiscarding","publish","discardChanges","liveEditResolveType","handlePublish","handleDiscard","ScheduledReleaseBanner","formatRelativeLocalePublishDate","date","TitleContainer","Stack","heading","FormHeader","isSingleton","__experimental_formPreviewTitle","LONG_ENOUGH_BUT_NOT_TOO_LONG","useConditionalToast","ev","FormView","margins","collapsedFieldSets","collapsedPaths","editState","validation","formState","onFocus","onBlur","onSetCollapsedPath","onSetCollapsedFieldSet","onSetActiveFieldGroup","openPath","patchChannel","isLocked","transactionSyncLock","pair","documentEvents","tap","prepareMutationEvent","prepareRebaseEvent","hasRev","_rev","patches","handleInitialValue","useEffectEvent","formRef","setFormRef","focusedFirstDescendant","setFocusedFirstDescendant","focusPath","focusFirstDescendant","changed","focused","members","readOnly","mutations","mut","patch","fromMutationPatches","remotePatches","remoteMutations","localPatches","localMutations","createPatchChannel","DocumentBox","Scroller","ScrollContainer","$disabled","DocumentPanel","footerHeight","headerHeight","isInspectOpen","setDocumentPanelPortalElement","activeViewId","views","permissions","isPermissionsLoading","parentPortal","usePortal","_portalElement","setPortalElement","documentScrollElement","setDocumentScrollElement","formContainerElement","_createdAt","view","activeView","portalElement","splitPanes","formViewHidden","ActiveViewComponent","historical","activeViewNode","isLiveEdit","scrollTo","inspectDialog","showInspector","isCreatingDocument","isReleaseDocument","isReleaseScheduledOrScheduling","getVersionFromId","banners","POPOVER_FALLBACK_PLACEMENTS","DIALOG_WIDTH_TO_UI_WIDTH","small","medium","large","full","ConfirmDialog","dialog","referenceElement","ConfirmDialogContent","cancelButtonIcon","cancelButtonText","confirmButtonIcon","confirmButtonText","isTopLayer","useLayer","useGlobalKeyDown","useClickOutsideEvent","Button","Grid","ModalDialog","footer","showCloseButton","header","Dialog","PopoverDialog","PopoverDialogContent","DocumentActionPortalProvider","ActionStateDialog","modalId","unknownModal","ActionDialogWrapper","actionStates","actionIndex","setActionIndex","currentAction","ActionMenuButton","idPrefix","setReferenceElement","preventOverflow","popoverProps","actionState","renderActionDialog","ActionMenuListItem","onHandle","String","label","replace","tooltipProps","s","toUpperCase","DISABLED_REASON_TITLE_KEY","NOTHING_TO_DELETE","NOT_READY","DeleteAction","onComplete","setIsDeleting","paneSetIsDeleting","deleteOp","isConfirmDialogOpen","setConfirmDialogOpen","handleCancel","handleConfirm","handle","useDocumentPairPermissions","TrashIcon","DISABLED_REASON_KEY","NO_CHANGES","NOT_PUBLISHED","DiscardChangesAction","ResetIcon","NOTHING_TO_DUPLICATE","DuplicateAction","duplicate","isDuplicating","setDuplicating","dupeId","uuid","duplicateSuccess","firstValueFrom","operationEvents","HistoryRestoreAction","revision","isRevisionInitial","isRevisionLatest","RevertIcon","DocumentPublished","LIVE_EDIT_ENABLED","ALREADY_PUBLISHED","publishedAt","AlreadyPublished","useTemporalPhrase","timeSincePublished","useRelativeTime","PublishAction","publishState","setPublishState","validationStatus","useValidationStatus","syncState","useSyncState","changesOpen","useEditState","isValidationErrorMarker","hasValidationErrors","publishScheduled","setPublishScheduled","isSyncing","isValidating","_updatedAt","hasDraft","doPublish","validationComplete","didPublish","publishedImmediately","previouslyPublished","PublishIcon","UnpublishAction","unpublish","UnpublishIcon","DocumentStatusBarActionsInner","showMenu","states","__internal_tasks","firstActionState","menuActionStates","buttonElement","setButtonElement","sideMenuItems","footerAction","DocumentStatusBarActions","allActions","renderDocumentStatusBarActions","HistoryStatusBarActions","revisionId","isRestoreAction","historyActions","toLowerCase","DocumentHeaderTabs","tabPanelId","DocumentHeaderTab","isActive","viewId","setView","DocumentHeaderTitle","TooltipContent","releaseType","intendedPublishAt","DATE_TIME_FORMAT","dateStyle","timeStyle","DocumentPerspectiveList","setPerspective","useSetPerspective","dateTimeFormat","useDateTimeFormat","releases","documentVersions","useDocumentVersions","filteredReleases","notCurrentReleases","currentReleases","inCreation","activeReleases","versionDocExists","releaseId","archivedRelease","handlePerspectiveChange","isPublishedChipDisabled","getReleaseChipState","isReleaseHistoryMatch","isPublishSelected","isPublishedId","isDraftSelected","displayedId","isVersionId","isDraftId","isDraftDisabled","format","menuReleaseId","releasesLoading","fromRelease","isVersion","releaseState","DocumentPanelHeader","_props","onMenuAction","onPaneClose","onPaneSplit","unstable_languageFilter","hasGroupSiblings","useFieldActions","menuButtonNodes","showTabs","showSplitPaneButton","splitViews","showSplitPaneCloseButton","showBackButton","showPaneGroupCloseButton","renderPaneActions","ArrowLeftIcon","renderedActions","LanguageFilterComponent","SplitVerticalIcon","DocumentPanelHeaderActionDialogDeferred","useDeferredValue","DocumentPanelHeaderActionDialog","SpacerButton","size","pointerEvents","visibility","BADGE_TONES","primary","success","warning","danger","DocumentBadgesInner","DocumentBadgesDeferred","DocumentBadges","renderDocumentBadges","badge","whiteSpace","TIMELINE_ICON_COMPONENTS","create","discardDraft","initial","editDraft","EditIcon","editLive","getTimelineEventIconComponent","hideScrollbarOnExpand","listWrapper","getElementById","TIMELINE_LIST_WRAPPER_ID","firstChildren","scrollHeight","clientHeight","currentStyle","getComputedStyle","overflowY","FlipIcon","ChevronLeftIcon","ExpandableTimelineItemButton","stopPropagation","handleExpandClick","StackWrapper","ListWrapper","$maxHeight","$visible","TIMELINE_ITEM_I18N_KEY_MAPPING","UserAvatarStack","maxLength","userIds","withTooltip","userId","IconBox","getTheme_v2","$color","avatar","TIMELINE_ITEM_EVENT_TONE","withinSelection","RELATIVE_TIME_OPTIONS","minimal","NameSkeleton","Skeleton","font","UserLine","user","useUser","collaborators","TimelineItem","chunk","isSelected","onSelect","optionsMenu","endTimestamp","timestamp","IconComponent","authors","authorUserIds","collaboratorsUsersIds","isSelectable","dateFormat","updatedTimeAgo","parsedDate","formattedTimestamp","evt","isNonPublishChunk","isPublishChunk","getPreviousPublishAction","chunks","previousPublish","addChunksMetadata","forEach","Timeline","hasMoreChunks","lastChunk","selectedChunk","onLoadMore","listMaxHeight","selectedChunkId","chunksWithMetadata","expandedParents","setExpandedParents","filteredChunks","handleExpandParent","selectedIndex","handleSelectChunk","timelineChunk","c","renderItem","activeIndex","TimelineError","versionError","Popover","TIMELINE_MENU_PORTAL","TimelineMenu","setTimelineRange","timelineError","timelineStore","open","setOpen","button","setButton","popoverRef","setPopoverRef","useTimelineSelector","realRevChunk","sinceTime","handleOpen","handleGlobalKeyDown","focus","selectRev","revChunk","sinceId","revId","findRangeForRev","selectSince","sinceChunk","findRangeForSince","handleLoadMore","loadMore","formatParams","revLabel","sinceLabel","buttonLabel","ChevronDownIcon","StyledMotionPath","motion","Circle","Arrows","Checkmark","rotateAnimation","keyframes","RotateGroup","root","syncing","scale","transition","saved","changes","circle","strokeDasharray","strokeDashoffset","arrows","checkmark","pathLength","AnimatedStatusIcon","STATUS_DICTIONARY","i18nKey","DocumentStatusPulse","currentStatus","MotionButton","ButtonSkeleton","DocumentStatusButton","author","translationKey","onHistoryOpen","onHistoryClose","relativeTime","FallbackStatus","createDocumentVersion","editDocumentVersion","EventsStatus","events","useEvents","TimelineStatus","TIMELINE_ITEM_I18N_KEY_MAPPING_LEGACY","SYNCING_TIMEOUT","SAVED_TIMEOUT","DocumentStatusLine","setStatus","eventsEnabled","useSource","beta","eventsAPI","documents","lastUpdated","timerId","timerId_0","state_0","StatusText","RevisionStatusLine","useResizeObserver","onResize","resizeObserver","observe","unobserve","CONTAINER_BREAKPOINT","DocumentStatusBar","actionsBoxRef","createLinkMetadata","onDocumentChange","CreateLinkedActions","useSanityCreateConfig","components","documentLinkedActions","showingRevision","setCollapsed","contentRect","handleResize","isReady","shouldRender","isSanityCreateLinked","flexShrink","marginLeft","KeyboardShortcutResponder","actionsBoxElement","onActionStart","onKeyDown","rootRef","As","activeAction","matchingStates","isHotkey","matchingState","handleKeyDown","DocumentActionShortcuts","setActiveIndex","renderDocumentActionShortcuts","getInspectorItems","currentInspector","hasValue","inspectorMenuItems","getInspectItem","JsonIcon","getProductionPreviewItem","previewUrl","EarthAmericasIcon","getMenuItems","inspectorItems","items","LinkIcon","usePreviewUrl","resolveProductionUrl","BehaviorSubject","subject","asObservable","DocumentLayoutError","DIALOG_PROVIDER_POSITION","StyledChangeConnectorRoot","ChangeConnectorRoot","DocumentLayout","inspectOpen","isInitialValueLoading","paneParams","zOffsets","getSanityCreateLinkMetadata","documentLinkedBannerContent","CreateLinkedBannerContent","startInCreateBanner","StartInCreateBanner","footerElement","setFooterElement","headerElement","setHeaderElement","setActionsBoxElement","documentPanelPortalElement","setInspectorMenuItems","rootFieldActionNodes","setRootFieldActionNodes","footerRect","headerRect","handleKeyUp","onConnectorSetFocus","portalElements","paneDialog","changesInspectorTab","ShowWhenPaneOpen","pick","plugin","unstable_layout","useDocumentLayoutComponent","defaultComponent","useMiddlewareComponents","DocumentURLCopied","CreatedDraft","getInitialValueTemplateOpts","opts","panePayload","structureNodeTemplate","templateName","urlTemplate","typeTemplates","DocumentPaneProvider","onFocusPath","forcedVersion","historyStore","store","timelineReady","revisionDocument","onOlderRevision","sinceDocument","isPristine","setDocumentMeta","useCopyPaste","documentActions","documentBadges","unstable_fieldActions","fieldActionsResolver","languageFilterResolver","inspectorsResolver","presenceStore","usePresenceStore","setPaneParams","viewsProp","paneOptions","documentIdRaw","isReleaseLocked","templateParameters","initialValueRaw","useInitialValue","initialValue","validationRaw","useConnectionState","getDocumentVersionType","actionsPerspective","documentActionsProps","versionType","versionName","languageFilter","setFocusPath","focusPathRef","setPresence","subscription","nextPresence","inspectorName","setInspectorName","inspectParamRef","resolvedChangesInspector","compareValue","newSince","newRev","handleBlur","blurredPath","disableBlurRef","closeInspectorName","nextInspectorName","nextInspector","currentParams","onOpen","handleHistoryClose","handleHistoryOpen","reviewChanges","handlePaneClose","closeCurrent","handlePaneSplit","duplicateCurrent","toggleLegacyInspect","toggle","omit","handleMenuAction","toString","startsWith","handleLegacyInspectClose","onSetOpenPath","fieldGroupState","onSetFieldGroupState","onSetCollapsedFieldSets","handleOnSetCollapsedPath","prevState","setAtPath","handleOnSetCollapsedFieldSet","handleSetActiveFieldGroup","groupName","docId","docPermissionsInput","useDocumentValuePermissions","isCreateLinked","isSanityCreateLinkedDocument","isNonExistent","hasNoPermission","updateActionDisabled","isActionEnabled","createActionDisabled","reconnecting","patchRef","useInsertionEffect","toMutationPatches","useFormState","comparisonValue","formStateRef","setOpenPath","getExpandOperations","updatePresence","nextFocusPath","setLocation","lastActiveAt","toISOString","selection","updatePresenceThrottled","throttle","leading","trailing","handleFocus","_nextFocusPath","pathFor","timeout","restParams","pathFromUrl","resolveKeyedPath","deepEquals","DocumentEventsPane","usePaneOptions","showingPublishedOnDraft","getVersionId","eventsStore","useEventsStore","sinceRevision","historyStoreProps","isDeleteDocumentGroupEvent","isDeleteDocumentVersionEvent","DocumentPaneWithLegacyTimelineStore","setTimelineError","onError","useTimelineStore","revTime","sinceAttributes","timelineDisplayed","_temp5","_temp6","_temp7","state_1","state_2","state_3","state_4","state_5","DocumentPaneProviderWrapper","useResetHistoryParams","isMounted","_perspective","param","preserveRev","updateHistoryParams","DocumentPane","parentSourceName","source","DocumentPaneInner","resolveNewDocumentOptions","isLoaded","isDocumentLoaded","useDocumentType","mergeDocumentType","providerProps","handleEditReference","childParams","routerPanesStateLength","activePath","PARTIAL_PAGE_LIMIT","FULL_LIST_LIMIT","DEFAULT_ORDERING","by","field","EMPTY_RECORD","RootBox","$opacity","CommandListBox","SKELETON_ITEMS","keys","LoadingView","num","DocumentListPaneContent","childItemId","filterIsSimpleTypeConstraint","hasMaxItems","hasSearchQuery","isLazyLoading","loadingVariant","onEndReached","onRetry","paneTitle","searchInputElement","showIcons","setShouldRender","handleEndReached","isLastItem","showSpinner","showMaxItemsMessage","limit","noDocumentsContent","mainContent","removePublishedWithDrafts","collate","entry","hasPublished","applyOrderingFunctions","order","orderBy","mapWith","fieldType","tryResolveSchemaTypeForPath","fieldExtendsType","jsonType","baseType","pathSegments","PathUtils","fromString","segment","getFieldTypeByName","isKeySegment","isIndexSegment","memberType","otherType","isReferenceSchemaType","refType","otherRefType","to","fieldName","fields","ofType","findTypes","types","isSplat","findStaticTypesInFilter","IMPLICIT_SCHEMA_TYPE_FIELDS","joinReferences","strict","head","tail","schemaField","refTypes","tailFields","tailWrapper","getExtendedProjection","ordering","swr","createSWR","listenSearchQuery","searchQuery","staticTypeNames","maxFieldDepth","searchStrategy","sortBy","extendedProjection","events$","defer","includeResult","mergeMap","throwError","share","welcome$","mutationAndReconnect$","partition","swrKey","take","asyncScheduler","exhaustMapWithTrailing","typeNames","getSearchableTypes","search","createSearch","strategy","maxDepth","doFetch","__unstable_extendedProjection","comments","skipSortByScore","hits","hit","fromCache","INITIAL_QUERY_STATE","isLoadingFullList","useDocumentList","searchFilter","paramsProp","sortOrder","useWorkspace","useSearchMaxFieldDepth","typeNameFromFilter","onRetry$","observableCallback","onFetchFullList$","onLoadFullList","queryResults$","listenSearchQueryArgs","partialList$","fullList$","withLatestFrom","takeUntil","caught$","safeError","scan","nonErrorThrownWarning","thrown","rotate","fadeIn","AnimatedSpinnerIcon","SpinnerIcon","SubtleSpinnerIcon","DelayedSubtleSpinnerIcon","DocumentListPane","sortOrderRaw","displayOptions","useShallowUnique","staticTypes","setSearchQuery","searchInputValue","setSearchInputValue","setSearchInputElement","sortWithOrderingFn","documentListIsLoading","trim","handleQueryChange","useObservableEvent","event$","debounce","handleClearSearch","handleSearchKeyDown","enableSearchSpinner","setEnableSearchSpinner","textInputIcon","initialValueTemplates","setLayout","setSortOrder","StructurePaneHeader","DocumentSheetListSelect","row","selectedAnchor","setSelectedAnchor","meta","handleOnClick","shiftKey","shiftClickIndex","lowerIndex","upperIndex","additionalSelectedRows","getRowModel","flatRows","currentSelectedRows","getSelectedRowModel","rows","setRowSelection","nextSelectedRows","rowId","isRowCurrentlySelected","getIsSelected","toggleSelected","paddingLeft","getCanSelect","useDocumentSheetListContext","DocumentSheetListContext","DocumentSheetListProvider","selectedAnchorCellDetails","setSelectedAnchorCellDetails","selectedRangeCellIndexes","setSelectedRangeCellIndexes","clearAndSetFocusSelection","nextAnchorDetails","activeElement","HTMLElement","blur","resetFocusSelection","changeSelectionColumn","visibleColumns","getVisibleLeafColumns","columnIndexAfterMove","col","colId","rowIndex","changeSelectionRange","previousSelection","anchorIndex","getNextIndex","startingIndex","firstSelectedIndex","lastIndexSelected","nextIndex","setSelectedAnchorCell","handleEscapePress","nextAnchorCellDetails","handleUpDownKey","isShiftKey","offset","newSelectedCellRowIndex","handleAnchorKeydown","handleAnchorClick","contains","focusAnchorCell","anchorCellDetails","getStateByCellId","submitFocusedCell","DataCell","td","PinnedDataCell","SheetListCellInner","getValue","column","cellId","renderValue","setRenderValue","isDirty","setIsDirty","inputRef","cellState","handleOnFocus","patchDocument","handleProgrammaticFocus","HTMLInputElement","handleOnMouseDown","detail","handleOnEnterDown","handleOnChange","handleOnBlur","handlePaste","clipboardData","getData","handleCopy","getBorderStyle","inputProps","boxShadow","SheetListCell","cell","isPinned","getIsPinned","Cell","borderWidth","getIsLastColumn","getStart","borderRight","getSize","flexRender","columnDef","getContext","VISIBLE_COLUMN_LIMIT","PreviewCell","displayValue","columnHelper","createColumnHelper","SUPPORTED_FIELDS","getColsFromSchemaType","parentalField","tableColumns","nextCol","accessor","enableHiding","info","isObjectSchemaType","columns","isAccessorKeyColumnDef","isGroupColumnDef","flatColumns","cols","flatMap","useDocumentSheetColumns","documentSchemaType","display","getIsSomeRowsSelected","getToggleAllPageRowsSelectedHandler","initialColumnsVisibility","accCols","countAllowedVisible","visibilityKey","ColumnsControl","isVisibleLimitReached","getCanHide","setInitialColumns","resetColumnVisibility","handleColumnOnChange","toggleVisibility","getColumnVisibilityDisabled","isColumnVisible","getIsVisible","isSingleColumnVisible","maxHeight","getAllLeafColumns","SearchContainer","DocumentSheetListFilter","useSearchState","filtersVisible","Header","th","PinnedHeader","HoverMenu","DocumentSheetListHeader","headerGroup","headerTitle","depth","parent","HeaderTag","canShowHeaderMenu","boxSizing","EllipsisHorizontalIcon","DocumentSheetListPaginator","setPageIndex","getCanPreviousPage","DoubleChevronLeftIcon","previousPage","getState","pagination","pageIndex","getPageCount","nextPage","getCanNextPage","ChevronRightIcon","DoubleChevronRightIcon","pageSize","setPageSize","Number","createDocumentsSet","documentsReducer","nextDocumentResult","_","restDocuments","updatedDocument","nextDocument","LISTEN_OPTIONS","useDocumentSheetListStore","QUERY","dispatch","useReducer","setIsLoading","res","initialFetch","handleListenerEvent","err_0","listener$","uniques","isDraft","values","dataAsArray","useDocumentSheetList","h","PaneContainer","TableContainer","DocumentSheetListPaneInner","totalRows","useReactTable","getCoreRowModel","getFilteredRowModel","getPaginationRowModel","autoResetPageIndex","initialState","columnPinning","columnVisibility","getRowId","fieldId","renderRow","getVisibleCells","rowsCount","getHeaderGroups","headers","DocumentSheetListPane","schemaTypeName","isDocumentSchemaType","addSelectedStateToMenuItems","isEqual","previous","setPrevious","shallowEquals","defaultLayout","defaultOrdering","sourceName","defaultSortOrder","menuItemsWithSelectedState","isSheetListLayout","SerializeError","constructor","parentPath","pathSegment","hint","withHelpUrl","helpId","HELP_URL","ORDER_BY_UPDATED_AT","ns","ORDER_BY_CREATED_AT","DEFAULT_SELECTED_ORDERING_OPTION","DEFAULT_ORDERING_OPTIONS","maybeSerializeMenuItem","MenuItemBuilder","serialize","_context","spec","clone","getAction","getTitle","getI18n","getGroup","getIcon","getParams","getShowAsAction","TITLE_REQUIRED","ACTION_OR_INTENT_REQUIRED","ACTION_AND_INTENT_MUTUALLY_EXCLUSIVE","withSpec","builder","getOrderingMenuItem","SortIcon","getOrderingMenuItemsForSchemaType","orderings","maybeSerializeMenuItemGroup","MenuItemGroupBuilder","_title","_i18n","getId","ID_REQUIRED","disallowedPattern","validateId","disallowedChar","match","getStructureNodeId","camelCased","camelCase","test","getSlug","ComponentBuilder","getChild","getComponent","getOptions","getMenuItemGroups","canHandleIntent","componentOptions","resolveTypeForDocument","getClient","GenericViewBuilder","kebabCase","isSerializable","maybeSerializeView","isComponentSpec","ComponentViewBuilder","componentOrSpec","userComponent","COMPONENT_REQUIRED","FormViewBuilder","form","createDocumentChildResolver","resolveDocumentNode","itemId","currentSegment","DocumentBuilder","paneId","getDocumentId","getSchemaType","initialValueTemplate","getInitialValueTemplate","getInitialValueTemplateParameters","getViews","urlId","DOCUMENT_ID_REQUIRED","viewIds","dupes","uniq","getDocumentOptions","documentFromEditor","documentFromEditorWithInitialValue","InitialValueTemplateItemBuilder","getDescription","getTemplateId","getParameters","subtitle","defaultInitialValueTemplateItems","getStructureBuilder","getTypeNames","tpl","initialValueTemplateItem","maybeSerializeInitialValueTemplateItem","menuItemsFromInitialValueTemplateItems","DEFAULT_INTENT_HANDLER","defaultIntentChecker","intentName","isEdit","isCreate","typedSpec","paneFilter","getTypeNamesFromFilter","identity","layoutOptions","noChildResolver","shallowIntentChecker","GenericListBuilder","initialValueTemplatesSpecified","getDefaultLayout","getCanHandleIntent","getShowIcons","getInitialValueTemplates","validateFilter","QUERY_PROVIDED_FOR_FILTER","createDocumentChildResolverForItem","parentItem","Promise","resolve","DocumentListBuilder","getApiVersion","getFilter","getDefaultOrdering","FILTER_REQUIRED","generateHelpUrl","API_VERSION_REQUIRED_FOR_CUSTOM_FILTER","inferInitialValueTemplates","inferTypeName","getSpec","option","getTypeNamesFromEqualityFilter","getTypeNamesFromInTypesFilter","pattern","matches","exec","candidate","getArgType","thing","ListBuilder","isPromise","isListItem","defaultCanHandleIntent","isDocumentListItem","resolveChildForItem","maybeSerializeListItem","ListItemBuilder","listItem","gotWhat","helpText","INVALID_LIST_ITEM","getItems","LIST_ITEMS_MUST_BE_ARRAY","serializedItems","val","dupeIds","dupeDesc","LIST_ITEM_IDS_MUST_BE_UNIQUE","showIcon","getShowIcon","titleIsOptional","SCHEMA_TYPE_NOT_FOUND","serializeOptions","listChild","originalChild","childOptions","createDefaultChildResolver","DocumentListItemBuilder","SCHEMA_TYPE_REQUIRED","DocumentTypeListBuilder","cloneWithoutDefaultIntentHandler","override","BUNDLED_DOC_TYPES","isBundledDocType","isDocumentType","isList","collection","getDocumentTypes","n","getDocumentTypeListItems","getDocumentTypeListItem","startCase","childContext","list","getDocumentTypeList","typeNameOrSpec","StackCompactIcon","StackIcon","hasIcon","getDefaultStructure","createStructureBuilder","defaultDocumentNode","configContext","getConfigContextFromSource","structureBuilder","defaults","documentTypeList","args","documentTypeListItem","documentTypeListItems","documentWithInitialValueTemplate","defaultDocument","menuItemGroup","documentList","documentListItem","orderingMenuItem","orderingMenuItemsForType","editor","isValidElementType","uniqueId","LiveEditBadge","liveEditSchemaType","activePanes","setActivePanes","getIntentState","routerState","editDocumentId","isTemplate","ChangesInspector","showChanges","scrollRef","setScrollRef","diff","selectionState","isComparingCurrent","structureT","FieldWrapper","ChangeFieldWrapper","rootDiff","showFromValue","documentContext","getIsSelectable","isUnpublishDocumentEvent","isScheduleDocumentVersionEvent","isUnscheduleDocumentVersionEvent","EventTimelineItem","cursor","PublishedEventMenu","portalContext","versionId","versionRevisionId","handleOpenReleaseDocument","handleOpenDraftDocument","RELEASES_INTENT","MenuItem","children_0","releaseTitle","children_1","fallbackPlacements","children_2","TimelineItemWrapper","CHILDREN_ITEMS_VARIANTS","animate","exit","ITEM_HEIGHT","EventsTimeline","allEvents","hasMoreEvents","selectedEventId","fetchEventChildren","selectedEvent","expandingParents","setExpandingParents","isCreateDocumentVersionEvent","isEditDocumentVersionEvent","isExpanding","renderOptionsMenu","documentVariantType","getDocumentVariantType","isPublishDocumentVersionEvent","creationEvent","showExpandingLoader","isLastEvent","EventsTimelineMenu","nextCursor","eventsError","findRangeForRevision","loadMoreEvents","expandEvent","revEvent","sinceEvent","SpinnerContainer","DIFF_INITIAL_VALUE","EventsInspector","getChangesList","changesList$","diffLoading","toEvent","sinceEvents","EventsSelector","showList","listHeight","setListHeight","getScrollerRef","initialLoad","HistorySelector","FadeInFlex","TABS","isValidTab","tab","ChangesTabs","paneRouterTab","setPaneRouterTab","changesInspector","RestoreIcon","getPathTitles","f","itemType","_key","MARKER_ICON","InfoOutlineIcon","MARKER_TONE","ValidationInspector","marker","ValidationCard","errorInfo","setErrorInfo","level","DocumentNodePathBreadcrumbs","pathTitles","Fragment","validationMarkers","hasErrors","isValidationError","hasWarnings","isValidationWarning","CheckmarkCircleIcon","validationInspector","legacyEditParamsToState","decodeURIComponent","encodePanesSegment","encodeChunks","encodeURIComponent","legacyEditParamsToPath","toState","parsePanesSegment","toPath","router","route","intents","transform","panePattern","isParam","isPayloadLike","exclusiveParams","isTruthy","parseChunks","sibling","tryParseBase64Payload","firstSibling","paneIsFirstSibling","sameAsFirst","encodedPayload","encodeJsonParams","encodedParams","valueFromFirstSibling","flat","parseOldPanesSegment","restOfSiblings","buffer","payloadChunk","tryParsePayload","decodeJsonParams","definePlugin","MasterDetailIcon","prevActions","prevBadges","prevInspectors","tools","lazy","canHandleCreateIntent","canHandleEditIntent","controlsDocumentTitle","__internalApplicationType","bundles","StructureToolProvider","structure","resolveStructure","setLayoutCollapsed","useConfigContextFromSource","S","rootPaneNode","structureContext"],"mappings":"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"}